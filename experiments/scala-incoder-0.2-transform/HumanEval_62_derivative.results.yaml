language: scala
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8nlqdwdo.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val y\
    \ = xs(i + 1)\n            val d = 0\n            while (i < n) {\n          \
    \      val xx = xs(i)\n                val yy = ys(i + 1)\n                val\
    \ d = d + xx * yy + x * y\n                i += 1\n            }\n           \
    \ ds(i) = d\n        }\n        ds\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86thze4e.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36myy\e[0m = ys(i +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: ys\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp86thze4e.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36md\e[0m = d + xx\
    \ * yy + x * y\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m  \
    \ |\e[0m                        Recursive \e[33mvalue\e[0m \e[35md\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86thze4e.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 2\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpukiadca8.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpukiadca8.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) - xs(i - 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyj3zwwzl.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) - 1\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplv5vt3nq.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni0k7pzy.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg41q2r0p.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm_x6jb7.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptm_x6jb7.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - i)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcoabc9x.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = x * y\n                j += 2\n            }\n      \
    \      i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpanqk2nd1.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpanqk2nd1.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xxx\
    \ = new Array[Long](n)\n        val xxxx = new Array[Long](n)\n        val xxxx_1\
    \ = new Array[Long](n)\n        val xxxx_2 = new Array[Long](n)\n        val xxxx_3\
    \ = new Array[Long](n)\n        val xxxx_4 = new Array[Long](n)\n        val xxxx_5\
    \ = new Array[Long](n)\n        val xxxx_6 = new Array[Long](n)\n        val xxxx_7\
    \ = new Array[Long](n)\n        val xxxx_8 = new Array[Long](n)\n        val xxxx_9\
    \ = new Array[Long](n)\n        val xxxx_10 = new Array[Long](n)\n        val\
    \ xxxx_11 = new Array[Long](n)\n        val xxxx_12 = new Array[Long](n)\n   \
    \     val xxxx_13 = new Array[Long](n)\n        val xxxx_14 = new Array[Long](n)\n\
    \        val xxxx_15 = new Array[Long](n)\n        val xxxx_16 = new Array[Long](n)\n\
    \        val xxxx_17 = new Array[Long](n)\n        val xxxx_18 = new Array[Long](n)\n\
    \        val xxxx_19 = new Array[Long](n)\n        val xxxx_20 = new Array[Long](n)\n\
    \        val xxxx_21 = new Array[Long](n)\n        val xxxx_22 = new Array[Long](n)\n\
    \        val xxxx_23 = new Array[Long](n)\n        val xxxx_24 = new Array[Long](n)\n\
    \        val xxxx_25 = new Array[Long](n)\n        val xxxx_26 = new Array[Long](n)\n\
    \        val xxxx_27 = new Array[Long](n)\n        val xxxx_28 = new Array[Long](n)\n\
    \        val xxxx_29 = new Array[Long](n)\n        val xxxx_30 = new Array[Long](n)\n\
    \        val xxxx_31 = new Array[Long](n)\n        val xxxx_32 = new Array[Long](n)\n\
    \        val xxxx_33 = new Array[Long](n)\n        val xxxx_34 = new Array[Long](n)\n\
    \        val xxxx_35 = new Array[Long](n)\n        val xxxx_36 = new Array[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17rhzcd0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp17rhzcd0.scala:55:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m55 |\e[0m       \
    \ \e[33mval\e[0m \e[36mxxxx_36\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmissing argument for parameter _length of \e[33mconstructor\e[0m \e[35mArray\e\
    [0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[Long]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp17rhzcd0.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   var i = 0\n        while(i < n) {\n            d(i) = xs(i)\n            i\
    \ += 1\n        }\n        d(n) = 1\n        for(i = n - 1; i >= 0; i -= 1) {\n\
    \            d(i) = d(i) / xs(i)\n        }\n        d(0) = 0\n        for(i =\
    \ 1; i >= 0; i -= 1) {\n            d(i) = d(i) * xs(i)\n        }\n        return\
    \ d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:20:14 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e\
    [31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e\
    [31m   |\e[0m              ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmptjm_7ch5.scala:20:29 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e\
    [31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \               ^\e[0m\n\e[31m   |\e[0m                                     '<-'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:14\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m1\e[0m; i >= \e[31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              ')' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:33 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \    ^\e[0m\n\e[31m   |\e[0m                                 '<-' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptjm_7ch5.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i\
    \ = n - \e[31m1\e[0m; i >= \e[31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m                     "
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq_7ru40.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw0xp99zx.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprr3qv3_6.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h85_7i7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val y = xs(i + 1)\n            val dx =  x * y\n            val dy = -y *\
    \ x\n            ds.push(dx)\n            ds.push(dy)\n            i += 2\n  \
    \      }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppc7v5_21.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0258gxk7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x = 1l\n        val xs = xs.toList\n        val x0 = xs.head\n        val x1\
    \ = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ei31kyh.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9ei31kyh.scala:15:17 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e[31m\e[31m   |\e[0m\
    \                 ^\e[0m\n\e[31m   |\e[0m                 Recursive \e[33mvalue\e\
    [0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9ei31kyh.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 2\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpukiadca8.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpukiadca8.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  val x = 1\n        val xs = xs.toList\n        val x0 = xs.head\n        val\
    \ x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1214zjfb.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1214zjfb.scala:35:5 ---------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d\
    \ = 1\n            while (i < n && xs(i) == x) {\n                d *= xs(i +\
    \ 1)\n                i += 1\n            }\n            ds(i) = d\n         \
    \   i += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy6c4lf95.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpy6c4lf95.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val result = new Array[Long](n)\n    \
    \    val x0 = xs(0)\n        val x1 = xs(1)\n        val x2 = xs(2)\n        val\
    \ x3 = xs(3)\n        val x4 = xs(4)\n        val x5 = xs(5)\n        val x6 =\
    \ xs(6)\n        val x7 = xs(7)\n        val x8 = xs(8)\n        val x9 = xs(9)\n\
    \        val x10 = xs(10)\n        val x11 = xs(11)\n        val x12 = xs(12)\n\
    \        val x13 = xs(13)\n        val x14 = xs(14)\n        val x15 = xs(15)\n\
    \        val x16 = xs(16)\n        val x17 = xs(17)\n        val x18 = xs(18)\n\
    \        val x19 = xs(19)\n        val x20 = xs(20)\n        val x21 = xs(21)\n\
    \        val x22 = xs(22)\n        val x23 = xs(23)\n        val x24 = xs(24)\n\
    \        val x25 = xs(25)\n        val x26 = xs(26)\n        val x27 = xs(27)\n\
    \        val x28 = xs(28)\n        val x29 = xs(29)\n        val x30 = xs(30)\n\
    \        val x31 = xs(31)\n        val x32 = xs(32)\n        val x33 = xs(33)\n\
    \        val x34 = xs(34)\n        val x35 = xs(35)\n        val x36 = xs(36)\n\
    \        val x37 = xs(37)\n        val x38 = xs(38)\n        val x39 = xs(39)\n\
    \        val x40 = xs(40)\n        val x41 = xs(41)\n        val x42 = xs(42)\n\
    \        val x43 = xs(43)\n        val x44 = xs(44)\n        val x45 = xs(45)\n\
    \        val x46 = xs(46)\n        val x47 = xs(47)\n        val x48 = xs(48)\n\
    \        val x49 = xs(49)\n        val x50 = xs(50)\n        val x51 = xs(51)\n\
    \        val x52 = xs(52)\n        val x53 = xs(53)\n        val x54 = xs(54)\n\
    \        val x55 = xs(55)\n        val x56 = xs(56)\n        val x57 = xs(57)\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgkmmpr8a.scala:72:11 ---------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgkmmpr8a.scala:73:5 ---------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                val term = x * y\n                if (term != 0) {\n        \
    \            ds(i) = term\n                    ds(j) = -term\n               \
    \ }\n                j += 1\n            }\n            i += 1\n        }\n  \
    \      ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpn9yucwhi.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn9yucwhi.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val y\
    \ = xs(i + 1)\n            val z = xs(i + 2)\n            val dz = z * z\n   \
    \         val dy = (2 * x * y) + dz\n            val dx = (x * x) + dz\n     \
    \       ds.update(i + 1, dy)\n            ds.update(i + 2, dx)\n            i\
    \ += 3\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcz6ccoms.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = 1\n            while (i < n && xs(i) == x) {\n                d *=\
    \ xs(i + 1)\n                i += 1\n            }\n            ds.push(d) \n\
    \        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpogw0u3zp.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogw0u3zp.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(n - 1 - i)\n\
    \            i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu6jbv1vc.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq_7ru40.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        if (n == 0) Nil\n        else if (n\
    \ == 1) (xs.head -> 1l)\n        else (xs.head -> derivative(xs.tail).head * xs.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt0u3luz.scala:14:26\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (n == \e[31m1\e[0m) (xs.head -> \e[31m1l\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \       Found:    (Long, Long)\n\e[31m   |\e[0m                          Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkt0u3luz.scala:15:14\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m (xs.head\
    \ -> derivative(xs.tail).head * xs.head)\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (Long, Long)\n\e[31m   |\e[0m    \
    \          Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val x0 = xs(0)\n        val x1 = xs(1)\n   \
    \     val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n       \
    \ val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa4hw4a9_.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1r3eui4.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi1r3eui4.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_r5_vql.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_twxee3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   var i = 0\n        var j = 0\n        while (i < n) {\n            d(j) =\
    \ xs(i)\n            i += 1\n            j += 1\n        }\n        d(n) = 1\n\
    \        d(0) = 0\n        val result = new Array[Long](n + 1)\n        var k\
    \ = 0\n        while (k <= n) {\n            result(k) = d(k) * xs(k)\n      \
    \      k += 1\n        }\n        result(0) = 0\n        result(n) = 1\n     \
    \   result\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe3j11bvk.scala:31:8\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = ds(i) + y * x\n                j += 2\n            }\n\
    \            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5929er2q.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp5929er2q.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) + xs(i + 1)\
    \ * xs(i + 1)\n            i += 2\n        }\n        d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnj3zjbq0.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val result = new Array[Long](n)\n    \
    \    val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n       \
    \ val x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val\
    \ x5 = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7\
    \ = new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 =\
    \ new Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 =\
    \ new Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 =\
    \ new Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 =\
    \ new Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 =\
    \ new Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 =\
    \ new Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 =\
    \ new Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 =\
    \ new Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 =\
    \ new Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 =\
    \ new Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 =\
    \ new Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 =\
    \ new Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 =\
    \ new Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 =\
    \ new Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 =\
    \ new Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 =\
    \ new Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 =\
    \ new Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 =\
    \ new Array[Long](n)\n        val x44 = new Array[Long](n)\n        val x45 =\
    \ new Array[Long](n)\n        val x46 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppzypwuac.scala:59:17 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mx46\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppzypwuac.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        val x = new mutable.ListBuffer[Long](n)\n        val y = new mutable.ListBuffer[Long](n)\n\
    \        val z = new mutable.ListBuffer[Long](n)\n        val x2 = new mutable.ListBuffer[Long](n)\n\
    \        val y2 = new mutable.ListBuffer[Long](n)\n        val z2 = new mutable.ListBuffer[Long](n)\n\
    \        val x3 = new mutable.ListBuffer[Long](n)\n        val y3 = new mutable.ListBuffer[Long](n)\n\
    \        val z3 = new mutable.ListBuffer[Long](n)\n        val x4 = new mutable.ListBuffer[Long](n)\n\
    \        val y4 = new mutable.ListBuffer[Long](n)\n        val z4 = new mutable.ListBuffer[Long](n)\n\
    \        val x5 = new mutable.ListBuffer[Long](n)\n        val y5 = new mutable.ListBuffer[Long](n)\n\
    \        val z5 = new mutable.ListBuffer[Long](n)\n        val x6 = new mutable.ListBuffer[Long](n)\n\
    \        val y6 = new mutable.ListBuffer[Long](n)\n        val z6 = new mutable.ListBuffer[Long](n)\n\
    \        val x7 = new mutable.ListBuffer[Long](n)\n        val y7 = new mutable.ListBuffer[Long](n)\n\
    \        val z7 = new mutable.ListBuffer[Long](n)\n        val x8 = new mutable.ListBuffer[Long](n)\n\
    \        val y8 = new mutable.ListBuffer[Long](n)\n        val z8 = new mutable.ListBuffer[Long](n)\n\
    \        val x9 = new mutable.ListBuffer[Long](n)\n        val y9 = new mutable.ListBuffer[Long](n)\n\
    \        val z9 = new mutable.ListBuffer[Long](n)\n        val x10 = new mutable.ListBuffer[Long](n)\n\
    \        val y10 = new mutable.ListBuffer[Long](n)\n        val z10 = new mutable.ListBuffer[Long](n)\n\
    \        val x11 = new mutable.ListBuffer[Long](n)\n        val y11 = new mutable.ListBuffer[Long](n)\n\
    \        val z11 = new mutable.ListBuffer[Long](n)\n        val x12 = new mutable.ListBuffer[Long](n)\n\
    \        val y12 = new mutable.ListBuffer[Long](n)\n        val z12 = new mutable.ListBuffer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1hqcvbu.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1hqcvbu.scala:14:20\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mx\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1hqcvbu.scala:15:20\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36my\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1hqcvbu.scala:16:20\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mz\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu1hqcvbu.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mx2\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpu1hqcvbu.scala:18:21 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph95gb7fl.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph95gb7fl.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - i)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxumgvi1b.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - i - 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0f_602_a.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        val x0 = xs.head\n        val x1 = xs.last\n        val x2 = xs.last\
    \ * x0\n        val x3 = xs.last * x1\n        val x4 = xs.last * x2\n       \
    \ val x5 = xs.last * x3\n        val x6 = xs.last * x4\n        val x7 = xs.last\
    \ * x5\n        val x8 = xs.last * x6\n        val x9 = xs.last * x7\n       \
    \ val x10 = xs.last * x8\n        val x11 = xs.last * x9\n        val x12 = xs.last\
    \ * x10\n        val x13 = xs.last * x11\n        val x14 = xs.last * x12\n  \
    \      val x15 = xs.last * x13\n        val x16 = xs.last * x14\n        val x17\
    \ = xs.last * x15\n        val x18 = xs.last * x16\n        val x19 = xs.last\
    \ * x17\n        val x20 = xs.last * x18\n        val x21 = xs.last * x19\n  \
    \      val x22 = xs.last * x20\n        val x23 = xs.last * x21\n        val x24\
    \ = xs.last * x22\n        val x25 = xs.last * x23\n        val x26 = xs.last\
    \ * x24\n        val x27 = xs.last * x25\n        val x28 = xs.last * x26\n  \
    \      val x29 = xs.last * x27\n        val x30 = xs.last * x28\n        val x31\
    \ = xs.last * x29\n        val x32 = xs.last * x30\n        val x33 = xs.last\
    \ * x31\n        val x34 = xs.last * x32\n        val x35 = xs.last * x33\n  \
    \      val x36 = xs.last * x34\n        val x37 = xs.last * x35\n        val x38\
    \ = xs.last * x36\n        val x39 = xs.last * x37\n        val x40 = xs.last\
    \ * x38\n        val x41 = xs.last * x39\n        val x42 = xs.last * x40\n  \
    \      val x43 = xs.last * x41\n        val x44 = xs.last * x42\n        val x45\
    \ = xs.last * x43\n        \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplpq4gihu.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplpq4gihu.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8iydt51p.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq_7ru40.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = y * x\n                j++\n            }\n            i +=\
    \ 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjfp2dmkn.scala:21:19 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j++\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjfp2dmkn.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) - 1\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_1eyp4qh.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm_x6jb7.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptm_x6jb7.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptymzak4s.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = ds(i) + y * x\n                j += 1\n            }\n    \
    \        i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg49zlvto.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpg49zlvto.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val d = xs(i) * xs(i + 1)\n    \
    \        ds.update(i + 1, d)\n            i += 1\n        }\n        ds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgt9x_ah.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ArrayList[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val d = xs(i + 1)\n            ds.add(d * x)\n            i += 2\n   \
    \     }\n        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn6ljk1kv.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayList[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - i)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcoabc9x.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = xs(i) - xs(i - 1)\n            ds.add(d * x)\n            i += 1\n\
    \        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptuavnsxk.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var dx : List[Long] = Nil\n        var x = 0\n        var y = 0\n\
    \        var z = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n\
    \        var zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n\
    \        var zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n\
    \        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n\
    \        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n\
    \        var v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n\
    \        var zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n\
    \        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n\
    \        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n\
    \        var xi = 0\n        var yi = 0\n        var zi = 0\n        var \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpth8vyawa.scala:142:11 --------------------------\e\
    [0m\e[0m\n\e[31m142 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth8vyawa.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth8vyawa.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth8vyawa.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth8vyawa.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvariable\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpth8vyawa.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is alread"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = 1\n            while (i < n && xs(i) == x) {\n                d *=\
    \ xs(i + 1)\n                i += 1\n            }\n            ds.push(d) \n\
    \            i += 1\n        }\n        ds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbubaf3hk.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbubaf3hk.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau6uidzn.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau6uidzn.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n \
    \       for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i\
    \ == 0 ) {\n                ds(i) = 1\n            } else {\n                ds(i)\
    \ = x * ds(i-1) + xs(i-1) * ds(i-2) + xs(i-2) * ds(i-3) + xs(i-3) * ds(i-4) +\
    \ xs(i-4) * ds(i-5) + xs(i-5) * ds(i-6)\n            }\n        }\n        ds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjvumd13v.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        if (n == 0) Nil\n        else {\n    \
    \        val x = xs.head\n            val y = xs.tail.head\n            val dx\
    \ = xs.tail.tail.head\n            val dy = xs.tail.tail.tail.head\n         \
    \   val dx_dy_dz = dy * dx + dx * dy * dz\n            val dx_dy_dz2 = dy * dx\
    \ + dz * dz\n            val dx_dy_dz3 = dy * dx + dz * dz + dz * dz\n       \
    \     val dx_dy_dz4 = dy * dx + dz * dz + dz * dz + dz * dz\n            val dx_dy_dz5\
    \ = dy * dx + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\n            val\
    \ dx_dy_dz6 = dy * dx + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz *\
    \ dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz\
    \ * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\
    \ + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz *\
    \ dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz\
    \ * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\
    \ + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz *\
    \ dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz\
    \ * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzfdk_4m3.scala:24:877 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mdx_dy_dz6\e[0m = dy\
    \ * dx + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\
    \ + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz *\
    \ dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz\
    \ * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\
    \ + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz *\
    \ dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz\
    \ * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz +\
    \ dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz\
    \ + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + dz * dz + \n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanat"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var d = 0\n        var x = 0\n        var y = 0\n        var z\
    \ = 0\n        var n = 0\n        var n1 = 1\n        var n2 = 1\n        var\
    \ n3 = 1\n        var n4 = 1\n        var n5 = 1\n        var n6 = 1\n       \
    \ var n7 = 1\n        var n8 = 1\n        var n9 = 1\n        var n10 = 1\n  \
    \      var n11 = 1\n        var n12 = 1\n        var n13 = 1\n        var n14\
    \ = 1\n        var n15 = 1\n        var n16 = 1\n        var n17 = 1\n       \
    \ var n18 = 1\n        var n19 = 1\n        var n20 = 1\n        var n21 = 1\n\
    \        var n22 = 1\n        var n23 = 1\n        var n24 = 1\n        var n25\
    \ = 1\n        var n26 = 1\n        var n27 = 1\n        var n28 = 1\n       \
    \ var n29 = 1\n        var n30 = 1\n        var n31 = 1\n        var n32 = 1\n\
    \        var n33 = 1\n        var n34 = 1\n        var n35 = 1\n        var n36\
    \ = 1\n        var n37 = 1\n        var n38 = 1\n        var n39 = 1\n       \
    \ var n40 = 1\n        var n41 = 1\n        var n42 = 1\n        var n43 = 1\n\
    \        var n44 = 1\n        var n45 = 1\n        var n46 = 1\n        var n47\
    \ = 1\n        var n48 = 1\n        var n49 = 1\n        var n50 = 1\n       \
    \ var n51 = 1\n        var n52 = 1\n        var n53 = 1\n        var n54 = 1\n\
    \        var n55 = 1\n        var n56 = 1\n        var n57 = 1\n        var n58\
    \ = 1\n        var n59 = 1\n        var n60 = 1\n        var n61 = 1\n       \
    \ var n62 = 1\n        var n63 = 1\n        var n64 = 1\n        var n65 = 1\n\
    \        var n66 = 1\n        var n67 = 1\n        var n68 = 1\n        var n69\
    \ = 1\n        var n70 = 1\n        var n71 = 1\n        var n72 = 1\n       \
    \ var n73 = 1\n        var n74 = 1\n        var n75 = 1\n        var n76 = 1\n\
    \        var n77 = 1\n        var n78 = 1\n        var n79 = 1\n        var n80\
    \ = 1\n        var n81 = 1\n        var n82 = 1\n        var n83 = 1\n       \
    \ var n84 = 1\n        var n85 = 1\n        var n86 = 1\n        var n87 = 1\n\
    \        var n88 = 1\n        var n89 = 1\n        var n90 = 1\n        var n91\
    \ = 1\n        var n92 = 1\n        var n93 = 1\n        var n94 = 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjs35pk2k.scala:111:5\
    \ --------------------\e[0m\e[0m\n\e[31m111 |\e[0m    }\n\e[31m\e[31m    |\e[0m\
    \     ^\e[0m\n\e[31m    |\e[0m     Found:    Unit\n\e[31m    |\e[0m     Required:\
    \ List[Long]\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8nlqdwdo.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                val k = (i + j + 1) * (i + j + 2) * (i + j + 3) * (i + j + 4)\n\
    \                val d = y * x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k -\
    \ x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x * (k - x *\
    \ (k - x * (k - x * (\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg2hqxcd7.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg2hqxcd7.scala:23:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'}' expected, but 'end of statement' found\n\
    Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:776)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:745)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.sc"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpg2hqxcd7.scala

    '
  timestamp: 1659979861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h85_7i7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = 1\n            while (i < n && xs(i) == x) {\n                d *=\
    \ xs(i + 1)\n                i += 1\n            }\n            ds.push(d) \n\
    \        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpogw0u3zp.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpogw0u3zp.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = y * x\n                j += 1\n            }\n      \
    \      i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcc1tjpxu.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcc1tjpxu.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpuiacd0.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfpuiacd0.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        if (n == 0) Nil\n        else {\n    \
    \        val x0 = xs.head\n            val x1 = xs.tail.head\n            val\
    \ x2 = xs.tail.tail.head\n            val x3 = xs.tail.tail.tail.head\n      \
    \      val x4 = xs.tail.tail.tail.tail.head\n            val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \            val x6 = xs.tail.tail.tail.tail.tail.tail.head\n            val x7\
    \ = xs.tail.tail.tail.tail.tail.tail.tail.head\n            val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \           val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuvsg4ml0.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvsg4ml0.scala:43:1\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpuvsg4ml0.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        for( i <- 0 until n ) {\n            val x = xs(i)\n            if( x\
    \ == 0 ) ds(i) = 0\n            else if( x == 1 ) ds(i) = 1\n            else\
    \ if( x == 2 ) ds(i) = 2\n            else if( x == 3 ) ds(i) = 3\n          \
    \  else if( x == 4 ) ds(i) = 4\n            else if( x == 5 ) ds(i) = 5\n    \
    \        else if( x == 6 ) ds(i) = 6\n            else if( x == 7 ) ds(i) = 7\n\
    \            else if( x == 8 ) ds(i) = 8\n            else if( x == 9 ) ds(i)\
    \ = 9\n            else if( x == 10 ) ds(i) = 10\n            else if( x == 11\
    \ ) ds(i) = 11\n            else if( x == 12 ) ds(i) = 12\n            else if(\
    \ x == 13 ) ds(i) = 13\n            else if( x == 14 ) ds(i) = 14\n          \
    \  else if( x == 15 ) ds(i) = 15\n            else if( x == 16 ) ds(i) = 16\n\
    \            else if( x == 17 ) ds(i) = 17\n            else if( x == 18 ) ds(i)\
    \ = 18\n            else if( x == 19 ) ds(i) = 19\n            else if( x == 20\
    \ ) ds(i) = 20\n            else if( x == 21 ) ds(i) = 21\n            else if(\
    \ x == 22 ) ds(i) = 22\n            else if( x == 23 ) ds(i) = 23\n          \
    \  else if( x == 24 ) ds(i) = 24\n            else if( x == 25 ) ds(i) = 25\n\
    \            else if( x == 26 ) ds(i) = 26\n            else if( x == 27 ) ds(i)\
    \ = 27\n            else if( x == 28 ) ds(i) = 28\n            else if( x == 29\
    \ ) ds(i) = 29\n            else if( x == 30 ) ds(i) = 30\n            else if(\
    \ x == 31 ) ds(i) = 31\n            else if( x == 32 ) ds(i) = 32\n          \
    \  else if( x == 33 ) ds(i) = 33\n            else if( x == 34 ) ds(i) = 34\n\
    \            else if( x == 35 ) ds(i) = 35\n            else if( x == 36 ) ds(i)\
    \ = 36\n            else if( x == 37 ) ds(i) = 37\n            else if( x == 38\
    \ ) ds(i) = 38\n            else if( x == 39 ) ds(i) = 39\n            else if(\
    \ x == 40 ) ds(i) = 40\n            else if( x == 41 ) ds(i) = 41\n          \
    \  else if( x == 42 ) ds(i) = 42\n            else if( x == 43 ) ds(i) = 43\n\
    \            else if( x == \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi5bmby75.scala:60:25 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m( x == \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpi5bmby75.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5bmby75.scala:13:21\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mds\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi5bmby75.scala:70:1 ---------------------\e[0m\e[0m\n\e[31m70\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpi5bmby75.scala:62:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            ds(i) = xs(i) * xs(i + 1)\n    \
    \        i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph5g6oy5c.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0258gxk7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        if (n == 0) Nil\n        else {\n  \
    \          val x0 = xs.head\n            val x1 = xs.tail.head\n            val\
    \ x2 = xs.tail.tail.head\n            val x3 = xs.tail.tail.tail.head\n      \
    \      val x4 = xs.tail.tail.tail.tail.head\n            val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \            val x6 = xs.tail.tail.tail.tail.tail.tail.head\n            val x7\
    \ = xs.tail.tail.tail.tail.tail.tail.tail.head\n            val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \           val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsn6h6vb7.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsn6h6vb7.scala:43:1\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpsn6h6vb7.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph95gb7fl.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph95gb7fl.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = xs(i + 1)\n            ds.add(d * x)\n            i += 1\n      \
    \  }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8cildml4.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau6uidzn.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          val term = x * y\n                if (term != 0) {\n              \
    \      ds(i) = term\n                    ds(j) = -term\n                }\n  \
    \              j += 1\n            }\n            i += 1\n        }\n        ds\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppdke7pay.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppdke7pay.scala:29:8 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var n\
    \ = 0\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylqol_vy.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdx is already defined\
    \ as \e[33mvariable\e[0m \e[35mdx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdy is already defined as \e[33mvariable\e[0m \e[35mdy\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpylqol_vy.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdx is already defined\
    \ as \e[33mvariable\e[0m \e[35mdx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m["
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprr3qv3_6.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n   \
    \     var i = 0\n        while (i < n) {\n            d(i) = xs(i)\n         \
    \   i += 1\n        }\n        d(n) = 1\n        val x = new Array[Long](n + 1)\n\
    \        var j = 0\n        while (j < n) {\n            x(j) = d(j) * j\n   \
    \         j += 1\n        }\n        x(n) = 0\n        x\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnuz0pcfj.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        x\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (x : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        if (n == 0) Nil\n        else {\n  \
    \          val dp = xs.tail\n            val dn = xs.init\n            val dp\
    \ = dp.map(x => x * x)\n            val dn = dn.map(x => x * x)\n            val\
    \ dp = dp.reduceLeft((x, y) => x + y)\n            val dn = dn.reduceLeft((x,\
    \ y) => x + y)\n            val dp = dp.map(x => x * x)\n            val dn =\
    \ dn.map(x => x * x)\n            val dp = dp.reduceLeft((x, y) => x + y)\n  \
    \          val dn = dn.reduceLeft((x, y) => x + y)\n            val dp = dp.map(x\
    \ => x * x)\n            val dn = dn.map(x => x * x)\n            val dp = dp.reduceLeft((x,\
    \ y) => x + y)\n            val dn = dn.reduceLeft((x, y) => x + y)\n        \
    \    val dp = dp.map(x => x * x)\n            val dn = dn.map(x => x * x)\n  \
    \          val dp = dp.reduceLeft((x, y) => x + y)\n            val dn = dn.reduceLeft((x,\
    \ y) => x + y)\n            val dp = dp.map(x => x * x)\n            val dn =\
    \ dn.map(x => x * x)\n            val dp = dp.reduceLeft((x, y) => x + y)\n  \
    \          val dn = dn.reduceLeft((x, y) => x + y)\n            val dp = dp.map(x\
    \ => x * x)\n            val dn = dn.map(x => x * x)\n            val dp = dp.reduceLeft((x,\
    \ y) => x + y)\n            val dn = dn.reduceLeft((x, y) => x + y)\n        \
    \    val dp = dp.map(x => x * x)\n            val dn = dn.map(x => x * x)\n  \
    \          val dp = dp.reduceLeft((x, y) => x + y)\n            val dn = dn.reduceLeft((x,\
    \ y) => x + y)\n            val dp = dp.map(x => x * x)\n            val dn =\
    \ dn.map(x => x * x)\n            val dp = dp.reduceLeft((x, y) => x + y)\n  \
    \          val dn = dn.reduceLeft((x, y) => x + y)\n            val dp = dp.map(x\
    \ => x * x)\n            val dn = dn.map(x => x * x)\n            val dp = dp.reduceLeft((x,\
    \ y) => x + y)\n            val dn = dn.reduceLeft((x, y) => x + y)\n        \
    \    val dp = dp.map(x => x * x)\n            val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6e17eygk.scala:54:15 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6e17eygk.scala:65:0 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e17eygk.scala:17:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36mdp\e[0m = dp.map(\e[36mx\e[0m => x * x)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvalue\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6e17eygk.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mdn\e[0m = dn.map(\e\
    [36mx\e[0m => x * x)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdn is already defined as \e[33mvalue\e[0m \e[35mdn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6e17eygk.scala:19:16 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            \e[33mval\e[0m \e[36mdp\e[0m = dp.reduceLeft((\e[36mx\e[0m,\
    \ \e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdp is already defined as \e[33mvalue\e[0m \e[35mdp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6e17eygk.scala:20:16 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mval\e[0m \e[36mdn\e[0m = dn.reduceLeft((\e[36mx\e[0m,\
    \ \e[36my\e[0m) => x + y)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ListBuffer[Long](n)\n\
    \        var i = 0\n        while (i < n) {\n            val x = xs(i)\n     \
    \       val d = 1\n            while (i < n && xs(i) == x) {\n               \
    \ d *= xs(i + 1)\n                i += 1\n            }\n            ds.push(d)\
    \ \n        }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcnu1eom.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvcnu1eom.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e\
    [0m                value *= is not a member of Int - did you mean d.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d\
    \ = 1\n            while (i < n && xs(i) != x) {\n                d *= xs(i)\n\
    \                i += 1\n            }\n            ds(i) = d\n            i +=\
    \ 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9zjho3bm.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i)\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                value *= is not a member\
    \ of Int - did you mean d.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zjho3bm.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1r3eui4.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi1r3eui4.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_twxee3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h85_7i7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     val d = 1l.toLong\n        for(i <- 0 until n) {\n            ds.update(i)(d\
    \ * xs(i))\n            d = d * xs(i)\n        }\n        ds.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprl1dmubf.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmprl1dmubf.scala:17:14 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            d = d * xs(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val d\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var n\
    \ = 0\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbbka9gi5.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbbka9gi5.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbbka9gi5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbbka9gi5.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdp is already defined as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbbka9gi5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdn is already defined\
    \ as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbbka9gi5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m["
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            ds.add(xs.apply(i) * xs.apply(i\
    \ + 1))\n            i += 1\n        }\n        ds\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp33niyw7f.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_twxee3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) + xs(i + 1)\
    \ * xs(i + 1)\n            i += 1\n        }\n        d\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0lqyt_uf.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val d\
    \ = xs(i) - xs(i - 1)\n            ds(i) = d\n            i += 1\n        }\n\
    \        ds\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr7y_7b6d.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni0k7pzy.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z =\
    \ new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3 = new\
    \ Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 = new Array[Long](n)\n\
    \        val x6 = new Array[Long](n)\n        val x7 = new Array[Long](n)\n  \
    \      val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n    \
    \    val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n    \
    \    val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n    \
    \    val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n    \
    \    val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n    \
    \    val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n    \
    \    val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n    \
    \    val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n    \
    \    val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n    \
    \    val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n    \
    \    val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n    \
    \    val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n    \
    \    val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n    \
    \    val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n    \
    \    val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n    \
    \    val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n    \
    \    val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n    \
    \    val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n    \
    \    val x44 = new Array\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt8vns0sk.scala:59:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mx44\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmissing argument for parameter _length of \e[33mconstructor\e[0m\
    \ \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[T]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt8vns0sk.scala:60:5 ---------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979893
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val x3\
    \ = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5 =\
    \ new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 = new\
    \ Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new Array[Long](n)\n\
    \        val x10 = new Array[Long](n)\n        val x11 = new Array[Long](n)\n\
    \        val x12 = new Array[Long](n)\n        val x13 = new Array[Long](n)\n\
    \        val x14 = new Array[Long](n)\n        val x15 = new Array[Long](n)\n\
    \        val x16 = new Array[Long](n)\n        val x17 = new Array[Long](n)\n\
    \        val x18 = new Array[Long](n)\n        val x19 = new Array[Long](n)\n\
    \        val x20 = new Array[Long](n)\n        val x21 = new Array[Long](n)\n\
    \        val x22 = new Array[Long](n)\n        val x23 = new Array[Long](n)\n\
    \        val x24 = new Array[Long](n)\n        val x25 = new Array[Long](n)\n\
    \        val x26 = new Array[Long](n)\n        val x27 = new Array[Long](n)\n\
    \        val x28 = new Array[Long](n)\n        val x29 = new Array[Long](n)\n\
    \        val x30 = new Array[Long](n)\n        val x31 = new Array[Long](n)\n\
    \        val x32 = new Array[Long](n)\n        val x33 = new Array[Long](n)\n\
    \        val x34 = new Array[Long](n)\n        val x35 = new Array[Long](n)\n\
    \        val x36 = new Array[Long](n)\n        val x37 = new Array[Long](n)\n\
    \        val x38 = new Array[Long](n)\n        val x39 = new Array[Long](n)\n\
    \        val x40 = new Array[Long](n)\n        val x41 = new Array[Long](n)\n\
    \        val x42 = new Array[Long](n)\n        val x43 = new Array[Long](n)\n\
    \        val x44 = new Array[Long](n)\n        val x45 = new Array[Long](n)\n\
    \        val x46 = \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9jp4zs13.scala:59:17 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mx46\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9jp4zs13.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        if (n == 0) Nil\n        else {\n    \
    \        val x = xs.head\n            val xs = xs.tail\n            val y = xs.head\
    \ * x\n            val ys = xs.tail * x\n            val zs = ys.tail * x\n  \
    \          val zss = ys.tail * x * x\n            val zsss = ys.tail * x * x *\
    \ x\n            val zssss = ys.tail * x * x * x * x\n            val zsssss =\
    \ ys.tail * x * x * x * x * x\n            val zssssss = ys.tail * x * x * x *\
    \ x * x * x\n            val zsssssss = ys.tail * x * x * x * x * x * x * x\n\
    \            val zssssssss = ys.tail * x * x * x * x * x * x * x * x\n       \
    \     val zsssssssss = ys.tail * x * x * x * x * x * x * x * x * x\n         \
    \   val zssssssssss = ys.tail * x * x * x * x * x * x * x * x * x * x\n      \
    \      val zsssssssssss = ys.tail * x * x * x * x * x * x * x * x * x * x * x\n\
    \            val zssssssssssss = ys.tail * x * x * x * x * x * x * x * x * x *\
    \ x * x * x\n            val zsssssssssssss = ys.tail * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x\n            val zssssssssssssss = ys.tail * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x\n            val zsssssssssssssss\
    \ = ys.tail * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\n    \
    \        val zssssssssssssssss = ys.tail * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x\n            val zsssssssssssssssss = ys.tail * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\n          \
    \  val zssssssssssssssssss = ys.tail * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x\n            val zsssssssssssssssssss = ys.tail\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\n\
    \            val zssssssssssssssssssss = ys.tail * x * x * x * x * \n    }\n \
    \   def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpkzu_cdfr.scala:38:65 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36mzssssssssssssssssssss\e\
    [0m = ys.tail * x * x * x * x * \n\e[31m\e[31m   |\e[0m                      \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkzu_cdfr.scala:49:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m49 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpkzu_cdfr.scala:16:21 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m            \e[33mval\e[0m \e[36mxs\e[0m = xs.tail\n\e[31m\e[31m\
    \   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m                     Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkzu_cdfr.scala:48:1 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpkzu_cdfr.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val result = new Array[Long](n)\n    \
    \    val x0 = xs.head\n        val x1 = xs.last\n        val x2 = xs.init\n  \
    \      val x3 = xs.tail\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        val x2 = x2 * x2\n        val x3 = x3 * x3\n        val x0 = x0 * x0\n\
    \        val x1 = x1 * x1\n        val x2 = x2 * x2\n        val x3 = x3 * x3\n\
    \        val x0 = x0 * x0\n        val x1 = x1 * x1\n        val x2 = x2 * x2\n\
    \        val x3 = x3 * x3\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        val x2 = x2 * x2\n        val x3 = x3 * x3\n        val x0 = x0 * x0\n\
    \        val x1 = x1 * x1\n        val x2 = x2 * x2\n        val x3 = x3 * x3\n\
    \        val x0 = x0 * x0\n        val x1 = x1 * x1\n        val x2 = x2 * x2\n\
    \        val x3 = x3 * x3\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        val x2 = x2 * x2\n        val x3 = x3 * x3\n        val x0 = x0 * x0\n\
    \        val x1 = x1 * x1\n        val x2 = x2 * x2\n        val x3 = x3 * x3\n\
    \        val x0 = x0 * x0\n        val x1 = x1 * x1\n        val x2 = x2 * x2\n\
    \        val x3 = x3 * x3\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        val x2 = x2 * x2\n        val x3 = x3 * x3\n        val x0 = x0 * x0\n\
    \        val x1 = x1 * x1\n        val x2 = x2 * x2\n        val x3 = x3 * x3\n\
    \        val x0 = x0 * x0\n        val x1 = x1 * x1\n        val x2 = x2 * x2\n\
    \        val x3 = x3 * x3\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        val x2 = x2 * x2\n        val x3 = x3 * x3\n        val x0 = x0 * x0\n\
    \        val x1 = x1 * x1\n        val x2 = x2 * x2\n        val x3 = x3 * x3\n\
    \        val x0 = x0 * x0\n        val x1 = x1 * x1\n        val x2 = x2 * x2\n\
    \        val x3 = x3 * x3\n        val x0 = x0 * x0\n        val x1 = x1 * x1\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mx0\e[0m = x0 * x0\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx0 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx0\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mx1\e[0m = x1 * x1\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx1 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mx2\e[0m = x2 * x2\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx2 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mx3\e[0m = x3 * x3\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx3 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx3\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mx0\e[0m = x0 * x0\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx0 is already defined\
    \ as \e[33mvalue\e[0m \e[35mx0\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso1p25i7.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n \
    \       var i = 0\n        while (i < n) {\n            ds.add(xs.drop(i).sum)\n\
    \            i += 1\n        }\n        ds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpiquwlkve.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979889
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h85_7i7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ArrayList[Long](n)\n\
    \        val x = 1\n        val xs = xs.toList\n        val x0 = xs.head\n   \
    \     val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n        val x3\
    \ = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n   \
    \     val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0bzuj387.scala:15:17 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mxs\e[0m = xs.toList\n\e\
    [31m\e[31m   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 Recursive\
    \ \e[33mvalue\e[0m \e[35mxs\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp0bzuj387.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayList[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bzuj387.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau6uidzn.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptymzak4s.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        val\
    \ dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val dd_1\
    \ = new Array[Long](n)\n        val dd_2 = new Array[Long](n)\n        val dd_3\
    \ = new Array[Long](n)\n        val dd_4 = new Array[Long](n)\n        val dd_5\
    \ = new Array[Long](n)\n        val dd_6 = new Array[Long](n)\n        val dd_7\
    \ = new Array[Long](n)\n        val dd_8 = new Array[Long](n)\n        val dd_9\
    \ = new Array[Long](n)\n        val dd_10 = new Array[Long](n)\n        val dd_11\
    \ = new Array[Long](n)\n        val dd_12 = new Array[Long](n)\n        val dd_13\
    \ = new Array[Long](n)\n        val dd_14 = new Array[Long](n)\n        val dd_15\
    \ = new Array[Long](n)\n        val dd_16 = new Array[Long](n)\n        val dd_17\
    \ = new Array[Long](n)\n        val dd_18 = new Array[Long](n)\n        val dd_19\
    \ = new Array[Long](n)\n        val dd_20 = new Array[Long](n)\n        val dd_21\
    \ = new Array[Long](n)\n        val dd_22 = new Array[Long](n)\n        val dd_23\
    \ = new Array[Long](n)\n        val dd_24 = new Array[Long](n)\n        val dd_25\
    \ = new Array[Long](n)\n        val dd_26 = new Array[Long](n)\n        val dd_27\
    \ = new Array[Long](n)\n        val dd_28 = new Array[Long](n)\n        val dd_29\
    \ = new Array[Long](n)\n        val dd_30 = new Array[Long](n)\n        val dd_31\
    \ = new Array[Long](n)\n        val dd_32 = new Array[Long](n)\n        val dd_33\
    \ = new Array[Long](n)\n        val dd_34 = new Array[Long](n)\n        val dd_35\
    \ = new Array[Long](n)\n        val dd_36 = new Array[Long](n)\n        val dd_37\
    \ = new Array[Long](n)\n        val dd_38 = new Array[Long](n)\n        val dd_39\
    \ = new Array[Long](n)\n        val dd_\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmk4ekdtd.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmk4ekdtd.scala:56:5 ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var n\
    \ = 0\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dx : List[Long] = Nil\n      \
    \  var dy : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dx : List[Long] = Nil\n        var dy : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpylqol_vy.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdx is already defined\
    \ as \e[33mvariable\e[0m \e[35mdx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdy is already defined as \e[33mvariable\e[0m \e[35mdy\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpylqol_vy.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdx is already defined\
    \ as \e[33mvariable\e[0m \e[35mdx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpylqol_vy.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mdy\e[0m : \e[35mList\e[0m["
  stdout: ''
  timestamp: 1659979888
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl5ytj25r.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979896
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new ListBuffer[Long](n)\n \
    \       val x0 = xs.head\n        val x1 = xs.last\n        val x2 = xs.last *\
    \ x0\n        val x3 = xs.last * x1\n        val x4 = xs.last * x2\n        val\
    \ x5 = xs.last * x3\n        val x6 = xs.last * x4\n        val x7 = xs.last *\
    \ x5\n        val x8 = xs.last * x6\n        val x9 = xs.last * x7\n        val\
    \ x10 = xs.last * x8\n        val x11 = xs.last * x9\n        val x12 = xs.last\
    \ * x10\n        val x13 = xs.last * x11\n        val x14 = xs.last * x12\n  \
    \      val x15 = xs.last * x13\n        val x16 = xs.last * x14\n        val x17\
    \ = xs.last * x15\n        val x18 = xs.last * x16\n        val x19 = xs.last\
    \ * x17\n        val x20 = xs.last * x18\n        val x21 = xs.last * x19\n  \
    \      val x22 = xs.last * x20\n        val x23 = xs.last * x21\n        val x24\
    \ = xs.last * x22\n        val x25 = xs.last * x23\n        val x26 = xs.last\
    \ * x24\n        val x27 = xs.last * x25\n        val x28 = xs.last * x26\n  \
    \      val x29 = xs.last * x27\n        val x30 = xs.last * x28\n        val x31\
    \ = xs.last * x29\n        val x32 = xs.last * x30\n        val x33 = xs.last\
    \ * x31\n        val x34 = xs.last * x32\n        val x35 = xs.last * x33\n  \
    \      val x36 = xs.last * x34\n        val x37 = xs.last * x35\n        val x38\
    \ = xs.last * x36\n        val x39 = xs.last * x37\n        val x40 = xs.last\
    \ * x38\n        val x41 = xs.last * x39\n        val x42 = xs.last * x40\n  \
    \      val x43 = xs.last * x41\n        val x44 = xs.last * x42\n        val x45\
    \ = xs.last * x43\n        val x4\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu57__un_.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpu57__un_.scala:13:38\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \
    \ \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e[35mLong\e\
    [0m](n)\n\e[31m\e[31m   |\e[0m                                      ^\e[0m\n\e\
    [31m   |\e[0mtoo many arguments for \e[33mconstructor\e[0m \e[35mListBuffer\e\
    [0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu57__un_.scala:61:5 ---------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph95gb7fl.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmph95gb7fl.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                val term = x * y\n                ds.add(term)\n            \
    \    j += 1\n            }\n            i += 1\n        }\n        ds.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpruzljvam.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpruzljvam.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni0k7pzy.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                val d = x * y\n                ds.update(i + 1, d)\n        \
    \        j += 1\n            }\n            i += 1\n        }\n        ds\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgkazmner.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgkazmner.scala:26:8 ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpuiacd0.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfpuiacd0.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpau6uidzn.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptj85bsy9.scala:19:9\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d(\e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Long\n\e\
    [31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mLong\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979899
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   var i = 0\n        while (i < n) {\n            d(i) = xs(i)\n           \
    \ i += 1\n        }\n        d(n) = 1\n        val dd = new Array[Long](n + 1)\n\
    \        dd(0) = 1\n        var j = 0\n        while (j < n) {\n            dd((j\
    \ + 1)) = d(j) * dd((j))\n            j += 1\n        }\n        dd\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpprnolmnl.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        dd\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (dd : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(n - 1 - i)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e9qn1cs.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new mutable.ListBuffer[Long]()\n\
    \        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptmutxymi.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmptmutxymi.scala:13:21 ------------------------\e[0m\e[0m\n\e[31m13\
    \ |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptmutxymi.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659979909
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ArrayList[Long](n)\n\
    \        val d = new mutable.ArrayList[Long](n)\n        val p = new mutable.ArrayList[Long](n)\n\
    \        val q = new mutable.ArrayList[Long](n)\n        val r = new mutable.ArrayList[Long](n)\n\
    \        val s = new mutable.ArrayList[Long](n)\n        val t = new mutable.ArrayList[Long](n)\n\
    \        val u = new mutable.ArrayList[Long](n)\n        val v = new mutable.ArrayList[Long](n)\n\
    \        val w = new mutable.ArrayList[Long](n)\n        val x = new mutable.ArrayList[Long](n)\n\
    \        val y = new mutable.ArrayList[Long](n)\n        val z = new mutable.ArrayList[Long](n)\n\
    \        val a = new mutable.ArrayList[Long](n)\n        val b = new mutable.ArrayList[Long](n)\n\
    \        val c = new mutable.ArrayList[Long](n)\n        val d = new mutable.ArrayList[Long](n)\n\
    \        val e = new mutable.ArrayList[Long](n)\n        val f = new mutable.ArrayList[Long](n)\n\
    \        val g = new mutable.ArrayList[Long](n)\n        val h = new mutable.ArrayList[Long](n)\n\
    \        val i = new mutable.ArrayList[Long](n)\n        val j = new mutable.ArrayList[Long](n)\n\
    \        val k = new mutable.ArrayList[Long](n)\n        val l = new mutable.ArrayList[Long](n)\n\
    \        val m = new mutable.ArrayList[Long](n)\n        val n = new mutable.ArrayList[Long](n)\n\
    \        val o = new mutable.ArrayList[Long](n)\n        val p = new mutable.ArrayList[Long](n)\n\
    \        val q = new mutable.ArrayList[Long](n)\n        val r = new mutable.ArrayList[Long](n)\n\
    \        val s = new mutable.ArrayList[Long](n)\n        val t = new mutable.ArrayList[Long](n)\n\
    \        val u = new mutable.ArrayList[Long](n)\n        val v = new mutable.ArrayList[Long](n)\n\
    \        val w = new mutable.ArrayList[Long](n)\n        val x = new mutable.ArrayList[Long](n)\n\
    \        val y = new mutable.ArrayList[Long](n)\n        val z = new mutable.ArrayList[Long](n)\n\
    \        val a = new mutable.ArrayList[Long](n)\n        val b = new mutable.ArrayList[Long](n)\n\
    \        val c = new mutable.ArrayList[Long](n)\n        val d = new \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprj80hfpx.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprj80hfpx.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprj80hfpx.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprj80hfpx.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprj80hfpx.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mq\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mq is already defined as \e[33mvalue\e[0m \e[35mq\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprj80hfpx.scala:43:12 ----"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7_r5_vql.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0258gxk7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val\
    \ z = new Array[Long](n)\n        val a = new Array[Long](n)\n        val b =\
    \ new Array[Long](n)\n        val c = new Array[Long](n)\n        val d = new\
    \ Array[Long](n)\n        val e = new Array[Long](n)\n        val f = new Array[Long](n)\n\
    \        val g = new Array[Long](n)\n        val h = new Array[Long](n)\n    \
    \    val i = new Array[Long](n)\n        val j = new Array[Long](n)\n        val\
    \ k = new Array[Long](n)\n        val l = new Array[Long](n)\n        val m =\
    \ new Array[Long](n)\n        val n = new Array[Long](n)\n        val o = new\
    \ Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n\
    \        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n    \
    \    val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val\
    \ v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x =\
    \ new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new\
    \ Array[Long](n)\n        val a = new Array[Long](n)\n        val b = new Array[Long](n)\n\
    \        val c = new Array[Long](n)\n        val d = new Array[Long](n)\n    \
    \    val e = new Array[Long](n)\n        val f = new Array[Long](n)\n        val\
    \ g = new Array[Long](n)\n        val h = new Array[Long](n)\n        val i =\
    \ new Array[Long](n)\n        val j = new Array[Long](n)\n        val k = new\
    \ Array[Long](n)\n        val l = new Array[Long](n)\n        val m = new Array[Long](n)\n\
    \        val n = new Array[Long](n)\n        val o = new Array[Long](n)\n    \
    \    val p = new Array[Long](n)\n        val q = new Array[Long](n)\n        val\
    \ r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val t =\
    \ new Array[Long](n)\n        val u = new Array[Long]\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsl6r1mw6.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsl6r1mw6.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mn is already defined as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsl6r1mw6.scala:40:12 ---------------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsl6r1mw6.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpsl6r1mw6.scala:42:12 ---------------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mz is already defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m \
    \  |\e[0m\n\e["
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg41q2r0p.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail.tail.tail.tail\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcqb0bkcl.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x = xs.head\n        val xs = xs.tail\n\
    \        val d = xs.map(_ * x)\n        val dd = d.map(_ * x)\n        val dd\
    \ = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ *\
    \ x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n       \
    \ val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n     \
    \   val dd = dd.map(_ * x)\n        val dd = dd.map(_ * x)\n        val dd = dd.map(_\
    \ * \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplnfl6x0q.scala:59:27 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = dd.map(_ * \n\e\
    [31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m        \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplnfl6x0q.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = dd.map(_ * x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdd is\
    \ already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplnfl6x0q.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdd\e[0m = dd.map(_ * x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdd is already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmplnfl6x0q.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = dd.map(_ * x)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdd is already defined as\
    \ \e[33mvalue\e[0m \e[35mdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmplnfl6x0q.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdd\e[0m = dd.map(_ * x)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdd is\
    \ already defined as \e[33mvalue\e[0m \e[35mdd\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplnfl6x0q.scala:21:12\
    \ ----------------"
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_twxee3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpuiacd0.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfpuiacd0.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(n - 1 - i)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0e9qn1cs.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptymzak4s.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val result = new Array[Long](n)\n    \
    \    val x = new Array[Long](n)\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_9zlnxw.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x = 1l\n        val y = 1l\n        val z = 2l\n        val i = 2l\n       \
    \ val j = 3l\n        val k = 3l\n        val l = 4l\n        val m = 5l\n   \
    \     val n = 6l\n        val o = 7l\n        val p = 8l\n        val q = 9l\n\
    \        val r = 10l\n        val s = 11l\n        val t = 12l\n        val u\
    \ = 13l\n        val v = 14l\n        val w = 15l\n        val x = 1l\n      \
    \  val y = 1l\n        val z = 2l\n        val i = 2l\n        val j = 3l\n  \
    \      val k = 3l\n        val l = 4l\n        val m = 5l\n        val n = 6l\n\
    \        val o = 7l\n        val p = 8l\n        val q = 9l\n        val r = 10l\n\
    \        val s = 11l\n        val t = 12l\n        val u = 13l\n        val v\
    \ = 14l\n        val w = 15l\n        val x = 1l\n        val y = 1l\n       \
    \ val z = 2l\n        val i = 2l\n        val j = 3l\n        val k = 3l\n   \
    \     val l = 4l\n        val m = 5l\n        val n = 6l\n        val o = 7l\n\
    \        val p = 8l\n        val q = 9l\n        val r = 10l\n        val s =\
    \ 11l\n        val t = 12l\n        val u = 13l\n        val v = 14l\n       \
    \ val w = 15l\n        val x = 1l\n        val y = 1l\n        val z = 2l\n  \
    \      val i = 2l\n        val j = 3l\n        val k = 3l\n        val l = 4l\n\
    \        val m = 5l\n        val n = 6l\n        val o = 7l\n        val p = 8l\n\
    \        val q = 9l\n        val r = 10l\n        val s = 11l\n        val t =\
    \ 12l\n        val u = 13l\n        val v = 14l\n        val w = 15l\n       \
    \ val x = 1l\n        val y = 1l\n        val z = 2l\n        val i = 2l\n   \
    \     val j = 3l\n        val k = 3l\n        val l = 4l\n        val m = 5l\n\
    \        val n = 6l\n        val o = 7l\n        val p = 8\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = \e[31m6l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvalue\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[31m1l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined\
    \ as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[31m1l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined\
    \ as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \e[31m2l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined\
    \ as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mi\e[0m = \e[31m2l\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvalue\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv60wzql9.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mj\e[0m = \e["
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z =\
    \ new Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new\
    \ Array[Long](n)\n        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n\
    \        val s = new Array[Long](n)\n        val t = new Array[Long](n)\n    \
    \    val u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val\
    \ w = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y =\
    \ new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new\
    \ Array[Long](n)\n        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n\
    \        val r = new Array[Long](n)\n        val s = new Array[Long](n)\n    \
    \    val t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val\
    \ v = new Array[Long](n)\n        val w = new Array[Long](n)\n        val x =\
    \ new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new\
    \ Array[Long](n)\n        val d = new Array[Long](n)\n        val p = new Array[Long](n)\n\
    \        val q = new Array[Long](n)\n        val r = new Array[Long](n)\n    \
    \    val s = new Array[Long](n)\n        val t = new Array[Long](n)\n        val\
    \ u = new Array[Long](n)\n        val v = new Array[Long](n)\n        val w =\
    \ new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new\
    \ Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n\
    \        val p = new Array[Long](n)\n        val q = new Array[Long](n)\n    \
    \    val r = new Array[Long](n)\n        val s = new Array[Long](n)\n        val\
    \ t = new Array[Long](n)\n        val u = new Array[Long](n)\n        val v =\
    \ new Array[Long](n)\n        val w = new Array[Long](n)\n        val x = new\
    \ Array[Long](n)\n        val y = new Array[Long](n)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahcw8hfe.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpahcw8hfe.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpahcw8hfe.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mz is already defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpahcw8hfe.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpahcw8hfe.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mp\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mp is already defined as \e[33mvalue\e[0m \e[35mp\e[0m\n\e[31m \
    \  |\e[0m\n\e["
  stdout: ''
  timestamp: 1659979913
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     val d = 0l.toLong\n        for(i <- 0 until n) {\n            val x = xs(i)\n\
    \            val y = x * d\n            ds.add(y)\n            d = y * x\n   \
    \     }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpo35f5cy_.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpo35f5cy_.scala:19:14 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            d = y * x\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val d\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979908
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            ds.update(i) = xs(i) * i\n\
    \            i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf1m00fl9.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979910
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new mutable.ArrayList[Long](n)\n\
    \        val d = 1l.toLong\n        val x = 0l.toLong\n        val xpow = 0l.toLong\n\
    \        val xpow2 = 0l.toLong\n        val xpow3 = 0l.toLong\n        val xpow4\
    \ = 0l.toLong\n        val xpow5 = 0l.toLong\n        val xpow6 = 0l.toLong\n\
    \        val xpow7 = 0l.toLong\n        val xpow8 = 0l.toLong\n        val xpow9\
    \ = 0l.toLong\n        val xpow10 = 0l.toLong\n        val xpow11 = 0l.toLong\n\
    \        val xpow12 = 0l.toLong\n        val xpow13 = 0l.toLong\n        val xpow14\
    \ = 0l.toLong\n        val xpow15 = 0l.toLong\n        val xpow16 = 0l.toLong\n\
    \        val xpow17 = 0l.toLong\n        val xpow18 = 0l.toLong\n        val xpow19\
    \ = 0l.toLong\n        val xpow20 = 0l.toLong\n        val xpow21 = 0l.toLong\n\
    \        val xpow22 = 0l.toLong\n        val xpow23 = 0l.toLong\n        val xpow24\
    \ = 0l.toLong\n        val xpow25 = 0l.toLong\n        val xpow26 = 0l.toLong\n\
    \        val xpow27 = 0l.toLong\n        val xpow28 = 0l.toLong\n        val xpow29\
    \ = 0l.toLong\n        val xpow30 = 0l.toLong\n        val xpow31 = 0l.toLong\n\
    \        val xpow32 = 0l.toLong\n        val xpow33 = 0l.toLong\n        val xpow34\
    \ = 0l.toLong\n        val xpow35 = 0l.toLong\n        val xpow36 = 0l.toLong\n\
    \        val xpow37 = 0l.toLong\n        val xpow38 = 0l.toLong\n        val xpow39\
    \ = 0l.toLong\n        val xpow40 = 0l.toLong\n        val xpow41 = 0l.toLong\n\
    \        val xpow42 = 0l.toLong\n        val xpow43 = 0l.toLong\n        val xpow44\
    \ = 0l.toLong\n        val xpow45 = 0l.toLong\n        val xpow46 = 0l.toLong\n\
    \        val xpow47 = 0l.toLong\n        val xpow48 = 0l.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp5d90jda.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayList[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp5d90jda.scala:64:5\
    \ ---------------------\e[0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979914
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0258gxk7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        if (n == 0) Nil\n        else {\n    \
    \        val x0 = xs.head\n            val x1 = xs.tail.head\n            val\
    \ x2 = xs.tail.tail.head\n            val x3 = xs.tail.tail.tail.head\n      \
    \      val x4 = xs.tail.tail.tail.tail.head\n            val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \            val x6 = xs.tail.tail.tail.tail.tail.tail.head\n            val x7\
    \ = xs.tail.tail.tail.tail.tail.tail.tail.head\n            val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n \
    \           val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuvsg4ml0.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuvsg4ml0.scala:43:1\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpuvsg4ml0.scala:35:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n + 1)\n   \
    \     val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val w = new Array[Long](n + 1)\n\
    \        val v = new Array[Long](n + 1)\n        val w1 = new Array[Long](n +\
    \ 1)\n        val w2 = new Array[Long](n + 1)\n        val w3 = new Array[Long](n\
    \ + 1)\n        val w4 = new Array[Long](n + 1)\n        val w5 = new Array[Long](n\
    \ + 1)\n        val w6 = new Array[Long](n + 1)\n        val w7 = new Array[Long](n\
    \ + 1)\n        val w8 = new Array[Long](n + 1)\n        val w9 = new Array[Long](n\
    \ + 1)\n        val w10 = new Array[Long](n + 1)\n        val w11 = new Array[Long](n\
    \ + 1)\n        val w12 = new Array[Long](n + 1)\n        val w13 = new Array[Long](n\
    \ + 1)\n        val w14 = new Array[Long](n + 1)\n        val w15 = new Array[Long](n\
    \ + 1)\n        val w16 = new Array[Long](n + 1)\n        val w17 = new Array[Long](n\
    \ + 1)\n        val w18 = new Array[Long](n + 1)\n        val w19 = new Array[Long](n\
    \ + 1)\n        val w20 = new Array[Long](n + 1)\n        val w21 = new Array[Long](n\
    \ + 1)\n        val w22 = new Array[Long](n + 1)\n        val w23 = new Array[Long](n\
    \ + 1)\n        val w24 = new Array[Long](n + 1)\n        val w25 = new Array[Long](n\
    \ + 1)\n        val w26 = new Array[Long](n + 1)\n        val w27 = new Array[Long](n\
    \ + 1)\n        val w28 = new Array[Long](n + 1)\n        val w29 = new Array[Long](n\
    \ + 1)\n        val w30 = new Array[Long](n + 1)\n        val w31 = new Array[Long](n\
    \ + 1)\n        val w32 = new Array[Long](n + 1)\n        val w33 = new Array[Long](n\
    \ + 1)\n        val w34 = new Array[Long](n + 1)\n        val w35 = new Array[Long](n\
    \ + 1)\n        val w36 = new Array[Long](n + 1)\n        val w37 = new Array\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxb2nv3qr.scala:55:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mw37\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmissing argument for parameter _length of \e[33mconstructor\e[0m\
    \ \e[35mArray\e[0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[T]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxb2nv3qr.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptymzak4s.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z =\
    \ new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new\
    \ Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n\
    \        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n    \
    \    val y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val\
    \ d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val y =\
    \ new Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new\
    \ Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n\
    \        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n    \
    \    val x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val\
    \ z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val x =\
    \ new Array[Long](n)\n        val y = new Array[Long](n)\n        val z = new\
    \ Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new Array[Long](n)\n\
    \        val y = new Array[Long](n)\n        val z = new Array[Long](n)\n    \
    \    val d = new Array[Long](n)\n        val x = new Array[Long](n)\n        val\
    \ y = new Array[Long](n)\n        val z = new Array[Long](n)\n        val d =\
    \ new Array[Long](n)\n        val x = new Array[Long](n)\n        val y = new\
    \ Array[Long](n)\n        val z = new Array[Long](n)\n        val d = new Array[Long](n)\n\
    \        val x = new Array[Long](n)\n        val y = new Array[Long](n)\n    \
    \    val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val y = new Array[Long](n)\n        val z =\
    \ new Array[Long](n)\n        val d = new Array[Long](n)\n        val x = new\
    \ Array[Long](n)\n        val y = new Array[\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxlfhaeqx.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxlfhaeqx.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0md is already defined as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxlfhaeqx.scala:18:12 ---------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mx is already defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxlfhaeqx.scala:19:12 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0my is already defined as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxlfhaeqx.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e\
    [35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mz is already defined as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxlfhaeqx.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mva"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni0k7pzy.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val d = xs(i) * xs(i + 1)\n    \
    \        ds.update(i + 1, d)\n            i += 1\n        }\n        ds\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsgt9x_ah.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val d = 1\n            while (i < n && xs(i) == x) {\n                d *=\
    \ xs(i + 1)\n                i += 1\n            }\n            ds.push(d) \n\
    \            i += 1\n        }\n        ds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbubaf3hk.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbubaf3hk.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                d *= xs(i + \e[31m1\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value *= is\
    \ not a member of Int - did you mean d.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979873
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8nlqdwdo.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val result = new Array[Long](n)\n  \
    \      val x = new Array[Long](n)\n        val y = new Array[Long](n)\n      \
    \  val z = new Array[Long](n)\n        val d = new Array[Long](n)\n        val\
    \ dz = new Array[Long](n)\n        val dz2 = new Array[Long](n)\n        val dz3\
    \ = new Array[Long](n)\n        val dz4 = new Array[Long](n)\n        val dz5\
    \ = new Array[Long](n)\n        val dz6 = new Array[Long](n)\n        val dz7\
    \ = new Array[Long](n)\n        val dz8 = new Array[Long](n)\n        val dz9\
    \ = new Array[Long](n)\n        val dz10 = new Array[Long](n)\n        val dz11\
    \ = new Array[Long](n)\n        val dz12 = new Array[Long](n)\n        val dz13\
    \ = new Array[Long](n)\n        val dz14 = new Array[Long](n)\n        val dz15\
    \ = new Array[Long](n)\n        val dz16 = new Array[Long](n)\n        val dz17\
    \ = new Array[Long](n)\n        val dz18 = new Array[Long](n)\n        val dz19\
    \ = new Array[Long](n)\n        val dz20 = new Array[Long](n)\n        val dz21\
    \ = new Array[Long](n)\n        val dz22 = new Array[Long](n)\n        val dz23\
    \ = new Array[Long](n)\n        val dz24 = new Array[Long](n)\n        val dz25\
    \ = new Array[Long](n)\n        val dz26 = new Array[Long](n)\n        val dz27\
    \ = new Array[Long](n)\n        val dz28 = new Array[Long](n)\n        val dz29\
    \ = new Array[Long](n)\n        val dz30 = new Array[Long](n)\n        val dz31\
    \ = new Array[Long](n)\n        val dz32 = new Array[Long](n)\n        val dz33\
    \ = new Array[Long](n)\n        val dz34 = new Array[Long](n)\n        val dz35\
    \ = new Array[Long](n)\n        val dz36 = new Array[Long](n)\n        val dz37\
    \ = new Array[Long](n)\n        val dz38 = new Array[Long](n)\n        val dz39\
    \ = new Array[Long](n)\n        val dz40 = new Array[Long](n)\n        val dz41\
    \ = new Array[Long](n)\n        val dz\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxmokq0_z.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxmokq0_z.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg41q2r0p.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs(0)\n        val x1 = xs(1)\n\
    \        val x2 = xs(2)\n        val x3 = xs(3)\n        val x4 = xs(4)\n    \
    \    val x5 = xs(5)\n        val x6 = xs(6)\n        val x7 = xs(7)\n        val\
    \ x8 = xs(8)\n        val x9 = xs(9)\n        val x10 = xs(10)\n        val x11\
    \ = xs(11)\n        val x12 = xs(12)\n        val x13 = xs(13)\n        val x14\
    \ = xs(14)\n        val x15 = xs(15)\n        val x16 = xs(16)\n        val x17\
    \ = xs(17)\n        val x18 = xs(18)\n        val x19 = xs(19)\n        val x20\
    \ = xs(20)\n        val x21 = xs(21)\n        val x22 = xs(22)\n        val x23\
    \ = xs(23)\n        val x24 = xs(24)\n        val x25 = xs(25)\n        val x26\
    \ = xs(26)\n        val x27 = xs(27)\n        val x28 = xs(28)\n        val x29\
    \ = xs(29)\n        val x30 = xs(30)\n        val x31 = xs(31)\n        val x32\
    \ = xs(32)\n        val x33 = xs(33)\n        val x34 = xs(34)\n        val x35\
    \ = xs(35)\n        val x36 = xs(36)\n        val x37 = xs(37)\n        val x38\
    \ = xs(38)\n        val x39 = xs(39)\n        val x40 = xs(40)\n        val x41\
    \ = xs(41)\n        val x42 = xs(42)\n        val x43 = xs(43)\n        val x44\
    \ = xs(44)\n        val x45 = xs(45)\n        val x46 = xs(46)\n        val x47\
    \ = xs(47)\n        val x48 = xs(48)\n        val x49 = xs(49)\n        val x50\
    \ = xs(50)\n        val x51 = xs(51)\n        val x52 = xs(52)\n        val x53\
    \ = xs(53)\n        val x54 = xs(54)\n        val x55 = xs(55)\n        val x56\
    \ = xs(56)\n        val x57 = xs(57)\n        val x58 = xs(58)\n        val x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfpuiacd0.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpfpuiacd0.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n\
    \        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long]\
    \ = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n      \
    \  var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var ds\
    \ : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n\
    \        var dc : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var ds : List[Long] = Nil\n        var dc\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var ds : List[Long] = Nil\n        var dc : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpathcph0u.scala:70:29 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpathcph0u.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpathcph0u.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpathcph0u.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mvar\e[0m \e[36mds\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mds is already defined as \e[33mvariable\e[0m \e[35mds\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpathcph0u.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdc\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdc is already defined\
    \ as \e[33mvariable\e[0m \e[35mdc\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all "
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1r3eui4.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi1r3eui4.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg41q2r0p.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n \
    \       val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n        val y = new Array[Long](n + 1)\n\
    \        val z = new Array[Long](n + 1)\n        val d = new Array[Long](n + 1)\n\
    \        val x = new Array[Long](n + 1)\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzit1g7gn.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0md is already defined\
    \ as \e[33mvalue\e[0m \e[35md\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzit1g7gn.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mx\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already defined\
    \ as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzit1g7gn.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36my\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0my is already defined\
    \ as \e[33mvalue\e[0m \e[35my\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzit1g7gn.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mz is already defined\
    \ as \e[33mvalue\e[0m \e[35mz\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzit1g7gn.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = \e[33mnew\e[0m\
    \ \e[35mArray\e[0m[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   val dd = new Array[Long](n + 1)\n        val ddd = new Array[Long](n + 1)\n\
    \        val dd_1 = new Array[Long](n + 1)\n        val ddd_1 = new Array[Long](n\
    \ + 1)\n        val ddd_2 = new Array[Long](n + 1)\n        val dd_2 = new Array[Long](n\
    \ + 1)\n        val dd_3 = new Array[Long](n + 1)\n        val ddd_3 = new Array[Long](n\
    \ + 1)\n        val ddd_4 = new Array[Long](n + 1)\n        val dd_4 = new Array[Long](n\
    \ + 1)\n        val dd_5 = new Array[Long](n + 1)\n        val ddd_5 = new Array[Long](n\
    \ + 1)\n        val ddd_6 = new Array[Long](n + 1)\n        val dd_6 = new Array[Long](n\
    \ + 1)\n        val dd_7 = new Array[Long](n + 1)\n        val ddd_7 = new Array[Long](n\
    \ + 1)\n        val ddd_8 = new Array[Long](n + 1)\n        val dd_8 = new Array[Long](n\
    \ + 1)\n        val dd_9 = new Array[Long](n + 1)\n        val ddd_9 = new Array[Long](n\
    \ + 1)\n        val ddd_10 = new Array[Long](n + 1)\n        val dd_10 = new Array[Long](n\
    \ + 1)\n        val dd_11 = new Array[Long](n + 1)\n        val ddd_11 = new Array[Long](n\
    \ + 1)\n        val ddd_12 = new Array[Long](n + 1)\n        val dd_12 = new Array[Long](n\
    \ + 1)\n        val dd_13 = new Array[Long](n + 1)\n        val ddd_13 = new Array[Long](n\
    \ + 1)\n        val ddd_14 = new Array[Long](n + 1)\n        val dd_14 = new Array[Long](n\
    \ + 1)\n        val dd_15 = new Array[Long](n + 1)\n        val ddd_15 = new Array[Long](n\
    \ + 1)\n        val ddd_16 = new Array[Long](n + 1)\n        val dd_16 = new Array[Long](n\
    \ + 1)\n        val dd_17 = new Array[Long](n + 1)\n        val ddd_17 = new Array[Long](n\
    \ + 1)\n        val ddd_18 = new Array[Long](n + 1)\n        val dd_18 = new Array[Long](n\
    \ + 1)\n        val d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbv4r1fci.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbv4r1fci.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x = 1\n        val y = 1\n        val z = 1\n        val x2 = 1\n        val\
    \ y2 = 1\n        val z2 = 1\n        val x3 = 1\n        val y3 = 1\n       \
    \ val z3 = 1\n        val x4 = 1\n        val y4 = 1\n        val z4 = 1\n   \
    \     val x5 = 1\n        val y5 = 1\n        val z5 = 1\n        val x6 = 1\n\
    \        val y6 = 1\n        val z6 = 1\n        val x7 = 1\n        val y7 =\
    \ 1\n        val z7 = 1\n        val x8 = 1\n        val y8 = 1\n        val z8\
    \ = 1\n        val x9 = 1\n        val y9 = 1\n        val z9 = 1\n        val\
    \ x10 = 1\n        val y10 = 1\n        val z10 = 1\n        val x11 = 1\n   \
    \     val y11 = 1\n        val z11 = 1\n        val x12 = 1\n        val y12 =\
    \ 1\n        val z12 = 1\n        val x13 = 1\n        val y13 = 1\n        val\
    \ z13 = 1\n        val x14 = 1\n        val y14 = 1\n        val z14 = 1\n   \
    \     val x15 = 1\n        val y15 = 1\n        val z15 = 1\n        val x16 =\
    \ 1\n        val y16 = 1\n        val z16 = 1\n        val x17 = 1\n        val\
    \ y17 = 1\n        val z17 = 1\n        val x18 = 1\n        val y18 = 1\n   \
    \     val z18 = 1\n        val x19 = 1\n        val y19 = 1\n        val z19 =\
    \ 1\n        val x20 = 1\n        val y20 = 1\n        val z20 = 1\n        val\
    \ x21 = 1\n        val y21 = 1\n        val z21 = 1\n        val x22 = 1\n   \
    \     val y22 = 1\n        val z22 = 1\n        val x23 = 1\n        val y23 =\
    \ 1\n        val z23 = 1\n        val x24 = 1\n        val y24 = 1\n        val\
    \ z24 = 1\n        val x25 = 1\n        val y25 = 1\n        val z25 = 1\n   \
    \     val x26 = 1\n        val y26 = 1\n        val z26 = 1\n        val x27 =\
    \ 1\n        val y27 = 1\n        val z27 = 1\n        val x28 = 1\n        val\
    \ y28 = 1\n        val z\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxrolmlyv.scala:98:4 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxrolmlyv.scala:98:5 ---------------------\e[0m\e[0m\n\e[31m98 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var z = 0\n        var d\
    \ = 0\n        var n = 0\n        var i = 0\n        var j = 0\n        var k\
    \ = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var m\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var n = 0\n        var n = 0\n        var n = 0\n        var n\
    \ = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpcqoew0x0.scala:140:11 --------------------------\e\
    [0m\e[0m\n\e[31m140 |\e[0m        \e[33mvar\e[0m \n\e[31m\e[31m    |\e[0m    \
    \       ^\e[0m\n\e[31m    |\e[0m           pattern expected\n\e[31m    |\e[0m\n\
    \e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqoew0x0.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqoew0x0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvariable\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqoew0x0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqoew0x0.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is already defined\
    \ as \e[33mvariable\e[0m \e[35mn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqoew0x0.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mn is alread"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn1gud4db.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1gud4db.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 1\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpi1r3eui4.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpi1r3eui4.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ val x = new Array[Long](n)\n        val x2 = new Array[Long](n)\n        val\
    \ x3 = new Array[Long](n)\n        val x4 = new Array[Long](n)\n        val x5\
    \ = new Array[Long](n)\n        val x6 = new Array[Long](n)\n        val x7 =\
    \ new Array[Long](n)\n        val x8 = new Array[Long](n)\n        val x9 = new\
    \ Array[Long](n)\n        val x10 = new Array[Long](n)\n        val x11 = new\
    \ Array[Long](n)\n        val x12 = new Array[Long](n)\n        val x13 = new\
    \ Array[Long](n)\n        val x14 = new Array[Long](n)\n        val x15 = new\
    \ Array[Long](n)\n        val x16 = new Array[Long](n)\n        val x17 = new\
    \ Array[Long](n)\n        val x18 = new Array[Long](n)\n        val x19 = new\
    \ Array[Long](n)\n        val x20 = new Array[Long](n)\n        val x21 = new\
    \ Array[Long](n)\n        val x22 = new Array[Long](n)\n        val x23 = new\
    \ Array[Long](n)\n        val x24 = new Array[Long](n)\n        val x25 = new\
    \ Array[Long](n)\n        val x26 = new Array[Long](n)\n        val x27 = new\
    \ Array[Long](n)\n        val x28 = new Array[Long](n)\n        val x29 = new\
    \ Array[Long](n)\n        val x30 = new Array[Long](n)\n        val x31 = new\
    \ Array[Long](n)\n        val x32 = new Array[Long](n)\n        val x33 = new\
    \ Array[Long](n)\n        val x34 = new Array[Long](n)\n        val x35 = new\
    \ Array[Long](n)\n        val x36 = new Array[Long](n)\n        val x37 = new\
    \ Array[Long](n)\n        val x38 = new Array[Long](n)\n        val x39 = new\
    \ Array[Long](n)\n        val x40 = new Array[Long](n)\n        val x41 = new\
    \ Array[Long](n)\n        val x42 = new Array[Long](n)\n        val x43 = new\
    \ Array[Long](n)\n        val x44 = new Array[Long](n)\n        val x45 = new\
    \ Array[Long](n)\n        val x46 = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzbbtq6mx.scala:59:17 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \e[36mx46\e[0m = \n\e[31m\e[31m\
    \   |\e[0m                 ^\e[0m\n\e[31m   |\e[0m                 expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzbbtq6mx.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var x = 0\n        var y = 0\n        var d = 0\n        var dx\
    \ : List[Long] = Nil\n        var dy : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long]\
    \ = Nil\n        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n\
    \        var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n      \
    \  var dn : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn\
    \ : List[Long] = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long]\
    \ = Nil\n        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n\
    \        var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n      \
    \  var dp : List[Long] = Nil\n        var dn : List[Long] = Nil\n        var dp\
    \ : List[Long] = Nil\n        var dn : List[Long] = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong,\
    \ 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong,\
    \ 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5somggrn.scala:70:29 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = \n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e\
    [31m   |\e[0m                             expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5somggrn.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdp is already defined\
    \ as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5somggrn.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mdn\e[0m : \e[35mList\e[0m[\e\
    [35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdn is already defined as \e[33mvariable\e[0m \e[35mdn\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5somggrn.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mdp\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]\
    \ = Nil\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdp is already defined as \e[33mvariable\e[0m \e[35mdp\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5somggrn.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdn\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m] = Nil\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdn is already defined\
    \ as \e[33mvariable\e[0m \e[35mdn\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all "
  stdout: ''
  timestamp: 1659979917
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        var d = 0\n        var x = 0\n        var y = 0\n        var z\
    \ = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l\
    \ = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p\
    \ = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t\
    \ = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var xi\
    \ = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var\
    \ n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var\
    \ r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var\
    \ v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n        var\
    \ zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var\
    \ p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var\
    \ t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var\
    \ xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var\
    \ n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var\
    \ r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var\
    \ v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n        var\
    \ zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var\
    \ p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var\
    \ t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var\
    \ xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n        var\
    \ j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var\
    \ n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var\
    \ r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var\
    \ v = 0\n        var w = 0\n        var xi = 0\n        var yi = 0\n        var\
    \ zi = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var\
    \ l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var\
    \ p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var\
    \ t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var\
    \ xi = 0\n        var yi = 0\n        var zi = 0\n        var i = 0\n        var\
    \ j = 0\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mi\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mi is already defined\
    \ as \e[33mvariable\e[0m \e[35mi\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m \e[36mj\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mj is already defined\
    \ as \e[33mvariable\e[0m \e[35mj\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mvar\e[0m \e[36mk\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mk is already defined\
    \ as \e[33mvariable\e[0m \e[35mk\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0ml is already defined\
    \ as \e[33mvariable\e[0m \e[35ml\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mm is already defined\
    \ as \e[33mvariable\e[0m \e[35mm\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmphniowi0v.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_twxee3.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     for( i <- 0 until n ) {\n            val x = xs(i)\n            if( i ==\
    \ 0 ) {\n                ds.clear()\n            }\n            if( i == 1 ) {\n\
    \                ds.push(x)\n            }\n            else {\n             \
    \   val y = xs(i-1)\n                ds.push(x * y)\n            }\n        }\n\
    \        ds.toList\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr0qurwh5.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979918
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = (y - x) / x\n                j += 1\n            }\n      \
    \      i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiotkg2i7.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpiotkg2i7.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659979919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqygmub2o.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpqygmub2o.scala:32:5 ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979853
