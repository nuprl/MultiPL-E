language: scala
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8nlqdwdo.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val y\
    \ = xs(i + 1)\n            val d = 0\n            while (i < n) {\n          \
    \      val xx = xs(i)\n                val yy = ys(i + 1)\n                val\
    \ d = d + xx * yy + x * y\n                i += 1\n            }\n           \
    \ ds(i) = d\n        }\n        ds\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp86thze4e.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36myy\e[0m = ys(i +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^\e[0m\n\e[31m\
    \   |\e[0m                         Not found: ys\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp86thze4e.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36md\e[0m = d + xx\
    \ * yy + x * y\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m  \
    \ |\e[0m                        Recursive \e[33mvalue\e[0m \e[35md\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp86thze4e.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        ds\n\e[31m\e[31m   |\e\
    [0m        ^^\e[0m\n\e[31m   |\e[0m        Found:    (ds : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i + 1)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmuuex84e.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            val x = xs(i)\n            val j\
    \ = i + 1\n            while (j < n) {\n                val y = xs(j)\n      \
    \          ds(i) = x * y\n                j += 2\n            }\n            i\
    \ += 1\n        }\n        ds\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpukiadca8.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpukiadca8.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) - xs(i - 1)\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyj3zwwzl.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ var i = 0\n        while (i < n) {\n            d(i) = xs(i) * xs(i) - 1\n \
    \           i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplv5vt3nq.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpni0k7pzy.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdl1mshy1.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg41q2r0p.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = x\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptm_x6jb7.scala:32:18 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mx19\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                  Not found:\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptm_x6jb7.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n)\n        var\
    \ i = 0\n        while (i < n) {\n            d(i) = xs(i) / xs(n - i)\n     \
    \       i += 1\n        }\n        d\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptcoabc9x.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        d\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (d : Array[Long])\n\e[31m\
    \   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val ds = new Array[Long](n)\n      \
    \  var i = 0\n        while (i < n) {\n            val x = xs(i)\n           \
    \ val j = i + 1\n            while (j < n) {\n                val y = xs(j)\n\
    \                ds(i) = x * y\n                j += 2\n            }\n      \
    \      i += 1\n        }\n        ds\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpanqk2nd1.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                j += \e[31m2\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean j.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpanqk2nd1.scala:25:8 ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m\
    \        ds\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    (ds : Array[Long])\n\e[31m   |\e[0m        Required: List[Long]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val d = new Array[Long](n)\n       \
    \ val dd = new Array[Long](n)\n        val ddd = new Array[Long](n)\n        val\
    \ x = new Array[Long](n)\n        val xx = new Array[Long](n)\n        val xxx\
    \ = new Array[Long](n)\n        val xxxx = new Array[Long](n)\n        val xxxx_1\
    \ = new Array[Long](n)\n        val xxxx_2 = new Array[Long](n)\n        val xxxx_3\
    \ = new Array[Long](n)\n        val xxxx_4 = new Array[Long](n)\n        val xxxx_5\
    \ = new Array[Long](n)\n        val xxxx_6 = new Array[Long](n)\n        val xxxx_7\
    \ = new Array[Long](n)\n        val xxxx_8 = new Array[Long](n)\n        val xxxx_9\
    \ = new Array[Long](n)\n        val xxxx_10 = new Array[Long](n)\n        val\
    \ xxxx_11 = new Array[Long](n)\n        val xxxx_12 = new Array[Long](n)\n   \
    \     val xxxx_13 = new Array[Long](n)\n        val xxxx_14 = new Array[Long](n)\n\
    \        val xxxx_15 = new Array[Long](n)\n        val xxxx_16 = new Array[Long](n)\n\
    \        val xxxx_17 = new Array[Long](n)\n        val xxxx_18 = new Array[Long](n)\n\
    \        val xxxx_19 = new Array[Long](n)\n        val xxxx_20 = new Array[Long](n)\n\
    \        val xxxx_21 = new Array[Long](n)\n        val xxxx_22 = new Array[Long](n)\n\
    \        val xxxx_23 = new Array[Long](n)\n        val xxxx_24 = new Array[Long](n)\n\
    \        val xxxx_25 = new Array[Long](n)\n        val xxxx_26 = new Array[Long](n)\n\
    \        val xxxx_27 = new Array[Long](n)\n        val xxxx_28 = new Array[Long](n)\n\
    \        val xxxx_29 = new Array[Long](n)\n        val xxxx_30 = new Array[Long](n)\n\
    \        val xxxx_31 = new Array[Long](n)\n        val xxxx_32 = new Array[Long](n)\n\
    \        val xxxx_33 = new Array[Long](n)\n        val xxxx_34 = new Array[Long](n)\n\
    \        val xxxx_35 = new Array[Long](n)\n        val xxxx_36 = new Array[Long\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp17rhzcd0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp17rhzcd0.scala:55:22\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m55 |\e[0m       \
    \ \e[33mval\e[0m \e[36mxxxx_36\e[0m = \e[33mnew\e[0m \e[35mArray\e[0m[\e[35mLong\e\
    [0m\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mmissing argument for parameter _length of \e[33mconstructor\e[0m \e[35mArray\e\
    [0m in \e[33mclass\e[0m \e[35mArray\e[0m: (_length: Int): Array[Long]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp17rhzcd0.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val d = new Array[Long](n + 1)\n     \
    \   var i = 0\n        while(i < n) {\n            d(i) = xs(i)\n            i\
    \ += 1\n        }\n        d(n) = 1\n        for(i = n - 1; i >= 0; i -= 1) {\n\
    \            d(i) = d(i) / xs(i)\n        }\n        d(0) = 0\n        for(i =\
    \ 1; i >= 0; i -= 1) {\n            d(i) = d(i) * xs(i)\n        }\n        return\
    \ d\n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:20:14 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e\
    [31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e\
    [31m   |\e[0m              ')' expected, but '=' found\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmptjm_7ch5.scala:20:29 ---------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^\e\
    [0m\n\e[31m   |\e[0m                             '<-' expected, but ';' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i = n - \e[31m1\e[0m; i >= \e\
    [31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                      \
    \               ^\e[0m\n\e[31m   |\e[0m                                     '<-'\
    \ expected, but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:14\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i\
    \ = \e[31m1\e[0m; i >= \e[31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e\
    [0m              ^\e[0m\n\e[31m   |\e[0m              ')' expected, but '=' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\
    \e[31m   |\e[0m                         '<-' expected, but ';' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmptjm_7ch5.scala:24:33 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i = \e[31m1\e[0m; i >= \e[31m0\e\
    [0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \    ^\e[0m\n\e[31m   |\e[0m                                 '<-' expected, but\
    \ ')' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptjm_7ch5.scala:20:21\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m(i\
    \ = n - \e[31m1\e[0m; i >= \e[31m0\e[0m; i -= \e[31m1\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m                     "
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmdyua2z.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiq_7ru40.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new Array[Long](n)\n        val\
    \ x0 = xs.head\n        val x1 = xs.tail.head\n        val x2 = xs.tail.tail.head\n\
    \        val x3 = xs.tail.tail.tail.head\n        val x4 = xs.tail.tail.tail.tail.head\n\
    \        val x5 = xs.tail.tail.tail.tail.tail.head\n        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n\
    \        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n        val x8 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x10 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x11 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw0xp99zx.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.length\n        val x0 = xs.head\n        val x1 = xs.tail.head\n\
    \        val x2 = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n\
    \        val x4 = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x19 = xs.tail.tail.tail.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))));\n\
    \    assert(derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong,\
    \ 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong, 2l.toLong, 1l.toLong,\
    \ 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong, 2l.toLong, 0l.toLong,\
    \ 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprr3qv3_6.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val x0 = xs.head\n        val x1 = xs.tail.head\n        val x2\
    \ = xs.tail.tail.head\n        val x3 = xs.tail.tail.tail.head\n        val x4\
    \ = xs.tail.tail.tail.tail.head\n        val x5 = xs.tail.tail.tail.tail.tail.head\n\
    \        val x6 = xs.tail.tail.tail.tail.tail.tail.head\n        val x7 = xs.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x8 = xs.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x9 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x10 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val x11 =\
    \ xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ x12 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x13 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x14 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x15 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x16 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x17 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val x18 = xs.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(derivative((List[Long](3l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1h85_7i7.scala:31:5\
    \ ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same\
    \ form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n\
    \    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    //\
    \ (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long]\
    \ = {\n        val n = xs.size\n        val ds = new ListBuffer[Long](n)\n   \
    \     var i = 0\n        while (i < n) {\n            val x = xs(i)\n        \
    \    val y = xs(i + 1)\n            val dx =  x * y\n            val dy = -y *\
    \ x\n            ds.push(dx)\n            ds.push(dy)\n            i += 2\n  \
    \      }\n        ds.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
    \ 4l.toLong, 12l.toLong, 20l.toLong))));\n    assert(derivative((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong, 6l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(derivative((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong, 0l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
    \ 2l.toLong, 0l.toLong, 16l.toLong))));\n    assert(derivative((List[Long](1l.toLong))).equals((List[Long]())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppc7v5_21.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mds\e[0m = \e[33mnew\e[0m\
    \ \e[35mListBuffer\e[0m[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m           \
    \                           ^\e[0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e\
    [0m \e[35mListBuffer\e[0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[Long]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794928
