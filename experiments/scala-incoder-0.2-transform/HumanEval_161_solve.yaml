name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n \
  \   // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val chars = mutable.Set[Char](s.toCharArray)\n        val reversed\
    \ = mutable.Set[Char]()\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ {\n                val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if (chars.contains(upper)) {\n                    chars.remove(upper)\n\
    \                    chars.remove(lower)\n                    chars += upper\n\
    \                    chars += lower\n                }\n                else {\n\
    \                    chars += c\n                }\n            }\n          \
    \  else {\n                chars += c\n            }\n        }\n        chars.toList.reverse.mkString",
  "        val result = new StringBuilder\n        val chars = s.toCharArray\n   \
    \     for(i <- 0 until chars.length)\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' -> chars(i)\
    \ match {\n                        case 'A' -> chars(i) match {\n            \
    \                case 'a' -> chars(i) match {\n                              \
    \  case 'A' -> chars(i) match {\n                                    case 'a'\
    \ -> chars(i) match {\n                                        case 'A' -> chars(i)\
    \ match {\n                                            case 'a' -> chars(i) match\
    \ {\n                                                case 'A' -> chars(i) match\
    \ {\n                                                    case 'a' -> chars(i)\
    \ match {\n                                                        case 'A' ->\
    \ chars(i) match {\n                                                         \
    \   case 'a' -> chars(i) match {\n                                           \
    \                     case 'A' -> chars(i) match {\n                         \
    \                                           case 'a' -> chars(i) match {\n   \
    \                                                                     case 'A'\
    \ -> chars(i) match {\n                                                      \
    \                      case \"a\" -> chars(i) match {\n                      \
    \                                                          case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                              case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \  case \"A\" -> chars(i) match {\n                                          \
    \                                                          case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                      case \"A\" -> chars(i) match {\n      \
    \                                                                            \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \              case \"a\" -> chars(i) match {\n                              \
    \                                                                            \
    \              case \"A\" -> chars(i) match {\n                              \
    \                                                                            \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                      case \"a\" -> chars(i) match {\n      \
    \                                                                            \
    \                                                      case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"a\" -> chars(i) match {\n                                                \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                                        case\
    \ \"a\" -> chars(", "        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).swapCase\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n       \
    \     val c = s.charAt(i)\n            if(c == c.toUpperCase){\n             \
    \   result.append(c.toUpperCase)\n            }else if(c == c.toLowerCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString()",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'A' || c == 'a') result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (chars.contains(s.charAt(i)))\n\
    \                chars.remove(s.charAt(i))\n            else\n               \
    \ chars.add(s.charAt(i))\n        for (i <- 0 until chars.size) {\n          \
    \  val c = chars.toList(i)\n            if (c.size == 1) {\n                result.append(c.head)\n\
    \            } else {\n                result.append(c.reverse)\n            }\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase) result.append(c.toUpperCase)\n            else result.append(c)\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val strList = s.toList\n        strList.foldLeft(\"\") { (str, c) =>\n\
    \            val isLetter = c.isLetter\n            if (isLetter) {\n        \
    \        val newChar = c.toUpperCase\n                str + newChar\n        \
    \    } else {\n                str + c\n            }\n        }", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }else if(s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n       \
    \     }else{\n                result.append(s.charAt(i))\n            }\n    \
    \    }\n        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = s.toCharArray\n        val len\
    \ = chars.length\n        val reversed = new Array[Char](len)\n        for(i <-\
    \ 0 until len) {\n            val c = chars(i)\n            if(c == 'a' || c ==\
    \ 'A') {\n                reversed(i) = c.toUpperCase\n            } else {\n\
    \                reversed(i) = c.toLowerCase\n            }\n        }\n     \
    \   new String(reversed)", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            }\n\
    \            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            \
    \    result.append((s.charAt(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = s.toCharArray\n        val reversed =\
    \ chars.reverse\n        val result = reversed.foldLeft(\"\"){ (acc, c) => if\
    \ (Character.isLetter(c)) acc + (c.toUpperCase) else acc + (c.toLowerCase) }\n\
    \        if (chars.isEmpty) result\n        else result.reverse", "        val\
    \ chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.Set[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\
    \")\n        if (noLetters.isEmpty) result else noLetters", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"A\"\
    )\n            }else if(c == 'A'){\n                result.append(\"a\")\n   \
    \         }else if(c == 'b'){\n                result.append(\"B\")\n        \
    \    }else if(c == 'B'){\n                result.append(\"b\")\n            }else\
    \ if(c == 'c'){\n                result.append(\"C\")\n            }else if(c\
    \ == 'C'){\n                result.append(\"c\")\n            }else if(c == 'd'){\n\
    \                result.append(\"D\")\n            }else if(c == 'D'){\n     \
    \           result.append(\"d\")\n            }else if(c == 'e'){\n          \
    \      result.append(\"E\")\n            }else if(c == 'E'){\n               \
    \ result.append(\"e\")\n            }else if(c == 'f'){\n                result.append(\"\
    F\")\n            }else if(c == 'F'){\n                result.append(\"f\")\n\
    \            }else if(c == 'g'){\n                result.append(\"G\")\n     \
    \       }else if(c == 'G'){\n                result.append(\"g\")\n          \
    \  }else if(c == 'h'){\n                result.append(\"H\")\n            }else\
    \ if(c == 'H'){\n                result.append(\"h\")\n            }else if(c\
    \ == 'i'){\n                result.append(\"I\")\n            }else if(c == 'I'){\n\
    \                result.append(\"i\")\n            }else if(c == 'j'){\n     \
    \           result.append(\"J\")\n            }else if(c == 'J'){\n          \
    \      result.append(\"j\")\n            }else if(c == 'k'){\n               \
    \ result.append(\"K\")\n            }else if(c == 'K'){\n                result.append(\"\
    k\")\n            }else if(c == 'l'){\n                result.append(\"L\")\n\
    \            }else if(c == 'L'){\n                result.append(\"l\")\n     \
    \       }else if(c == 'm'){\n                result.append(\"M\")\n          \
    \  }else if(c == 'M'){\n                result.append(\"m\")\n            }else\
    \ if(c == 'n'){\n                result.append(\"N\")\n            }else if(c\
    \ == 'N'){\n                result.append(\"n\")\n            }else if(c == 'o'){\n\
    \                result.append(\"O\")\n            }else if(c == 'O'){\n     \
    \           result.append(\"o\")\n            }else if(c == 'p'){\n          \
    \      result.append(\"P\")\n            }else if(c == 'P'){\n               \
    \ result.append(\"p\")\n            }else if(c == 'q'){\n                result.append(\"\
    Q\")\n            }else if(c", "        val result = new StringBuilder\n     \
    \   val chars = s.toCharArray\n        chars.foreach { c =>\n            val lower\
    \ = c.toLower\n            val upper = c.toUpper\n            if (lower == upper)\
    \ {\n                result.append(lower)\n            } else {\n            \
    \    result.append(c)\n            }\n        }\n        result.toString", " \
    \       val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else chars += s.charAt(i).toUpper\n        chars.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n      \
    \      if (c.isLetter) {\n                chars += c.toUpperCase\n           \
    \ } else {\n                chars += c\n            }\n        }\n        if (chars.isEmpty)\
    \ {\n            s.reverse\n        } else {\n            chars.reverse\n    \
    \    }", "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == c.toUpperCase){\n      \
    \          result.append(c.toUpperCase)\n            }else if(c == c.toLowerCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n     \
    \           result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        result.toString()", "        val result = new StringBuilder\n\
    \        val chars = s.toCharArray\n        var i = 0\n        while (i < chars.length)\
    \ {\n            val c = chars(i)\n            if (Character.isLetter(c)) {\n\
    \                if (Character.isUpperCase(c)) {\n                    result.append(Character.toLowerCase(c))\n\
    \                } else {\n                    result.append(Character.toUpperCase(c))\n\
    \                }\n            } else {\n                result.append(c)\n \
    \           }\n            i += 1\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for (i <- 0 until s.length)\n \
    \           if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a' + 26).toChar)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")( (s, c) => s + c.toUpperCase)", "        val strList = s.toList\n        val\
    \ reversedList = strList.map(x => if (x.isLetter) x.toUpperCase() else x.toLowerCase)\n\
    \        val result = reversedList.foldLeft(\"\")( (x, y) => x + y)\n        if\
    \ (result.isEmpty) s \n        else result", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toString)\n    \
    \        }else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n               \
    \ result.append((s.charAt(i) - 'A').toString)\n            }else{\n          \
    \      result.append(s.charAt(i))\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a'){\n                result.append(\"A\")\n            }else if(c == 'A'){\n\
    \                result.append(\"a\")\n            }else if(c == 'b'){\n     \
    \           result.append(\"B\")\n            }else if(c == 'B'){\n          \
    \      result.append(\"b\")\n            }else if(c == 'c'){\n               \
    \ result.append(\"C\")\n            }else if(c == 'C'){\n                result.append(\"\
    c\")\n            }else if(c == 'd'){\n                result.append(\"D\")\n\
    \            }else if(c == 'D'){\n                result.append(\"d\")\n     \
    \       }else if(c == 'e'){\n                result.append(\"E\")\n          \
    \  }else if(c == 'E'){\n                result.append(\"e\")\n            }else\
    \ if(c == 'f'){\n                result.append(\"F\")\n            }else if(c\
    \ == 'F'){\n                result.append(\"f\")\n            }else if(c == 'g'){\n\
    \                result.append(\"G\")\n            }else if(c == 'G'){\n     \
    \           result.append(\"g\")\n            }else if(c == 'h'){\n          \
    \      result.append(\"H\")\n            }else if(c == 'H'){\n               \
    \ result.append(\"h\")\n            }else if(c == 'i'){\n                result.append(\"\
    I\")\n            }else if(c == 'I'){\n                result.append(\"i\")\n\
    \            }else if(c == 'j'){\n                result.append(\"J\")\n     \
    \       }else if(c == 'J'){\n                result.append(\"j\")\n          \
    \  }else if(c == 'k'){\n                result.append(\"K\")\n            }else\
    \ if(c == 'K'){\n                result.append(\"k\")\n            }else if(c\
    \ == 'l'){\n                result.append(\"L\")\n            }else if(c == 'L'){\n\
    \                result.append(\"l\")\n            }else if(c == 'm'){\n     \
    \           result.append(\"M\")\n            }else if(c == 'M'){\n          \
    \      result.append(\"m\")\n            }else if(c == 'n'){\n               \
    \ result.append(\"N\")\n            }else if(c == 'N'){\n                result.append(\"\
    n\")\n            }else if(c == 'o'){\n                result.append(\"O\")\n\
    \            }else if(c == 'O'){\n                result.append(\"o\")\n     \
    \       }else if(c == 'p'){\n                result.append(\"P\")\n          \
    \  }else if(c == 'P'){\n                result.append(\"p\")\n            }else\
    \ if(c == 'q'){\n                result.append(\"Q\")\n            }else if(c",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) -\
    \ 'A').toUpper + s.charAt(i).toLower)\n            }\n            else{\n    \
    \            result.append(s.charAt(i))\n            }\n        }\n        return\
    \ result.toString", "        val result = s.toUpperCase\n        val reversed\
    \ = result.map(c => if (c.isLetter) c.toUpperCase(c) else c)\n        if (result.isEmpty)\
    \ result\n        else reversed.mkString", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            chars += c\n            }\n            if(c == 'b' || c == 'B'){\n\
    \                chars += c\n            }\n            if(c == 'c' || c == 'C'){\n\
    \                chars += c\n            }\n            if(c == 'd' || c == 'D'){\n\
    \                chars += c\n            }\n            if(c == 'e' || c == 'E'){\n\
    \                chars += c\n            }\n            if(c == 'f' || c == 'F'){\n\
    \                chars += c\n            }\n            if(c == 'g' || c == 'G'){\n\
    \                chars += c\n            }\n            if(c == 'h' || c == 'H'){\n\
    \                chars += c\n            }\n            if(c == 'i' || c == 'I'){\n\
    \                chars += c\n            }\n            if(c == 'j' || c == 'J'){\n\
    \                chars += c\n            }\n            if(c == 'k' || c == 'K'){\n\
    \                chars += c\n            }\n            if(c == 'l' || c == 'L'){\n\
    \                chars += c\n            }\n            if(c == 'm' || c == 'M'){\n\
    \                chars += c\n            }\n            if(c == 'n' || c == 'N'){\n\
    \                chars += c\n            }\n            if(c == 'o' || c == 'O'){\n\
    \                chars += c\n            }\n            if(c == 'p' || c == 'P'){\n\
    \                chars += c\n            }\n            if(c == 'q' || c == 'Q'){\n\
    \                chars += c\n            }\n            if(c == 'r' || c == 'R'){\n\
    \                chars += c\n            }\n            if(c == 's' || c == 'S'){\n\
    \                chars += c\n            }\n            if(c == 't' || c == 'T'){\n\
    \                chars += c\n            }\n            if(c == 'u' || c == 'U'){\n\
    \                chars += c\n            }\n            if(c == 'v' || c == 'V'){\n\
    \                chars += c\n            }\n            if(c == 'w' || c == 'W'){\n\
    \                chars += c\n            }\n            if(c == 'x' || c == 'X'){\n\
    \                chars += c\n            }\n            if(c == 'y' || c == 'Y'){\n\
    \                chars += c\n            }\n            ", "        val chars\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        if(chars.isEmpty) s\n        else {\n            val reversed = mutable.ArrayBuffer.empty[Char]\n\
    \            for(i <- 0 until s.length) if(chars.contains(s.charAt(i))) reversed\
    \ += s.charAt(i).toUpper\n            else reversed += s.charAt(i)\n         \
    \   reversed.toString.reverse\n        }", "        val chars = s.toCharArray\n\
    \        val len = chars.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until len) {\n            val c = chars(i)\n            if(c\
    \ == 'a' || c == 'A') {\n                result.add(\"A\" + c.toString)\n    \
    \        } else if(c == 'b' || c == 'B') {\n                result.add(\"B\" +\
    \ c.toString)\n            } else if(c == 'c' || c == 'C') {\n               \
    \ result.add(\"C\" + c.toString)\n            } else if(c == 'd' || c == 'D')\
    \ {\n                result.add(\"D\" + c.toString)\n            } else if(c ==\
    \ 'e' || c == 'E') {\n                result.add(\"E\" + c.toString)\n       \
    \     } else if(c == 'f' || c == 'F') {\n                result.add(\"F\" + c.toString)\n\
    \            } else if(c == 'g' || c == 'G') {\n                result.add(\"\
    G\" + c.toString)\n            } else if(c == 'h' || c == 'H') {\n           \
    \     result.add(\"H\" + c.toString)\n            } else if(c == 'i' || c == 'I')\
    \ {\n                result.add(\"I\" + c.toString)\n            } else if(c ==\
    \ 'j' || c == 'J') {\n                result.add(\"J\" + c.toString)\n       \
    \     } else if(c == 'k' || c == 'K') {\n                result.add(\"K\" + c.toString)\n\
    \            } else if(c == 'l' || c == 'L') {\n                result.add(\"\
    L\" + c.toString)\n            } else if(c == 'm' || c == 'M') {\n           \
    \     result.add(\"M\" + c.toString)\n            } else if(c == 'n' || c == 'N')\
    \ {\n                result.add(\"N\" + c.toString)\n            } else if(c ==\
    \ 'o' || c == 'O') {\n                result.add(\"O\" + c.toString)\n       \
    \     } else if(c == 'p' || c == 'P') {\n                result.add(\"P\" + c.toString)\n\
    \            } else if(c == 'q' || c == 'Q') {\n                result.add(\"\
    Q\" + c.toString)\n            } else if(c == 'r' || c == 'R') {\n           \
    \     result.add(\"R\" + c.toString)\n            } else if(c == 's' || c == 'S')\
    \ {\n                result.add(\"S\" + c.toString)\n            } else if(c ==\
    \ 't' || c == 'T') {\n                result.add(\"T\" + c.toString)\n       \
    \     } else if(c == 'u' || c == 'U') {\n                result.add(\"U\" + c.toString)\n\
    \            } else if(c == 'v' || c", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a'){\n                result.append(\"A\")\n            }else\
    \ if(c == 'A'){\n                result.append(\"a\")\n            }else if(c\
    \ == 'b'){\n                result.append(\"B\")\n            }else if(c == 'B'){\n\
    \                result.append(\"b\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'C'){\n          \
    \      result.append(\"c\")\n            }else if(c == 'd'){\n               \
    \ result.append(\"D\")\n            }else if(c == 'D'){\n                result.append(\"\
    d\")\n            }else if(c == 'e'){\n                result.append(\"E\")\n\
    \            }else if(c == 'E'){\n                result.append(\"e\")\n     \
    \       }else if(c == 'f'){\n                result.append(\"F\")\n          \
    \  }else if(c == 'F'){\n                result.append(\"f\")\n            }else\
    \ if(c == 'g'){\n                result.append(\"G\")\n            }else if(c\
    \ == 'G'){\n                result.append(\"g\")\n            }else if(c == 'h'){\n\
    \                result.append(\"H\")\n            }else if(c == 'H'){\n     \
    \           result.append(\"h\")\n            }else if(c == 'i'){\n          \
    \      result.append(\"I\")\n            }else if(c == 'I'){\n               \
    \ result.append(\"i\")\n            }else if(c == 'j'){\n                result.append(\"\
    J\")\n            }else if(c == 'J'){\n                result.append(\"j\")\n\
    \            }else if(c == 'k'){\n                result.append(\"K\")\n     \
    \       }else if(c == 'K'){\n                result.append(\"k\")\n          \
    \  }else if(c == 'l'){\n                result.append(\"L\")\n            }else\
    \ if(c == 'L'){\n                result.append(\"l\")\n            }else if(c\
    \ == 'm'){\n                result.append(\"M\")\n            }else if(c == 'M'){\n\
    \                result.append(\"m\")\n            }else if(c == 'n'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'N'){\n          \
    \      result.append(\"n\")\n            }else if(c == 'o'){\n               \
    \ result.append(\"O\")\n            }else if(c == 'O'){\n                result.append(\"\
    o\")\n            }else if(c == 'p'){\n                result.append(\"P\")\n\
    \            }else if(c == 'P'){\n                result.append(\"p\")\n     \
    \       }else if(c == 'q'){\n                result.append(\"Q\")\n          \
    \  }else ", "        val chars = mutable.ListBuffer[Char]()\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                chars += c.toUpperCase\n\
    \            } else {\n                chars += c\n            }\n        }\n\
    \        if (chars.isEmpty) {\n            s.reverse\n        } else {\n     \
    \       chars.reverse\n        }", "        val result = s.foldLeft(\"\"){ (result,\
    \ c) =>\n            val lower = c.toLower\n            val upper = c.toUpper\n\
    \            if (lower == upper) {\n                result + lower\n         \
    \   } else if (lower == upper) {\n                result + upper\n           \
    \ } else {\n                result + c\n            }\n        }\n        result",
  "        val strList = s.toList\n        strList.foldLeft(\"\") { (result, char)\
    \ =>\n            val charUpper = char.toUpper\n            val charLower = char.toLower\n\
    \            if (charUpper == charLower) {\n                result + charUpper\n\
    \            } else {\n                result + charLower\n            }\n   \
    \     }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) chars += c.toUpperCase\n\
    \            else chars += c.toLowerCase\n        }\n        if (chars.isEmpty)\
    \ s.reverse\n        else chars.toString.reverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i)){\n\
    \                result.add(s.charAt(i).toUpper)\n            }\n            else{\n\
    \                result.add(s.charAt(i))\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }\n        else{\n            result.reverse\n\
    \        }", "        val chars = s.toCharArray\n        val result = new mutable.StringBuilder\n\
    \        val reversed = new mutable.StringBuilder\n        val reversedChars =\
    \ new mutable.StringBuilder\n        val reversedCharsMap = new mutable.HashMap[Char,\
    \ Char]\n        chars.foreach(c => {\n            val upper = c.toUpperCase\n\
    \            val lower = c.toLowerCase\n            val isLetter = Character.isLetter(c.toInt)\n\
    \            if (isLetter) {\n                reversedCharsMap += c -> upper\n\
    \                reversedChars += upper\n                reversedCharsMap += c\
    \ -> lower\n                reversedChars += lower\n            } else {\n   \
    \             reversedChars += c\n            }\n        })\n        reversed.append(reversedChars.reverse)\n\
    \        reversed.reverse", "        val result = s.foldLeft(\"\"){ (result, c)\
    \ =>\n            val isLetter = c.isLetter\n            if (isLetter) {\n   \
    \             if (c.toLower == c.toUpper) {\n                    result + c.toUpper\n\
    \                } else {\n                    result + c.toLower\n          \
    \      }\n            } else {\n                result\n            }\n      \
    \  }\n        result", "        val str = new StringBuilder(s)\n        val chars\
    \ = str.map(_.toChar)\n        val reversed = chars.reverse\n        val result\
    \ = reversed.foldLeft(reversed.mkString){ (s, c) => if (c.isLetter) c.toUpperCase(s)\
    \ else s}\n        result", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\
    \")\n        if (noLetters.isEmpty) result else noLetters", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.toList.reverse.foldLeft(\"\")(_ + _)", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length)\n            if((s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z') || (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'))\n\
    \                result.append(s.charAt(i).toUpper)\n            else\n      \
    \          result.append(s.charAt(i))\n        return result.toString", "    \
    \    val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\
    \ chars += s(i)\n        chars.toList.reverse.foldLeft(\"\")(_ + _)", "      \
    \  val result = new StringBuilder\n        for (i <- 0 until s.length)\n     \
    \       if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n        {\n            if(s.charAt(i) >= 'a'\
    \ && s.charAt(i) <= 'z')\n            {\n                val temp = s.charAt(i).toChar\n\
    \                s.charAt(i) = s.charAt(i).toChar.toUpperCase\n              \
    \  s.charAt(i) = temp\n            }\n            else\n            {\n      \
    \          result.append((s.charAt(i)))\n            }\n        }\n        return\
    \ result.toString", "        val result = new StringBuilder\n        val chars\
    \ = s.toCharArray\n        for(i <- 0 until chars.length){\n            val c\
    \ = chars(i)\n            if(c == 'a' || c == 'A'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'b' || c == 'B'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'c' || c == 'C'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'd' || c == 'D'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'e' || c == 'E'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'f' || c == 'F'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'g' || c == 'G'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'h' || c == 'H'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'i' || c == 'I'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'j' || c == 'J'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'k' || c == 'K'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'l' || c == 'L'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'm' || c == 'M'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'n' || c == 'N'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == 'o' || c == 'O'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'p' || c == 'P'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }", "        val chars = mutable.ArrayBuffer.empty[Char]\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                chars += s.charAt(i)\n            else\n             \
    \   chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars =\
    \ mutable.Set[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.toList.sortWith(_ < _).reverse.mkString", "        val chars =\
    \ mutable.Set[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.toList.sortWith(_ < _).reverse.mkString", "        val chars =\
    \ s.toCharArray\n        val result = new mutable.ListBuffer[Char]()\n       \
    \ for(i <- 0 until chars.length){\n            val c = chars(i)\n            if(c.isLetter){\n\
    \                val lower = c.toLowerCase \n                val upper = c.toUpperCase\n\
    \                if(lower != upper){\n                    result += upper\n  \
    \              }else{\n                    result += lower\n                }\n\
    \            }else{\n                result += c\n            }\n        }\n \
    \       result.toString", "        val result = new StringBuilder\n        val\
    \ chars = mutable.Set[Char]()\n        for(i <- 0 until s.length)\n          \
    \  if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n\
    \            else\n                result += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).foreach(c => result.append(c.toUpperCase))\n        if(chars.isEmpty)\n\
    \            result.append(s)\n        else\n            result.append(s.reverse)\n\
    \        result.toString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n            else\
    \ if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).swapCase\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        val chars = s.toCharArray\n        for(i <- 0 until chars.length){\n\
    \            if(chars(i) >= 'a' && chars(i) <= 'z'){\n                chars(i)\
    \ match {\n                    case 'a' =>\n                        chars(i) match\
    \ {\n                            case 'A' =>\n                               \
    \ chars(i) match {\n                                    case 'a' =>\n        \
    \                                chars(i) match {\n                          \
    \                  case 'A' =>\n                                             \
    \   chars(i) match {\n                                                    case\
    \ 'a' =>\n                                                        chars(i) match\
    \ {\n                                                            case 'A' =>\n\
    \                                                                chars(i) match\
    \ {\n                                                                    case\
    \ 'a' =>\n                                                                   \
    \     chars(i) match {\n                                                     \
    \                       case 'A' =>\n                                        \
    \                                        chars(i) match {\n                  \
    \                                                                  case 'a' =>\n\
    \                                                                            \
    \            chars(i) match {\n                                              \
    \                                              case 'A' =>\n                 \
    \                                                                            \
    \   chars(i) match {\n                                                       \
    \                                             case 'a' =>\n                  \
    \                                                                            \
    \          chars(i) match {\n                                                \
    \                                                            case 'A' =>\n   \
    \                                                                            \
    \                                 chars(i) match {\n                         \
    \                                                                            \
    \               case 'a' =>\n                                                \
    \                                                                        chars(i)\
    \ match {\n                                                                  \
    \                                                          case 'A' =>\n     \
    \                                                                            \
    \                                               chars(i) match {\n           \
    \                                                                            \
    \                                             case 'a' =>\n                  \
    \                                                                            \
    \                                          chars(i) match {\n                \
    \                                                                            \
    \                                                case \"A\" => result.add(\"A\"\
    )\n                                                                          \
    \                                                                  case \"a\"\
    \ => result.add(\"a\")\n                                                     \
    \                                                                            \
    \           case \"A\" => result.add(\"A\")\n                                \
    \                                                                            \
    \                                case \"a\" => result.add(\"a\")\n           \
    \                                                                            \
    \                                                     case \"A\" => result.add(\"\
    A\")\n                                                                       \
    \                                                                     case \"\
    a\" => result.add(\"a\")\n                                                   \
    \                                                                            \
    \             case \"A\" => result.add(\"A\")\n                              \
    \                                                                            \
    \                                  case \"a\" => result.add(\"a\")\n         \
    \                                                                            \
    \                                                       case \"A\" => result.add(\"\
    A\")\n                                                                       \
    \                                                                     case \"\
    a\" => result.add(\"a\")\n                                                   \
    \                                                                            \
    \             case \"A\" => result.add(\"A\")\n                              \
    \                                                                            \
    \                                  case \"a\" => result.add(\"a\")\n         \
    \                                                                            \
    \                                                       case \"A\" => result.add(\"\
    A\")\n                                                                       \
    \                                                                     case \"\
    a\" => result.add(\"a\")\n                                                   \
    \                                                                            \
    \             case \"A\" => result.add(\"A\")\n                              \
    \                                                                            \
    \                                  case \"a\" => result.add(\"a\")\n         \
    \                                                                            \
    \                                                       case \"A\" => result.add(\"\
    A\")\n                                                                       \
    \                                                                     case \"\
    a\" => result.add(\"a\")\n                                                   \
    \                                                                            \
    \             case \"A\" => result.add(\"A\")\n                              \
    \                                                                            \
    \                                  case \"", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                chars\
    \ += c.toUpperCase\n            } else {\n                chars += c\n       \
    \     }\n        }\n        chars.reverse", "        val strList = s.toList\n\
    \        strList.foldLeft(\"\"){ (result, c) =>\n            val isLetter = c.toString.isLetter\n\
    \            if (isLetter) {\n                val newChar = c.toString.toUpperCase\n\
    \                result += newChar\n            } else {\n                result\
    \ += c\n            }\n        }\n        result", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase || c == c.toLowerCase ){\n                result.append(c.toUpperCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i))\n        result.reverse",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = mutable.ListBuffer[Char]()\n  \
    \      for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                chars += s.charAt(i)\n            }\n            else\
    \ if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).toUpper\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.reverse.foldLeft(\"\"){\n            case (acc, c)\
    \ => acc + (if (c.isLetter) c.toUpperCase() else c.toLowerCase)\n        }", " \
    \       val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) != '#')\n    \
    \            chars += s.charAt(i)\n        for(i <- 0 until s.length)\n      \
    \      if(chars.contains(s.charAt(i)))\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toUpperCase)\n            }\n            else if(s.charAt(i) >= 'A' &&\
    \ s.charAt(i) <= 'Z'){\n                result.append((s.charAt(i) - 'A').toUpperCase)\n\
    \            }\n            else{\n                result.append(s.charAt(i))\n\
    \            }\n        }\n        result.toString", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i) -\
    \ 'a').toUpper + s.substring(i, i + 1))\n            else\n                result.append(s.charAt(i))\n\
    \        result.reverse", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.add(\"A\")\n        \
    \    }else if(c == 'b' || c == 'B'){\n                result.add(\"B\")\n    \
    \        }else if(c == 'c' || c == 'C'){\n                result.add(\"C\")\n\
    \            }else if(c == 'd' || c == 'D'){\n                result.add(\"D\"\
    )\n            }else if(c == 'e' || c == 'E'){\n                result.add(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.add(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.add(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.add(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.add(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.add(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.add(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.add(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.add(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.add(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.add(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.add(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.add(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.add(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.add(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.add(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.add(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.add(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.add(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.add(\"\
    X\")\n            }else if(c", "        val result = s.foldLeft(\"\")( (acc, c)\
    \ => {\n            if (c.isLetter) c.toUpperCase() else c.toLowerCase()\n   \
    \     })\n        if (result.isEmpty) s.reverse\n        else result", "     \
    \   val chars = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n\
    \        var i = 0\n        while (i < chars.length) {\n            val c = chars(i)\n\
    \            if (c.isLetter) {\n                val upper = c.toUpperCase\n  \
    \              val lower = c.toLowerCase\n                if (chars(i) != upper)\
    \ {\n                    result += upper\n                    i += 1\n       \
    \         } else if (chars(i) != lower) {\n                    result += lower\n\
    \                    i += 1\n                } else {\n                    i +=\
    \ 1\n                }\n            } else {\n                result += c\n  \
    \              i += 1\n            }\n        }\n        result.toString", " \
    \       val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        result.reverse", "    \
    \    val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s(i)\n        chars.reverse", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n       \
    \     chars += c\n        }\n        for (c <- chars) {\n            if (chars.contains(c.toUpperCase))\
    \ {\n                result.append(c.toUpperCase)\n            } else {\n    \
    \            result.append(c)\n            }\n        }\n        result.toString()",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \          if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        result.reverse", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                result.append(c.toUpperCase)\n          \
    \  }else if(c == 'b' || c == 'B'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase) result.append(c.toUpperCase)\n            else result.append(c)\n\
    \        }\n        if(result.length == 0) result.append(s)\n        result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val chars = mutable.Set[Char]()\n \
    \       for(i <- 0 until s.length){\n            if(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase || chars.contains(s.charAt(i))){\n                chars\
    \ += s.charAt(i)\n            }\n        }\n        if(chars.isEmpty){\n     \
    \       return s\n        }\n        chars.toList.sortWith(_ < _).reverse.mkString.reverse",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n\
    \        {\n            val c = s.charAt(i)\n            if(c == 'a' || c == 'A')\n\
    \            {\n                result.append(c.toUpperCase)\n            }\n\
    \            else\n            {\n                result.append(c)\n         \
    \   }\n        }\n        return result.toString", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c.isLetter){\n                val upper = c.toUpperCase\n          \
    \      val lower = c.toLowerCase\n                if(upper.isLetter && lower.isLetter){\n\
    \                    result.append((upper.toLowerCase + lower.toLowerCase))\n\
    \                }else if(upper.isLetter && !lower.isLetter){\n              \
    \      result.append((upper.toLowerCase + c.toLowerCase))\n                }else\
    \ if(lower.isLetter && !upper.isLetter){\n                    result.append((c.toLowerCase\
    \ + upper.toLowerCase))\n                }else{\n                    result.append((c.toLowerCase\
    \ + upper.toLowerCase + c.toLowerCase))\n                }\n            }else{\n\
    \                result.append((c))\n            }\n        }\n        if(result.isEmpty){\n\
    \            s.reverse\n        }else{\n            result.toString\n        }",
  "        val chars = s.toCharArray\n        val reversed = chars.reverse\n     \
    \   val result = reversed.foldLeft(reversed.mkString) { (acc, c) =>\n        \
    \    if (c.isLetter) acc.reverse\n            else acc\n        }\n        result",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c.isLetter){\n               \
    \ val lower = c.toLowerCase\n                val upper = c.toUpperCase\n     \
    \           val lower = if (lower == upper) lower else upper\n               \
    \ val upper = if (upper == lower) upper else lower\n                result.append(lower)\n\
    \                result.append(upper)\n            }\n            else{\n    \
    \            result.append(c)\n            }\n        }\n        result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c.isLetter){\n               \
    \ val upper = c.toUpperCase\n                val lower = c.toLowerCase\n     \
    \           if(upper != lower){\n                    result.append(upper)\n  \
    \              }\n                else{\n                    result.append(lower)\n\
    \                }\n            }\n            else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val chars\
    \ = s.toCharArray\n        val result = new mutable.StringBuilder\n        for(i\
    \ <- 0 until chars.length){\n            val c = chars(i)\n            if(c ==\
    \ 'a') result.append(\"B\")\n            else if(c == 'b') result.append(\"a\"\
    )\n            else if(c == 'c') result.append(\"d\")\n            else if(c ==\
    \ 'd') result.append(\"c\")\n            else result.append(c)\n        }\n  \
    \      result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c ==\
    \ 'a' || c == 'A'){\n                result.append(c.toUpperCase)\n          \
    \  }else if(c == 'b' || c == 'B'){\n                result.append(c.toLowerCase)\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i)){\n\
    \                result.append((s.charAt(i).toUpper).toLowerCase)\n          \
    \  }\n            else{\n                result.append(s.charAt(i))\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder(s.length)\n        for(i <- 0 until s.length){\n            val\
    \ c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n                result.setCharAt(i,\
    \ c.toUpperCase)\n            }\n            else{\n                result.setCharAt(i,\
    \ c.toLowerCase)\n            }\n        }\n        return result.toString", " \
    \       val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == '@' || c == '#'){\n                chars += c\n            }else{\n\
    \                chars += c.toUpperCase\n            }\n        }\n        chars.foreach(c\
    \ => result.append(c.toUpperCase))\n        if(chars.size == 0){\n           \
    \ result.append(s)\n        }else{\n            chars.foreach(c => result.append(c.toLowerCase))\n\
    \        }\n        return result.toString", "        val result = new mutable.StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            chars += s.charAt(i)\n        }\n       \
    \ chars.toList.reverse.foldLeft(\"\"){ (result, c) =>\n            if(c.isLetter)\
    \ c.toUpperCase\n            else c.toLowerCase\n        }", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length)\n        \
    \    if(i == 0 || s.charAt(i) != s.charAt(i - 1))\n                result.append(s.charAt(i))\n\
    \            else\n                result.append(s.charAt(i).toUpper)\n      \
    \  result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            val c = s.charAt(i)\n            if(c == 'a'\
    \ || c == 'A'){\n                result.append(s.toUpperCase)\n            }else\
    \ if(c == 'b' || c == 'B'){\n                result.append(s.toLowerCase)\n  \
    \          }else{\n                result.append(c)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length)\n        {\n            val c = s.charAt(i)\n\
    \            if(c == 'a' || c == 'A')\n            {\n                result.append((s.charAt(i).toUpper))\n\
    \            }\n            else if(c == 'b' || c == 'B')\n            {\n   \
    \             result.append((s.charAt(i).toLower))\n            }\n          \
    \  else if(c == '#' || c == '@')\n            {\n                result.append((s.charAt(i).toUpper))\n\
    \            }\n            else if(c == '@' || c == '#')\n            {\n   \
    \             result.append((s.charAt(i).toLower))\n            }\n          \
    \  else\n            {\n                result.append(c)\n            }\n    \
    \    }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(i == 0 || s.charAt(i) != s.charAt(i\
    \ - 1))\n                result.append(s.charAt(i))\n            else\n      \
    \          result.append(s.charAt(i).toUpper)\n        result.toString", "   \
    \     val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val chars\
    \ = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until s.length) chars\
    \ += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString", "  \
    \      val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  result.append((c.toUpperCase))\n            }else{\n                result.append((c.toLowerCase))\n\
    \            }\n        }\n        result.toString()", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i).toLowerCase !=\
    \ s.charAt(i).toUpperCase && chars.contains(s.charAt(i)))\n                chars.remove(s.charAt(i))\n\
    \            else\n                chars.add(s.charAt(i))\n        chars.toList.mkString(\"\
    \")", "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length) chars += s.charAt(i)\n        chars.toList.reverse.mkString", "  \
    \      val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i).toLower){\n\
    \                result.append((s.charAt(i).toUpper).reverse)\n            }else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse", "        val strList\
    \ = s.toList\n        val strLen = strList.length\n        val result = new mutable.ListBuffer[String]()\n\
    \        val charMap = mutable.Map[Char, Int]()\n        for (i <- 0 until strLen)\
    \ {\n            val c = strList(i)\n            charMap.getOrElse(c, 0) += 1\n\
    \        }\n        for (c <- charMap) {\n            val count = c._2 // count\
    \ of char\n            val index = c._1 // index of char\n            val len\
    \ = strLen - index\n            if (count > 1) {\n                val newChar\
    \ = if (len == 1) strList(strLen - 1) else strList(index).reverse\n          \
    \      result.append((newChar + strList(index)))\n            } else {\n     \
    \           result.append((c._1))\n            }\n        }\n        result.toString",
  "        val result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.setCharAt(i, c.toUpperCase)\n            }\n            else{\n\
    \                result.setCharAt(i, c.toLowerCase)\n            }\n        }\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = mutable.Set[Char]()\n        for (c <- s) {\n            if\
    \ (chars.contains(c)) {\n                chars.update(c)\n            } else {\n\
    \                chars += c\n            }\n        }\n        if (chars.isEmpty)\
    \ {\n            result.append(s)\n        } else {\n            chars.foreach\
    \ { c =>\n                val lower = c.toLower\n                val upper = c.toUpper\n\
    \                if (lower == upper) {\n                    result.append(upper)\n\
    \                } else {\n                    result.append(lower)\n        \
    \        }\n            }\n        }\n        result.toString", "        val result\
    \ = new mutable.StringBuilder\n        for(i <- 0 until s.length)\n          \
    \  result += (if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') s.charAt(i).toUpper\
    \ else s.charAt(i).toLower)\n        result.reverse", "        val result = s.toUpperCase\n\
    \        val reversed = result.reverse\n        val letters = result.filter(_\
    \ >= 'a' && _ <= 'z')\n        if (letters.isEmpty) {\n            reversed\n\
    \        } else {\n            val newLetters = letters.map(_ - 'a' + 'A')\n \
    \           val newReversed = newLetters.reverse\n            newReversed + reversed\n\
    \        }", "        val result = new StringBuilder\n        val chars = s.toCharArray\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c == 'a') result.append(c.toUpperCase)\n            else if(c == 'A')\
    \ result.append(c.toLowerCase)\n            else result.append(c)\n        }\n\
    \        result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n         \
    \   {\n                result.append((s.charAt(i) - 'a').toString)\n         \
    \   }\n            else\n            {\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.Set[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _)\n            .map(c => if (c.isLetter) c.toUpperCase() else c.toLowerCase)\n\
    \            .map(c => if (chars.contains(c)) c.toUpperCase(c) else c)\n     \
    \       .toList\n            .mkString(\"\")", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append((s.toUpperCase))\n\
    \            }else if(c == 'b' || c == 'B'){\n                result.append((s.toLowerCase))\n\
    \            }else if(c == '#' || c == '@'){\n                result.append((s.toUpperCase))\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append((s.toLowerCase))\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString()", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n                result.", " \
    \       val result = new StringBuilder\n        val chars = s.toCharArray\n  \
    \      val len = chars.length\n        val reversed = chars.reverse\n        val\
    \ isLetter = chars.map(_.toString.toUpperCase).contains(_)\n        val isNotLetter\
    \ = chars.map(_.toString.toLowerCase).contains(_)\n        val isNotLetterOrDigit\
    \ = chars.map(_.toString.toUpperCase).contains(_) || chars.map(_.toString.toLowerCase).contains(_)\n\
    \        val isNotLetterOrDigitOrSpace = chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.map(_.toString.toLowerCase).contains(_) || chars.map(_.toString.toUpperCase).contains(_)\
    \ || chars.", "        val chars = mutable.HashSet[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i).toLowerCase != s.charAt(i).toUpperCase\
    \ && !chars.contains(s.charAt(i)))\n                chars += s.charAt(i)\n   \
    \         else\n                s = s.replaceFirst(s.charAt(i), s.charAt(i).toUpperCase\
    \ + s.charAt(i).toLowerCase)\n        chars.toList.mkString", "        val chars\
    \ = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                chars += s.charAt(i)\n      \
    \      else\n                chars += s.charAt(i).toUpper\n\n        chars.toList.map(c\
    \ => if(chars.contains(c)) c.toUpperCase else c.toLowerCase).mkString", "    \
    \    val result = new StringBuilder\n        for(i <- 0 until s.length){\n   \
    \         val c = s.charAt(i)\n            if(c.isLetter) result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        result.toString", "   \
    \     val result = new StringBuilder\n        for (i <- 0 until s.length)\n  \
    \          if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        val chars\
    \ = s.toCharArray\n        for(i <- 0 until chars.length){\n            val c\
    \ = chars(i)\n            if(c == 'a' || c == 'A'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else if(c == 'b' || c == 'B'){\n    \
    \            result.append((chars(i).toLowerCase + chars(i).toUpperCase))\n  \
    \          }else if(c == '#' || c == '@'){\n                result.append((chars(i).toUpperCase\
    \ + chars(i).toLowerCase))\n            }else{\n                result.append(c)\n\
    \            }\n        }\n        return result.toString", "        val result\
    \ = s.toUpperCase\n        val chars = s.toCharArray\n        val reversed = new\
    \ mutable.ListBuffer[String]()\n        chars.foreach { c =>\n            val\
    \ index = chars.indexOf(c)\n            if (index >= 0) {\n                val\
    \ c = chars(index)\n                val index = chars.indexOf(c)\n           \
    \     if (index >= 0) {\n                    val c = chars(index)\n          \
    \          val index = chars.indexOf(c)\n                    if (index >= 0) {\n\
    \                        val c = chars(index)\n                        val index\
    \ = chars.indexOf(c)\n                        if (index >= 0) {\n            \
    \                val c = chars(index)\n                            val index =\
    \ chars.indexOf(c)\n                            if (index >= 0) {\n          \
    \                      val c = chars(index)\n                                val\
    \ index = chars.indexOf(c)\n                                if (index >= 0) {\n\
    \                                    val c = chars(index)\n                  \
    \                  val index = chars.indexOf(c)\n                            \
    \        if (index >= 0) {\n                                        val c = chars(index)\n\
    \                                        val index = chars.indexOf(c)\n      \
    \                                  if (index >= 0) {\n                       \
    \                     val c = chars(index)\n                                 \
    \           val index = chars.indexOf(c)\n                                   \
    \         if (index >= 0) {\n                                                val\
    \ c = chars(index)\n                                                val index\
    \ = chars.indexOf(c)\n                                                if (index\
    \ >= 0) {\n                                                    val c = chars(index)\n\
    \                                                    val index = chars.indexOf(c)\n\
    \                                                    if (index >= 0) {\n     \
    \                                                   val c = chars(index)\n   \
    \                                                     val index = chars.indexOf(c)\n\
    \                                                        if (index >= 0) {\n \
    \                                                           val c = chars(index)\n\
    \                                                            val index = chars.indexOf(c)\n\
    \                                                            if (index >= 0) {\n\
    \                                                                val c = chars(index)\n\
    \                                                                val index = chars.indexOf(c)\n\
    \                                                                if (index >=\
    \ 0) {\n                                                                    val\
    \ c = chars(index)\n                                                         \
    \           val index = chars.indexOf(c)\n                                   \
    \                                 if (index >= 0) {\n                        \
    \                                                val c = chars(index)\n      \
    \                                                                  val index =\
    \ chars.indexOf(c)\n                                                         \
    \               if (index >= 0) {\n                                          \
    \                                  val c = chars(index)\n                    \
    \                                                        val index = chars.indexOf(c)\n\
    \                                                                            if\
    \ (index >= 0) {\n                                                           \
    \                     val c = chars(index)\n                                 \
    \                                               val index = chars.indexOf(c)\n\
    \                                                                            \
    \    if (index >= 0) {\n                                                     \
    \                               val c = chars(index)\n                       \
    \                                                             val index = chars.indexOf(c)\n\
    \                                                                            \
    \        if (index >= 0) {\n                                                 \
    \                                       val c = chars(index)\n               \
    \                                                                         val\
    \ index = chars.indexOf(c)\n                                                 \
    \                                       if (index >= 0) {\n                  \
    \                                                                          val\
    \ c = chars(index)\n                                                         \
    \                                   val index = chars.indexOf(c)\n           \
    \                                                                            \
    \     if (index >= 0) {\n                                                    \
    \                                            val c = chars(index)\n          \
    \                                                                            \
    \          val index = chars.indexOf(c)\n                                    \
    \                                                            if (index >= 0) {\n\
    \                                                                            \
    \                        val ", "        val result = new StringBuilder\n    \
    \    for(i <- 0 until s.length){\n            val c = s.charAt(i)\n          \
    \  if(c.isLetter){\n                val lower = c.toLower\n                val\
    \ upper = c.toUpper\n                val reversed = if (lower < upper) lower +\
    \ upper else upper + lower\n                result.append(reversed)\n        \
    \    }\n            else{\n                result.append(c)\n            }\n \
    \       }\n        result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                result.append((s.charAt(i) - 'a').toString)\n    \
    \        }\n            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n \
    \               result.append((s.charAt(i) - 'A').toString)\n            }\n \
    \           else{\n                result.append(s.charAt(i))\n            }\n\
    \        }\n        return result.toString", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i)){\n\
    \                result.add(s.charAt(i).toUpper)\n            }else{\n       \
    \         result.add(s.charAt(i))\n            }\n        }\n        if(result.isEmpty){\n\
    \            return s\n        }else{\n            return result.reverse\n   \
    \     }", "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0\
    \ until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                chars += s.charAt(i)\n            else\n                chars\
    \ += s.charAt(i).toUpper\n        chars.reverse", "        val result = new StringBuilder\n\
    \        val chars = mutable.HashSet[Char]()\n        for (c <- s) {\n       \
    \     if (chars.contains(c)) {\n                chars.update(c)\n            }\
    \ else {\n                chars.add(c)\n            }\n        }\n        chars.foreach\
    \ { c =>\n            if (c.isLetter) {\n                val upper = c.toUpperCase\n\
    \                val lower = c.toLowerCase\n                if (chars.contains(upper))\
    \ {\n                    result.append((chars.find(_ == upper).getOrElse(upper)\
    \ + c.toUpperCase))\n                } else {\n                    result.append((chars.find(_\
    \ == lower).getOrElse(lower) + c.toLowerCase))\n                }\n          \
    \  } else {\n                result.append(c)\n            }\n        }\n    \
    \    result.toString", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.reverse.foldLeft(\"\
    \")(_ + _.toUpperCase)", "        val result = new StringBuilder(s.length)\n \
    \       for(i <- 0 until s.length){\n            val c = s.charAt(i)\n       \
    \     if(c == 'a' || c == 'A'){\n                result.append((c to 'Z'))\n \
    \           }\n            else if(c == 'b' || c == 'B'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'c' || c == 'C'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 'd' || c == 'D'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 'e' || c == 'E'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'f' || c == 'F'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 'g' || c == 'G'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 'h' || c == 'H'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'i' || c == 'I'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 'j' || c == 'J'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 'k' || c == 'K'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'l' || c == 'L'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 'm' || c == 'M'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 'n' || c == 'N'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'o' || c == 'O'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 'p' || c == 'P'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 'q' || c == 'Q'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'r' || c == 'R'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ 's' || c == 'S'){\n                result.append((c to 'Z'))\n            }\n\
    \            else if(c == 't' || c == 'T'){\n                result.append((c\
    \ to 'Z'))\n            }\n            else if(c == 'u' || c == 'U'){\n      \
    \          result.append((c to 'Z'))\n            }\n            else if(c ==\
    \ '", "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c.isLetter){\n              \
    \  val l = c.toLower\n                val u = c.toUpper\n                result.append((if(u\
    \ == l) u else l))\n            }\n            else{\n                result.append(c)\n\
    \            }\n        }\n        result.toString", "        val chars = s.toList\n\
    \        val result = chars.foldLeft(\"\"){ (result, c) =>\n            val isLetter\
    \ = c.isLetter\n            val isUpper = c.toUpperCase == c\n            val\
    \ isLower = c.toLowerCase == c\n            if (isLetter) {\n                if\
    \ (isUpper) c.toUpperCase\n                else c.toLowerCase\n            } else\
    \ if (isLower) {\n                if (isUpper) c.toLowerCase\n               \
    \ else c.toUpperCase\n            } else {\n                c\n            }\n\
    \        }\n        result", "        val chars = s.toCharArray\n        val reversed\
    \ = new mutable.ListBuffer[Char]()\n        for(i <- 0 until chars.length){\n\
    \            val c = chars(i)\n            if(c == 'a' || c == 'A'){\n       \
    \         reversed.push(c)\n            }else if(c == 'b' || c == 'B'){\n    \
    \            reversed.push(c)\n            }else if(c == 'c' || c == 'C'){\n \
    \               reversed.push(c)\n            }else if(c == 'd' || c == 'D'){\n\
    \                reversed.push(c)\n            }else if(c == 'e' || c == 'E'){\n\
    \                reversed.push(c)\n            }else if(c == 'f' || c == 'F'){\n\
    \                reversed.push(c)\n            }else if(c == 'g' || c == 'G'){\n\
    \                reversed.push(c)\n            }else if(c == 'h' || c == 'H'){\n\
    \                reversed.push(c)\n            }else if(c == 'i' || c == 'I'){\n\
    \                reversed.push(c)\n            }else if(c == 'j' || c == 'J'){\n\
    \                reversed.push(c)\n            }else if(c == 'k' || c == 'K'){\n\
    \                reversed.push(c)\n            }else if(c == 'l' || c == 'L'){\n\
    \                reversed.push(c)\n            }else if(c == 'm' || c == 'M'){\n\
    \                reversed.push(c)\n            }else if(c == 'n' || c == 'N'){\n\
    \                reversed.push(c)\n            }else if(c == 'o' || c == 'O'){\n\
    \                reversed.push(c)\n            }else if(c == 'p' || c == 'P'){\n\
    \                reversed.push(c)\n            }else if(c == 'q' || c == 'Q'){\n\
    \                reversed.push(c)\n            }else if(c == 'r' || c == 'R'){\n\
    \                reversed.push(c)\n            }else if(c == 's' || c == 'S'){\n\
    \                reversed.push(c)\n            }else if(c == 't' || c == 'T'){\n\
    \                reversed.push(c)\n            }else if(c == 'u' || c == 'U'){\n\
    \                reversed.push(c)\n            }else if(c == 'v' || c == 'V'){\n\
    \                reversed.push(c)\n            }else if(c == 'w' || c == 'W'){\n\
    \                reversed.push(c)\n            }else if(c == 'x' || c == 'X'){\n\
    \                reversed.push(c)\n            }else if(c == 'y' || c == 'Y'){\n\
    \                reversed.push(c)", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      val l = c.toLower\n            val u = c.toUpper\n            if(l.isLetter\
    \ && u.isLetter){\n                result.append((u - l).toChar)\n           \
    \ }\n            else{\n                result.append(c)\n            }\n    \
    \    }\n        return result.toString", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until s.length){\n            chars += s.charAt(i)\n     \
    \   }\n        chars.toList.reverse.foldLeft(\"\"){ (res, c) => res + c.toUpperCase()\
    \ }", "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      val chars = s.toCharArray\n        for(i <- 0 until chars.length){\n  \
    \          if(chars(i) >= 'a' && chars(i) <= 'z'){\n                chars(i) match\
    \ {\n                    case 'a' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - 'a'.toString.toInt)\n                    case 'z' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - 'a'.toString.toInt + 26)\n                    case 'A' -> chars(i) swapWith\
    \ chars(chars(i).toString.toInt - 'A'.toString.toInt)\n                    case\
    \ 'Z' -> chars(i) swapWith chars(chars(i).toString.toInt - 'A'.toString.toInt\
    \ + 26)\n                    case '0' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '0'.toString.toInt)\n                    case '9' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '0'.toString.toInt + 9)\n                    case '@' -> chars(i) swapWith\
    \ chars(chars(i).toString.toInt - '@'.toString.toInt)\n                    case\
    \ 'C' -> chars(i) swapWith chars(chars(i).toString.toInt - '@'.toString.toInt\
    \ + 26)\n                    case '_' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '_'.toString.toInt)\n                    case '-' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '_'.toString.toInt + 9)\n                    case '$' -> chars(i) swapWith\
    \ chars(chars(i).toString.toInt - '$'.toString.toInt)\n                    case\
    \ '#' -> chars(i) swapWith chars(chars(i).toString.toInt - '$'.toString.toInt\
    \ + 26)\n                    case '%' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '%'.toString.toInt)\n                    case '&' -> chars(i) swapWith chars(chars(i).toString.toInt\
    \ - '%'.toString.toInt + 26)\n                    case '*' -> chars(i) swapWith\
    \ chars(chars(i).toString.toInt - '%'.toString.toInt + 26)\n                 \
    \   case '!' -> chars(i) swapWith chars(chars(i).toString.toInt - ", "       \
    \ val result = new mutable.StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append((s.charAt(i).toUpperCase + s.charAt(i).toLowerCase))\n\
    \            }\n            else{\n                result.append(c)\n        \
    \    }\n        }\n        return result.toString", "        val result = new\
    \ StringBuilder(s.length)\n        for(i <- 0 until s.length)\n            if(s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z')\n                result.append(s.charAt(i).toUpper)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (c <- s) {\n      \
    \      if (c.isLetter) {\n                chars += c.toUpperCase\n           \
    \ } else {\n                chars += c\n            }\n        }\n        chars.reverse",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = s.toCharArray\n        val reversed = new mutable.ListBuffer[Char]()\n\
    \        for(i <- 0 until chars.length){\n            val c = chars(i)\n     \
    \       if(c == 'a' || c == 'A'){\n                reversed.add(c)\n         \
    \   }\n            else if(c == 'b' || c == 'B'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'c' || c == 'C'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'd' || c == 'D'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'e' || c == 'E'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'f' || c == 'F'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'g' || c == 'G'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'h' || c == 'H'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'i' || c == 'I'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'j' || c == 'J'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'k' || c == 'K'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'l' || c == 'L'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'm' || c == 'M'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'n' || c == 'N'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'o' || c == 'O'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'p' || c == 'P'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'q' || c == 'Q'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'r' || c == 'R'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 's' || c == 'S'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 't' || c == 'T'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'u' || c == 'U'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'v' || c == 'V'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'w' || c == 'W'){\n                reversed.add(c)\n\
    \            }\n            else if(c == 'x' || c == 'X'){\n                ",
  "        val result = new mutable.ListBuffer[String]()\n        for(i <- 0 until\
    \ s.length){\n            val c = s.charAt(i)\n            if(c.isLetter){\n \
    \               val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if(upper == lower){\n                    result.append(upper)\n\
    \                }else{\n                    result.append(lower)\n          \
    \      }\n            }else{\n                result.append(c)\n            }\n\
    \        }\n        if(result.isEmpty){\n            result.append(s)\n      \
    \  }\n        result.toString()", "        val result = new StringBuilder\n  \
    \      val map = mutable.Map[Char, String]()\n        for (i <- 0 until s.length)\n\
    \            map(i.toChar, s.charAt(i))\n        for (i <- map.keySet)\n     \
    \       if (map.get(i).isLetter)\n                map.get(i) = map.get(i).toUpperCase\n\
    \            else\n                map.get(i) = map.get(i).toLowerCase\n     \
    \   for (i <- map.keySet)\n            result.append(map.get(i))\n        result.toString",
  "        val chars = s.toList\n        val result = chars.foldLeft(\"\")( (acc,\
    \ c) => \n            if (c.isLetter) c.toUpperCase() + acc.reverse\n        \
    \    else c + acc)\n        if (result.isEmpty) s.reverse\n        else result",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val str = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            val c = s.charAt(i)\n            if(c == 'a'){\n\
    \                str.append(c.toUpperCase)\n            }else if(c == 'A'){\n\
    \                str.append(c.toLowerCase)\n            }else{\n             \
    \   str.append(c)\n            }\n        }\n        str.toString", "        val\
    \ result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n  \
    \      for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      result += s.charAt(i)\n        chars.toSeq.reverse.foreach(c => result\
    \ += c.toUpperCase)\n        if(chars.isEmpty)\n            s.reverse\n      \
    \  else\n            result", "        val chars = s.toCharArray\n        val\
    \ charsReversed = chars.reverse\n        val charsReversedString = charsReversed.mkString.reverse\n\
    \        charsReversedString match {\n            case \"\" => s\n           \
    \ case c => if (c.isLetter) c.toUpperCase() else c.toLowerCase()\n        }",
  "        val result = s.toUpperCase\n        val chars = result.toCharArray\n  \
    \      val reversed = chars.reverse\n        val result = reversed.mkString.toUpperCase\n\
    \        return result", "        val chars = s.toCharArray\n        val reversed\
    \ = chars.reverse\n        val result = reversed.foldLeft(\"\")( (acc, c) => if\
    \ (c.isLetter) acc + c.toUpper else acc + c)\n        if (result.isEmpty) s \n\
    \        else result", "        val chars = s.toCharArray\n        val reversed\
    \ = chars.reverse\n        val result = reversed.foldLeft(reversed.mkString){\n\
    \            case (acc, c) => if (acc.contains(c.toUpperCase)) acc.replaceAll(c.toUpperCase,\
    \ c.toLowerCase) else acc \n        }\n        result", "        val result =\
    \ new StringBuilder\n        for(i <- 0 until s.length)\n        {\n         \
    \   val c = s.charAt(i)\n            if(c == 'a' || c == 'A')\n            {\n\
    \                result.append(c.toUpperCase)\n            }\n            else\
    \ if(c == 'b' || c == 'B')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'c' || c == 'C')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'd' || c == 'D')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'e' || c == 'E')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'f' || c == 'F')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'g' || c == 'G')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'h' || c == 'H')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'i' || c == 'I')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'j' || c == 'J')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'k' || c == 'K')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'l' || c == 'L')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'm' || c == 'M')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'n' || c == 'N')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'o' || c == 'O')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'p' || c == 'P')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'q' || c == 'Q')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'r' || c == 'R')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 's' || c == 'S')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 't' || c == 'T')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'u' || c == 'U')\n            {\n   \
    \             result.append(c.toUpperCase)\n            }\n            else if(c\
    \ == 'v' || c == 'V')\n            {\n                result.append(c.toLowerCase)\n\
    \            }\n            else if(c == 'w' || c == 'W')\n            {\n   \
    \             result", "        val result = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i)){\n\
    \                result.append((s.charAt(i).toUpper).toLower)\n            }\n\
    \            else{\n                result.append((s.charAt(i).toUpper))\n   \
    \         }\n        }\n        result.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toUpper\n        chars.reverse", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n       \
    \     if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }\n            else if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n    \
    \        }\n            else{\n                result.append(s.charAt(i))\n  \
    \          }\n        }\n        return result.toString", "        val chars =\
    \ mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length) chars += s.charAt(i)\n\
    \        chars.toList.reverse.foldLeft(\"\")( (s, c) => s + c.toUpperCase)", " \
    \       val result = new StringBuilder\n        for(i <- 0 until s.length){\n\
    \            val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n    \
    \            result.append(c.toUpperCase)\n            }else if(c == 'b' || c\
    \ == 'B'){\n                result.append(c.toLowerCase)\n            }else{\n\
    \                result.append(c)\n            }\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'a' || c == 'A'){\n     \
    \           result.append(c.toUpperCase)\n            }else if(c == 'b' || c ==\
    \ 'B'){\n                result.append(c.toLowerCase)\n            }else{\n  \
    \              result.append(c)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.reverse.foldLeft(\"\"){ (s, c)\
    \ => s + c.toUpperCase() }", "        val result = new StringBuilder\n       \
    \ for(i <- 0 until s.length){\n            val c = s.charAt(i)\n            if(c\
    \ == 'a' || c == 'A'){\n                result.append((s.toUpperCase))\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append((s.toLowerCase))\n\
    \            }else{\n                result.append(c)\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length)\n  \
    \      {\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n         \
    \   {\n                result.append((s.charAt(i) - 'a').toString)\n         \
    \   }\n            else\n            {\n                result.append((s.charAt(i)\
    \ - 'A').toString)\n            }\n        }\n        return result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length){\n\
    \            chars += s.charAt(i)\n        }\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i).toUpper == s.charAt(i)){\n\
    \                result.append(s.charAt(i).toUpper)\n            }\n         \
    \   else{\n                result.append(s.charAt(i))\n            }\n       \
    \ }\n        return result.toString", "        val result = new StringBuilder(s.length)\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == 'a' || c == 'A'){\n                result.append(\"A\")\n     \
    \       }else if(c == 'b' || c == 'B'){\n                result.append(\"B\")\n\
    \            }else if(c == 'c' || c == 'C'){\n                result.append(\"\
    C\")\n            }else if(c == 'd' || c == 'D'){\n                result.append(\"\
    D\")\n            }else if(c == 'e' || c == 'E'){\n                result.append(\"\
    E\")\n            }else if(c == 'f' || c == 'F'){\n                result.append(\"\
    F\")\n            }else if(c == 'g' || c == 'G'){\n                result.append(\"\
    G\")\n            }else if(c == 'h' || c == 'H'){\n                result.append(\"\
    H\")\n            }else if(c == 'i' || c == 'I'){\n                result.append(\"\
    I\")\n            }else if(c == 'j' || c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k' || c == 'K'){\n                result.append(\"\
    K\")\n            }else if(c == 'l' || c == 'L'){\n                result.append(\"\
    L\")\n            }else if(c == 'm' || c == 'M'){\n                result.append(\"\
    M\")\n            }else if(c == 'n' || c == 'N'){\n                result.append(\"\
    N\")\n            }else if(c == 'o' || c == 'O'){\n                result.append(\"\
    O\")\n            }else if(c == 'p' || c == 'P'){\n                result.append(\"\
    P\")\n            }else if(c == 'q' || c == 'Q'){\n                result.append(\"\
    Q\")\n            }else if(c == 'r' || c == 'R'){\n                result.append(\"\
    R\")\n            }else if(c == 's' || c == 'S'){\n                result.append(\"\
    S\")\n            }else if(c == 't' || c == 'T'){\n                result.append(\"\
    T\")\n            }else if(c == 'u' || c == 'U'){\n                result.append(\"\
    U\")\n            }else if(c == 'v' || c == 'V'){\n                result.append(\"\
    V\")\n            }else if(c == 'w' || c == 'W'){\n                result.append(\"\
    W\")\n            }else if(c == 'x' || c == 'X'){\n                result.append(\"\
    X\")\n            }else if(c == 'y' || c == 'Y'){\n                result.append(\"\
    Y\")\n            }else if(c == 'z' || c == 'Z'){\n", "        val result = new\
    \ mutable.ListBuffer[String]()\n        for(i <- 0 until s.length){\n        \
    \    if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.add(s.charAt(i).toUpper\
    \ + s.charAt(i).toLower)\n            }\n            else if(s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z'){\n                result.add(s.charAt(i).toUpper + s.charAt(i).toLower)\n\
    \            }\n            else{\n                result.add(s.charAt(i))\n \
    \           }\n        }\n        if(result.size == 0){\n            return s\n\
    \        }\n        else{\n            return result.reverse\n        }", "  \
    \      val chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until\
    \ s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n     \
    \           chars += s.charAt(i)\n            else if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                chars += s.charAt(i).toUpper\n            else\n  \
    \              chars += s.charAt(i)\n        chars.reverse", "        val str\
    \ = new StringBuilder(s)\n        val chars = str.map(_.toChar)\n        val reversed\
    \ = chars.reverse\n        val result = reversed.map(c => if (c.isLetter) c.toUpperCase(c)\
    \ else c.toLowerCase).mkString\n        if (result.isEmpty) str.toString\n   \
    \     else result", "        val chars = s.toCharArray\n        val result = new\
    \ StringBuilder\n        val reversed = new mutable.ListBuffer[String]()\n   \
    \     for (i <- 0 until chars.length) {\n            val c = chars(i)\n      \
    \      if (c.isLetter) {\n                reversed.clear()\n                for\
    \ (j <- 0 until chars.length) {\n                    if (j != i) {\n         \
    \               val c2 = chars(j)\n                        if (c2.isLetter) {\n\
    \                            if (c2.toLower == c.toLower) {\n                \
    \                reversed.append((c2.toUpper))\n                            }\
    \ else {\n                                reversed.append((c2.toLower))\n    \
    \                        }\n                        } else {\n               \
    \             reversed.append(c2)\n                        }\n               \
    \     }\n                }\n                result.append((reversed.mkString))\n\
    \            } else {\n                result.append(c)\n            }\n     \
    \   }\n        result.toString", "        val result = new StringBuilder\n   \
    \     for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        result.toString",
  "        val chars = mutable.HashSet[Char]()\n        for(i <- 0 until s.length)\
    \ chars += s.charAt(i)\n        chars.toList.sortWith(_ < _).reverse.mkString",
  "        val result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toUpper + s.charAt(i).toLower)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for(i <- 0 until s.length){\n            val c = s.charAt(i)\n        \
    \    if(c == 'a'){\n                result.append(\"A\")\n            }else if(c\
    \ == 'A'){\n                result.append(\"a\")\n            }else if(c == 'b'){\n\
    \                result.append(\"B\")\n            }else if(c == 'B'){\n     \
    \           result.append(\"b\")\n            }else if(c == 'c'){\n          \
    \      result.append(\"C\")\n            }else if(c == 'C'){\n               \
    \ result.append(\"c\")\n            }else if(c == 'd'){\n                result.append(\"\
    D\")\n            }else if(c == 'D'){\n                result.append(\"d\")\n\
    \            }else if(c == 'e'){\n                result.append(\"E\")\n     \
    \       }else if(c == 'E'){\n                result.append(\"e\")\n          \
    \  }else if(c == 'f'){\n                result.append(\"F\")\n            }else\
    \ if(c == 'F'){\n                result.append(\"f\")\n            }else if(c\
    \ == 'g'){\n                result.append(\"G\")\n            }else if(c == 'G'){\n\
    \                result.append(\"g\")\n            }else if(c == 'h'){\n     \
    \           result.append(\"H\")\n            }else if(c == 'H'){\n          \
    \      result.append(\"h\")\n            }else if(c == 'i'){\n               \
    \ result.append(\"I\")\n            }else if(c == 'I'){\n                result.append(\"\
    i\")\n            }else if(c == 'j'){\n                result.append(\"J\")\n\
    \            }else if(c == 'J'){\n                result.append(\"j\")\n     \
    \       }else if(c == 'k'){\n                result.append(\"K\")\n          \
    \  }else if(c == 'K'){\n                result.append(\"k\")\n            }else\
    \ if(c == 'l'){\n                result.append(\"L\")\n            }else if(c\
    \ == 'L'){\n                result.append(\"l\")\n            }else if(c == 'm'){\n\
    \                result.append(\"M\")\n            }else if(c == 'M'){\n     \
    \           result.append(\"m\")\n            }else if(c == 'n'){\n          \
    \      result.append(\"N\")\n            }else if(c == 'N'){\n               \
    \ result.append(\"n\")\n            }else if(c == 'o'){\n                result.append(\"\
    O\")\n            }else if(c == 'O'){\n                result.append(\"o\")\n\
    \            }else if(c == 'p'){\n                result.append(\"P\")\n     \
    \       }else if(c == 'P'){\n                result.append(\"p\")\n          \
    \  }else if(c == 'q'){\n                result.append(\"Q\")\n            }else\
    \ if(c", "        val chars = s.toCharArray\n        val result = new mutable.ListBuffer[String]()\n\
    \        val reversed = new mutable.ListBuffer[String]()\n        val upperCase\
    \ = new mutable.ListBuffer[String]()\n        val lowerCase = new mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until chars.length) {\n            val c = chars(i)\n    \
    \        if(c == 'a') {\n                upperCase += c\n            } else if(c\
    \ == 'A') {\n                lowerCase += c\n            } else if(c == '#') {\n\
    \                upperCase += c\n                lowerCase += c\n            }\
    \ else if(c == '@') {\n                upperCase += c\n                lowerCase\
    \ += c\n            } else {\n                upperCase += c\n               \
    \ lowerCase += c\n            }\n        }\n        val upperCaseString = upperCase.toList\n\
    \        val lowerCaseString = lowerCase.toList\n        if(upperCaseString.isEmpty)\
    \ {\n            for(i <- 0 until chars.length) {\n                val c = chars(i)\n\
    \                if(c == 'a') {\n                    upperCase += c\n        \
    \        } else if(c == 'A') {\n                    lowerCase += c\n         \
    \       } else if(c == '#') {\n                    upperCase += c\n          \
    \          lowerCase += c\n                } else if(c == '@') {\n           \
    \         upperCase += c\n                    lowerCase += c\n               \
    \ } else {\n                    upperCase += c\n                    lowerCase\
    \ += c\n                }\n            }\n            val upperCaseString = upperCase.toList\n\
    \            val lowerCaseString = lowerCase.toList\n            if(upperCaseString.isEmpty)\
    \ {\n                for(i <- 0 until chars.length) {\n                    val\
    \ c = chars(i)\n                    if(c == 'a') {\n                        upperCase\
    \ += c\n                    } else if(c == 'A') {\n                        lowerCase\
    \ += c\n                    } else if(c == '#') {\n                        upperCase\
    \ += c\n                        lowerCase += c\n                    } else if(c\
    \ == '@') {\n                        upperCase += c\n                        lowerCase\
    \ += c\n                    } else {\n                        upperCase += c\n\
    \                        lowerCase += c\n                    }\n             \
    \   }\n                val upperCaseString = upperCase.toList\n              \
    \  val lowerCaseString = lowerCase.toList\n                if(upperCaseString.isEmpty)\
    \ {\n                    for(i <- 0 until chars.length) {\n                  \
    \      val c = chars(i)\n                        if(c == 'a') {\n            \
    \                upperCase += c\n                        } else if(c == 'A') {\n\
    \                            lowerCase += c\n                        } else if(c\
    \ == '#') {\n                            upperCase += c\n                    \
    \        lowerCase += c\n                        ", "        val result = new\
    \ StringBuilder\n        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n\
    \            if(c == 'a'){\n                result.append(\"A\")\n           \
    \ }else if(c == 'A'){\n                result.append(\"a\")\n            }else\
    \ if(c == '#'){\n                result.append(\"#\")\n            }else if(c\
    \ == '@'){\n                result.append(\"@\")\n            }else if(c == 'C'){\n\
    \                result.append(\"c\")\n            }else if(c == 'c'){\n     \
    \           result.append(\"C\")\n            }else if(c == 'd'){\n          \
    \      result.append(\"d\")\n            }else if(c == 'D'){\n               \
    \ result.append(\"D\")\n            }else if(c == 'e'){\n                result.append(\"\
    e\")\n            }else if(c == 'E'){\n                result.append(\"E\")\n\
    \            }else if(c == 'f'){\n                result.append(\"f\")\n     \
    \       }else if(c == 'F'){\n                result.append(\"F\")\n          \
    \  }else if(c == 'g'){\n                result.append(\"g\")\n            }else\
    \ if(c == 'G'){\n                result.append(\"G\")\n            }else if(c\
    \ == 'h'){\n                result.append(\"h\")\n            }else if(c == 'H'){\n\
    \                result.append(\"H\")\n            }else if(c == 'I'){\n     \
    \           result.append(\"I\")\n            }else if(c == 'I'){\n          \
    \      result.append(\"i\")\n            }else if(c == 'j'){\n               \
    \ result.append(\"j\")\n            }else if(c == 'J'){\n                result.append(\"\
    J\")\n            }else if(c == 'k'){\n                result.append(\"k\")\n\
    \            }else if(c == 'K'){\n                result.append(\"K\")\n     \
    \       }else if(c == 'l'){\n                result.append(\"l\")\n          \
    \  }else if(c == 'L'){\n                result.append(\"L\")\n            }else\
    \ if(c == 'm'){\n                result.append(\"m\")\n            }else if(c\
    \ == 'M'){\n                result.append(\"M\")\n            }else if(c == 'n'){\n\
    \                result.append(\"n\")\n            }else if(c == 'N'){\n     \
    \           result.append(\"N\")\n            }else if(c == 'o'){\n          \
    \      result.append(\"o\")\n            }else if(c == 'O'){\n               \
    \ result.append(\"O\")\n            }else if(c == 'p'){\n                result.append(\"\
    p\")\n            }else if(c == 'P'){\n                result.append(\"P\")\n\
    \            }else if(c == 'q'){\n                result.append(\"q\")\n     \
    \       }else if", "        val result = new StringBuilder(s.length)\n       \
    \ for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toString)\n     \
    \       else\n                result.append(s.charAt(i))\n        return result.toString",
  "        val chars = mutable.ListBuffer[Char]()\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n  \
    \      for(c <- s) {\n            if(c.isLetter) chars += c.toUpperCase\n    \
    \        else chars += c.toLowerCase\n        }\n        if(chars.isEmpty) s.reverse\n\
    \        else chars.reverse.mkString.reverse", "        val chars = mutable.Set[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val result = new StringBuilder\n        for\
    \ (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val result = new StringBuilder(s.length)\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            else\n                result.append(s.charAt(i))\n\
    \        return result.toString", "        val result = new StringBuilder\n  \
    \      for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val result = new StringBuilder\n        for(i <-\
    \ 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                val c = s.charAt(i).toChar\n                val upper = c.toUpperCase\n\
    \                val lower = c.toLowerCase\n                val upper2 = upper.toUpperCase\n\
    \                val lower2 = lower.toLowerCase\n                val upper3 =\
    \ upper2.toUpperCase\n                val lower3 = lower2.toLowerCase\n      \
    \          val upper4 = upper3.toUpperCase\n                val lower4 = lower3.toLowerCase\n\
    \                val upper5 = upper4.toUpperCase\n                val lower5 =\
    \ lower4.toLowerCase\n                val upper6 = upper5.toUpperCase\n      \
    \          val lower6 = lower5.toLowerCase\n                val upper7 = upper6.toUpperCase\n\
    \                val lower7 = lower6.toLowerCase\n                val upper8 =\
    \ upper7.toUpperCase\n                val lower8 = lower7.toLowerCase\n      \
    \          val upper9 = upper8.toUpperCase\n                val lower9 = lower8.toLowerCase\n\
    \                val upper10 = upper9.toUpperCase\n                val lower10\
    \ = lower9.toLowerCase\n                val upper11 = upper10.toUpperCase\n  \
    \              val lower11 = lower10.toLowerCase\n                val upper12\
    \ = upper11.toUpperCase\n                val lower12 = lower11.toLowerCase\n \
    \               val upper13 = upper12.toUpperCase\n                val lower13\
    \ = lower12.toLowerCase\n                val upper14 = upper13.toUpperCase\n \
    \               val lower14 = lower13.toLowerCase\n                val upper15\
    \ = upper14.toUpperCase\n                val lower15 = lower14.toLowerCase\n \
    \               val upper16 = upper15.toUpperCase\n                val lower16\
    \ = lower15.toLowerCase\n                val upper17 = upper16.toUpperCase\n \
    \               val lower17 = lower16.toLowerCase\n                val upper18\
    \ = upper17.toUpperCase\n                val lower18 = lower17.toLowerCase\n \
    \               val upper19 = upper18.toUpperCase\n                val lower19\
    \ = lower18.toLowerCase\n                val upper20 = upper19.toUpperCase\n \
    \               val lower20 = lower19.toLowerCase\n                val upper21\
    \ = upper20.toUpperCase\n                val lower21 = lower20.toLowerCase\n \
    \               val upper22 = upper21.toUpperCase\n                val lower22\
    \ = lower21.toLowerCase\n                val upper23 = upper22.toUpperCase\n \
    \               val lower23 = lower22.toLowerCase\n                val upper24\
    \ = upper23.toUpperCase\n                val lower24 = lower23.toLowerCase\n \
    \               val upper25 = upper24.toUpperCase\n                val lower25\
    \ = lower24.toLowerCase\n                val upper26 = upper25.toUpperCase\n \
    \               val lower26 = lower25.toLowerCase\n                val upper27",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length)\n\
    \            chars += s.charAt(i)\n        chars.reverse", "        val chars\
    \ = mutable.ListBuffer[Char]()\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                chars += c.toUpperCase\n            } else {\n          \
    \      chars += c\n            }\n        }\n        if (chars.isEmpty) {\n  \
    \          s.reverse\n        } else {\n            chars.reverse\n        }",
  "        val chars = mutable.ArrayBuffer.empty[Char]\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                chars\
    \ += s.charAt(i).toUpper\n            }\n            else if(s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).toLower\n    \
    \        }\n            else{\n                chars += s.charAt(i)\n        \
    \    }\n        }\n        chars.reverse", "        val chars = mutable.ArrayBuffer.empty[Char]\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse"]
stop_tokens:
- "\n    }\n"
