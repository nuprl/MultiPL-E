name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n \
  \   // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        val chars = mutable.Set[Char](s.toCharArray)\n        val reversed\
    \ = mutable.Set[Char]()\n        chars.foreach { c =>\n            if (c.isLetter)\
    \ {\n                val upper = c.toUpperCase\n                val lower = c.toLowerCase\n\
    \                if (chars.contains(upper)) {\n                    chars.remove(upper)\n\
    \                    chars.remove(lower)\n                    chars += upper\n\
    \                    chars += lower\n                }\n                else {\n\
    \                    chars += c\n                }\n            }\n          \
    \  else {\n                chars += c\n            }\n        }\n        chars.toList.reverse.mkString",
  "        val result = new StringBuilder\n        val chars = s.toCharArray\n   \
    \     for(i <- 0 until chars.length)\n            if(chars(i) >= 'a' && chars(i)\
    \ <= 'z')\n                chars(i) match {\n                    case 'a' -> chars(i)\
    \ match {\n                        case 'A' -> chars(i) match {\n            \
    \                case 'a' -> chars(i) match {\n                              \
    \  case 'A' -> chars(i) match {\n                                    case 'a'\
    \ -> chars(i) match {\n                                        case 'A' -> chars(i)\
    \ match {\n                                            case 'a' -> chars(i) match\
    \ {\n                                                case 'A' -> chars(i) match\
    \ {\n                                                    case 'a' -> chars(i)\
    \ match {\n                                                        case 'A' ->\
    \ chars(i) match {\n                                                         \
    \   case 'a' -> chars(i) match {\n                                           \
    \                     case 'A' -> chars(i) match {\n                         \
    \                                           case 'a' -> chars(i) match {\n   \
    \                                                                     case 'A'\
    \ -> chars(i) match {\n                                                      \
    \                      case \"a\" -> chars(i) match {\n                      \
    \                                                          case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                              case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \  case \"A\" -> chars(i) match {\n                                          \
    \                                                          case \"a\" -> chars(i)\
    \ match {\n                                                                  \
    \                                      case \"A\" -> chars(i) match {\n      \
    \                                                                            \
    \                          case \"a\" -> chars(i) match {\n                  \
    \                                                                            \
    \                  case \"A\" -> chars(i) match {\n                          \
    \                                                                            \
    \              case \"a\" -> chars(i) match {\n                              \
    \                                                                            \
    \              case \"A\" -> chars(i) match {\n                              \
    \                                                                            \
    \                  case \"a\" -> chars(i) match {\n                          \
    \                                                                            \
    \                          case \"A\" -> chars(i) match {\n                  \
    \                                                                            \
    \                                      case \"a\" -> chars(i) match {\n      \
    \                                                                            \
    \                                                      case \"A\" -> chars(i)\
    \ match {\n                                                                  \
    \                                                                          case\
    \ \"a\" -> chars(i) match {\n                                                \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                        case \"a\" -> chars(i) match {\n    \
    \                                                                            \
    \                                                                            \
    \    case \"A\" -> chars(i) match {\n                                        \
    \                                                                            \
    \                                                case \"a\" -> chars(i) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case \"A\" -> chars(i) match {\n                        \
    \                                                                            \
    \                                                                        case\
    \ \"a\" -> chars(", "        val chars = mutable.ListBuffer[Char]()\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                chars += s.charAt(i)\n            }\n            else if(s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n                chars += s.charAt(i).swapCase\n\
    \            }\n            else{\n                chars += s.charAt(i)\n    \
    \        }\n        }\n        chars.reverse", "        val chars = mutable.ListBuffer[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                chars += s.charAt(i)\n            else\n          \
    \      chars += s.charAt(i).toLower\n        chars.reverse", "        val result\
    \ = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n       \
    \     val c = s.charAt(i)\n            if(c == c.toUpperCase){\n             \
    \   result.append(c.toUpperCase)\n            }else if(c == c.toLowerCase){\n\
    \                result.append(c.toLowerCase)\n            }else{\n          \
    \      result.append(c)\n            }\n        }\n        return result.toString()",
  "        val result = new StringBuilder\n        for(i <- 0 until s.length){\n \
    \           val c = s.charAt(i)\n            if(c == 'A' || c == 'a') result.append(c.toUpperCase)\n\
    \            else result.append(c)\n        }\n        return result.toString",
  "        val result = new StringBuilder\n        val chars = mutable.HashSet[Char]()\n\
    \        for (i <- 0 until s.length)\n            if (chars.contains(s.charAt(i)))\n\
    \                chars.remove(s.charAt(i))\n            else\n               \
    \ chars.add(s.charAt(i))\n        for (i <- 0 until chars.size) {\n          \
    \  val c = chars.toList(i)\n            if (c.size == 1) {\n                result.append(c.head)\n\
    \            } else {\n                result.append(c.reverse)\n            }\n\
    \        }\n        result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length){\n            val c = s.charAt(i)\n      \
    \      if(c == c.toUpperCase) result.append(c.toUpperCase)\n            else result.append(c)\n\
    \        }\n        return result.toString", "        val result = new StringBuilder\n\
    \        for(i <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z')\n                result.append(s.charAt(i).toUpper)\n            else\n\
    \                result.append(s.charAt(i))\n        return result.toString",
  "        val strList = s.toList\n        strList.foldLeft(\"\") { (str, c) =>\n\
    \            val isLetter = c.isLetter\n            if (isLetter) {\n        \
    \        val newChar = c.toUpperCase\n                str + newChar\n        \
    \    } else {\n                str + c\n            }\n        }", "        val\
    \ result = new StringBuilder(s.length)\n        for(i <- 0 until s.length){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                result.append((s.charAt(i)\
    \ - 'a').toString)\n            }else if(s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z'){\n                result.append((s.charAt(i) - 'A').toString)\n       \
    \     }else{\n                result.append(s.charAt(i))\n            }\n    \
    \    }\n        return result.toString", "        val chars = mutable.HashSet[Char]()\n\
    \        for(i <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_\
    \ < _).reverse.mkString", "        val chars = s.toCharArray\n        val len\
    \ = chars.length\n        val reversed = new Array[Char](len)\n        for(i <-\
    \ 0 until len) {\n            val c = chars(i)\n            if(c == 'a' || c ==\
    \ 'A') {\n                reversed(i) = c.toUpperCase\n            } else {\n\
    \                reversed(i) = c.toLowerCase\n            }\n        }\n     \
    \   new String(reversed)", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n\
    \                result.append((s.charAt(i) - 'a').toString)\n            }\n\
    \            else if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n            \
    \    result.append((s.charAt(i) - 'A').toString)\n            }\n            else{\n\
    \                result.append(s.charAt(i))\n            }\n        }\n      \
    \  return result.toString", "        val result = new StringBuilder\n        for(i\
    \ <- 0 until s.length)\n            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n\
    \                result.append((s.charAt(i) - 'a').toUpper + s.charAt(i).toLower)\n\
    \            else\n                result.append(s.charAt(i))\n        return\
    \ result.toString", "        val chars = s.toCharArray\n        val reversed =\
    \ chars.reverse\n        val result = reversed.foldLeft(\"\"){ (acc, c) => if\
    \ (Character.isLetter(c)) acc + (c.toUpperCase) else acc + (c.toLowerCase) }\n\
    \        if (chars.isEmpty) result\n        else result.reverse", "        val\
    \ chars = mutable.ArrayBuffer.empty[Char]\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z')\n                chars\
    \ += s.charAt(i)\n            else\n                chars += s.charAt(i).toUpper\n\
    \        chars.reverse", "        val chars = mutable.Set[Char]()\n        for(i\
    \ <- 0 until s.length) chars += s.charAt(i)\n        chars.toList.sortWith(_ <\
    \ _).reverse.mkString", "        val result = s.toUpperCase\n        val reversed\
    \ = result.reverse\n        val noLetters = reversed.replaceAll(\"[^A-Z]\", \"\
    \")\n        if (noLetters.isEmpty) result else noLetters", "        val result\
    \ = new StringBuilder\n        for(i <- 0 until s.length){\n            val c\
    \ = s.charAt(i)\n            if(c == 'a'){\n                result.append(\"A\"\
    )\n            }else if(c == 'A'){\n                result.append(\"a\")\n   \
    \         }else if(c == 'b'){\n                result.append(\"B\")\n        \
    \    }else if(c == 'B'){\n                result.append(\"b\")\n            }else\
    \ if(c == 'c'){\n                result.append(\"C\")\n            }else if(c\
    \ == 'C'){\n                result.append(\"c\")\n            }else if(c == 'd'){\n\
    \                result.append(\"D\")\n            }else if(c == 'D'){\n     \
    \           result.append(\"d\")\n            }else if(c == 'e'){\n          \
    \      result.append(\"E\")\n            }else if(c == 'E'){\n               \
    \ result.append(\"e\")\n            }else if(c == 'f'){\n                result.append(\"\
    F\")\n            }else if(c == 'F'){\n                result.append(\"f\")\n\
    \            }else if(c == 'g'){\n                result.append(\"G\")\n     \
    \       }else if(c == 'G'){\n                result.append(\"g\")\n          \
    \  }else if(c == 'h'){\n                result.append(\"H\")\n            }else\
    \ if(c == 'H'){\n                result.append(\"h\")\n            }else if(c\
    \ == 'i'){\n                result.append(\"I\")\n            }else if(c == 'I'){\n\
    \                result.append(\"i\")\n            }else if(c == 'j'){\n     \
    \           result.append(\"J\")\n            }else if(c == 'J'){\n          \
    \      result.append(\"j\")\n            }else if(c == 'k'){\n               \
    \ result.append(\"K\")\n            }else if(c == 'K'){\n                result.append(\"\
    k\")\n            }else if(c == 'l'){\n                result.append(\"L\")\n\
    \            }else if(c == 'L'){\n                result.append(\"l\")\n     \
    \       }else if(c == 'm'){\n                result.append(\"M\")\n          \
    \  }else if(c == 'M'){\n                result.append(\"m\")\n            }else\
    \ if(c == 'n'){\n                result.append(\"N\")\n            }else if(c\
    \ == 'N'){\n                result.append(\"n\")\n            }else if(c == 'o'){\n\
    \                result.append(\"O\")\n            }else if(c == 'O'){\n     \
    \           result.append(\"o\")\n            }else if(c == 'p'){\n          \
    \      result.append(\"P\")\n            }else if(c == 'P'){\n               \
    \ result.append(\"p\")\n            }else if(c == 'q'){\n                result.append(\"\
    Q\")\n            }else if(c"]
stop_tokens:
- "\n    }\n"
