name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.ceil.toInt\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val roundedSum = rounded.sum\n        roundedSum * roundedSum", "   \
    \     val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n     \
    \   sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumOfSquares\
    \ = sums.sum\n        sumOfSquares.toLong", "        val sumSquares = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n  \
    \      rounded.sum", "        val sum = 0L\n        for(x <- lst) {\n        \
    \    val y = math.ceil(x)\n            val z = math.pow(y, 2)\n            sum\
    \ += z\n        }\n        return sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val nums = lst.map(_.toInt)\n        val sum =\
    \ nums.sum\n        val squares = nums.map(x => x * x)\n        val sum = squares.sum\n\
    \        val rounded = squares.map(x => math.ceil(x).toInt)\n        val sum =\
    \ rounded.sum\n        sum * sum", "        val nums = lst.map(_.toInt)\n    \
    \    val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val\
    \ squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n      \
    \  val squareSumRounded = squareSum.toInt\n        squareSumRounded", "      \
    \  val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n    \
    \    val sum = sums.sum\n        val squares = sums.map(x => x * x)\n        val\
    \ squareSum = squares.sum\n        squareSum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n\
    \        sumOfSquares.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x)).sum\n        rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n   \
    \     val squares = nums.map(x => x * x)\n        val result = squares.sum\n \
    \       val rounded = math.ceil(result)\n        rounded * rounded"]
stop_tokens:
- "\n    }\n"
