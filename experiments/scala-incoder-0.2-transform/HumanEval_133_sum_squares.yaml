name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.ceil.toInt\n\
    \        sumsSumRounded", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val roundedSum = rounded.sum\n        roundedSum * roundedSum", "   \
    \     val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n     \
    \   sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sumOfSquares\
    \ = sums.sum\n        sumOfSquares.toLong", "        val sumSquares = mutable.ListBuffer[Float]()\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n  \
    \      rounded.sum", "        val sum = 0L\n        for(x <- lst) {\n        \
    \    val y = math.ceil(x)\n            val z = math.pow(y, 2)\n            sum\
    \ += z\n        }\n        return sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val nums = lst.map(_.toInt)\n        val sum =\
    \ nums.sum\n        val squares = nums.map(x => x * x)\n        val sum = squares.sum\n\
    \        val rounded = squares.map(x => math.ceil(x).toInt)\n        val sum =\
    \ rounded.sum\n        sum * sum", "        val nums = lst.map(_.toInt)\n    \
    \    val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val\
    \ squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n      \
    \  val squareSumRounded = squareSum.toInt\n        squareSumRounded", "      \
    \  val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n    \
    \    val sum = sums.sum\n        val squares = sums.map(x => x * x)\n        val\
    \ squareSum = squares.sum\n        squareSum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n\
    \        sumOfSquares.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded\
    \ = sums.map(x => math.ceil(x)).sum\n        rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n   \
    \     val squares = nums.map(x => x * x)\n        val result = squares.sum\n \
    \       val rounded = math.ceil(result)\n        rounded * rounded", "       \
    \ val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val sum = 0L\n        for(i <- lst) {\n            sum += i.toLong\
    \ * i.toLong\n        }\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumSquares = sums.sum\n\
    \        sumSquares.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.roundToInt\n        sumsSumRounded", "        val sum = 0L\n     \
    \   lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sum = nums.sum\n        val sq = nums.map(x =>\
    \ x * x).sum\n        sq.toLong + sum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n        sumOfSquares.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        val sumOfSquares = rounded.map(x => x * x).sum\n        sumOfSquares",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n   \
    \     lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val n = lst.size\n        val sumSquares = mutable.ArrayBuffer.empty[Float]\n\
    \        for (i <- 0 until n) {\n            val f = lst(i)\n            sumSquares\
    \ += math.pow(f, 2)\n        }\n        sumSquares.sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(_.ceil.toInt)\n        val roundedSum = rounded.sum\n\
    \        roundedSum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val squares\
    \ = sums.map(x => x * x)\n        val rounded = squares.map(_.ceil)\n        val\
    \ sum = rounded.sum\n        sum.toLong", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     val sumsSumRounded = sumsSum.roundToInt\n        sumsSumRounded", "    \
    \    val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n  \
    \      val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val sum = 0L\n        val nums = lst.map(_.toInt)\n\
    \        nums.foreach(x => sum += x * x)\n        sum", "        val sum = 0L\n\
    \        val nums = lst.map(x => math.ceil(x).toInt)\n        nums.foreach(x =>\
    \ sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumSquares = sums.map(x\
    \ => x * x)\n        sumSquares.sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sqSum = sums.map(x => x * x).sum\n        val rounded = nums.map(x => math.ceil(x).toFloat)\n\
    \        val roundedSum = rounded.map(x => math.ceil(x).toInt).sum\n        val\
    \ roundedSqSum = rounded.map(x => math.ceil(x).toInt).map(x => x * x).sum\n  \
    \      val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x => x *\
    \ x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x\
    \ => x * x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x =>\
    \ math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n        val roundedSumSqSum\
    \ = rounded.map(x => math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n\
    \        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x => x\
    \ * x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x\
    \ => x * x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x =>\
    \ math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n        val roundedSumSqSum\
    \ = rounded.map(x => math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n\
    \        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x => x\
    \ * x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x\
    \ => x * x).map(x => x * x).sum\n        val roundedSumSqSum = rounded.map(x =>\
    \ math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n        val roundedSumSqSum\
    \ = rounded.map(x => math.ceil(x).toInt).map(x => x * x).map(x => x * x).sum\n\
    \        val roundedSumSqSum = rounded.map(x => math.ceil(x).toInt).map(x => x\
    \ * x).map(x => x * x).sum\n        val rounded", "        val n = lst.length\n\
    \        val sum = 0L\n        for(i <- 0 until n){\n            val x = lst(i)\n\
    \            val y = math.ceil(x)\n            sum += y * y\n        }\n     \
    \   sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val result = mutable.ListBuffer.empty[Long]\n  \
    \      lst.foreach(x => result += math.pow(x, 2.0))\n        result.sum", "  \
    \      val n = lst.size\n        val sum = 0L\n        val nums = mutable.ListBuffer[Float]()\n\
    \        for (i <- 0 until n) {\n            val f = lst(i)\n            val x\
    \ = math.ceil(f)\n            val y = math.floor(f)\n            val z = math.pow(x,\
    \ 2)\n            val w = math.pow(y, 2)\n            val s = z + w\n        \
    \    sum += s\n            nums += s\n        }\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val squares = sums.map(x => x * x)\n        val sum = squares.sum\n\
    \        val square = squares.sum\n        sum.toLong", "        val sum = 0L\n\
    \        val nums = lst.map(_.toInt)\n        nums.foreach(x => sum += x * x)\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.ceil.toLong\n        return sumsSumRounded", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val sq = nums.map(x => x * x).sum\n     \
    \   val result = sum + sq\n        result", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sum = sums.sum\n        sum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n  \
    \      val squareSumRounded = squareSum.map(_.ceil.toInt).sum\n        squareSumRounded",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val sum = 0L\n        for(i <- 0 until lst.size) {\n \
    \           val x = math.ceil(lst(i).toDouble)\n            sum += x * x\n   \
    \     }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        sum.toLong", "        val sum = 0L\n    \
    \    lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sum =\
    \ 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        math.ceil(sum).toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val sq = sums.map(x => x * x).sum\n     \
    \   sq.toLong", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n\
    \        val squares = nums.map(x => x * x)\n        val result = squares.sum\
    \ + sum\n        result", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.roundToInt\n        sumsSumRounded", "        val sum = 0L\n     \
    \   lst.foreach(x => sum += math.pow(x, 2.0))\n        sum", "        val sum\
    \ = 0L\n        val nums = lst.map(_.toInt)\n        nums.foreach(x => sum +=\
    \ x * x)\n        nums.foreach(x => x = math.ceil(x).toInt)\n        sum", " \
    \       val n = lst.size\n        val sum = 0L\n        val sumSquare = 0L\n \
    \       for(i <- 0 until n) {\n            val x = lst(i)\n            val y =\
    \ math.ceil(x)\n            val z = math.pow(y, 2)\n            sum += z\n   \
    \         sumSquare += z\n        }\n        sumSquare.toLong", "        val result\
    \ = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => result += math.pow(x,\
    \ 2))\n        result.sum", "        val nums = lst.map(_.toInt)\n        val\
    \ sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n        sumsSum.toLong",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ math.ceil(sum).toLong", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2.0))\n        sum", "        val nums = lst.map(_.toInt)\n \
    \       val sum = nums.sum\n        val sqr = nums.map(x => x * x).sum\n     \
    \   sum + sqr", "        val sum = 0L\n        for(i <- lst) {\n            sum\
    \ += i.toLong * i.toLong\n        }\n        return sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        sum.toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded.toLong", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n   \
    \     val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        val\
    \ rounded = sums.map(_.ceil.toInt)\n        val squares = rounded.map(x => x *\
    \ x)\n        val sum = squares.sum\n        sum.toLong", "        val sum = 0L\n\
    \        val nums = lst.map(x => math.ceil(x).toInt)\n        nums.foreach(x =>\
    \ sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ sum.toLong", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n\
    \        val roundedSum = rounded.sum\n        roundedSum.toLong", "        val\
    \ nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares = nums.map(x\
    \ => x * x).sum\n        squares + sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val result = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => result += math.pow(x, 2.0))\n        result.sum", " \
    \       val sum = 0.0f\n        lst.foreach(x => sum += x * x)\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val squares = sums.map(x => x * x)\n    \
    \    val squareSum = squares.sum\n        val squareSumRound = squareSum.map(x\
    \ => math.ceil(x)).sum\n        squareSumRound * squareSumRound", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n    \
    \    rounded.toLong", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val sumOfSquares =\
    \ sums.map(x => x * x).sum\n        val roundedSumOfSquares = sumOfSquares.map(x\
    \ => math.ceil(x)).sum\n        roundedSumOfSquares * sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val squares = sums.map(x => x * x)\n        val squareSum\
    \ = squares.sum\n        val rounded = squareSum.map(_.ceil.toInt)\n        val\
    \ roundedSum = rounded.sum\n        roundedSum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n\
    \        val roundedSum = rounded.sum\n        roundedSum.toLong", "        val\
    \ sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", " \
    \       val sum = 0L\n        val nums = lst.map(_.toInt)\n        for(i <- 0\
    \ until nums.size) {\n            sum += nums(i) * nums(i)\n        }\n      \
    \  sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n\
    \        val sq = nums.map(x => x * x).sum\n        val sqr = sq / sum\n     \
    \   val ceil = math.ceil(sqr)\n        ceil.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x).toInt)\n        rounded.sum", "   \
    \     val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares\
    \ = nums.map(x => x * x)\n        val result = squares.sum\n        val rounded\
    \ = math.ceil(result)\n        rounded.toLong", "        val sum = 0L\n      \
    \  lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n\
    \        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sum\
    \ = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "     \
    \   val result = mutable.ListBuffer.empty[Float]\n        lst.foreach(x => result\
    \ += x.toFloat)\n        result.sum", "        val sum = 0L\n        for(i <-\
    \ 0 until lst.size) {\n            sum += math.pow(lst.apply(i).toFloat, 2)\n\
    \        }\n        sum.toLong", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n  \
    \      rounded.sum", "        val sum = 0L\n        val nums = lst.map(_.toInt)\n\
    \        nums.foreach(x => sum += x * x)\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded.toLong", "  \
    \      val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        sum.toLong", "        val sum = 0L\n    \
    \    lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n        val roundedSum\
    \ = rounded.sum\n        roundedSum.toLong", "        val sum = 0.0\n        lst.foreach(x\
    \ => sum += math.pow(x, 2.0))\n        math.ceil(sum)", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ sum.toLong", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val squares = sums.map(x\
    \ => x * x)\n        val squareSum = squares.sum\n        val squareSumInt = squareSum.toInt\n\
    \        squareSumInt", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        rounded", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sumSquares = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.ceil.toLong\n\
    \        sumsSumRounded", "        val sum = 0L\n        val nums = lst.map(_.toInt)\n\
    \        nums.foreach(x => sum += x*x)\n        nums.foreach(x => x = math.ceil(x))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val sumSquares = sums.map(x\
    \ => x * x).sum\n        sumSquares.toLong", "        val sum = 0L\n        for(x\
    \ <- lst) {\n            val y = math.ceil(x)\n            sum += y * y\n    \
    \    }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        rounded.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val sum = 0L\n        lst.foreach(x => sum +=\
    \ math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded * rounded", " \
    \       val sumSquares = mutable.ListBuffer.empty[Float]\n        lst.foreach(x\
    \ => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum", "        val sum\
    \ = 0L\n        for(i <- lst) sum += i * i\n        sum", "        val nums =\
    \ lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum =\
    \ sums.sum\n        val rounded = sums.map(_.ceil.toInt)\n        rounded.sum",
  "        val sum = 0L\n        val nums = lst.map(_.toInt)\n        nums.foreach(x\
    \ => sum += x * x)\n        nums.foreach(x => x = math.ceil(x))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val sum = 0L\n        val nums =\
    \ lst.map(x => math.ceil(x).toInt)\n        nums.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x).toInt)\n        rounded.sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        sum.toLong - rounded",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sumOfSquares = sums.sum\n        sumOfSquares.toLong", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sumsSum = sums.sum\n        sumsSum.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sumSquares = sums.map(x => x * x).sum\n        val rounded = sumSquares.map(x\
    \ => math.ceil(x)).sum\n        rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val sq = sums.map(x => x * x).sum\n        sq.roundToInt", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        val round = math.ceil(sum)\n        val result = round *\
    \ round\n        result", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        rounded.toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sumsSum = sums.sum\n   \
    \     sumsSum.toLong", "        val nums = lst.map(_.toInt)\n        val sums\
    \ = nums.map(x => x * x)\n        val sumOfSquares = sums.sum\n        sumOfSquares.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x).toInt)\n\
    \        val finalSum = rounded.sum\n        finalSum.toLong", "        val nums\
    \ = lst.map(_.toInt)\n        val sum = nums.sum\n        val squares = nums.map(x\
    \ => x * x)\n        val result = squares.sum\n        val rounded = math.ceil(result)\n\
    \        math.pow(rounded, 2).toLong", "        val nums = lst.map(_.toInt)\n\
    \        val sum = nums.sum\n        val squares = nums.map(x => x * x).sum\n\
    \        squares + sum", "        val sumSquares = mutable.ListBuffer.empty[Long]\n\
    \        lst.foreach(x => sumSquares += math.pow(x, 2.0))\n        sumSquares.sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2.0))\n\
    \        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x,\
    \ 2))\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x\
    \ => math.ceil(x)).sum\n        rounded * rounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ sum = 0.0f\n        lst.foreach(x => sum += math.pow(x, 2.0))\n        math.ceil(sum)",
  "        val result = mutable.ListBuffer[Float]()\n        lst.foreach(x => result\
    \ += x.toFloat)\n        result.sum", "        val nums = lst.map(_.toInt)\n \
    \       val sums = nums.map(x => x * x)\n        val sum = sums.sum\n        sum.toLong",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val sqSum = sums.map(x => x * x).sum\n  \
    \      val sqSum2 = sqSum * sqSum\n        val sqSum3 = sqSum2 * sqSum\n     \
    \   val sqSum4 = sqSum3 * sqSum\n        val sqSum5 = sqSum4 * sqSum\n       \
    \ val sqSum6 = sqSum5 * sqSum\n        val sqSum7 = sqSum6 * sqSum\n        val\
    \ sqSum8 = sqSum7 * sqSum\n        val sqSum9 = sqSum8 * sqSum\n        val sqSum10\
    \ = sqSum9 * sqSum\n        val sqSum11 = sqSum10 * sqSum\n        val sqSum12\
    \ = sqSum11 * sqSum\n        val sqSum13 = sqSum12 * sqSum\n        val sqSum14\
    \ = sqSum13 * sqSum\n        val sqSum15 = sqSum14 * sqSum\n        val sqSum16\
    \ = sqSum15 * sqSum\n        val sqSum17 = sqSum16 * sqSum\n        val sqSum18\
    \ = sqSum17 * sqSum\n        val sqSum19 = sqSum18 * sqSum\n        val sqSum20\
    \ = sqSum19 * sqSum\n        val sqSum21 = sqSum20 * sqSum\n        val sqSum22\
    \ = sqSum21 * sqSum\n        val sqSum23 = sqSum22 * sqSum\n        val sqSum24\
    \ = sqSum23 * sqSum\n        val sqSum25 = sqSum24 * sqSum\n        val sqSum26\
    \ = sqSum25 * sqSum\n        val sqSum27 = sqSum26 * sqSum\n        val sqSum28\
    \ = sqSum27 * sqSum\n        val sqSum29 = sqSum28 * sqSum\n        val sqSum30\
    \ = sqSum29 * sqSum\n        val sqSum31 = sqSum30 * sqSum\n        val sqSum32\
    \ = sqSum31 * sqSum\n        val sqSum33 = sqSum32 * sqSum\n        val sqSum34\
    \ = sqSum33 * sqSum\n        val sqSum35 = sqSum34 * sqSum\n        val sqSum36\
    \ = sqSum35 * sqSum\n        val sqSum37 = sqSum36 * sqSum\n        val sqSum38\
    \ = sqSum37 * sqSum\n        val sqSum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        for(i\
    \ <- lst) {\n            sum += i.toLong * i.toLong\n        }\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        sum.toLong", "        val sum = 0L\n    \
    \    lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val sumSquares\
    \ = mutable.ListBuffer.empty[Long]\n        lst.foreach(x => sumSquares += math.pow(x,\
    \ 2.0))\n        sumSquares.sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x)).sum\n        rounded", "        val\
    \ nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val\
    \ sum = sums.sum\n        val sqSum = sums.map(x => x * x).sum\n        val sqSum2\
    \ = sums.map(x => x * x).sum\n        val sqSum3 = sums.map(x => x * x).sum\n\
    \        val sqSum4 = sums.map(x => x * x).sum\n        val sqSum5 = sums.map(x\
    \ => x * x).sum\n        val sqSum6 = sums.map(x => x * x).sum\n        val sqSum7\
    \ = sums.map(x => x * x).sum\n        val sqSum8 = sums.map(x => x * x).sum\n\
    \        val sqSum9 = sums.map(x => x * x).sum\n        val sqSum10 = sums.map(x\
    \ => x * x).sum\n        val sqSum11 = sums.map(x => x * x).sum\n        val sqSum12\
    \ = sums.map(x => x * x).sum\n        val sqSum13 = sums.map(x => x * x).sum\n\
    \        val sqSum14 = sums.map(x => x * x).sum\n        val sqSum15 = sums.map(x\
    \ => x * x).sum\n        val sqSum16 = sums.map(x => x * x).sum\n        val sqSum17\
    \ = sums.map(x => x * x).sum\n        val sqSum18 = sums.map(x => x * x).sum\n\
    \        val sqSum19 = sums.map(x => x * x).sum\n        val sqSum20 = sums.map(x\
    \ => x * x).sum\n        val sqSum21 = sums.map(x => x * x).sum\n        val sqSum22\
    \ = sums.map(x => x * x).sum\n        val sqSum23 = sums.map(x => x * x).sum\n\
    \        val sqSum24 = sums.map(x => x * x).sum\n        val sqSum25 = sums.map(x\
    \ => x * x).sum\n        val sqSum26 = sums.map(x => x * x).sum\n        val sqSum27\
    \ = sums.map(x => x * x).sum\n        val sqSum28 = sums.map(x => x * x).sum\n\
    \        val sqSum29 = sums.map(x => x * x).sum\n        val sqSum30 = sums.map(x\
    \ => x * x).sum\n        val sqSum31 = sums.map(x => x * x).sum\n        val sqSum32\
    \ = sums.map(x => x * x).sum\n        val sqSum33 = sums.map(x => x * x).", " \
    \       val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n      \
    \  sum", "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n\
    \        sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sum = sums.sum\n        val rounded = sums.map(x => math.ceil(x)).sum\n\
    \        rounded * rounded", "        val sum = 0L\n        lst.foreach(x => sum\
    \ += math.pow(x, 2))\n        sum", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val rounded = sums.map(x => math.ceil(x).toInt)\n        rounded.sum", "   \
    \     val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val rounded = sums.map(_.ceil)\n        val\
    \ roundedSum = rounded.sum\n        roundedSum.toLong", "        val sum = 0L\n\
    \        lst.foreach(x => sum += math.pow(x, 2))\n        sum", "        val nums\
    \ = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n        val sum\
    \ = sums.sum\n        sum.toLong", "        val sum = 0L\n        lst.foreach(x\
    \ => sum += math.pow(x, 2))\n        sum", "        val sum = 0L\n        for(x\
    \ <- lst) {\n            sum += math.pow(x, 2)\n        }\n        sum", "   \
    \     val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n        sum",
  "        val sum = 0L\n        lst.foreach(x => sum += math.pow(x, 2))\n       \
    \ sum", "        val result = mutable.ListBuffer[Float]()\n        lst.foreach(x\
    \ => result += x.toFloat)\n        val sum: Float = result.sum\n        val result2\
    \ = result.map(x => math.ceil(x * x).toLong)\n        result2.sum", "        val\
    \ sum = 0L\n        for(x <- lst) {\n            sum += math.pow(x, 2)\n     \
    \   }\n        sum", "        val nums = lst.map(_.toInt)\n        val sums =\
    \ nums.map(x => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded\
    \ = sumsSum.roundToInt\n        sumsSumRounded", "        val nums = lst.map(_.toInt)\n\
    \        val sums = nums.map(x => x * x)\n        val sum = sums.sum\n       \
    \ val squares = sums.map(x => x * x)\n        val squareSum = squares.sum\n  \
    \      val rounded = squareSum.map(_.ceil.toInt)\n        val roundedSum = rounded.sum\n\
    \        roundedSum.toLong", "        val nums = lst.map(_.toInt)\n        val\
    \ sum = nums.sum\n        val sq = nums.map(x => x * x).sum\n        sq.roundToInt",
  "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x => x * x)\n\
    \        val sum = sums.sum\n        val sq = sums.map(x => x * x).sum\n     \
    \   sq.toLong", "        val sum = 0L\n        for(x <- lst) sum += x\n      \
    \  sum", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x =>\
    \ x * x)\n        val sum = sums.sum\n        val squares = sums.map(x => x *\
    \ x)\n        val result = squares.sum\n        val rounded = result.ceil.toLong\n\
    \        rounded", "        val nums = lst.map(_.toInt)\n        val sums = nums.map(x\
    \ => x * x)\n        val sumsSum = sums.sum\n        val sumsSumRounded = sumsSum.toLong\n\
    \        sumsSumRounded"]
stop_tokens:
- "\n    }\n"
