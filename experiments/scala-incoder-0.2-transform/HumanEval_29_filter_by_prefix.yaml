name: HumanEval_29_filter_by_prefix
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that start with a given prefix.\n\
  \    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n\
  \    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")),\
  \ (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings\
  \ : List[String], prefix : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterByPrefix((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterByPrefix((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    }\n\n}\n"
completions: ['        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_ startsWith
    prefix)', '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_ startsWith
    prefix)', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_ startsWith
    prefix)', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_
    startsWith prefix)', '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', " \
    \       strings.length match {\n            case 0 => strings\n            case\
    \ _ => {\n                val prefixedStrings = strings.map(s => s.startsWith(prefix))\n\
    \                prefixedStrings.filter(_.nonEmpty).map(s => s.head)\n       \
    \     }\n        }", '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(
    s => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', "        strings.length match\
    \ {\n            case 0 => strings\n            case _ => strings.filter(s =>\
    \ s.startsWith(prefix))\n        }", '        strings.filter(s => s.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix)
    )', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(_ startsWith prefix)', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(_.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter( s
    => s.startsWith(prefix) )', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter(_.startsWith(prefix))', '        stringList.filter(_.startsWith(prefix))',
  '        stringList.filter(s => s.startsWith(prefix))', '        stringList.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix) )',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))', '        strings.filter( s => s.startsWith(prefix) )',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(_
    startsWith prefix)', '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s
    => s.startsWith(prefix))', '        stringList.filter(s => s.startsWith(prefix))',
  '        strings.filter( s => s.startsWith(prefix) )', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(_ startsWith prefix)', '        strings.filter(s
    => s.startsWith(prefix))', '        strings.filter(s => s.startsWith(prefix))',
  '        strings.filter(s => s.startsWith(prefix))', '        strings.filter(s =>
    s.startsWith(prefix))']
stop_tokens:
- "\n    }\n"
