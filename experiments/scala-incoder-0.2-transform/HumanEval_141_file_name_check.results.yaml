language: scala
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ \"\" => \"No\"\n            case _ => {\n                val dotIndex = file_name.indexOf(\"\
    .\");\n                if (dotIndex == -1) \"No\"\n                else {\n  \
    \                  val firstLetter = file_name.charAt(0);\n                  \
    \  val lastLetter = file_name.charAt(file_name.length - 1);\n                \
    \    if (firstLetter < 'a' || firstLetter > 'z') \"No\"\n                    else\
    \ if (lastLetter < 'a' || lastLetter > 'z') \"No\"\n                    else if\
    \ (firstLetter < 'A' || firstLetter > 'Z') \"No\"\n                    else if\
    \ (lastLetter < 'A' || lastLetter > 'Z') \"No\"\n                    else file_name.substring(0,dotIndex)\
    \ match {\n                        case \"txt\" | \"exe\" | \"dll\" => \"Yes\"\
    \n                        case _ => \"No\"\n                    }\n          \
    \      }\n            }\n        }\n        valid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbqcpyei.scala:41)\n\tat Problem.main(tmpbbqcpyei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        var valid\
    \ = \"No\"\n        if (file_name.contains(\".\")) {\n            val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n            var i = 0\n \
    \           while (i < file_name.length) {\n                if (file_name(i).isDigit)\
    \ {\n                    val digit = file_name(i)\n                    if (digit\
    \ < '0' || digit > '9') {\n                        valid = \"No\"\n          \
    \              break\n                    }\n                }\n             \
    \   i += 1\n            }\n        }\n        if (valid == \"No\") {\n       \
    \     val file_name = file_name.substring(0,file_name.indexOf(\".\"))\n      \
    \      var i = 0\n            while (i < file_name.length) {\n               \
    \ if (file_name(i).isLetter) {\n                    val letter = file_name(i)\n\
    \                    if (letter != 'a' && letter != 'A' && letter != 'z' && letter\
    \ != 'Z') {\n                        valid = \"No\"\n                        break\n\
    \                    }\n                }\n                i += 1\n          \
    \  }\n        }\n        if (valid == \"No\") {\n            val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n            var i = 0\n            while (i < file_name.length) {\n   \
    \             if (file_name(i) != '0' && file_name(i) != '1' && file_name(i) !=\
    \ '2' && file_name(i) != '3' && file_name(i) != '4' && file_name(i) != '5' &&\
    \ file_name(i) != '6' && file_name(i) != '7' && file_name(i) != '8' && file_name(i)\
    \ != '9') {\n                    valid = \"No\"\n                    break\n \
    \               }\n                i += 1\n            }\n        }\n        if\
    \ (valid == \"No\") {\n            val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n            var i = 0\n            while (i < file_name.length) {\n   \
    \             if (file_name(i) != '.') {\n                    valid = \"No\"\n\
    \                    break\n                }\n                i += 1\n      \
    \      }\n        }\n        if (valid == \"No\") {\n            val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n            var i = 0\n \
    \           while (i < file_name.length) {\n                if (file_name(i) !=\
    \ 'a' && file_name(i) != 'A' && file_name(i) != 'z' && file_name(i) != 'Z') {\n\
    \                    valid = \"No\"\n                    break\n             \
    \   }\n                i += 1\n            }\n        }\n        if (valid ==\
    \ \"No\") {\n            val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n            var i = 0\n            while (i < file_name.length) {\n   \
    \             if (file_name(i) != '0' && file_name(i) != '1' && file_name(i) !=\
    \ '2' && file_name(i) != '3' && file_name(i) != '4' && file_name(i) != '5' &&\
    \ file_name(i) != '6' && file_name(i) != '7' && file_name(i) != '8' && file_name(i)\
    \ != '9') {\n                    valid = \"No\"\n                    break\n \
    \               }\n                i += 1\n            }\n        }\n        if\
    \ (valid \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2v4cvl70.scala:94:4 ----------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2v4cvl70.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfile_name\e[0m = file_name\n\e[31m\e[31m   |\e[0m                    \
    \    ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvariable\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp2v4cvl70.scala:22:28 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                     ^\e[0m\n\e[31m   |\e[0m                            Recursive\
    \ \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp2v4cvl70.scala:29:24 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp2v4cvl70.scala:36:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2v4cvl70.scala:43:24\
    \ ------------------------\e[0m\e[0m\n\e[31m43 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\".\").last\n        val fileName = fileName.split(\"\
    /\").last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr6a_0qyb.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr6a_0qyb.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr6a_0qyb.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr6a_0qyb.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr6a_0qyb.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1659805658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\")\n\
    \        val fileName = fileName(0)\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val fileName = fileName.replaceAll(\"\\\\D+$\", \"\"\
    )\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val\
    \ fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        if (fileName.matches(\"\
    ^[0-9]{3}$\") && fileName.contains(\".\") && fileName.substring(0, 1).matches(\"\
    ^[a-zA-Z]$\") && fileName.substring(fileName.indexOf(\".\") + 1).matches(\"^[txt|exe|dll]$\"\
    )) {\n            return \"Yes\"\n        }\n        else {\n            return\
    \ \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptluhvsjm.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptluhvsjm.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptluhvsjm.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptluhvsjm.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^[a-zA-Z]+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptluhvsjm.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"[a"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.replaceAll(\"\\\\s\", \"\
    \")\n        val file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name.replaceAll(\"[^0-9.]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^.\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9.]\", \"\")\n        val file_name = file_name\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqypdsh3f.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqypdsh3f.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\s\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqypdsh3f.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqypdsh3f.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqypdsh3f.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        if (dot_index == -1) {\n     \
    \       \"No\"\n        } else {\n            val first_letter = file_name.substring(0,\
    \ dot_index)\n            val last_letter = file_name.substring(dot_index + 1)\n\
    \            if (first_letter != \"a\" && first_letter != \"A\" && first_letter\
    \ != \"b\" && first_letter != \"B\" && first_letter != \"c\" && first_letter !=\
    \ \"C\" && first_letter != \"d\" && first_letter != \"D\" && first_letter != \"\
    e\" && first_letter != \"E\" && first_letter != \"f\" && first_letter != \"F\"\
    \ && first_letter != \"g\" && first_letter != \"G\" && first_letter != \"h\" &&\
    \ first_letter != \"H\" && first_letter != \"i\" && first_letter != \"I\" && first_letter\
    \ != \"j\" && first_letter != \"J\" && first_letter != \"k\" && first_letter !=\
    \ \"K\" && first_letter != \"l\" && first_letter != \"L\" && first_letter != \"\
    m\" && first_letter != \"M\" && first_letter != \"n\" && first_letter != \"N\"\
    \ && first_letter != \"o\" && first_letter != \"O\" && first_letter != \"p\" &&\
    \ first_letter != \"P\" && first_letter != \"q\" && first_letter != \"Q\" && first_letter\
    \ != \"r\" && first_letter != \"R\" && first_letter != \"s\" && first_letter !=\
    \ \"S\" && first_letter != \"t\" && first_letter != \"T\" && first_letter != \"\
    u\" && first_letter != \"U\" && first_letter != \"v\" && first_letter != \"V\"\
    \ && first_letter != \"w\" && first_letter != \"W\" && first_letter != \"x\" &&\
    \ first_letter != \"X\" && first_letter != \"y\" && first_letter != \"Y\" && first_letter\
    \ != \"z\" && first_letter != \"Z\") {\n                \"No\"\n            }\
    \ else {\n                if (last_letter != \"txt\" && last_letter != \"exe\"\
    \ && last_letter != \"dll\") {\n                    \"No\"\n                }\
    \ else {\n                    \"Yes\"\n                }\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7v1zhins.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val firstChar = file_name.charAt(0)\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val firstChar = if (firstChar == '_') 'a' else\
    \ 'A'\n        val firstChar = if (firstChar == '_') 'a' else 'A'\n        val\
    \ firstChar = if (firstChar == '_') 'a' else 'A'\n        val firstChar = if (firstChar\
    \ == '_') 'a' else 'A'\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6632xvky.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp6632xvky.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6632xvky.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = \e[33mif\e[0m (firstChar\
    \ == \e[31m'_'\e[0m) \e[31m'a'\e[0m \e[33melse\e[0m \e[31m'A'\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfirstChar is already defined as \e[33mvalue\e[0m \e[35mfirstChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6632xvky.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = \e[33mif\e[0m (firstChar\
    \ == \e[31m'_'\e[0m) \e[31m'a'\e[0m \e[33melse\e[0m \e[31m'A'\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfirstChar is already defined as \e[33mvalue\e[0m \e[35mfirstChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6632xvky.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = \e[33mif\e[0m (firstChar\
    \ == \e[31m'_'\e[0m) \e[31m'a'\e[0m \e[33melse\e[0m \e["
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphtnc4f9w.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphtnc4f9w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtnc4f9w.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val first_letter = file_name.charAt(0)\n        val letters = ('A'-'Z')\
    \ ++ ('a'-'z')\n        if (dot_index == file_name.length || first_letter != letters.head\
    \ || \n            file_name.substring(dot_index).isEmpty) {\n            \"No\"\
    \n        } else {\n            \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk3_40gbi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpk3_40gbi.scala:19:24 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk3_40gbi.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = (\e[31m'A'\e\
    [0m-\e[31m'Z'\e[0m) ++ (\e[31m'a'\e[0m-\e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  value ++ is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuu6kxwsg.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuu6kxwsg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"\\\\\
    D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n \
    \       val file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwqdiii0w.scala:60:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\"\
    \\\\\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m                                             unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpwqdiii0w.scala:62:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwqdiii0w.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwqdiii0w.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwqdiii0w.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\D\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be "
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\") \n        val firstChar = file_name.charAt(0)\n\
    \        val lastChar = file_name.charAt(file_name.length-1)\n        val firstCharIsLetter\
    \ = firstChar >= 'a' && firstChar <= 'z'\n        val lastCharIsLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val firstCharIsDigit = firstChar >= '0' &&\
    \ firstChar <= '9'\n        val lastCharIsDigit = lastChar >= '0' && lastChar\
    \ <= '9'\n        val firstCharIsNotEmpty = firstChar != \"\"\n        val lastCharIsNotEmpty\
    \ = lastChar != \"\"\n        val firstCharIsNotEmptyAndNotFirstChar = firstCharIsNotEmpty\
    \ && firstChar != firstChar\n        val lastCharIsNotEmptyAndNotLastChar = lastCharIsNotEmpty\
    \ && lastChar != lastChar\n        val firstCharIsNotEmptyAndNotFirstCharAndNotLastChar\
    \ = firstCharIsNotEmpty && firstChar != firstChar && lastChar != lastChar\n  \
    \      val firstCharIsNotEmptyAndNotFirstCharAndNotLastCharAndNotDot = firstCharIsNotEmpty\
    \ && firstChar != firstChar && lastChar != lastChar && dotIndex != -1\n      \
    \  val firstCharIsNotEmptyAndNotFirstCharAndNotLastCharAndNotDotAndNotDot = firstCharIsNotEmpty\
    \ && firstChar != firstChar && lastChar != lastChar && dotIndex != -1 && dotIndex\
    \ != file_name.length-1\n        val firstCharIsNotEmptyAndNotFirstCharAndNotLastCharAndNotDotAndNotDotAndNotDot\
    \ = firstCharIsNotEmpty && firstChar != firstChar && lastChar != lastChar && dotIndex\
    \ != -1 && dotIndex != file_name.length-1 && dotIndex != file_name.length-2\n\
    \        val firstCharIsNotEmptyAndNotFirstCharAndNotLastCharAndNotDotAndNotDotAndNotDotAndNotDot\
    \ = firstCharIsNotEmpty && firstChar != firstChar && lastChar != lastChar && dotIndex\
    \ != -1 && dotIndex != file_name.length-1 && dotIndex != file_name.length-2 &&\
    \ dotIndex != file_name.length-3\n        val firstCharIsNotEmptyAndNotFirstCharAndNotLastCharAndNotDotAndNotDotAndNotDotAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8do4coq.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpw8do4coq.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m               \
    \         ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpw8do4coq.scala:37:5 ---------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphasya6mp.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphasya6mp.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if (file_name.length()\
    \ <= 3) {\n            return \"No\"\n        }\n        if (file_name.indexOf('.')\
    \ != -1) {\n            if (file_name.substring(0, 1).isEmpty) {\n           \
    \     return \"No\"\n            }\n            if (file_name.substring(0, 1)\
    \ != 'a' && file_name.substring(0, 1) != 'A') {\n                return \"No\"\
    \n            }\n            if (file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).length() != 4) {\n                return \"No\"\n            }\n      \
    \  }\n        if (file_name.substring(0, 1) != 'a' && file_name.substring(0, 1)\
    \ != 'A') {\n            return \"No\"\n        }\n        if (file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).contains(\"txt\") || \n            file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).contains(\"exe\") || \n            file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).contains(\"dll\")) {\n            return \"Yes\"\n        }\n        return\
    \ \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo920cxm0.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false\n        var dotPos = file_name.indexOf(\"\
    .\")\n        var dotPos2 = file_name.indexOf(\".\", dotPos + 1)\n        var\
    \ dotPos3 = file_name.indexOf(\".\", dotPos + 2)\n        var dotPos4 = file_name.indexOf(\"\
    .\", dotPos + 3)\n        var dotPos5 = file_name.indexOf(\".\", dotPos + 4)\n\
    \        var dotPos6 = file_name.indexOf(\".\", dotPos + 5)\n        var dotPos7\
    \ = file_name.indexOf(\".\", dotPos + 6)\n        var dotPos8 = file_name.indexOf(\"\
    .\", dotPos + 7)\n        var dotPos9 = file_name.indexOf(\".\", dotPos + 8)\n\
    \        var dotPos10 = file_name.indexOf(\".\", dotPos + 9)\n        var dotPos11\
    \ = file_name.indexOf(\".\", dotPos + 10)\n        var dotPos12 = file_name.indexOf(\"\
    .\", dotPos + 11)\n        var dotPos13 = file_name.indexOf(\".\", dotPos + 12)\n\
    \        var dotPos14 = file_name.indexOf(\".\", dotPos + 13)\n        var dotPos15\
    \ = file_name.indexOf(\".\", dotPos + 14)\n        var dotPos16 = file_name.indexOf(\"\
    .\", dotPos + 15)\n        var dotPos17 = file_name.indexOf(\".\", dotPos + 16)\n\
    \        var dotPos18 = file_name.indexOf(\".\", dotPos + 17)\n        var dotPos19\
    \ = file_name.indexOf(\".\", dotPos + 18)\n        var dotPos20 = file_name.indexOf(\"\
    .\", dotPos + 19)\n        var dotPos21 = file_name.indexOf(\".\", dotPos + 20)\n\
    \        var dotPos22 = file_name.indexOf(\".\", dotPos + 21)\n        var dotPos23\
    \ = file_name.indexOf(\".\", dotPos + 22)\n        var dotPos24 = file_name.indexOf(\"\
    .\", dotPos + 23)\n        var dotPos25 = file_name.indexOf(\".\", dotPos + 24)\n\
    \        var dotPos26 = file_name.indexOf(\".\", dotPos + 25)\n        var dotPos27\
    \ = file_name.indexOf(\".\", dotPos + 26)\n        var dotPos28 = file_name.indexOf(\"\
    .\", dotPos + 27)\n        var dotPos29 = file_name.indexOf(\".\", dotPos + 28)\n\
    \        var dotPos30 = file_name.indexOf(\".\", dotPos + 29)\n        var dotPos31\
    \ = file_name.indexOf(\".\", dotPos + 30)\n        var dotPos32 = file_name.indexOf(\"\
    .\", dotPos + 31)\n        var dotPos33 = file_name.indexOf(\".\", dotPos + 32)\n\
    \        var dotPos34 = file_name.indexOf(\".\", dotPos + 33)\n        var dotPos35\
    \ = file_name.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx5vfyvq_.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx5vfyvq_.scala:55:5 ---------------------\e[0m\e[0m\n\e[31m55\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z][a-zA-Z0-9]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern13 = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8w_uwl0g.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp8w_uwl0g.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                             invalid escape character\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp8w_uwl0g.scala:22:46 -----------------------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \                     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp8w_uwl0g.scala:22:60\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                      invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp8w_uwl0g.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                  \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \                     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp8w_uwl0g.scala:23:60\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = true \n        val file_name = file_name.trim\n\
    \        val dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7tw9z1cs.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7tw9z1cs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7tw9z1cs.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7tw9z1cs.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /t"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else {\n            val fileName = file_name.substring(0,\
    \ dotIndex)\n            val extension = file_name.substring(dotIndex + 1)\n \
    \           if (fileName.matches(\"^[0-9]*$\") && extension.matches(\"^[a-zA-Z]*$\"\
    )) {\n                if (extension.equals(\"txt\") || extension.equals(\"exe\"\
    ) || extension.equals(\"dll\")) {\n                    \"Yes\"\n             \
    \   } else {\n                    \"No\"\n                }\n            } else\
    \ {\n                \"No\"\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeg3v7c43.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.lastIndexOf('.')\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dot\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8_9b4vcg.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8_9b4vcg.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m\
    \ \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8_9b4vcg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8_9b4vcg.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8_9b4vcg.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.lastIndexOf(\".\")\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dot\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hms6_tl.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hms6_tl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m\
    \ \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2hms6_tl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2hms6_tl.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2hms6_tl.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ \"\" => \"No\"\n            case _ => if (file_name.contains(\".\")) \n    \
    \                    {\n                            val file_name = file_name.split(\"\
    \\\\.\")\n                            if (file_name.length == 1) \n          \
    \                  {\n                                if (file_name(0).isEmpty)\
    \ \n                                {\n                                    if\
    \ (file_name(0).matches(\"^[a-zA-Z]\"))\n                                    {\n\
    \                                        if (file_name(0).matches(\"^[0-9]\"))\n\
    \                                        {\n                                 \
    \           if (file_name(0).matches(\"^[a-zA-Z][a-zA-Z][a-zA-Z]\"))\n       \
    \                                     {\n                                    \
    \            if (file_name(0).matches(\"^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyf6abe3g.scala:34:73 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                                                \e[33mif\e\
    [0m (file_name(\e[31m0\e[0m).matches(\"^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \             unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpyf6abe3g.scala:36:34\
    \ ---"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if(dotIndex == -1)\n          \
    \  \"No\"\n        else if(file_name.length() > 3)\n            \"No\"\n     \
    \   else if(file_name.indexOf(\".\") == 0)\n            \"No\"\n        else if(file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"A\")\n            \"No\"\n       \
    \ else if(file_name.substring(dotIndex,dotIndex+1) != \"txt\" && file_name.substring(dotIndex,dotIndex+1)\
    \ != \"exe\" && file_name.substring(dotIndex,dotIndex+1) != \"dll\")\n       \
    \     \"No\"\n        else\n            \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp10mea2zt.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ _ if file_name.length < 3 => \"No\"\n            case _ if file_name.contains(\"\
    .\") => \"No\"\n            case _ if file_name.substring(0, 1).isEmpty  => \"\
    No\"\n            case _ if file_name.substring(0,1) != \"a\" && file_name.substring(0,1)\
    \ != \"A\" => \"No\"\n            case _ if file_name.substring(file_name.length-1,\
    \ file_name.length) != \"txt\" && file_name.substring(file_name.length-1, file_name.length)\
    \ != \"exe\" && file_name.substring(file_name.length-1, file_name.length) != \"\
    dll\" => \"No\"\n            case _ => \"Yes\"\n        }\n        return valid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xjpzswi.scala:30)\n\tat Problem.main(tmp2xjpzswi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.dropWhile(c => !c.isDigit).takeWhile(c => c.isLetter).drop(1)\n\
    \        val file_name = file_name.dropWhile(c => !c.equals(\".\"))\n        val\
    \ file_name = file_name.takeWhile(c => c.equals(\".\"))\n        val file_name\
    \ = file_name.dropWhile(c => !c.equals(\"txt\") && !c.equals(\"exe\") && !c.equals(\"\
    dll\"))\n        val file_name = file_name.takeWhile(c => c.equals(\"txt\") ||\
    \ c.equals(\"exe\") || c.equals(\"dll\"))\n        val file_name = file_name.mkString\n\
    \        val file_name = file_name.dropWhile(c => !c.equals(\".\"))\n        val\
    \ file_name = file_name.takeWhile(c => c.equals(\".\"))\n        val file_name\
    \ = file_name.dropWhile(c => !c.equals(\"txt\") && !c.equals(\"exe\") && !c.equals(\"\
    dll\"))\n        val file_name = file_name.takeWhile(c => c.equals(\"txt\") ||\
    \ c.equals(\"exe\") || c.equals(\"dll\"))\n        val file_name = file_name.mkString\n\
    \        val file_name = file_name.dropWhile(c => !c.equals(\".\"))\n        val\
    \ file_name = file_name.takeWhile(c => c.equals(\".\"))\n        val file_name\
    \ = file_name.dropWhile(c => !c.equals(\"txt\") && !c.equals(\"exe\") && !c.equals(\"\
    dll\"))\n        val file_name = file_name.takeWhile(c => c.equals(\"txt\") ||\
    \ c.equals(\"exe\") || c.equals(\"dll\"))\n        val file_name = file_name.mkString\n\
    \        val file_name = file_name.dropWhile(c => !c.equals(\".\"))\n        val\
    \ file_name = file_name.takeWhile(c => c.equals(\".\"))\n        val file_name\
    \ = file_name.dropWhile(c => !c.equals(\"txt\") && !c.equals(\"exe\") && !c.equals(\"\
    dll\"))\n        val file_name = file_name.takeWhile(c => c.equals(\"txt\") ||\
    \ c.equals(\"exe\") || c.equals(\"dll\"))\n        val file_name = file_name.mkString\n\
    \        val file_name = file_name.dropWhile(c => !c.equals(\".\"))\n        val\
    \ file_name = file_name.takeWhile(c => c.equals(\".\"))\n        val file_name\
    \ = file_name.dropWhile(c => !c.equals(\"txt\") && !c.equals(\"exe\") && !c.equals(\"\
    dll\"))\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvqj1rfp5.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.isDigit).takeWhile(\e[36mc\e[0m => c.isLetter).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvqj1rfp5.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.equals(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvqj1rfp5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.takeWhile(\e\
    [36mc\e[0m => c.equals(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvqj1rfp5.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(\e\
    [36mc\e[0m => !c.equals(\e[31m\"txt\"\e[0m) && !c.equals(\e[31m\"exe\"\e[0m) &&\
    \ !c.equals(\e[31m\"dll\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m  "
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if(dotIndex < 1 || dotIndex > file_name.length-1){\n\
    \            return \"No\"\n        }\n        val fileName = file_name.substring(0,\
    \ dotIndex)\n        val extension = file_name.substring(dotIndex+1)\n       \
    \ if(fileName.matches(\"[0-9]{3}\")){\n            if(extension.matches(\"[.]txt|[.]exe|[.]dll\"\
    )){\n                return \"Yes\"\n            }\n        }\n        return\
    \ \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkyyydhxd.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val file_name = file_name.substring(0, dot_index)\n        val file_name\
    \ = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.substring(0, 1)\n        val file_name\
    \ = file_name.substring(0, 3)\n        val file_name = file_name + \".\" + file_name.substring(dot_index)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        val file_name = file_name.substring(0, 1)\n      \
    \  val file_name = file_name.substring(0, 3)\n        val file_name = file_name\
    \ + \".\" + file_name.substring(dot_index)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n        val\
    \ file_name = file_name.substring(0, 1)\n        val file_name = file_name.substring(0,\
    \ 3)\n        val file_name = file_name + \".\" + file_name.substring(dot_index)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        val file_name = file_name.substring(0, 1)\n      \
    \  val file_name = file_name.substring(0, 3)\n        val file_name = file_name\
    \ + \".\" + file_name.substring(dot_index)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n        val\
    \ file_name = file_name.substring(0, 1)\n        val file_name = file_name.substring(0,\
    \ 3)\n        val file_name = file_name + \".\" + file_name.substring(dot_index)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        val file_name = file_name.substring(0, 1)\n      \
    \  val file_name = file_name.substring(0, 3)\n        val file_name = file_name\
    \ + \".\" + file_name.substring(dot_index)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n        val\
    \ file_name = file_name.substring(0, 1)\n        val file_name = file_name.substring(0,\
    \ 3)\n        val file_name = file_name + \".\" + file_name.substring(dot_index)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.replaceAll(\"\
    [^a-zA-Z]\", \"\")\n        val file_name = file_name.substring(0, 1)\n      \
    \  val file_name = file_name.substring(0, 3)\n        val file_name = file_name\
    \ + \".\" + file_name.substring(dot_index)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^a-zA-Z]\", \"\")\n        val\
    \ file_name = file_name.substring(0, 1)\n        val file_name = file_name.substring(0,\
    \ 3)\n        val file_name = file_name + \".\" + file_name.substring(dot_index)\n\
    \        val file_name = file_name.toUpperCase\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfdxvx7on.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfdxvx7on.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfdxvx7on.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpfdxvx7on.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"[^a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfdxvx7on.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m)\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\".\").last\n        val fileName = fileName.split(\"\
    \\\\\").last\n        val fileName = fileName.split(\"/\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\"/\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\"/\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\"/\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\"/\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\"/\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\"/\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjqwpc7jk.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjqwpc7jk.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjqwpc7jk.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjqwpc7jk.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjqwpc7jk.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if (file_name.length()\
    \ > 3 || file_name.contains(\".\") || file_name.substring(0, 1).isEmpty) {\n \
    \           return \"No\"\n        }\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if (dot_index == -1 || file_name.substring(0, dot_index).isEmpty)\
    \ {\n            return \"No\"\n        }\n        val dot_char = file_name.charAt(dot_index)\n\
    \        if (dot_char != 'a' && dot_char != 'b' && dot_char != 'c' && dot_char\
    \ != 'd' && dot_char != 'e' && dot_char != 'f' && dot_char != 'g' && dot_char\
    \ != 'h' && dot_char != 'i' && dot_char != 'j' && dot_char != 'k' && dot_char\
    \ != 'l' && dot_char != 'm' && dot_char != 'n' && dot_char != 'o' && dot_char\
    \ != 'p' && dot_char != 'q' && dot_char != 'r' && dot_char != 's' && dot_char\
    \ != 't' && dot_char != 'u' && dot_char != 'v' && dot_char != 'w' && dot_char\
    \ != 'x' && dot_char != 'y' && dot_char != 'z') {\n            return \"No\"\n\
    \        }\n        if (file_name.substring(dot_index + 1, dot_index + 4).contains(\"\
    exe\") || file_name.substring(dot_index + 1, dot_index + 4).contains(\"dll\"))\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6ko3icib.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010344
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphasya6mp.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphasya6mp.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = if (dot_index\
    \ == -1) -1 else dot_index\n        val dot_index = if (dot_index == -1) -1 else\
    \ dot_index\n        val dot_index = if (dot_index == -1) -1 else dot_index\n\
    \        val dot_index = if (dot_index == -1) -1 else dot_index\n        val dot_index\
    \ = if (dot_index == -1) -1 else dot_index\n        val dot_index = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7g41zs4s.scala:56:23 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp7g41zs4s.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = \e[33mif\e\
    [0m (dot_index == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dot_index\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7g41zs4s.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = \e[33mif\e[0m (dot_index\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dot_index\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7g41zs4s.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = \e[33mif\e[0m (dot_index\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dot_index\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7g41zs4s.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_inde"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxo"
  stdout: ''
  timestamp: 1660010348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ \"\" => \"No\"\n            case _ => file_name match {\n                case\
    \ file_name if file_name.contains(\".\") => file_name match {\n              \
    \      case file_name if file_name.startsWith(\"a\") || file_name.startsWith(\"\
    A\") => file_name match {\n                        case file_name if file_name.endsWith(\"\
    txt\") || file_name.endsWith(\"exe\") || file_name.endsWith(\"dll\") => \"Yes\"\
    \n                        case _ => \"No\"\n                    }\n          \
    \          case _ => \"No\"\n                }\n                case _ => \"No\"\
    \n            }\n        }\n        return valid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpky8weh83.scala:35)\n\tat Problem.main(tmpky8weh83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n     \
    \   val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n     \
    \   val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n     \
    \   val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-z]\", \"\")\n        val file_name = file_name\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz31_pv8k.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz31_pv8k.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz31_pv8k.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz31_pv8k.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-zA-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz31_pv8k.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m      "
  stdout: ''
  timestamp: 1660010349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = true \n        var dotPos = file_name.indexOf(\"\
    .\") \n        if (dotPos == -1) valid = false \n        else if (!(file_name.substring(0,\
    \ dotPos).matches(\"^[a-zA-Z]+\"))) valid = false \n        else if (!(file_name.substring(dotPos\
    \ + 1).matches(\"^[txt|exe|dll]\"))) valid = false \n        else valid = true\
    \ \n        if (valid) \n            file_name \n        else \n            \"\
    No\" \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnjakt7ja.scala:31)\n\tat Problem.main(tmpnjakt7ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern1 = \"^[a-zA-Z][a-zA-Z0-9]+[.]$\"\n        val pattern2 =\
    \ \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\n     \
    \   val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9]+$\"\
    \n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb98im30m.scala:31:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mpattern12\e[0m = \"^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpb98im30m.scala:33:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb98im30m.scala:32:5 ---------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpb98im30m.scala:33:4 -------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: ^[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Zdef\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.length-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.toCharArray\n        val file_name = file_name.filter(x\
    \ => x >= 'a' && x <= 'z' || x >= 'A' && x <= 'Z')\n        val file_name = file_name.filter(x\
    \ => x != '_')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc_yxqyrv.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_yxqyrv.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc_yxqyrv.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc_yxqyrv.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc_yxqyrv.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must al"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\".+\\\\.\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D+\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqyoellfn.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqyoellfn.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"\\\\D\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqyoellfn.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqyoellfn.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\".+\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpqyoellfn.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overload"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt0cu56ov.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpt0cu56ov.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.substring(0,3)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo_hwdwtf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpo_hwdwtf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_hwdwtf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_hwdwtf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpo_hwdwtf.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of "
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index - 1\n        val file_name = file_name.substring(dot_index)\n\
    \        val file_name = file_name.substring(0, dot_index)\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.replaceAll(\"[^0-9a-zA-Z.]\", \"\")\n     \
    \   val file_name = file_name.replaceAll(\"^[a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[a-zA-Z]$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"[0-9]$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9a-zA-Z]\", \"\")\n    \
    \    val file_name = file_name.replaceAll(\"[0-9a-zA-Z]$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n   \
    \     val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    [0-9a-zA-Z.]$\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n   \
    \     val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n   \
    \     val file_name = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"[0-9a-zA-Z.]$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[0-9a-zA-Z.]\", \"\")\n        val \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnrfiiizt.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnrfiiizt.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnrfiiizt.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnrfiiizt.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(dot_index)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnrfiiizt.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if (file_name.length\
    \ < 3 || file_name.contains(\".\") || file_name.substring(0, 1).isEmpty) {\n \
    \           return \"No\"\n        }\n        val dot_index = file_name.indexOf(\"\
    .\")\n        if (dot_index == -1 || dot_index > 3 || file_name.substring(dot_index\
    \ - 1, dot_index).isEmpty) {\n            return \"No\"\n        }\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        if (dot_index == -1 || dot_index\
    \ > 3 || file_name.substring(dot_index - 1, dot_index).isEmpty) {\n          \
    \  return \"No\"\n        }\n        val dot_index = file_name.indexOf(\".\")\n\
    \        if (dot_index == -1 || dot_index > 3 || file_name.substring(dot_index\
    \ - 1, dot_index).isEmpty) {\n            return \"No\"\n        }\n        if\
    \ (file_name.substring(dot_index - 1, dot_index) == \"txt\" || file_name.substring(dot_index\
    \ - 1, dot_index) == \"exe\" || file_name.substring(dot_index - 1, dot_index)\
    \ == \"dll\") {\n            return \"Yes\"\n        }\n        return \"No\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx0wtadom.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.indexOf(\e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpx0wtadom.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.indexOf(\e\
    [31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpx0wtadom.scala:19:24 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"[^0-9.]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    [^a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-zA-Z.]\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^[a-zA-Z.]\", \"\")\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpujaxej17.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"[^0-9.]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpujaxej17.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[^a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpujaxej17.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"[^a-zA-Z.]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpujaxej17.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpujaxej17.scala:24:12 ---------------------"
  stdout: ''
  timestamp: 1660010356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        if (dot_index == -1) return \"\
    No\"\n        val first_letter = file_name.substring(0, dot_index)\n        if\
    \ (!(first_letter >= 'a' && first_letter <= 'z')) return \"No\"\n        if (!(file_name.substring(dot_index).contains(\"\
    .txt\")) && !(file_name.substring(dot_index).contains(\".exe\")) && !(file_name.substring(dot_index).contains(\"\
    .dll\"))) return \"No\"\n        if (file_name.substring(dot_index).contains(\"\
    .txt\")) return \"Yes\"\n        if (file_name.substring(dot_index).contains(\"\
    .exe\")) return \"Yes\"\n        if (file_name.substring(dot_index).contains(\"\
    .dll\")) return \"Yes\"\n        return \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvz0b7ebu.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        }\n        else if (dotIndex == 0) {\n            \"No\"\
    \n        }\n        else if (file_name.substring(0,1) != \"a\" && file_name.substring(0,1)\
    \ != \"A\" && file_name.substring(0,1) != \"b\" && file_name.substring(0,1) !=\
    \ \"B\" && file_name.substring(0,1) != \"c\" && file_name.substring(0,1) != \"\
    C\" && file_name.substring(0,1) != \"d\" && file_name.substring(0,1) != \"D\"\
    \ && file_name.substring(0,1) != \"e\" && file_name.substring(0,1) != \"E\" &&\
    \ file_name.substring(0,1) != \"f\" && file_name.substring(0,1) != \"F\" && file_name.substring(0,1)\
    \ != \"g\" && file_name.substring(0,1) != \"G\" && file_name.substring(0,1) !=\
    \ \"h\" && file_name.substring(0,1) != \"H\" && file_name.substring(0,1) != \"\
    i\" && file_name.substring(0,1) != \"I\" && file_name.substring(0,1) != \"j\"\
    \ && file_name.substring(0,1) != \"J\" && file_name.substring(0,1) != \"k\" &&\
    \ file_name.substring(0,1) != \"K\" && file_name.substring(0,1) != \"l\" && file_name.substring(0,1)\
    \ != \"L\" && file_name.substring(0,1) != \"m\" && file_name.substring(0,1) !=\
    \ \"M\" && file_name.substring(0,1) != \"n\" && file_name.substring(0,1) != \"\
    N\" && file_name.substring(0,1) != \"o\" && file_name.substring(0,1) != \"O\"\
    \ && file_name.substring(0,1) != \"p\" && file_name.substring(0,1) != \"P\" &&\
    \ file_name.substring(0,1) != \"q\" && file_name.substring(0,1) != \"Q\" && file_name.substring(0,1)\
    \ != \"r\" && file_name.substring(0,1) != \"R\" && file_name.substring(0,1) !=\
    \ \"s\" && file_name.substring(0,1) != \"S\" && file_name.substring(0,1) != \"\
    t\" && file_name.substring(0,1) != \"T\" && file_name.substring(0,1) != \"u\"\
    \ && file_name.substring(0,1) != \"U\" && file_name.substring(0,1) != \"v\" &&\
    \ file_name.substring(0,1) != \"V\" && file_name.substring(0,1) != \"w\" && file_name.substring(0,1)\
    \ != \"W\" && file_name.substring(0,1) != \"x\" && file_name.substring(0,1) !=\
    \ \"X\" && file_name.substring(0,1) != \"y\" && file_name.substring(0,1) != \"\
    Y\" && file_name.substring(0,1) != \"z\" && file_name.substring(0,1) != \"Z\"\
    ) {\n            \"No\"\n        }\n        else if (file_name.substring(dotIndex,dotIndex+3)\
    \ != \"txt\" && file_name.substring(dotIndex,dotIndex+3) != \"exe\" && file_name.substring(dotIndex,dotIndex+3)\
    \ != \"dll\") {\n            \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo3mpukcz.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo3mpukcz.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m               \
    \         ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpo3mpukcz.scala:62:1 ---------------------\e[0m\e[0m\n\e[31m62\
    \ |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m\
    \   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpo3mpukcz.scala:33:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n\e[33m\e[33m-- [E129] Potential Issue Warning:\
    \ /tmp/tmpo3mpukcz.scala:31:12 ----------------\e[0m\e[0m\n\e[33m31 |\e[0m   \
    \         \e[31m\"No\"\e[0m\n\e[33m\e[33m   |\e[0m            ^^^^\e[0m\n\e[33m\
    \   |\e[0mA pure expression does nothing in statement position; you may be omitting\
    \ necessary parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 warnings found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern2\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 =\
    \ \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern13 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmx35gakp.scala:20:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmpmx35gakp.scala:22:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                              invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmpmx35gakp.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpmx35gakp.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmpmx35gakp.scala:23:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \              invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpmx35gakp.scala:23:90\
    \ ----"
  stdout: ''
  timestamp: 1660010358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"[^0-9a-zA-Z.]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    \\\\.\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    ^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    ^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    ^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    ^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name\
    \ = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"\
    ^[^a-zA-Z]\", \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\"\
    , \"\")\n        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n\
    \        val file_name = file_name.replaceFirst(\"^[^a-zA-Z]\", \"\")\n      \
    \  val \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpyqrzj5_1.scala:56:11 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpyqrzj5_1.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"[^0-9a-zA-Z.]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqrzj5_1.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceFirst(\e\
    [31m\"^[^a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqrzj5_1.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceFirst(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyqrzj5_1.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceFirst(\e\
    [31m\"^[^a-zA-Z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W?\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W?\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W?\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W?\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W?\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W?\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy3fll2sg.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy3fll2sg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy3fll2sg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy3fll2sg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy3fll2sg.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W?\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W?\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W-\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W-\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W$\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W+\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W*\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W*\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W?\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W?\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W!\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W!\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W-\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W-\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W?\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W?\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W!\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W!\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W-\", \"\")\n        val file_name = file_name.replaceAll\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpncbb8844.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncbb8844.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncbb8844.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncbb8844.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpncbb8844.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxo"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index - 1\n        val dot_index = dot_index - 1\n\
    \        val dot_index = dot_index\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3kbne44_.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3kbne44_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3kbne44_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3kbne44_.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3kbne44_.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1660010359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.lastIndexOf('.')\n        if (dotIndex == -1) {\n     \
    \       \"No\"\n        } else {\n            val file_name = file_name.substring(0,\
    \ dotIndex)\n            val file_name = file_name.trim\n            val dotIndex\
    \ = file_name.lastIndexOf('.')\n            if (dotIndex == -1) {\n          \
    \      \"No\"\n            } else if (file_name.startsWith(\"a\") && file_name.endsWith(\"\
    z\") || file_name.startsWith(\"A\") && file_name.endsWith(\"Z\")) {\n        \
    \        \"Yes\"\n            } else {\n                \"No\"\n            }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_tw5xsu1.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_tw5xsu1.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp_tw5xsu1.scala:24:28 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010355
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = false\n        var file_name = file_name.trim\n\
    \        var dotIndex = file_name.indexOf(\".\")\n        var firstChar = file_name.charAt(0)\n\
    \        var lastChar = file_name.charAt(file_name.length-1)\n        var firstCharIsLetter\
    \ = firstChar >= 'a' && firstChar <= 'z' || firstChar >= 'A' && firstChar <= 'Z'\n\
    \        var lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z' || lastChar\
    \ >= 'A' && lastChar <= 'Z'\n        var firstCharIsDigit = firstChar >= '0' &&\
    \ firstChar <= '9'\n        var lastCharIsDigit = lastChar >= '0' && lastChar\
    \ <= '9'\n        var firstCharIsNotEmpty = firstChar != \"\"\n        var lastCharIsNotEmpty\
    \ = lastChar != \"\"\n        var firstCharIsNotEmptyAndNotDot = firstCharIsNotEmpty\
    \ && firstCharIsNotDot\n        var lastCharIsNotEmptyAndNotDot = lastCharIsNotEmpty\
    \ && lastCharIsNotDot\n        if (dotIndex >= 0) {\n            var firstCharBeforeDot\
    \ = file_name.charAt(dotIndex-1)\n            var lastCharBeforeDot = file_name.charAt(dotIndex-2)\n\
    \            var firstCharBeforeDotIsLetter = firstCharBeforeDot >= 'a' && firstCharBeforeDot\
    \ <= 'z' || firstCharBeforeDot >= 'A' && firstCharBeforeDot <= 'Z'\n         \
    \   var lastCharBeforeDotIsLetter = lastCharBeforeDot >= 'a' && lastCharBeforeDot\
    \ <= 'z' || lastCharBeforeDot >= 'A' && lastCharBeforeDot <= 'Z'\n           \
    \ var firstCharBeforeDotIsDigit = firstCharBeforeDot >= '0' && firstCharBeforeDot\
    \ <= '9'\n            var lastCharBeforeDotIsDigit = lastCharBeforeDot >= '0'\
    \ && lastCharBeforeDot <= '9'\n            var firstCharBeforeDotIsNotEmpty =\
    \ firstCharBeforeDot != \"\"\n            var lastCharBeforeDotIsNotEmpty = lastCharBeforeDot\
    \ != \"\"\n            var firstCharBeforeDotIsNotEmptyAndNotDot = firstCharBeforeDotIsNotEmpty\
    \ && firstCharBeforeDotIsNotDot\n            var lastCharBeforeDotIsNotEmptyAndNotDot\
    \ = lastCharBeforeDotIsNotEmpty && lastCharBeforeDotIsNotDot\n            if (firstCharIsLetter\
    \ && lastCharIsLetter && firstCharIsDigit && lastCharIsDig\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprh_c8m9d.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprh_c8m9d.scala:75:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m75 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmprh_c8m9d.scala:20:24 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprh_c8m9d.scala:74:1\
    \ ---------------------\e[0m\e[0m\n\e[31m74 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmprh_c8m9d.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\.\").last\n        val fileName =\
    \ fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\\\\\
    .\").last\n        val fileName = fileName.split(\"\\\\.\").head\n        val\
    \ fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.split(\"\\\\.\").head\n       \
    \ val fileName = fileName.split(\"\\\\.\").last\n        val fileName = fileName.split(\"\
    \\\\.\").head\n        val fileName = fileName.split(\"\\\\.\").last\n       \
    \ val fileName = fileName.split(\"\\\\.\").head\n        val fileName = fileName.split(\"\
    \\\\.\").last\n        val fileName = fileName.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpba_jabsi.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpba_jabsi.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\.\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpba_jabsi.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\.\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpba_jabsi.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\.\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpba_jabsi.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\.\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Nam"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z0-9]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z0-9]{3}$\"\n        val pattern5 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+$\"\
    \n        val pattern6 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern7 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern8 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern9 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern10 = \"^[a-zA-Z0-9]{3}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \n        val pattern11 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern14 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern15 = \"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern16 = \"^[a-zA-Z0-9]{3}\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:24:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:25:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern6\e[0m = \e[31m\"^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \       ^\e[0m\n\e[31m   |\e[0m                                        invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:25:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mpattern6\e[0m = \e[31m\"\
    ^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                invalid escape character\n\e\
    [31m\e[31m-- Error: /tmp/tmpmvr18j8l.scala:26:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mpattern7\e[0m = \e[31m\"\
    ^[a-zA-Z0-9]{3}\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e[0m \
    \                                       invalid e"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\".\").last\n        val fileName = fileName.split(\"\
    \\\\\").last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlhmtv76.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdlhmtv76.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.toUpperCase\n        val file_name =\
    \ file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnpeyrxj7.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnpeyrxj7.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpeyrxj7.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnpeyrxj7.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpeyrxj7.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\
    \n        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0cfmdn2f.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0cfmdn2f.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").last\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0,\
    \ fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0,\
    \ fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0,\
    \ fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0,\
    \ fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0,\
    \ fileName.indexOf(\".\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n\
    \        val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n     \
    \   val fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val\
    \ fileName = fileName.substring(0, fileName.indexOf(\".\"))\n        val fileName\
    \ = fileName.substring(0, \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzrabtabm.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzrabtabm.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfileName\e[0m = fileName.substring(\e[31m0\e[0m, fileName.indexOf(\e[31m\"\
    .\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzrabtabm.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.substring(\e\
    [31m0\e[0m, fileName.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpzrabtabm.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.substring(\e[31m0\e\
    [0m, fileName.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzrabtabm.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.substring(\e\
    [31m0\e[0m, fileName.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfileName is already defined as \e[33"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern2 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbl9mrhcr.scala:30:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mpattern12\e[0m = \"^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpbl9mrhcr.scala:32:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbl9mrhcr.scala:31:5 ---------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbl9mrhcr.scala:32:4 -------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.]{1}[a-zA-Z][a-zA-Z0-9]*[.def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxo"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        var dotIndex\
    \ = file_name.indexOf(\".\")\n        if (dotIndex != -1) {\n            var file_name\
    \ = file_name.substring(0, dotIndex)\n            var file_name = file_name.toUpperCase()\n\
    \            var file_name = file_name.substring(0,1)\n            var file_name\
    \ = file_name.toCharArray\n            var file_name = file_name.toList\n    \
    \        var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name.toList\n            var file_name = file_name.toMap\n\
    \            var file_name = file_name.toSet\n            var file_name = file_name.toSeq\n\
    \            var file_name = file_name.toArray\n            var file_name = file_name.toIterator\n\
    \            var file_name = file_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpluz0i8ge.scala:123:0 ---------------------------\e\
    [0m\e[0m\n\e[31m123 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpluz0i8ge.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfile_name\e[0m = file_name\n\e[31m\e[31m   |\e[0m                    \
    \    ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvariable\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpluz0i8ge.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpluz0i8ge.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpluz0i8ge.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpluz0i8ge.scala:26:16 -------------------------"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false\n        var file_name = file_name.trim\n\
    \        var file_name = file_name.substring(0,file_name.length-1)\n        var\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        var file_name\
    \ = file_name.substring(0,1)\n        var file_name = file_name.toUpperCase()\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file_name = file_name.substring(0,1)\n\
    \        var file_name = file_name.substring(0,1)\n        var file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4wtit4p2.scala:77:4 ----------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wtit4p2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4wtit4p2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4wtit4p2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4wtit4p2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").head\n        val fileName =\
    \ fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\").head\n\
    \        val fileName = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\
    \\\\\").head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7ela4q6s.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7ela4q6s.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ela4q6s.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ela4q6s.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7ela4q6s.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val file_name = file_name.substring(dot_index)\n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.substring(0,1)\n       \
    \ val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.trim\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5yz97s7a.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5yz97s7a.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(dot_index)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp5yz97s7a.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp5yz97s7a.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp5yz97s7a.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already"
  stdout: ''
  timestamp: 1660010364
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\"\
    \".r\n        val result = regex.findFirstIn(file_name) match {\n            case\
    \ Some(match) => \"Yes\"\n            case None => \"No\"\n        }\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp5luxfa8b.scala:21:22 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m Some(\e[33mmatch\e[0m) =>\
    \ \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^^^\e[0m\n\e\
    [31m   |\e[0m                      pattern expected\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ps51xz.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu1ps51xz.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^(?!\\.)[a-z][a-z\\.]*$\"\"\
    \".r\n        val regex2 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\"\
    .r\n        val regex3 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex4 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex5 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex6 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex7 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex8 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex9 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex10 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex11 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex12 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex13 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex14 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex15 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex16 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex17 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex18 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex19 = \"\"\"^(?!\\.)[a-z][a-z\\.]*\\.(txt|exe|dll)$\"\"\".r\n\
    \        val regex20 = \"\"\"^(?!\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp16utnqse.scala:38:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mregex20\e[0m = \"\"\"^(?!\n\
    \e[31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m           \
    \           unclosed multi-line string literal\n1 error found\n"
  stdout: ''
  timestamp: 1660010363
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toCharArray\n\
    \        val file_name = file_name.filter(x => x >= 'a' && x <= 'z' || x >= 'A'\
    \ && x <= 'Z')\n        val file_name = file_name.filter(x => x != '\\0')\n  \
    \      val file_name = file_name.filter(x => x != '\\n')\n        val file_name\
    \ = file_name.filter(x => x != '\\r')\n        val file_name = file_name.filter(x\
    \ => x != '\\t')\n        val file_name = file_name.filter(x => x != '/')\n  \
    \      val file_name = file_name.filter(x => x != '\\\\')\n        val file_name\
    \ = file_name.filter(x => x != '\\'')\n        val file_name = file_name.filter(x\
    \ => x != '\"')\n        val file_name = file_name.filter(x => x != '*')\n   \
    \     val file_name = file_name.filter(x => x != '?')\n        val file_name =\
    \ file_name.filter(x => x != '<')\n        val file_name = file_name.filter(x\
    \ => x != '>')\n        val file_name = file_name.filter(x => x != '|')\n    \
    \    val file_name = file_name.filter(x => x != '\"')\n        val file_name =\
    \ file_name.filter(x => x != '=')\n        val file_name = file_name.filter(x\
    \ => x != '?')\n        val file_name = file_name.filter(x => x != '&')\n    \
    \    val file_name = file_name.filter(x => x != '*')\n        val file_name =\
    \ file_name.filter(x => x != '(')\n        val file_name = file_name.filter(x\
    \ => x != ')')\n        val file_name = file_name.filter(x => x != '[')\n    \
    \    val file_name = file_name.filter(x => x != ']')\n        val file_name =\
    \ file_name.filter(x => x != '{')\n        val file_name = file_name.filter(x\
    \ => x != '}')\n        val file_name = file_name.filter(x => x != '|')\n    \
    \    val file_name = file_name.filter(x => x != '\"')\n        val file_name =\
    \ file_name.filter(x => x != '=')\n        val file_name = file_name.filter(x\
    \ => x != '?')\n        val file_name = file_name.filter(x => x != '&')\n    \
    \    val file_name = file_name.filter(x => x != '*')\n        val file_name =\
    \ file_name.filter(x => x != '(')\n        val file_name = file_name.filter(x\
    \ => x != ')')\n        val file_name = file_name.filter(x => \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjspx47kw.scala:24:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.filter(\e\
    [36mx\e[0m => x != \e[31m'\\0'\e[0m)\n\e[31m\e[31m   |\e[0m                  \
    \                                  ^\e[0m\n\e[31m   |\e[0m               octal\
    \ escape literals are unsupported: use \\u0000 instead\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmpjspx47kw.scala:56:45 ---------------------------\e[0m\e\
    [0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.filter(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpjspx47kw.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjspx47kw.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjspx47kw.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is a"
  stdout: ''
  timestamp: 1660010368
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name\n        val fileName\
    \ = fileName.trim\n        val fileName = fileName.replaceAll(\"\\\\s+\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"\\\\.\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\",\"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]\",\"\"\
    )\n        val fileName = fileName.replaceAll(\"^\\\\D+\",\"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]\",\"\")\n        val fileName = fileName.replaceAll(\"\
    ^\\\\\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvq_0bx2_.scala:56:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\"\
    ^\\\\\n\e[31m\e[31m   |\e[0m                                           ^\e[0m\n\
    \e[31m   |\e[0m                                           unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpvq_0bx2_.scala:58:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvq_0bx2_.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfileName\e[0m = fileName.trim\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvq_0bx2_.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"\\\\s+\"\e[0m,\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvq_0bx2_.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m,\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else {\n            val file_name = file_name.substring(0,\
    \ dotIndex)\n            val dotIndex = file_name.indexOf(\".\")\n           \
    \ if (dotIndex == -1) {\n                \"No\"\n            } else {\n      \
    \          val file_name = file_name.substring(0, dotIndex)\n                val\
    \ dotIndex = file_name.indexOf(\".\")\n                if (dotIndex == -1) {\n\
    \                    \"No\"\n                } else {\n                    val\
    \ file_name = file_name.substring(0, dotIndex)\n                    val dotIndex\
    \ = file_name.indexOf(\".\")\n                    if (dotIndex == -1) {\n    \
    \                    \"No\"\n                    } else {\n                  \
    \      val file_name = file_name.substring(0, dotIndex)\n                    \
    \    val dotIndex = file_name.indexOf(\".\")\n                        if (dotIndex\
    \ == -1) {\n                            \"No\"\n                        } else\
    \ {\n                            val file_name = file_name.substring(0, dotIndex)\n\
    \                            val dotIndex = file_name.indexOf(\".\")\n       \
    \                     if (dotIndex == -1) {\n                                \"\
    No\"\n                            } else {\n                                \"\
    Yes\"\n                            }\n                        }\n            \
    \        }\n                }\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpw5b9y_.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpw5b9y_.scala:24:28\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, dotIndex)\n\e[31m\e\
    [31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m             \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpw5b9y_.scala:29:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, dotIndex)\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpw5b9y_.scala:34:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    \e\
    [33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, dotIndex)\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbpw5b9y_.scala:39:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                     \
    \   \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, dotIndex)\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                  "
  stdout: ''
  timestamp: 1660010365
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.replaceAll(\"\\\\W\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"\\\\D+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^[a-z]+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]+$\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]+$\", \"\")\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ejvs643.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9ejvs643.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ejvs643.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ejvs643.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ejvs643.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name."
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if(dotIndex == -1) \"No\"\n   \
    \     else if(dotIndex == 0) \"No\"\n        else if(file_name.substring(0, dotIndex).matches(\"\
    ^[a-zA-Z]\") && \n                file_name.substring(dotIndex).matches(\"^[txt|exe|dll]\"\
    ))\n            \"Yes\"\n        else \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbabi4mde.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n  \
    \      val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \
    \    val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n  \
    \      val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \
    \    val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"\
    ))\n        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n\
    \        val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n  \
    \      val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n    \
    \    val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n      \
    \  val file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val\
    \ file_name = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name =\
    \ file_name.substring(0, file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0, file_name.indexOf(\"\
    .\"))\n        val file_name = file_name.substring(0, file_name.indexOf\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppfj0wv4q.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppfj0wv4q.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m, file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppfj0wv4q.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmppfj0wv4q.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m, file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppfj0wv4q.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m, file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_"
  stdout: ''
  timestamp: 1660010369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ps51xz.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu1ps51xz.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1 || dotIndex\
    \ > file_name.length - 1 || \n            file_name.substring(0, dotIndex).isEmpty)\
    \ {\n            return \"No\"\n        }\n        val extension = file_name.substring(dotIndex\
    \ + 1)\n        val extensions = List(\"txt\", \"exe\", \"dll\")\n        if (extensions.contains(extension))\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphnxh_203.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if(dotIndex == -1)\n          \
    \  return \"No\"\n        val file_name = file_name.substring(0, dotIndex)\n \
    \       val file_name = file_name.trim\n        val firstChar = file_name.charAt(0)\n\
    \        if(firstChar == '_' || firstChar == '-' || firstChar == '_' || firstChar\
    \ == '_')\n            return \"No\"\n        if(file_name.length() > 3)\n   \
    \         return \"No\"\n        if(file_name.indexOf(\".\") == -1)\n        \
    \    return \"No\"\n        if(file_name.substring(0, 1).toUpperCase != 'A' &&\
    \ file_name.substring(0, 1).toUpperCase != 'B' && file_name.substring(0, 1).toUpperCase\
    \ != 'C' && file_name.substring(0, 1).toUpperCase != 'D' && file_name.substring(0,\
    \ 1).toUpperCase != 'E' && file_name.substring(0, 1).toUpperCase != 'F' && file_name.substring(0,\
    \ 1).toUpperCase != 'G' && file_name.substring(0, 1).toUpperCase != 'H' && file_name.substring(0,\
    \ 1).toUpperCase != 'I' && file_name.substring(0, 1).toUpperCase != 'J' && file_name.substring(0,\
    \ 1).toUpperCase != 'K' && file_name.substring(0, 1).toUpperCase != 'L' && file_name.substring(0,\
    \ 1).toUpperCase != 'M' && file_name.substring(0, 1).toUpperCase != 'N' && file_name.substring(0,\
    \ 1).toUpperCase != 'O' && file_name.substring(0, 1).toUpperCase != 'P' && file_name.substring(0,\
    \ 1).toUpperCase != 'Q' && file_name.substring(0, 1).toUpperCase != 'R' && file_name.substring(0,\
    \ 1).toUpperCase != 'S' && file_name.substring(0, 1).toUpperCase != 'T' && file_name.substring(0,\
    \ 1).toUpperCase != 'U' && file_name.substring(0, 1).toUpperCase != 'V' && file_name.substring(0,\
    \ 1).toUpperCase != 'W' && file_name.substring(0, 1).toUpperCase != 'X' && file_name.substring(0,\
    \ 1).toUpperCase != 'Y' && file_name.substring(0, 1).toUpperCase != 'Z')\n   \
    \         return \"No\"\n        if(file_name.substring(file_name.length() - 1,\
    \ file_name.length()).toUpperCase != 'TXT' && file_name.substring(file_name.length()\
    \ - 1, file_name.length()).toUpperCase != 'EXE' && file_name.substring(file_name.length()\
    \ - 1, file_name.length()).toUpperCase != 'DLL')\n            return \"No\"\n\
    \        return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6kmoow9h.scala:34:90 -----------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m(file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'TXT\e[0m' && file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'EXE\e[0m' && file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'DLL\e[0m')\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                          ^\e[0m\n\e[31m   |\e[0msymbol literal 'TXT is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"TXT\" or an application Symbol(\"\
    TXT\") instead,\n\e[31m   |\e[0mor enclose in braces '{TXT} if you want a quoted\
    \ expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6kmoow9h.scala:34:94\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m(file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'TXT\e[0m' && file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'EXE\e[0m' && file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'DLL\e[0m')\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                        ')' expected, but ' found\n\e[31m\e[31m-- Error: /tmp/tmp6kmoow9h.scala:34:270\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e\
    [33mif\e[0m(file_name.substring(file_name.length() - \e[31m1\e[0m, file_name.length()).toUpperCase\
    \ != \e[31m'TXT\e[0m' && file_name.substring(file_name.length() - \e[31m1\e[0m,\
    \ file_name.length()).toUpperCase != \e[31m'EXE\e[0m' && file_name.substring(file_name.length()\
    \ - \e[31m1\e[0m, file_name.length()).toUpperCase != \e[31m'DLL\e[0"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex < 0)\
    \ -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi7zfeip5.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpi7zfeip5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi7zfeip5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ < \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi7zfeip5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi7zfeip5.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e["
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W+$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"\\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^\\\\W*+\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"\\\\W*+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*$\", \"\")\n \
    \       val file_name = file_name.replaceAll(\"^\\\\W*+*$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W*+*+\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+*+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*+$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*+$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*+*\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^\\\\W*+*+*\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"\\\\W*+*+*$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+*+*$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*+*+\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*+*+\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*+*+$\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^\\\\W*+*+*+$\", \"\")\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjvo7_oot.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010371
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ x if x.matches(\"[0-9]{3}\") && x.contains(\".\") && x.substring(0,1).matches(\"\
    [a-zA-Z]\") && x.substring(x.indexOf(\".\") + 1).contains(\"txt|exe|dll\") =>\
    \ true\n            case _ => false\n        }\n        if (valid) {\n       \
    \     return \"Yes\"\n        } else {\n            return \"No\"\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu9lzi6n7.scala:30)\n\tat Problem.main(tmpu9lzi6n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else {\n            val fileName = file_name.substring(0,\
    \ dotIndex)\n            val extension = file_name.substring(dotIndex + 1)\n \
    \           val allowedExtensions = Set(\"txt\", \"exe\", \"dll\")\n         \
    \   if (allowedExtensions.contains(extension)) {\n                \"Yes\"\n  \
    \          } else {\n                \"No\"\n            }\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3_sytcnh.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern2\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z0-9]{1}$\"\n        val\
    \ pattern4 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern5 = \"^[a-zA-Z0-9\\.]{1}$\"\
    \n        val pattern6 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern7 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern8 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern9\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern10 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern11 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern12 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern13 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern14\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern15 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern16 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern17 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern18 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern19\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern20 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern21 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern22 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern23 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern24\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern25 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern26 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern27 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern28 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern29\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern30 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern31 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern32 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern33 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern34\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern35 = \"^[a-zA-Z0-9\\.]{1}$\"\n\
    \        val pattern36 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern37 = \"^[a-zA-Z0-9\\\
    .]{1}$\"\n        val pattern38 = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern39\
    \ = \"^[a-zA-Z0-9\\.]{1}$\"\n        val pattern40 = \"^[a-zA-Z0-9\\.\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:22:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:23:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:24:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mpattern6\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:25:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mpattern7\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:26:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mpattern8\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:27:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mpattern9\e[0m = \e[31m\"\
    ^[a-zA-Z0-9\\.]{1}$\"\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                    invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpciwkg1cf.scala:28:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mpattern1"
  stdout: ''
  timestamp: 1660010370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}[a-zA-Z]{1}$\"\n \
    \       val pattern3 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern4\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern5 =\
    \ \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern6\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n\
    \        val pattern7 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern13 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern16 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpattern16\e[0m = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:37:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6i2u7o2.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6i2u7o2.scala:37:4 -------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Zdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^[0-9]{3}\\.[a-zA-Z]+$\"\"\
    \".r\n        val result = regex.findFirstIn(file_name).map(_.toString.toInt)\n\
    \        if (result.isEmpty) \n            \"No\"\n        else \n           \
    \ \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrjssy4v.scala:27)\n\tat Problem.main(tmpgrjssy4v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuu6kxwsg.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuu6kxwsg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\")\n\
    \        val fileName = fileName(0)\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val fileName = fileName.replaceAll(\"\\\\D+$\", \"\"\
    )\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val\
    \ fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName =\
    \ fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1syjhnl9.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^[a-zA-Z]+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"[a"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else if (dotIndex == 0) {\n            \"No\"\n      \
    \  } else if (file_name.substring(0,1) < 'a' || file_name.substring(0,1) > 'z')\
    \ {\n            \"No\"\n        } else if (file_name.substring(dotIndex,dotIndex+1)\
    \ < 'a' || file_name.substring(dotIndex,dotIndex+1) > 'z') {\n            \"No\"\
    \n        } else if (file_name.substring(dotIndex,dotIndex+2) < '0' || file_name.substring(dotIndex,dotIndex+2)\
    \ > '9') {\n            \"No\"\n        } else {\n            \"Yes\"\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppxl1c9z4.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}[a-zA-Z]{1}$\"\n \
    \       val pattern3 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern4\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern5 =\
    \ \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern6\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n\
    \        val pattern7 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern13 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern16 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpattern16\e[0m = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:37:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6i2u7o2.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6i2u7o2.scala:37:4 -------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Zdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ps51xz.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu1ps51xz.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\
    \n        val pattern2 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern5 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern6 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern9 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n    \
    \    val pattern17 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\\
    .[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnfcq8ahy.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpattern17\e[0m = \"^[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\
    \\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z]+\\\\.[a-zA-Z\n\e[31m\e[31m   |\e[0m  \
    \                      ^\e[0m\n\e[31m   |\e[0m                        unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpnfcq8ahy.scala:37:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnfcq8ahy.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpnfcq8ahy.scala:37:4 -------------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0mNot\
    \ found: ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Zdef\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\") + 1\n        val firstChar = file_name.charAt(0)\n\
    \        val lastChar = file_name.charAt(file_name.length-1)\n        val firstCharIsLetter\
    \ = firstChar >= 'a' && firstChar <= 'z'\n        val lastCharIsLetter = lastChar\
    \ >= 'a' && lastChar <= 'z'\n        val firstCharIsDigit = firstChar >= '0' &&\
    \ firstChar <= '9'\n        val lastCharIsDigit = lastChar >= '0' && lastChar\
    \ <= '9'\n        val firstCharIsNotEmpty = firstChar != 0\n        val lastCharIsNotEmpty\
    \ = lastChar != 0\n        val firstCharIsNotEmptyAndNotDot = firstCharIsNotEmpty\
    \ && firstCharIsNotDot\n        val lastCharIsNotEmptyAndNotDot = lastCharIsNotEmpty\
    \ && lastCharIsNotDot\n        val firstCharIsNotDot = firstCharIsNotEmpty &&\
    \ firstCharIsNotDot\n        val lastCharIsNotDot = lastCharIsNotEmpty && lastCharIsNotDot\n\
    \        val firstCharIsNotDotAndNotLetter = firstCharIsNotDot && firstCharIsNotLetter\n\
    \        val lastCharIsNotDotAndNotLetter = lastCharIsNotDot && lastCharIsNotLetter\n\
    \        val firstCharIsNotLetter = firstCharIsNotDot && firstCharIsNotLetter\n\
    \        val lastCharIsNotLetter = lastCharIsNotDot && lastCharIsNotLetter\n \
    \       val firstCharIsNotLetterAndNotDigit = firstCharIsNotLetter && firstCharIsNotDigit\n\
    \        val lastCharIsNotLetterAndNotDigit = lastCharIsNotLetter && lastCharIsNotDigit\n\
    \        val firstCharIsNotDigit = firstCharIsNotLetter && firstCharIsNotDigit\n\
    \        val lastCharIsNotDigit = lastCharIsNotLetter && lastCharIsNotDigit\n\
    \        val firstCharIsNotDigitAndNotDot = firstCharIsNotDigit && firstCharIsNotDot\n\
    \        val lastCharIsNotDigitAndNotDot = lastCharIsNotDigit && lastCharIsNotDot\n\
    \        val firstCharIsNotDot = firstCharIsNotDigit && firstCharIsNotDot\n  \
    \      val lastCharIsNotDot = lastCharIsNotDigit && lastCharIsNotDot\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbv8dzpq6.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mfirstCharIsNotDot\e[0m =\
    \ firstCharIsNotDigit && firstCharIsNotDot\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstCharIsNotDot is already defined as \e[33mvalue\e[0m \e\
    [35mfirstCharIsNotDot\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbv8dzpq6.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotDot\e[0m =\
    \ lastCharIsNotDigit && lastCharIsNotDot\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlastCharIsNotDot is already defined as \e[33mvalue\e[0m \e\
    [35mlastCharIsNotDot\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpbv8dzpq6.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbv8dzpq6.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.length-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.toCharArray\n        val file_name = file_name.filter(x\
    \ => x >= 'a' && x <= 'z' || x >= 'A' && x <= 'Z')\n        val file_name = file_name.filter(x\
    \ => x != '_')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '-')\n        val file_name =\
    \ file_name.filter(x => x != '-')\n        val file_name = file_name.filter(x\
    \ => x != '-')\n        val file\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc_yxqyrv.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc_yxqyrv.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.length-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc_yxqyrv.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpc_yxqyrv.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc_yxqyrv.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must al"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex < 0)\
    \ -1 else dotIndex\n        val firstChar = file_name.charAt(0)\n        val firstChar\
    \ = if (firstChar == '_') 'a' else if (firstChar == '-') 'A' else '0'\n      \
    \  val fileName = if (dotIndex < 0) file_name else file_name.substring(0,dotIndex)\n\
    \        val fileName = if (fileName.equals(\"\")) \"No\" else fileName\n    \
    \    val fileName = if (fileName.contains(\".\")) fileName.substring(0,fileName.indexOf(\"\
    .\"))\n        val fileName = if (fileName.startsWith(firstChar)) fileName.substring(1,fileName.length)\n\
    \        val fileName = if (fileName.endsWith(\".txt\")) fileName.substring(0,fileName.indexOf(\"\
    .txt\"))\n        val fileName = if (fileName.endsWith(\".exe\")) fileName.substring(0,fileName.indexOf(\"\
    .exe\"))\n        val fileName = if (fileName.endsWith(\".dll\")) fileName.substring(0,fileName.indexOf(\"\
    .dll\"))\n        val fileName = if (fileName.endsWith(\".zip\")) fileName.substring(0,fileName.indexOf(\"\
    .zip\"))\n        val fileName = if (fileName.endsWith(\".rar\")) fileName.substring(0,fileName.indexOf(\"\
    .rar\"))\n        val fileName = if (fileName.endsWith(\".7z\")) fileName.substring(0,fileName.indexOf(\"\
    .7z\"))\n        val fileName = if (fileName.endsWith(\".tar\")) fileName.substring(0,fileName.indexOf(\"\
    .tar\"))\n        val fileName = if (fileName.endsWith(\".gz\")) fileName.substring(0,fileName.indexOf(\"\
    .gz\"))\n        val fileName = if (fileName.endsWith(\".7z\")) fileName.substring(0,fileName.indexOf(\"\
    .7z\"))\n        val fileName = if (fileName.endsWith(\".rar\")) fileName.substring(0,fileName.indexOf(\"\
    .rar\"))\n        val fileName = if (fileName.endsWith(\".tar\")) fileName.substring(0,fileName.indexOf(\"\
    .tar\"))\n        val fileName = if (fileName.endsWith(\".gz\")) fileName.substring(0,fileName.indexOf(\"\
    .gz\"))\n        val fileName = if (fileName.endsWith(\".7z\")) fileName.substring(0,fileName.indexOf(\"\
    .7z\"))\n        val fileName = if (fileName.endsWith(\".rar\")) fileName.substring(0,fileName.indexOf(\"\
    .rar\"))\n        val fileName = if (fileName.endsWith(\".tar\")) fileName.substring(0,fileName.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_g_f7tz_.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_g_f7tz_.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_g_f7tz_.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = \e[33mif\e[0m (firstChar\
    \ == \e[31m'_'\e[0m) \e[31m'a'\e[0m \e[33melse\e[0m \e[33mif\e[0m (firstChar ==\
    \ \e[31m'-'\e[0m) \e[31m'A'\e[0m \e[33melse\e[0m \e[31m'0'\e[0m\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstChar is already defined as \e[33mvalue\e[0m \e[35mfirstChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g_f7tz_.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = \e[33mif\e[0m (fileName.equals(\e\
    [31m\"\"\e[0m)) \e[31m\"No\"\e[0m \e[33melse\e[0m fileName\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_g_f7tz_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = \e[33mif\e[0m (fileName.contains(\e\
    [31m\".\"\e[0m)) fileName.substring(\e[3"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        if (dot_index == -1) {\n     \
    \       \"No\"\n        } else {\n            val first_letter = file_name.substring(0,\
    \ dot_index).toLowerCase\n            val last_letter = file_name.substring(dot_index).toLowerCase\n\
    \            if (first_letter != \"a\" && first_letter != \"b\" && first_letter\
    \ != \"c\" && first_letter != \"d\" && first_letter != \"e\" && first_letter !=\
    \ \"f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter != \"\
    i\" && first_letter != \"j\" && first_letter != \"k\" && first_letter != \"l\"\
    \ && first_letter != \"m\" && first_letter != \"n\" && first_letter != \"o\" &&\
    \ first_letter != \"p\" && first_letter != \"q\" && first_letter != \"r\" && first_letter\
    \ != \"s\" && first_letter != \"t\" && first_letter != \"u\" && first_letter !=\
    \ \"v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter != \"\
    y\" && first_letter != \"z\" && first_letter != \"A\" && first_letter != \"B\"\
    \ && first_letter != \"C\" && first_letter != \"D\" && first_letter != \"E\" &&\
    \ first_letter != \"F\" && first_letter != \"G\" && first_letter != \"H\" && first_letter\
    \ != \"I\" && first_letter != \"J\" && first_letter != \"K\" && first_letter !=\
    \ \"L\" && first_letter != \"M\" && first_letter != \"N\" && first_letter != \"\
    O\" && first_letter != \"P\" && first_letter != \"Q\" && first_letter != \"R\"\
    \ && first_letter != \"S\" && first_letter != \"T\" && first_letter != \"U\" &&\
    \ first_letter != \"V\" && first_letter != \"W\" && first_letter != \"X\" && first_letter\
    \ != \"Y\" && first_letter != \"Z\") {\n                \"No\"\n            }\
    \ else {\n                if (last_letter != \"txt\" && last_letter != \"exe\"\
    \ && last_letter != \"dll\") {\n                    \"No\"\n                }\
    \ else {\n                    \"Yes\"\n                }\n            }\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp76uq_r8g.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxoyggfb4.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpxo"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern1 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern2\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern4 = \"^[a-zA-Z]{1}$\"\n        val pattern5 = \"^[a-zA-Z]{1}\\\
    \\.[a-zA-Z0-9]+$\"\n        val pattern6 = \"^[a-zA-Z]{1}$\"\n        val pattern7\
    \ = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern8 = \"^[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern11 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}$\"\n        val pattern13 = \"^[a-zA-Z]{1}\\\
    \\.[a-zA-Z0-9]+$\"\n        val pattern14 = \"^[a-zA-Z]{1}$\"\n        val pattern15\
    \ = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern16 = \"^[a-zA-Z]{1}$\"\
    \n        val pattern17 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern19 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern20 = \"^[a-zA-Z]{1}$\"\n        val pattern21 = \"^[a-zA-Z]{1}\\\
    \\.[a-zA-Z0-9]+$\"\n        val pattern22 = \"^[a-zA-Z]{1}$\"\n        val pattern23\
    \ = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern24 = \"^[a-zA-Z]{1}$\"\
    \n        val pattern25 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern27 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern28 = \"^[a-zA-Z]{1}$\"\n        val pattern29 = \"^[a-zA-Z]{1}\\\
    \\.[a-zA-Z0-9]+$\"\n        val pattern30 = \"^[a-zA-Z]{1}$\"\n        val pattern31\
    \ = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern32 = \"^[a-zA-Z]{1}$\"\
    \n        val pattern33 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern35 = \"^[a-zA-Z]{1}\\\\.[a-zA-Z0-9]+$\"\
    \n        val pattern36 = \"^[a-zA-Z]{1}$\"\n        val pattern37 = \"^[a-zA-Z]{1}\\\
    \\.[a-zA-Z0-9]+$\"\n        val pattern38 = \"^[a-zA-Z]{1}$\"\n        val \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpj7s08_dp.scala:58:11 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj7s08_dp.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = true \n        var dotPos = file_name.indexOf(\"\
    .\") \n        var firstLetter = file_name.charAt(0) \n        var lastLetter\
    \ = file_name.charAt(file_name.length-1) \n        var fileName = file_name.substring(0,dotPos)\
    \ \n        var fileExtension = file_name.substring(dotPos+1) \n        if (fileName.matches(\"\
    [0-9]{3}\")){\n            valid = false \n        }\n        if (fileName.contains(\"\
    .\")){\n            valid = false \n        }\n        if (firstLetter < 'a' ||\
    \ firstLetter > 'z'){\n            valid = false \n        }\n        if (lastLetter\
    \ < 'a' || lastLetter > 'z'){\n            valid = false \n        }\n       \
    \ if (fileExtension.matches(\"(txt|exe|dll)\")){\n            valid = false \n\
    \        }\n        if (valid){\n            return \"Yes\"\n        }\n     \
    \   return \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1khz6bjl.scala:46)\n\tat Problem.main(tmp1khz6bjl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\".\").last\n        val fileName = fileName.split(\"\
    \\\\\").last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\".\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\".\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdlhmtv76.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpdlhmtv76.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdlhmtv76.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\
    \ == '.').drop(1)\n        val file_name = file_name.dropWhile(_ == '.').drop(1)\n\
    \        val file_name = file_name.dropWhile(_ == '.').drop(1)\n        val file_name\
    \ = file_name.dropWhile(_ == '.').drop(1)\n        val file_name = file_name.dropWhile(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuu6kxwsg.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpuu6kxwsg.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.dropWhile(_ == \e[31m'.'\e[0m).drop(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpuu6kxwsg.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropWhile(_\
    \ == \e[31m'.'\e[0m).drop(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805668
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.dropRight(file_name.lastIndexOf(\".\"))\n        val file_name\
    \ = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n \
    \       val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight(1)\n        val file_name = file_name.dropRight(1)\n\
    \        val file_name = file_name.dropRight\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1xdnfw16.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(file_name.lastIndexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1xdnfw16.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1xdnfw16.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1xdnfw16.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1xdnfw16.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m1\e[0m)\n\e[31"
  stdout: ''
  timestamp: 1660010376
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else if (dotIndex == 0) {\n            \"No\"\n      \
    \  } else if (file_name.substring(0,1) != \"a\" && file_name.substring(0,1) !=\
    \ \"A\" && file_name.substring(0,1) != \"b\" && file_name.substring(0,1) != \"\
    B\" && file_name.substring(0,1) != \"c\" && file_name.substring(0,1) != \"C\"\
    \ && file_name.substring(0,1) != \"d\" && file_name.substring(0,1) != \"D\" &&\
    \ file_name.substring(0,1) != \"e\" && file_name.substring(0,1) != \"E\" && file_name.substring(0,1)\
    \ != \"f\" && file_name.substring(0,1) != \"F\" && file_name.substring(0,1) !=\
    \ \"g\" && file_name.substring(0,1) != \"G\" && file_name.substring(0,1) != \"\
    h\" && file_name.substring(0,1) != \"H\" && file_name.substring(0,1) != \"i\"\
    \ && file_name.substring(0,1) != \"I\" && file_name.substring(0,1) != \"j\" &&\
    \ file_name.substring(0,1) != \"J\" && file_name.substring(0,1) != \"k\" && file_name.substring(0,1)\
    \ != \"K\" && file_name.substring(0,1) != \"l\" && file_name.substring(0,1) !=\
    \ \"L\" && file_name.substring(0,1) != \"m\" && file_name.substring(0,1) != \"\
    M\" && file_name.substring(0,1) != \"n\" && file_name.substring(0,1) != \"N\"\
    \ && file_name.substring(0,1) != \"o\" && file_name.substring(0,1) != \"O\" &&\
    \ file_name.substring(0,1) != \"p\" && file_name.substring(0,1) != \"P\" && file_name.substring(0,1)\
    \ != \"q\" && file_name.substring(0,1) != \"Q\" && file_name.substring(0,1) !=\
    \ \"r\" && file_name.substring(0,1) != \"R\" && file_name.substring(0,1) != \"\
    s\" && file_name.substring(0,1) != \"S\" && file_name.substring(0,1) != \"t\"\
    \ && file_name.substring(0,1) != \"T\" && file_name.substring(0,1) != \"u\" &&\
    \ file_name.substring(0,1) != \"U\" && file_name.substring(0,1) != \"v\" && file_name.substring(0,1)\
    \ != \"V\" && file_name.substring(0,1) != \"w\" && file_name.substring(0,1) !=\
    \ \"W\" && file_name.substring(0,1) != \"x\" && file_name.substring(0,1) != \"\
    X\" && file_name.substring(0,1) != \"y\" && file_name.substring(0,1) != \"Y\"\
    \ && file_name.substring(0,1) != \"z\" && file_name.substring(0,1) != \"Z\") {\n\
    \            \"No\"\n        } else {\n            \"Yes\"\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpy2xaguqr.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\\\.[a-zA-Z]+$\"\
    \n        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0cfmdn2f.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0cfmdn2f.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val dotIndex = file_name.indexOf(\".\")\n        val dotIndex = dotIndex\
    \ + 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n  \
    \      val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n    \
    \    val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n      \
    \  val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val\
    \ dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex\
    \ = dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex =\
    \ dotIndex - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex\
    \ - 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex -\
    \ 1\n        val dotIndex = dotIndex - 1\n        val dotIndex = dotIndex - 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44fcce1i.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp44fcce1i.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp44fcce1i.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex\
    \ is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44fcce1i.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = dotIndex - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdotIndex is already defined\
    \ as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp44fcce1i.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010377
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        var valid\
    \ = \"No\"\n        val file_name = file_name.trim\n        if (file_name.length()\
    \ > 3) {\n            val file_name = file_name.substring(0,3)\n            val\
    \ file_name = file_name.trim\n            if (file_name.length() == 0) {\n   \
    \             valid = \"No\"\n            }\n            else {\n            \
    \    val file_name = file_name.substring(0,1)\n                val file_name =\
    \ file_name.trim\n                if (file_name.length() == 0) {\n           \
    \         valid = \"No\"\n                }\n                else {\n        \
    \            val file_name = file_name.substring(0,1)\n                    val\
    \ file_name = file_name.trim\n                    if (file_name.length() == 0)\
    \ {\n                        valid = \"No\"\n                    }\n         \
    \           else {\n                        val file_name = file_name.substring(0,1)\n\
    \                        val file_name = file_name.trim\n                    \
    \    if (file_name.length() == 0) {\n                            valid = \"No\"\
    \n                        }\n                        else {\n                \
    \            val file_name = file_name.substring(0,1)\n                      \
    \      val file_name = file_name.trim\n                            if (file_name.length()\
    \ == 0) {\n                                valid = \"No\"\n                  \
    \          }\n                            else {\n                           \
    \     val file_name = file_name.substring(0,1)\n                             \
    \   val file_name = file_name.trim\n                                if (file_name.length()\
    \ == 0) {\n                                    valid = \"No\"\n              \
    \                  }\n                                else {\n               \
    \                     val file_name = file_name.substring(0,1)\n             \
    \                       val file_name = file_name.trim\n                     \
    \               if (file_name.length() == 0) {\n                             \
    \           valid = \"No\"\n                                    }\n          \
    \                          else {\n                                        val\
    \ file_name = file_name.substring(0,1)\n                                     \
    \   val file_name = file_name.trim\n                                        if\
    \ (file_name.length() == 0) {\n                                            valid\
    \ = \"No\"\n                                        }\n                      \
    \                  else {\n                                            val file_name\
    \ = file_name.substring(0,1)\n                                            val\
    \ file_name = file_name.trim\n                                            if (file_name.length()\
    \ == 0) {\n                                                valid = \"No\"\n  \
    \                                          }\n                               \
    \             else {\n                                                val file_name\
    \ = file_name.substring(0,1)\n                                               \
    \ val file_name = file_name.trim\n                                           \
    \     if (file_name.length() == 0) {\n                                       \
    \             valid = \"No\"\n                                               \
    \ }\n                                                else {\n                \
    \                                    val file_name = file_name.substring(0,1)\n\
    \                                                    val file_name = file_name.trim\n\
    \                                                    if (file_name.length() ==\
    \ 0) {\n                                                        valid = \"No\"\
    \n                                                    }\n                    \
    \                                else {\n                                    \
    \                    val file_name = file_name.substring(0,1)\n              \
    \                                          val file_name = file_name.trim\n  \
    \                                                      if (file_name.length()\
    \ == 0) {\n                                                            valid =\
    \ \"No\"\n                                                        }\n        \
    \                                                else {\n                    \
    \                                        val file_name = file_name.substring(0,1)\n\
    \                                                            val file_name = file_name.trim\n\
    \                                                            if (file_name.length()\
    \ == 0) {\n                                                                valid\
    \ = \"No\"\n                                                            }\n  \
    \                                                          else {\n          \
    \                                                      val file_name = file_name.substring(0,1)\n\
    \                                                                val file_name\
    \ = file_name\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpovu5djvz.scala:134:0 ---------------------------\e\
    [0m\e[0m\n\e[31m134 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpovu5djvz.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpovu5djvz.scala:19:24 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpovu5djvz.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpovu5djvz.scala:23:28 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e\
    [35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpovu5djvz.scala:30:20 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m                \e[33mval\e[0m \e[36mfile_name\e[0m = file_nam"
  stdout: ''
  timestamp: 1660010375
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\n        val pattern3 =\
    \ \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n\
    \        val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\n        val pattern15\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \           ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \              ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \           invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:21:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpbk_qz9kw.scala:22:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z0-9]+\\.[a-zA-Z0-9]+\\\
    .[a-zA-Z0-9]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \           invalid e"
  stdout: ''
  timestamp: 1660010378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        }\n        else if (file_name.substring(0,dotIndex).isEmpty)\
    \ {\n            \"No\"\n        }\n        else if (file_name.substring(0,dotIndex).matches(\"\
    ^[a-zA-Z]+$\")) {\n            \"No\"\n        }\n        else if (file_name.substring(dotIndex,dotIndex+3).matches(\"\
    ^[0-9]+$\")) {\n            \"No\"\n        }\n        else if (file_name.substring(dotIndex,dotIndex+3).matches(\"\
    ^[a-zA-Z0-9]+$\")) {\n            \"Yes\"\n        }\n        else {\n       \
    \     \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptp1c4e78.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n        val dot_index = dot_index\
    \ - 1\n        val dot_index = dot_index - 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmjlcf8_w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmjlcf8_w.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmjlcf8_w.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmjlcf8_w.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmjlcf8_w.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index - \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e"
  stdout: ''
  timestamp: 1660010379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n\
    \            \"No\"\n        }\n        else if (dotIndex > 0 && dotIndex < file_name.length-1)\
    \ {\n            val fileName = file_name.substring(0, dotIndex)\n           \
    \ val fileExtension = file_name.substring(dotIndex + 1)\n            if (fileExtension.equalsIgnoreCase(\"\
    txt\") || fileExtension.equalsIgnoreCase(\"exe\") || fileExtension.equalsIgnoreCase(\"\
    dll\")) {\n                \"Yes\"\n            }\n            else {\n      \
    \          \"No\"\n            }\n        }\n        else {\n            \"No\"\
    \n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp69a0gwp1.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt0cu56ov.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpt0cu56ov.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpt0cu56ov.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.trim\n        val dotIndex\
    \ = fileName.indexOf(\".\")\n        val firstChar = fileName.charAt(0)\n    \
    \    val lastChar = fileName.charAt(fileName.length - 1)\n        val firstCharIsLetter\
    \ = firstChar >= 'a' && firstChar <= 'z' || firstChar >= 'A' && firstChar <= 'Z'\n\
    \        val lastCharIsLetter = lastChar >= 'a' && lastChar <= 'z' || lastChar\
    \ >= 'A' && lastChar <= 'Z'\n        val firstCharIsDigit = firstChar >= '0' &&\
    \ firstChar <= '9'\n        val lastCharIsDigit = lastChar >= '0' && lastChar\
    \ <= '9'\n        val firstCharIsNotEmpty = firstChar.isNotEmpty\n        val\
    \ lastCharIsNotEmpty = lastChar.isNotEmpty\n        val firstCharIsNotEmptyOrContainsDot\
    \ = firstCharIsNotEmpty && fileName.indexOf(\".\") != -1\n        val lastCharIsNotEmptyOrContainsDot\
    \ = lastCharIsNotEmpty && fileName.indexOf(\".\") == fileName.lastIndexOf(\".\"\
    )\n        val firstCharIsNotEmptyOrContainsDotOrContainsLetter = firstCharIsNotEmpty\
    \ || fileName.indexOf(\".\") != -1 || firstCharIsLetter\n        val lastCharIsNotEmptyOrContainsDotOrContainsLetter\
    \ = lastCharIsNotEmpty || fileName.indexOf(\".\") == fileName.lastIndexOf(\".\"\
    ) || lastCharIsLetter\n        val firstCharIsNotEmptyOrContainsDotOrContainsLetterOrContainsDigit\
    \ = firstCharIsNotEmpty || fileName.indexOf(\".\") != -1 || firstCharIsLetter\
    \ || firstCharIsDigit\n        val lastCharIsNotEmptyOrContainsDotOrContainsLetterOrContainsDigit\
    \ = lastCharIsNotEmpty || fileName.indexOf(\".\") == fileName.lastIndexOf(\".\"\
    ) || lastCharIsLetter || lastCharIsDigit\n        val firstCharIsNotEmptyOrContainsDotOrContainsLetterOrContainsDigitOrContainsDot\
    \ = firstCharIsNotEmpty || fileName.indexOf(\".\") != -1 || firstCharIsLetter\
    \ || firstCharIsDigit || fileName.indexOf(\".\") != fileName.lastIndexOf(\".\"\
    )\n        val lastCharIsNotEmptyOrContainsDotOrContainsLetterOrContainsDigitOrContainsDot\
    \ = lastCharIsNotEmpty || fileName.indexOf(\".\") == fileName.lastIndexOf(\".\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp30ywboqj.scala:36:158 ----------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mlastCharIsNotEmptyOrContainsDotOrContainsLetterOrContainsDigitOrContainsDot\e\
    [0m = lastCharIsNotEmpty || fileName.indexOf(\e[31m\".\"\e[0m) == fileName.lastIndexOf(\"\
    .\n\e[31m\e[31m   |\e[0m                                                     \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmp30ywboqj.scala:38:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp30ywboqj.scala:27:44 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mfirstCharIsNotEmpty\e[0m\
    \ = firstChar.isNotEmpty\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \  value isNotEmpty is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp30ywboqj.scala:28:42 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mval\e[0m \e[36mlastCharIsNotEmpty\e[0m = lastChar.isNotEmpty\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isNotEmpty is not a member\
    \ of Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp30ywboqj.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp30ywboqj.scala:38:4\
    \ -------------------------\e[0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e\
    [0m(\e[3"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = \"\"\n        var index = 0\n \
    \       var dotCount = 0\n        var letterCount = 0\n        var letterCountLetter\
    \ = 0\n        var letterCountLetterDot = 0\n        var letterCountLetterDotDot\
    \ = 0\n        var letterCountLetterDotDotDot = 0\n        var letterCountLetterDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDot = 0\n        var\
    \ letterCountLetterDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n     \
    \   var letterCountLetterDotDotDotDotDotDotDotDotDotDot = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDot\
    \ = 0\n        var letterCountLetterDotDotDotDotDotDotDotDotDotDotDot = 0\n  \
    \      var letterCountLetterDotDot\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8d482pcq.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8d482pcq.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mletterCountLetterDotDotDotDotDotDotDotDot\e[0m = \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mletterCountLetterDotDotDotDotDotDotDotDot is already defined as \e\
    [33mvariable\e[0m \e[35mletterCountLetterDotDotDotDotDotDotDotDot\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8d482pcq.scala:35:12 ---------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mvar\e[0m \e[36mletterCountLetterDotDotDotDotDotDotDotDotDotDot\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterCountLetterDotDotDotDotDotDotDotDotDotDot is already\
    \ defined as \e[33mvariable\e[0m \e[35mletterCountLetterDotDotDotDotDotDotDotDotDotDot\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8d482pcq.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mvar\e[0m \e[36mletterCountLetterDotDotDotDotDotDotDotDotDotDot\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterCountLetterDotDotDotDotDotDotDotDotDotDot is already\
    \ defined as \e[33mvariable\e[0m \e[35mletterCountLetterDotDotDotDotDotDotDotDotDotDot\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp8d482pcq.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mvar\e[0m \e[36mletterCountLetterDotDotDotDotDotDotDotDotDotDot\e"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z]{1}$\"\n        val pattern2 = \"^[a-zA-Z]{1}[a-zA-Z]{1}$\"\n \
    \       val pattern3 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern4\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern5 =\
    \ \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n        val pattern6\
    \ = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\n\
    \        val pattern7 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern8 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern9 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern10 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern11 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern12 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern13 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern14 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern15 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}$\"\
    \n        val pattern16 = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:35:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpattern16\e[0m = \"^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpg6i2u7o2.scala:37:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg6i2u7o2.scala:36:5 ---------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpg6i2u7o2.scala:37:4 -------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Z]{1}[a-zA-Zdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = dotIndex + 1\n \
    \       val fileName = file_name.substring(0, dotIndex)\n        val fileExtension\
    \ = file_name.substring(dotIndex)\n        val fileExtension = fileExtension.trim\n\
    \        val fileExtension = fileExtension.toLowerCase\n        val fileExtension\
    \ = fileExtension.substring(0,3)\n        val fileExtension = fileExtension.trim\n\
    \        val fileExtension = fileExtension.substring(0,3)\n        val fileExtension\
    \ = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = fileExtension.substring(0,3)\n\
    \        val fileExtension = fileExtension.trim\n        val fileExtension = file\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy2mlb_6e.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = dotIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mlb_6e.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mlb_6e.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.toLowerCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mlb_6e.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.substring(\e\
    [31m0\e[0m,\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileExtension is already defined as \e[33mvalue\e[0m \e[35mfileExtension\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy2mlb_6e.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mfileExtension\e[0m = fileExtension.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_5zfoy2b.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5zfoy2b.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5zfoy2b.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5zfoy2b.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5zfoy2b.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val first_letter = file_name.substring(0, dot_index)\n        val last_letter\
    \ = file_name.substring(dot_index)\n        val first_letter = first_letter.toLowerCase\
    \ \n        val last_letter = last_letter.toLowerCase \n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.substring(dot_index)\n \
    \       val file_name = file_name.toLowerCase \n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,dot_index)\n        val file_name\
    \ = file_name.substring(0,dot_index)\n        val file_name = file_name.substring(0,dot_index)\n\
    \        val file_name = file_name.substring(0,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_uyumj2.scala:67:4 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_uyumj2.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_uyumj2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirst_letter\e[0m = first_letter.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirst_letter is already defined as \e[33mvalue\e[0m \e[35mfirst_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy_uyumj2.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mlast_letter\e[0m = last_letter.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlast_letter is already defined as \e[33mvalue\e[0m \e[35mlast_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpy_uyumj2.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpy_uyumj2.scala:27:12\
    \ -------------------"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern1 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                   ^\e[0m\n\e[31m   |\e[0m                                 invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1ok_6bli.scala:22:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                              invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1ok_6bli.scala:23:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        val file_name\
    \ = file_name.trim\n        val file_name = file_name.substring(0,file_name.indexOf('.'))\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgknxely8.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgknxely8.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,file_name.indexOf(\e[31m'.'\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgknxely8.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgknxely8.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgknxely8.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substrin"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"\"\n        var count\
    \ : Int = 0\n        var dot_count : Int = 0\n        var first_letter : Char\
    \ = ' '\n        var last_letter : Char = ' '\n        var dot_letter : Char =\
    \ ' '\n        var dot_dot_letter : Char = ' '\n        var dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_letter : Char = ' '\n        var dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_letter : Char = ' '\n    \
    \    var dot_dot_dot_dot_dot_dot_dot_letter : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_letter : Char\
    \ = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter : Char = '\
    \ '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter : Char = ' '\n\
    \        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter : Char = ' '\n\
    \        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter : Char = '\
    \ '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter :\
    \ Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ : Char = ' '\n        var dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3h4yq29r.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3h4yq29r.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e[0m : \e[35mChar\e[0m\
    \ = \e[31m' '\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3h4yq29r.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mvar\e[0m \e[36mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e\
    [0m : \e[35mChar\e[0m = \e[31m' '\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ is already defined as \e[33mvariable\e[0m \e[35mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3h4yq29r.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mvar\e[0m \e[36mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e\
    [0m : \e[35mChar\e[0m = \e[31m' '\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\
    \ is already defined as \e[33mvariable\e[0m \e[35mdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_letter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the "
  stdout: ''
  timestamp: 1660010382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = file_name match {\n            case\
    \ \"\" => \"No\"\n            case _ => if (file_name.contains(\".\")) \n    \
    \                    {\n                            val dotIndex = file_name.indexOf(\"\
    .\")\n                            if (dotIndex == -1) \n                     \
    \           {\n                                    \"No\"\n                  \
    \              }\n                            else if (dotIndex == 0) \n     \
    \                           {\n                                    val firstChar\
    \ = file_name.charAt(0)\n                                    val firstCharIsLetter\
    \ = firstChar >= 'a' && firstChar <= 'z' || firstChar >= 'A' && firstChar <= 'Z'\n\
    \                                    if (firstCharIsLetter) \n               \
    \                         {\n                                            \"Yes\"\
    \n                                        }\n                                \
    \    else \n                                        {\n                      \
    \                      \"No\"\n                                        }\n   \
    \                             }\n                            else \n         \
    \                       {\n                                    \"No\"\n      \
    \                          }\n                        }\n                    else\
    \ \n                        {\n                            \"No\"\n          \
    \              }\n        }\n        return valid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lvwngu6.scala:54)\n\tat Problem.main(tmp3lvwngu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphtnc4f9w.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphtnc4f9w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtnc4f9w.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\.\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\.\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\..*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\",\
    \ \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n  \
    \      val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\",\
    \ \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n  \
    \      val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\",\
    \ \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n  \
    \      val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\",\
    \ \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n  \
    \      val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\",\
    \ \"\")\n        val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n  \
    \      val file_name = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\..*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_hrhr96d.scala:56:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\"\
    ^\\\\\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\
    \e[31m   |\e[0m                                             unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmp_hrhr96d.scala:58:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_hrhr96d.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"\\\\W\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_hrhr96d.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_hrhr96d.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = true \n        var file_name = file_name.substring(0,file_name.length-1)\n\
    \        var dotIndex = file_name.indexOf(\".\")\n        var fileExtension =\
    \ file_name.substring(dotIndex+1)\n        var fileName = file_name.substring(0,dotIndex)\n\
    \        var letterIndex = fileName.indexOf(\"a\")\n        var letter = fileName.substring(letterIndex,letterIndex+1)\n\
    \        var letterUpper = letter.toUpperCase()\n        var letterLower = letter.toLowerCase()\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = fileName.indexOf(\"A\")\n        var letterUpper\
    \ = fileName.substring(letterUpperIndex,letterUpperIndex+1)\n        var letterLowerIndex\
    \ = fileName.indexOf(\"a\")\n        var letterLower = fileName.substring(letterLowerIndex,letterLowerIndex+1)\n\
    \        var letterUpperIndex = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpp0ntk75w.scala:60:30 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mvar\e[0m \e[36mletterUpperIndex\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0ntk75w.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mletterUpper\e[0m = fileName.substring(letterUpperIndex,letterUpperIndex+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterUpper is already defined as \e[33mvariable\e[0m \e[35mletterUpper\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0ntk75w.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mvar\e[0m \e[36mletterLower\e[0m = fileName.substring(letterLowerIndex,letterLowerIndex+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterLower is already defined as \e[33mvariable\e[0m \e[35mletterLower\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0ntk75w.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mvar\e[0m \e[36mletterUpperIndex\e[0m = fileName.indexOf(\e\
    [31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterUpperIndex is already defined as \e[33mvariable\e[0m\
    \ \e[35mletterUpperIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp0ntk75w.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m       "
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}[.][a-zA-Z][a-zA-Z]+$\"\
    \n        val pattern1 = \"^[a-zA-Z][a-zA-Z]+[.][a-zA-Z][a-zA-Z]+$\"\n       \
    \ val pattern2 = \"^[a-zA-Z][a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z][a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5\
    \ = \"^[a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern8 = \"\
    ^[a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern10 = \"^[a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern11 =\
    \ \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern12 =\
    \ \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern14 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern15 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern16 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern17 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern18 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+$\"\
    \n        val pattern19 = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpitabipha.scala:38:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mpattern19\e[0m = \"^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpitabipha.scala:40:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpitabipha.scala:39:5 ---------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpitabipha.scala:40:4 -------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: ^[a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+def\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\")\n\
    \        val fileName = fileName(0)\n        val fileName = fileName.split(\"\\\
    \\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val fileName = fileName.split(\"\
    \\\\.\")\n        val fileName = fileName(0)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp3esxk41z.scala:79:11 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3esxk41z.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3esxk41z.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\.\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3esxk41z.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfileName\
    \ is already defined as \e[33mvalue\e[0m \e[35mfileName\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3esxk41z.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\\.\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfileName\
    \ is already defined as \e[33mvalue\e[0m \e[35mfileName\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\".\").last\n        val fileName = fileName.split(\"\
    /\").last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\".\").last\n        val fileName = fileName.split(\"/\").last\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbrrfxx8d.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbrrfxx8d.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrrfxx8d.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrrfxx8d.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbrrfxx8d.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toCharArray\n\
    \        val file_name = file_name.filter(x => x >= 'a' && x <= 'z' || x >= 'A'\
    \ && x <= 'Z')\n        val file_name = file_name.filter(x => x != '.')\n    \
    \    val file_name = file_name.filter(x => x != '0')\n        val file_name =\
    \ file_name.filter(x => x != '9')\n        val file_name = file_name.filter(x\
    \ => x != '/')\n        val file_name = file_name.filter(x => x != '\\\\')\n \
    \       val file_name = file_name.filter(x => x != '$')\n        val file_name\
    \ = file_name.filter(x => x != '*')\n        val file_name = file_name.filter(x\
    \ => x != '?')\n        val file_name = file_name.filter(x => x != '-')\n    \
    \    val file_name = file_name.filter(x => x != '|')\n        val file_name =\
    \ file_name.filter(x => x != '<')\n        val file_name = file_name.filter(x\
    \ => x != '>')\n        val file_name = file_name.filter(x => x != '\"')\n   \
    \     val file_name = file_name.filter(x => x != '\\'')\n        val file_name\
    \ = file_name.filter(x => x != '#')\n        val file_name = file_name.filter(x\
    \ => x != '%')\n        val file_name = file_name.filter(x => x != '&')\n    \
    \    val file_name = file_name.filter(x => x != '*')\n        val file_name =\
    \ file_name.filter(x => x != '(')\n        val file_name = file_name.filter(x\
    \ => x != ')')\n        val file_name = file_name.filter(x => x != '[')\n    \
    \    val file_name = file_name.filter(x => x != ']')\n        val file_name =\
    \ file_name.filter(x => x != '{')\n        val file_name = file_name.filter(x\
    \ => x != '}')\n        val file_name = file_name.filter(x => x != '|')\n    \
    \    val file_name = file_name.filter(x => x != '<')\n        val file_name =\
    \ file_name.filter(x => x != '>')\n        val file_name = file_name.filter(x\
    \ => x != '\"')\n        val file_name = file_name.filter(x => x != '\\'')\n \
    \       val file_name = file_name.filter(x => x != '#')\n        val file_name\
    \ = file_name.filter(x => x != '%')\n        val file_name = file_name.filter(x\
    \ => x != '&')\n        val file_name = file_name.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9vr63tq4.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9vr63tq4.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vr63tq4.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9vr63tq4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toCharArray\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9vr63tq4.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.filter(\e[36mx\e\
    [0m => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e[0m || x >= \e[31m'A'\e[0m && x\
    \ <= \e[31m'Z'\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mval"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex < 0)\
    \ -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex = if (dotIndex <\
    \ 0) -1 else dotIndex\n        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex < 0) -1 else dotIndex\n        val dotIndex\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi7zfeip5.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpi7zfeip5.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi7zfeip5.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ < \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi7zfeip5.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpi7zfeip5.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex <\
    \ \e[31m0\e["
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphtnc4f9w.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphtnc4f9w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtnc4f9w.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern11 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9eq2cxlv.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp9e"
  stdout: ''
  timestamp: 1660010385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").head\n        val fileName =\
    \ fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\").head\n\
    \        val fileName = fileName.split(\".\").head\n        val fileName = fileName.split(\"\
    \\\\\").head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\".\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\".\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\".\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\".\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\".\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\".\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\".\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\"/\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\".\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\"/\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.split(\".\").head\n        val fileName = fileName.split(\"\\\\\"\
    ).head\n        val fileName = fileName.split(\"/\").head\n        val fileName\
    \ = fileName.split(\"\\\\\").head\n        val fileName = fileName.split(\".\"\
    ).head\n        val fileName = fileName.split(\"\\\\\").head\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp79u9_br0.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp79u9_br0.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp79u9_br0.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp79u9_br0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp79u9_br0.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    .\"\e[0m).head\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp6zdzwa86.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1660010348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 =\
    \ \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern5 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern11 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern13 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern14 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern15 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern16 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern17 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern18 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern19 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern20 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern21 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern22 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern23 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern24 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern25 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern26 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern27 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern28 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern29 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern30 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern31 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern32 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern33 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern34 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern35 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern36 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern37 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern38 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyun08mk6.scala:20:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyun08mk6.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 =\
    \ \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern5 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern11 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern13 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern14 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern15 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern16 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern17 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern18 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern19 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern20 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern21 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern22 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern23 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern24 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern25 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern26 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern27 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern28 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern29 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern30 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern31 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern32 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern33 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern34 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern35 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern36 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern37 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern38 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyun08mk6.scala:20:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpyun08mk6.scala:59:5 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        }\n        else if (file_name.substring(0,dotIndex).isEmpty)\
    \ {\n            \"No\"\n        }\n        else if (file_name.substring(0,dotIndex).matches(\"\
    ^[a-zA-Z]+$\")) {\n            \"No\"\n        }\n        else if (file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+$\")) {\n            \"Yes\"\n        }\n        else if (file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\")) {\n            \"Yes\"\n        }\n        else {\n\
    \            \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3t3enxxt.scala:33:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(dotIndex).matches(\e\
    [31m\"^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m)) {\n\e[31m\e[31m   |\e[0m              \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                invalid escape character\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3t3enxxt.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.lastIndexOf(\".\")\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dot\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2hms6_tl.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2hms6_tl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m\
    \ \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2hms6_tl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2hms6_tl.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2hms6_tl.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmptw_aqo2l.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptw_aqo2l.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmptw_aqo2l.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.toUpperCase\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp842a2snf.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp842a2snf.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e[0m,file_name.indexOf(\e\
    [31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp842a2snf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp842a2snf.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of "
  stdout: ''
  timestamp: 1660010348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.trim\n        val dotIndex\
    \ = fileName.indexOf(\".\")\n        val dotString = \"\"\n        if(dotIndex\
    \ == -1){\n            fileName match {\n                case \"\" => \"No\"\n\
    \                case _ => \"Yes\"\n            }\n        }\n        else{\n\
    \            val dotString = fileName.substring(0, dotIndex)\n            val\
    \ dotStringLength = dotString.length\n            val firstChar = dotString.charAt(0)\n\
    \            val firstCharIsLetter = firstChar >= 'a' && firstChar <= 'z' || firstChar\
    \ >= 'A' && firstChar <= 'Z'\n            if(dotStringLength == 0){\n        \
    \        if(firstCharIsLetter){\n                    \"Yes\"\n               \
    \ }\n                else{\n                    \"No\"\n                }\n  \
    \          }\n            else if(dotStringLength == 1){\n                if(firstCharIsLetter){\n\
    \                    \"Yes\"\n                }\n                else{\n     \
    \               \"No\"\n                }\n            }\n            else{\n\
    \                if(firstCharIsLetter){\n                    \"Yes\"\n       \
    \         }\n                else{\n                    \"No\"\n             \
    \   }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph2m5zqie.scala:62)\n\tat Problem.main(tmph2m5zqie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\").head\n\
    \        val fileName = fileName.split(\"\\\\\").last\n        val fileName =\
    \ fileName.split(\"/\").last\n        val fileName = fileName.split(\"\\\\\").last\n\
    \        val fileName = fileName.split(\":\").last\n        val fileName = fileName.split(\"\
    \\\\\").last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.split(\":\").last\n        val fileName = fileName.split(\"\\\\\"\
    ).last\n        val fileName = fileName.split(\":\").last\n        val fileName\
    \ = fileName.split(\"\\\\\").last\n        val fileName = fileName.split(\":\"\
    ).last\n        val fileName = fileName.split(\"\\\\\").last\n        val fileName\
    \ = fileName.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwkk_n7vs.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwkk_n7vs.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\\\
    \\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwkk_n7vs.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    /\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwkk_n7vs.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    \\\\\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwkk_n7vs.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.split(\e[31m\"\
    :\"\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1\
    \ = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 =\
    \ \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptkoor_h4.scala:20:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmptkoor_h4.scala:22:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                              invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmptkoor_h4.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptkoor_h4.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmptkoor_h4.scala:23:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                                 \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \              invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptkoor_h4.scala:23:90\
    \ ----"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) \"No\" else\
    \ (\n            val fileName = file_name.substring(0, dotIndex)\n           \
    \ val fileExtension = file_name.substring(dotIndex + 1)\n            if (fileName.matches(\"\
    [0-9]{3}\") && fileExtension.matches(\"(txt|exe|dll)\")) \"Yes\"\n           \
    \ else \"No\"\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppmg2eznr.scala:21:39 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (dotIndex == -\e[31m1\e[0m) \e\
    [31m\"No\"\e[0m \e[33melse\e[0m (\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmppmg2eznr.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\")\n\
    \        val fileName = fileName(0)\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val fileName = fileName.replaceAll(\"\\\\D+$\", \"\"\
    )\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val\
    \ fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName =\
    \ fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"\
    ^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n  \
    \      val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        val fileName\
    \ = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val fileName = fileName.replaceAll(\"\
    [a-zA-Z]+$\", \"\")\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\"\
    , \"\")\n        val fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1syjhnl9.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^[a-zA-Z]+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1syjhnl9.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"[a"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if (file_name.length()\
    \ > 3 || file_name.contains(\".\") || file_name.substring(0, 1).isEmpty) {\n \
    \           return \"No\"\n        }\n        if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"exe\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"dll\") {\n            return \"No\"\n        }\n     \
    \   if (file_name.substring(0,1).toLowerCase != \"a\" && file_name.substring(0,1).toLowerCase\
    \ != \"b\" && file_name.substring(0,1).toLowerCase != \"c\" && file_name.substring(0,1).toLowerCase\
    \ != \"d\" && file_name.substring(0,1).toLowerCase != \"e\" && file_name.substring(0,1).toLowerCase\
    \ != \"f\" && file_name.substring(0,1).toLowerCase != \"g\" && file_name.substring(0,1).toLowerCase\
    \ != \"h\" && file_name.substring(0,1).toLowerCase != \"i\" && file_name.substring(0,1).toLowerCase\
    \ != \"j\" && file_name.substring(0,1).toLowerCase != \"k\" && file_name.substring(0,1).toLowerCase\
    \ != \"l\" && file_name.substring(0,1).toLowerCase != \"m\" && file_name.substring(0,1).toLowerCase\
    \ != \"n\" && file_name.substring(0,1).toLowerCase != \"o\" && file_name.substring(0,1).toLowerCase\
    \ != \"p\" && file_name.substring(0,1).toLowerCase != \"q\" && file_name.substring(0,1).toLowerCase\
    \ != \"r\" && file_name.substring(0,1).toLowerCase != \"s\" && file_name.substring(0,1).toLowerCase\
    \ != \"t\" && file_name.substring(0,1).toLowerCase != \"u\" && file_name.substring(0,1).toLowerCase\
    \ != \"v\" && file_name.substring(0,1).toLowerCase != \"w\" && file_name.substring(0,1).toLowerCase\
    \ != \"x\" && file_name.substring(0,1).toLowerCase != \"y\" && file_name.substring(0,1).toLowerCase\
    \ != \"z\") {\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzg675ci5.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern1 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern2 = \"\
    ^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpz5waguz1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz5waguz1.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpz5waguz1.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern2 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \"\"\n        val pattern3 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n        val pattern4 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n \
    \       val pattern5 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n        val pattern6 = \"\
    \"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n        val pattern7 = \"\
    \"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n \
    \       val pattern8 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n        val pattern9 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \"\"\n        val pattern10 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n        val pattern11 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\"\"\n \
    \       val pattern12 = \"\"\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbivxae1x.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                   ^\e[0m\n\e[31m   |\e[0m                                 invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpbivxae1x.scala:30:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mpattern12\e[0m = \"\"\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][\n\e[31m\e[31m   |\e[0m                     \
    \   ^\e[0m\n\e[31m   |\e[0m                        unclosed multi-line string\
    \ literal\n2 errors found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        }\n        else if (dotIndex == 0) {\n            \"No\"\
    \n        }\n        else if (file_name.substring(0, dotIndex).isEmpty) {\n  \
    \          \"No\"\n        }\n        else if (file_name.substring(dotIndex).matches(\"\
    ^[a-zA-Z]+$\")) {\n            \"Yes\"\n        }\n        else {\n          \
    \  \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5mjcbzb5.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010388
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n \
    \       val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n\
    \        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern14 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern15 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern17 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \        ^\e[0m\n\e[31m   |\e[0m                                 invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:23:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp10xo3k_1.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern5\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp10"
  stdout: ''
  timestamp: 1660010390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.split(\"\\\\.\")\n\
    \        val fileName = fileName(0)\n        val fileName = fileName.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val fileName = fileName.replaceAll(\"\\\\D+$\", \"\"\
    )\n        val fileName = fileName.replaceAll(\"^[a-zA-Z]+\", \"\")\n        val\
    \ fileName = fileName.replaceAll(\"[a-zA-Z]+$\", \"\")\n        if (fileName.contains(\"\
    .\") && fileName.split(\"\\\\.\").length == 1 && fileName.split(\"\\\\.\").head.length\
    \ == 1 && fileName.split(\"\\\\.\").head.startsWith(\"a\") && fileName.split(\"\
    \\\\.\").head.endsWith(\"z\") && fileName.split(\"\\\\.\").head.startsWith(\"\
    A\") && fileName.split(\"\\\\.\").head.endsWith(\"Z\")) {\n            if (fileName.split(\"\
    \\\\.\").length == 3 && fileName.split(\"\\\\.\").head == \"txt\" && fileName.split(\"\
    \\\\.\").last == \"exe\" && fileName.split(\"\\\\.\").last == \"dll\") {\n   \
    \             return \"Yes\"\n            } else {\n                return \"\
    No\"\n            }\n        } else {\n            return \"No\"\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6sbthmoc.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sbthmoc.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sbthmoc.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sbthmoc.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"^[a-zA-Z]+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfileName is already defined as \e[33mvalue\e[0m \e[35mfileName\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6sbthmoc.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = fileName.replaceAll(\e\
    [31m\"[a"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\n\
    \        val pattern1 = \"^[a-zA-Z]+\\\\.[a-zA-Z]+$\"\n        val pattern2 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern3 = \"^[a-zA-Z]+$\"\n        val pattern4\
    \ = \"^[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+$\"\n        val pattern6\
    \ = \"^[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+$\"\n        val pattern10\
    \ = \"^[a-zA-Z]+$\"\n        val pattern11 = \"^[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+$\"\n        val pattern13 = \"^[a-zA-Z]+$\"\n        val pattern14\
    \ = \"^[a-zA-Z]+$\"\n        val pattern15 = \"^[a-zA-Z]+$\"\n        val pattern16\
    \ = \"^[a-zA-Z]+$\"\n        val pattern17 = \"^[a-zA-Z]+$\"\n        val pattern18\
    \ = \"^[a-zA-Z]+$\"\n        val pattern19 = \"^[a-zA-Z]+$\"\n        val pattern20\
    \ = \"^[a-zA-Z]+$\"\n        val pattern21 = \"^[a-zA-Z]+$\"\n        val pattern22\
    \ = \"^[a-zA-Z]+$\"\n        val pattern23 = \"^[a-zA-Z]+$\"\n        val pattern24\
    \ = \"^[a-zA-Z]+$\"\n        val pattern25 = \"^[a-zA-Z]+$\"\n        val pattern26\
    \ = \"^[a-zA-Z]+$\"\n        val pattern27 = \"^[a-zA-Z]+$\"\n        val pattern28\
    \ = \"^[a-zA-Z]+$\"\n        val pattern29 = \"^[a-zA-Z]+$\"\n        val pattern30\
    \ = \"^[a-zA-Z]+$\"\n        val pattern31 = \"^[a-zA-Z]+$\"\n        val pattern32\
    \ = \"^[a-zA-Z]+$\"\n        val pattern33 = \"^[a-zA-Z]+$\"\n        val pattern34\
    \ = \"^[a-zA-Z]+$\"\n        val pattern35 = \"^[a-zA-Z]+$\"\n        val pattern36\
    \ = \"^[a-zA-Z]+$\"\n        val pattern37 = \"^[a-zA-Z]+$\"\n        val pattern38\
    \ = \"^[a-zA-Z]+$\"\n        val pattern39 = \"^[a-zA-Z]+$\"\n        val pattern40\
    \ = \"^[a-zA-Z]+$\"\n        val pattern41 = \"^[a-zA-Z]+$\"\n        val pattern42\
    \ = \"^[a-zA-Z]+$\"\n        val pattern43 = \"^[a-zA-Z]+$\"\n        val pattern44\
    \ = \"^[a-zA-Z]+$\"\n        val pattern45 = \"^[a-zA-Z]+$\"\n        val pattern46\
    \ = \"^[a-zA-Z]+$\"\n        val pattern47 = \"^[a-zA-Z]+$\"\n        val pattern48\
    \ = \"^[a-zA-Z]+$\"\n        val pattern49 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu1ps51xz.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpu1ps51xz.scala:70:5 ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.indexOf(\".\")\n        val dot_index = dot_index + 1\n\
    \        val first_letter = file_name.charAt(0)\n        val last_letter = file_name.charAt(dot_index)\n\
    \        val first_letter_is_letter = first_letter >= 'a' && first_letter <= 'z'\n\
    \        val last_letter_is_letter = last_letter >= 'a' && last_letter <= 'z'\n\
    \        val first_letter_is_digit = first_letter >= '0' && first_letter <= '9'\n\
    \        val last_letter_is_digit = last_letter >= '0' && last_letter <= '9'\n\
    \        val dot_is_letter = dot_index >= 1 && dot_index < file_name.length &&\
    \ file_name.charAt(dot_index) == '.'\n        val dot_is_digit = dot_index >=\
    \ 1 && dot_index < file_name.length && file_name.charAt(dot_index) == '0'\n  \
    \      val dot_is_digit = dot_index >= 1 && dot_index < file_name.length && file_name.charAt(dot_index)\
    \ == '1'\n        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length\
    \ && file_name.charAt(dot_index) == '2'\n        val dot_is_digit = dot_index\
    \ >= 1 && dot_index < file_name.length && file_name.charAt(dot_index) == '3'\n\
    \        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length &&\
    \ file_name.charAt(dot_index) == '4'\n        val dot_is_digit = dot_index >=\
    \ 1 && dot_index < file_name.length && file_name.charAt(dot_index) == '5'\n  \
    \      val dot_is_digit = dot_index >= 1 && dot_index < file_name.length && file_name.charAt(dot_index)\
    \ == '6'\n        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length\
    \ && file_name.charAt(dot_index) == '7'\n        val dot_is_digit = dot_index\
    \ >= 1 && dot_index < file_name.length && file_name.charAt(dot_index) == '8'\n\
    \        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length &&\
    \ file_name.charAt(dot_index) == '9'\n        val dot_is_digit = dot_index >=\
    \ 1 && dot_index < file_name.length && file_name.charAt(dot_index) == 'a'\n  \
    \      val dot_is_digit = dot_index >= 1 && dot_index < file_name.length && file_name.charAt(dot_index)\
    \ == 'b'\n        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length\
    \ && file_name.charAt(dot_index) == 'c'\n        val dot_is_digit = dot_index\
    \ >= 1 && dot_index < file_name.length && file_name.charAt(dot_index) == 'd'\n\
    \        val dot_is_digit = dot_index >= 1 && dot_index < file_name.length &&\
    \ file_name.charAt(dot_index) == 'e'\n        val dot_is_digit = dot_index >=\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk_sv3omj.scala:44:39 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mdot_is_digit\e[0m = dot_index\
    \ >= \n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk_sv3omj.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdot_index\e[0m = dot_index + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_index is already defined\
    \ as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpk_sv3omj.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdot_is_digit\e[0m = dot_index\
    \ >= \e[31m1\e[0m && dot_index < file_name.length && file_name.charAt(dot_index)\
    \ == \e[31m'1'\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_is_digit is already defined as \e[33mvalue\e[0m \e[35mdot_is_digit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpk_sv3omj.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdot_is_digit\e[0m = dot_index >= \e\
    [31m1\e[0m && dot_index < file_name.length && file_name.charAt(dot_index) == \e\
    [31m'2'\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_is_digit is already defined as \e[33mvalue\e[0m \e[35mdot_is_digit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[3"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf0xsmaek.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf0xsmaek.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf0xsmaek.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf0xsmaek.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpf0xsmaek.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex ==\
    \ -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n\
    \        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else\
    \ dotIndex\n        val dotIndex = if (dotIndex == -1) -1 else dotIndex\n    \
    \    val dotIndex = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex\
    \ = if (dotIndex == -1) -1 else dotIndex\n        val dotIndex = if (dotIndex\
    \ == -1) -1 else dotIndex\n        val dotIndex = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphtnc4f9w.scala:56:22 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmphtnc4f9w.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmphtnc4f9w.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex\
    \ == -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotIndex ==\
    \ -\e[31m1\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmphtnc4f9w.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e[0m (dotInde"
  stdout: ''
  timestamp: 1659805674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        }\n        else if (file_name.length() > 3 || file_name.substring(0,1)\
    \ == \"0\" || file_name.substring(0,1) == \"9\" || file_name.substring(0,1) ==\
    \ \".\" || file_name.substring(dotIndex,dotIndex+3) != \"txt\" || file_name.substring(dotIndex,dotIndex+3)\
    \ != \"exe\" || file_name.substring(dotIndex,dotIndex+3) != \"dll\") {\n     \
    \       \"No\"\n        }\n        else {\n            \"Yes\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyhcf3cqb.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val dotIndex = file_name.indexOf(\".\")\n        val dotIndex = if (dotIndex\
    \ < 0) -1 else dotIndex\n        val firstChar = file_name.charAt(0)\n       \
    \ val firstChar = if (firstChar < 'a' || firstChar > 'z') 'a' else if (firstChar\
    \ < 'A' || firstChar > 'Z') 'A' else firstChar\n        val fileName = if (dotIndex\
    \ < 0) file_name else file_name.substring(0,dotIndex)\n        val fileExtension\
    \ = file_name.substring(dotIndex+1)\n        if (fileName.matches(\"[0-9]\") &&\
    \ fileExtension.matches(\"[txt|exe|dll]\"))\n            \"Yes\"\n        else\n\
    \            \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4xh7mtmd.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = \e[33mif\e\
    [0m (dotIndex < \e[31m0\e[0m) -\e[31m1\e[0m \e[33melse\e[0m dotIndex\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdotIndex is already defined as \e[33mvalue\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4xh7mtmd.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstChar\e[0m = \e[33mif\e[0m (firstChar\
    \ < \e[31m'a'\e[0m || firstChar > \e[31m'z'\e[0m) \e[31m'a'\e[0m \e[33melse\e\
    [0m \e[33mif\e[0m (firstChar < \e[31m'A'\e[0m || firstChar > \e[31m'Z'\e[0m) \e\
    [31m'A'\e[0m \e[33melse\e[0m firstChar\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstChar is already defined as \e[33mvalue\e[0m \e[35mfirstChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp4xh7mtmd.scala:19:24 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dot_index = file_name.lastIndexOf(\".\")\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val dot_index\
    \ = file_name.lastIndexOf(\".\", dot_index)\n        val dot_index = dot_index\
    \ + 1\n        val dot_index = file_name.lastIndexOf(\".\", dot_index)\n     \
    \   val dot_index = dot_index + 1\n        val dot_index = file_name.lastIndexOf(\"\
    .\", dot_index)\n        val dot_index = dot_index + 1\n        val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7pzfm9d4.scala:68:11 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp7pzfm9d4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7pzfm9d4.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.lastIndexOf(\e\
    [31m\".\"\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7pzfm9d4.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = dot_index + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7pzfm9d4.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mdot_index\e[0m = file_name.lastIndexOf(\e\
    [31m\".\"\e[0m, dot_index)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdot_index is already defined as \e[33mvalue\e[0m \e[35mdot_index\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1) {\n       \
    \     \"No\"\n        } else {\n            val fileName = file_name.substring(0,\
    \ dotIndex)\n            val extension = file_name.substring(dotIndex + 1)\n \
    \           if (fileName.matches(\"[0-9]{3}\") && extension.matches(\"(txt|exe|dll)\"\
    ))\n                \"Yes\"\n            else\n                \"No\"\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptyjjzt2e.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010389
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ dotIndex = file_name.indexOf(\".\")\n        if (dotIndex == -1 || dotIndex\
    \ > file_name.length - 1 || \n            file_name.substring(0, dotIndex).isEmpty)\
    \ {\n            return \"No\"\n        }\n        val extension = file_name.substring(dotIndex\
    \ + 1)\n        val extensions = List(\"txt\", \"exe\", \"dll\")\n        if (extensions.contains(extension))\
    \ {\n            return \"Yes\"\n        }\n        return \"No\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphnxh_203.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern1 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern7 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern10 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\n     \
    \   val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    \n        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:19:33 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                   ^\e[0m\n\e[31m   |\e[0m                                 invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:21:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1ok_6bli.scala:22:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                              invalid escape character\n\
    \e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:22:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp1ok_6bli.scala:23:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1ok_6bli.scala:23:68 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^"
  stdout: ''
  timestamp: 1660010382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"\"\n        var dot_count\
    \ : Int = 0\n        var dot_position : Int = 0\n        var dot_position2 : Int\
    \ = 0\n        var dot_position3 : Int = 0\n        var dot_position4 : Int =\
    \ 0\n        var dot_position5 : Int = 0\n        var dot_position6 : Int = 0\n\
    \        var dot_position7 : Int = 0\n        var dot_position8 : Int = 0\n  \
    \      var dot_position9 : Int = 0\n        var dot_position10 : Int = 0\n   \
    \     var dot_position11 : Int = 0\n        var dot_position12 : Int = 0\n   \
    \     var dot_position13 : Int = 0\n        var dot_position14 : Int = 0\n   \
    \     var dot_position15 : Int = 0\n        var dot_position16 : Int = 0\n   \
    \     var dot_position17 : Int = 0\n        var dot_position18 : Int = 0\n   \
    \     var dot_position19 : Int = 0\n        var dot_position20 : Int = 0\n   \
    \     var dot_position21 : Int = 0\n        var dot_position22 : Int = 0\n   \
    \     var dot_position23 : Int = 0\n        var dot_position24 : Int = 0\n   \
    \     var dot_position25 : Int = 0\n        var dot_position26 : Int = 0\n   \
    \     var dot_position27 : Int = 0\n        var dot_position28 : Int = 0\n   \
    \     var dot_position29 : Int = 0\n        var dot_position30 : Int = 0\n   \
    \     var dot_position31 : Int = 0\n        var dot_position32 : Int = 0\n   \
    \     var dot_position33 : Int = 0\n        var dot_position34 : Int = 0\n   \
    \     var dot_position35 : Int = 0\n        var dot_position36 : Int = 0\n   \
    \     var dot_position37 : Int = 0\n        var dot_position38 : Int = 0\n   \
    \     var dot_position39 : Int = 0\n        var dot_position40 : Int = 0\n   \
    \     var dot_position41 : Int = 0\n        var dot_position42 : Int = 0\n   \
    \     var dot_position43 : Int = 0\n        var dot_position44 : Int = 0\n   \
    \     var dot_position45 : Int = 0\n        var dot_position46 : Int = 0\n   \
    \     var dot_position47 : Int = 0\n        var dot_position48 : Int = 0\n   \
    \     var dot_position49 : Int = 0\n        var dot_position50 : Int = 0\n   \
    \     var dot_position51 : Int = 0\n        var dot_position52 : Int = 0\n   \
    \     var dot_position53 : Int = 0\n        var dot_position54 : Int = 0\n   \
    \     var dot_position55 : Int = 0\n        var dot_position56 : Int = 0\n   \
    \     var dot_position57 : Int = 0\n        var dot_position58 : Int = 0\n   \
    \     var dot_position59 : Int = 0\n        var dot_position60 : Int = 0\n   \
    \     var dot_position61 : Int = 0\n        var dot_position62 : Int = 0\n   \
    \     var dot_position6\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpegecxqfl.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpegecxqfl.scala:84:5 ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern5 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern7 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern8\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern9 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern10 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern12\
    \ = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n  \
    \      val pattern13 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern15 = \"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:21:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m            \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \     invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:21:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern3\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                              ^\e\
    [0m\n\e[31m   |\e[0m                                              invalid escape\
    \ character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:22:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmpllt6cf_v.scala:22:46\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern4\e[0m = \e[31m\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                                    \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \   invalid escape character\n\e[31m\e[31m-- Error: /tmp"
  stdout: ''
  timestamp: 1659805973
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\D+$\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyvsn0xfi.scala:58:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\"\
    ^\n\e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e\
    [31m   |\e[0m                                             unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpyvsn0xfi.scala:60:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyvsn0xfi.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.replaceAll(\e[31m\"\\\\W\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyvsn0xfi.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyvsn0xfi.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\D+$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded metho"
  stdout: ''
  timestamp: 1660010392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W$\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\W$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\W+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"\\\\W+$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\W+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"\\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\W*$\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+\", \"\
    \")\n        val file_name = file_name.replaceAll(\"^\\\\W*+\", \"\")\n      \
    \  val file_name = file_name.replaceAll(\"\\\\W*+$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*$\", \"\")\n \
    \       val file_name = file_name.replaceAll(\"^\\\\W*+*$\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W*+*+\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+*+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*+$\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*+$\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*+*\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^\\\\W*+*+*\", \"\")\n       \
    \ val file_name = file_name.replaceAll(\"\\\\W*+*+*$\", \"\")\n        val file_name\
    \ = file_name.replaceAll(\"^\\\\W*+*+*$\", \"\")\n        val file_name = file_name.replaceAll(\"\
    \\\\W*+*+*+\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\W*+*+*+\"\
    , \"\")\n        val file_name = file_name.replaceAll(\"\\\\W*+*+*+$\", \"\")\n\
    \        val file_name = file_name.replaceAll(\"^\\\\W*+*+*+$\", \"\")\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjvo7_oot.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\W$\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjvo7_oot.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660010371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n\
    \        val pattern2 = \"^[a-zA-Z]+\\.[a-zA-Z]+$\"\n        val pattern3 = \"\
    ^[a-zA-Z]+$\"\n        val pattern4 = \"^[a-zA-Z]+$\"\n        val pattern5 =\
    \ \"^[a-zA-Z]+$\"\n        val pattern6 = \"^[a-zA-Z]+$\"\n        val pattern7\
    \ = \"^[a-zA-Z]+$\"\n        val pattern8 = \"^[a-zA-Z]+$\"\n        val pattern9\
    \ = \"^[a-zA-Z]+$\"\n        val pattern10 = \"^[a-zA-Z]+$\"\n        val pattern11\
    \ = \"^[a-zA-Z]+$\"\n        val pattern12 = \"^[a-zA-Z]+$\"\n        val pattern13\
    \ = \"^[a-zA-Z]+$\"\n        val pattern14 = \"^[a-zA-Z]+$\"\n        val pattern15\
    \ = \"^[a-zA-Z]+$\"\n        val pattern16 = \"^[a-zA-Z]+$\"\n        val pattern17\
    \ = \"^[a-zA-Z]+$\"\n        val pattern18 = \"^[a-zA-Z]+$\"\n        val pattern19\
    \ = \"^[a-zA-Z]+$\"\n        val pattern20 = \"^[a-zA-Z]+$\"\n        val pattern21\
    \ = \"^[a-zA-Z]+$\"\n        val pattern22 = \"^[a-zA-Z]+$\"\n        val pattern23\
    \ = \"^[a-zA-Z]+$\"\n        val pattern24 = \"^[a-zA-Z]+$\"\n        val pattern25\
    \ = \"^[a-zA-Z]+$\"\n        val pattern26 = \"^[a-zA-Z]+$\"\n        val pattern27\
    \ = \"^[a-zA-Z]+$\"\n        val pattern28 = \"^[a-zA-Z]+$\"\n        val pattern29\
    \ = \"^[a-zA-Z]+$\"\n        val pattern30 = \"^[a-zA-Z]+$\"\n        val pattern31\
    \ = \"^[a-zA-Z]+$\"\n        val pattern32 = \"^[a-zA-Z]+$\"\n        val pattern33\
    \ = \"^[a-zA-Z]+$\"\n        val pattern34 = \"^[a-zA-Z]+$\"\n        val pattern35\
    \ = \"^[a-zA-Z]+$\"\n        val pattern36 = \"^[a-zA-Z]+$\"\n        val pattern37\
    \ = \"^[a-zA-Z]+$\"\n        val pattern38 = \"^[a-zA-Z]+$\"\n        val pattern39\
    \ = \"^[a-zA-Z]+$\"\n        val pattern40 = \"^[a-zA-Z]+$\"\n        val pattern41\
    \ = \"^[a-zA-Z]+$\"\n        val pattern42 = \"^[a-zA-Z]+$\"\n        val pattern43\
    \ = \"^[a-zA-Z]+$\"\n        val pattern44 = \"^[a-zA-Z]+$\"\n        val pattern45\
    \ = \"^[a-zA-Z]+$\"\n        val pattern46 = \"^[a-zA-Z]+$\"\n        val pattern47\
    \ = \"^[a-zA-Z]+$\"\n        val pattern48 = \"^[a-zA-Z]+$\"\n        val pattern49\
    \ = \"^[a-zA-Z]+$\"\n        val pattern50 = \"^[a-zA-Z]+$\"\n        val pattern\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa4c2a2y9.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- Error: /tmp/tmpa4c2a2y9.scala:20:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = \e[31m\"\
    ^[a-zA-Z]+\\.[a-zA-Z]+$\"\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                   invalid\
    \ escape character\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa4c2a2y9.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=' expected, but '}' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa4c2a2y9.scala:70:5 ---------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.length-1)\n        val file_name\
    \ = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.toUpperCase\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw3z9_muy.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3z9_muy.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw3z9_muy.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw3z9_muy.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw3z9_muy.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[3"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = false\n        var dotPos = file_name.indexOf(\"\
    .\")\n        if (dotPos < 0) return \"No\"\n        var firstChar = file_name.charAt(0)\n\
    \        var firstCharLower = firstChar.toLower\n        var firstCharUpper =\
    \ firstChar.toUpper\n        var firstCharIsLetter = firstChar.isLetter\n    \
    \    var firstCharIsDigit = firstChar.isDigit\n        var firstCharIsAlpha =\
    \ firstChar.isAlpha\n        if (firstCharIsDigit && file_name.length > 3) return\
    \ \"No\"\n        if (firstCharIsAlpha && file_name.length > 3) return \"No\"\n\
    \        if (firstCharIsLetter && file_name.length > 3) return \"No\"\n      \
    \  if (firstCharIsDigit && file_name.length > 3) return \"No\"\n        if (firstCharIsAlpha\
    \ && file_name.length > 3) return \"No\"\n        if (firstCharIsLetter && file_name.length\
    \ > 3) return \"No\"\n        if (firstCharIsDigit && file_name.length > 3) return\
    \ \"No\"\n        if (firstCharIsAlpha && file_name.length > 3) return \"No\"\n\
    \        if (firstCharIsLetter && file_name.length > 3) return \"No\"\n      \
    \  if (firstCharIsDigit && file_name.length > 3) return \"No\"\n        if (firstCharIsAlpha\
    \ && file_name.length > 3) return \"No\"\n        if (firstCharIsLetter && file_name.length\
    \ > 3) return \"No\"\n        if (firstCharIsDigit && file_name.length > 3) return\
    \ \"No\"\n        if (firstCharIsAlpha && file_name.length > 3) return \"No\"\n\
    \        if (firstCharIsLetter && file_name.length > 3) return \"No\"\n      \
    \  if (firstCharIsDigit && file_name.length > 3) return \"No\"\n        if (firstCharIsAlpha\
    \ && file_name.length > 3) return \"No\"\n        if (firstCharIsLetter && file_name.length\
    \ > 3) return \"No\"\n        if (firstCharIsDigit && file_name.length > 3) return\
    \ \"No\"\n        if (firstCharIsAlpha && file_name.length > 3) return \"No\"\n\
    \        if (firstCharIsLetter && file_name.length > 3) return \"No\"\n      \
    \  if (firstCharIsDigit && file_name.length > 3) return \"No\"\n        if (firstCharIsAlpha\
    \ && file_name.length > 3) return \"No\"\n        if (firstCharIsLetter && file_name.length\
    \ > 3) return \"No\"\n        if (firstCharIsDigit && file_name.length > 3) return\
    \ \"No\"\n        if (firstCharIsAlpha && file_name.length > 3) return \"No\"\n\
    \        if (firstCharIsLetter && file_name.length > 3) return \"No\"\n      \
    \  if (firstCharIsDigit && file_name.length > 3) return \"No\"\n        if (firstCharIsAlpha\
    \ && \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_97aci_h.scala:56:31 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mif\e[0m (firstCharIsAlpha && \n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_97aci_h.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e[36mfirstCharIsAlpha\e[0m =\
    \ firstChar.isAlpha\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isAlpha is not a member\
    \ of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.replaceAll(\"\\\\W\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\\\\.\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"^\\\\D+\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"^[a-z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[A-Z]\", \"\"\
    )\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\")\n        val\
    \ file_name = file_name.replaceAll(\"^\\\\D+\", \"\")\n        val file_name =\
    \ file_name.replaceAll(\"^[a-z]\", \"\")\n        val file_name = file_name.replaceAll(\"\
    ^[A-Z]\", \"\")\n        val file_name = file_name.replaceAll(\"^[0-9]\", \"\"\
    )\n        val file_name = \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr78nlgul.scala:58:23 ---------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpr78nlgul.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\W\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr78nlgul.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^\\\\D+\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr78nlgul.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"\\\\.\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr78nlgul.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.replaceAll(\e\
    [31m\"^[a-z]\"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        var valid\
    \ = false\n        val pattern = \"^[0-9]{3}$\"\n        val pattern1 = \"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern2 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern3 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern4 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern5 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern6 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern7 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern8 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern9 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern10 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern11 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern12 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern13 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern14 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern15 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern16 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern17 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern18 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern19 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern20 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern21 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern22 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern23 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern24 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern25 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern26 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern27 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern28 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern29 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern30 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern31 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern32 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern33 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern34 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern35 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n\
    \        val pattern36 = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern37 = \"\
    ^[a-zA-Z][a-zA-Z0-9]*$\"\n        val pattern38\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdebrqnxd.scala:22:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern1\e[0m = \e[31m\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                     invalid escape character\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpdebrqnxd.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdebrqnxd.scala:19:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mfile_name\e[0m = file_name\n\e[31m\e[31m   |\e[0m                    \
    \    ^\e[0m\n\e[31m   |\e[0m                        Recursive \e[33mvariable\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdebrqnxd.scala:60:5 ---------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ file_name = file_name.substring(0,file_name.indexOf(\".\"))\n        val file_name\
    \ = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n        val file_name = file_name.substring(0,1)\n\
    \        val file_name = file_name.substring(0,1)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9uh3rrk2.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9uh3rrk2.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e[31m0\e\
    [0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9uh3rrk2.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_nam"
  stdout: ''
  timestamp: 1660010349
