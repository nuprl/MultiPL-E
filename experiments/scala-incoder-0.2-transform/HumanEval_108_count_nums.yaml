name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        val sums = arr.foldLeft(List[Long]())((sums, num) => {\n  \
    \          val digits = num.toString.reverse.grouped(2).map(_.toInt)\n       \
    \     val sum = digits.foldLeft(0l)(_ + _)\n            sums ::: List(sum)\n \
    \       })\n        sums.count(_ > 0)", "        val nums = arr.toSet\n      \
    \  val numsSet = nums.toSeq\n        val numsSetLen = numsSet.length\n       \
    \ val numsSetSum = numsSet.sum\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigit", "        val sums = arr.foldLeft(List[Long]())((acc,\
    \ x) => acc :+ x.toLong)\n        sums.count(_ > 0)", "        val n = arr.length\n\
    \        val m = arr.map(_.toInt).sum\n        val s = arr.map(_.toInt).map(_.signum).sum\n\
    \        val r = arr.map(_.toInt).map(_.abs).sum\n        val c = arr.map(_.toInt).map(_.signum).map(_.abs).sum\n\
    \        val d = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val e = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val f = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val g = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val h = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val i = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val j = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val k = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val l = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val m = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        val nums = arr.filter(_ > 0).map(_ - sum)\n        nums.count(_ > 0)",
  "        val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val\
    \ numsSumDigits = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigits)\n        val\
    \ numsSumDigit = numsSum.toString.charAt(numsSumDigit + 1)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 2)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 3)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 4)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 5)\n     \
    \   val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 6)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 7)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 8)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 9)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 10)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 11)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 12)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 13)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 14)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 15)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 16)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 17)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 18)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 19)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 20)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 21)\n        val num", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).sum\n        nums.filter(x => x > 0).count(x =>\
    \ x > 0 && numsSum - math.abs(x) > 0)", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => if (x < 0) -x else x)\n        val counts = sums.groupBy(x => x).map(x =>\
    \ (x._1, x._2.length)).toMap\n        sums.count(x => counts.getOrElse(x.toString.toInt,\
    \ 0) > 0)", "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x\
    \ => x.toString.toInt).map(_.sum)\n        val positiveSums = sums.filter(x =>\
    \ x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        positiveSums.size\
    \ + (negativeSums.size * negativeSums.sum)", "        val arr = arr.toList\n \
    \       val sums = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.toInt\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n        val positiveSumsSumAbsCountAbs\
    \ = positiveSumsSumAbsCount + negativeSumsSumAbsCount\n        val negativeSumsSumAbsCountAbs\
    \ = negativeSumsSumAbsCount + positiveSumsSumAbsCount\n        val positiveSumsSumAbsCountAbsCount\
    \ = positiveSumsSumAbsCountAbs + negativeSumsSumAbsCountAbs\n        val negativeSumsSumAbsCountAbsCount\
    \ = negativeSumsSumAbsCountAbs + positiveSumsSumAbsCountAbs\n        val positiveSumsSumAbsCountAbsCountAbs\
    \ = positiveSumsSumAbsCountAbsCount + negativeSumsSumAbsCountAbs\n        val\
    \ negativeSumsSumAbsCountAbsCountAbs = negativeSumsSumAbsCountAbsCount + positiveSumsSumAbsCountAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCountAbsCount = positiveSumsSumAbsCountAbsCountAbs\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCount\
    \ = negativeSumsSumAbsCountAbsCountAbs + positiveSumsSumAbsCountAbsCountAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCountAbsCountAbs = positiveSumsSumAbsCountAbsCountAbsCount\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCountAbs\
    \ = negativeSumsSumAbsCountAbsCountAbsCount + positiveSumsSumAbsCountAbsCountAbs",
  "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x => math.abs(x))\n\
    \        val nums = sums.filter(x => x > 0)\n        nums.sum", "        val nums\
    \ = arr.toSet\n        val numsSet = arr.toSet\n        val numsSet2 = arr.toSet\n\
    \        val numsSet3 = arr.toSet\n        val numsSet4 = arr.toSet\n        val\
    \ numsSet5 = arr.toSet\n        val numsSet6 = arr.toSet\n        val numsSet7\
    \ = arr.toSet\n        val numsSet8 = arr.toSet\n        val numsSet9 = arr.toSet\n\
    \        val numsSet10 = arr.toSet\n        val numsSet11 = arr.toSet\n      \
    \  val numsSet12 = arr.toSet\n        val numsSet13 = arr.toSet\n        val numsSet14\
    \ = arr.toSet\n        val numsSet15 = arr.toSet\n        val numsSet16 = arr.toSet\n\
    \        val numsSet17 = arr.toSet\n        val numsSet18 = arr.toSet\n      \
    \  val numsSet19 = arr.toSet\n        val numsSet20 = arr.toSet\n        val numsSet21\
    \ = arr.toSet\n        val numsSet22 = arr.toSet\n        val numsSet23 = arr.toSet\n\
    \        val numsSet24 = arr.toSet\n        val numsSet25 = arr.toSet\n      \
    \  val numsSet26 = arr.toSet\n        val numsSet27 = arr.toSet\n        val numsSet28\
    \ = arr.toSet\n        val numsSet29 = arr.toSet\n        val numsSet30 = arr.toSet\n\
    \        val numsSet31 = arr.toSet\n        val numsSet32 = arr.toSet\n      \
    \  val numsSet33 = arr.toSet\n        val numsSet34 = arr.toSet\n        val numsSet35\
    \ = arr.toSet\n        val numsSet36 = arr.toSet\n        val numsSet37 = arr.toSet\n\
    \        val numsSet38 = arr.toSet\n        val numsSet39 = arr.toSet\n      \
    \  val numsSet40 = arr.toSet\n        val numsSet41 = arr.toSet\n        val numsSet42\
    \ = arr.toSet\n        val numsSet43 = arr.toSet\n        val numsSet44 = arr.toSet\n\
    \        val numsSet45 = arr.toSet\n        val numsSet46 = arr.toSet\n      \
    \  val numsSet47 = arr.toSet", "        var sum = 0\n        var count = 0\n \
    \       for (i <- arr) {\n            if (i >= 0) {\n                sum += i\n\
    \                count += 1\n            }\n        }\n        if (sum > 0) {\n\
    \            count\n        } else {\n            -count\n        }", "      \
    \  val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n      \
    \  val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt).map(x => x\
    \ * x).sum\n        sums.toLong", "        val nums = arr.toList\n        val\
    \ sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n        val sumsSum\
    \ = sums.sum\n        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.toInt\n\
    \        val sumsSumDigits = sumsSum.toString.toInt\n        if (sumsSumDigits\
    \ == numsSumDigits) {\n            sumsSum\n        } else {\n            sumsSumDigits\
    \ - numsSumDigits\n        }", "        val sums = arr.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val arr\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toInt).map(x => x *\
    \ x).map(x => x.toInt)\n        val count = sums.count(x => x > 0)\n        count",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        val negative = digits.map(_.toString.toInt).sum < 0\n        val firstSignedDigit\
    \ = if (negative) digits.head - 1 else digits.head\n        val nums = arr.filter(x\
    \ => x > 0).map(x => x - firstSignedDigit)\n        nums.count(x => x > 0).sum",
  "        val n = arr.size\n        val sums = arr.map(x => x.toString.toLong).map(x\
    \ => x.toInt).map(x => x * x).map(x => x.toInt)\n        val sumsSum = sums.sum\n\
    \        val sumsSum2 = sums.map(x => x * x).sum\n        val sumsSum3 = sums.map(x\
    \ => x * x * x).sum\n        val sumsSum4 = sums.map(x => x * x * x * x).sum\n\
    \        val sumsSum5 = sums.map(x => x * x * x * x * x).sum\n        val sumsSum6\
    \ = sums.map(x => x * x * x * x * x * x).sum\n        val sumsSum7 = sums.map(x\
    \ => x * x * x * x * x * x * x).sum\n        val sumsSum8 = sums.map(x => x *\
    \ x * x * x * x * x * x * x).sum\n        val sumsSum9 = sums.map(x => x * x *\
    \ x * x * x * x * x * x * x * x).sum\n        val sumsSum10 = sums.map(x => x\
    \ * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum11 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum12\
    \ = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val sumsSum13 = sums.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x).sum\n        val sumsSum14 = sums.map(x => x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n \
    \       val sumsSum15 = sums.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum16 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x).sum\n        val sumsSum17 = sums.map(x => x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n       \
    \ val sumsSum18 = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum19 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * ", " \
    \       val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n        val sums\
    \ = nums.map(x => math.pow(10, x.length))\n        val sumOfDigits = sums.map(x\
    \ => x.sum)\n        val numsWithSumOfDigits =\n            sumOfDigits.zip(nums).filter(_._1\
    \ > 0).map(_._2)\n        numsWithSumOfDigits.sum", "        val n = arr.size\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val digit = arr(i).toInt\n\
    \            sum += digit\n        }\n        if(sum > 0)\n            sum\n \
    \       else\n            arr.sum", "        var sum = 0\n        var count =\
    \ 0\n        for(i <- arr) {\n            sum += i\n            count += 1\n \
    \           if(sum > 0) {\n                sum -= i\n            }\n        }\n\
    \        count", "        val sums = arr.foldLeft(Map[Long, Long]()){\n      \
    \      case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1))\n        }\n  \
    \      sums.filter(_._2 > 0).length", "        val n = arr.size\n        val sum\
    \ = 0\n        var i = 0\n        while (i < n) {\n            val digit = arr(i).toInt\n\
    \            sum += digit\n            i += 1\n        }\n        if (sum > 0)\
    \ {\n            sum\n        } else {\n            arr.takeWhile(x => x < 0).sum\n\
    \        }", "        val n = arr.size\n        val sum = 0\n        for(i <-\
    \ 0 until n) {\n            sum += arr(i)\n        }\n        sum", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSetSet = numsSumsSet.toSet\n        val numsSumsSetSetSet\
    \ = numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet = numsSumsSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet",
  "        val n = arr.length\n        val m = arr.map(_.toString.toInt).sum\n   \
    \     val r = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).sum\n \
    \       val s = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).sum\n        val t = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).sum\n        val u = arr.map(_.toString.toInt).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).sum\n        val v = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).sum\n\
    \        val w = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).sum\n\
    \        val x = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).sum\n        val y = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).sum\n        val z = arr.map(_.toString.toInt).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else ", "        val nums = arr.filter(_ >\
    \ 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong",
  "        val n = arr.size\n        val sum = 0\n        for (i <- 0 until n) {\n\
    \            val x = arr(i)\n            if (x < 0) x += x.toInt\n           \
    \ sum += x\n        }\n        sum", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x =>\
    \ x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.toInt\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.toLong\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.toLong\n       \
    \ val negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.toLong\n        val positiveSumsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbs.toInt\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.toInt\n        val positiveSumsSumAbsSumAbsSum =\
    \ positiveSumsSumAbsSumAbs.toLong\n        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbs = positiveSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = negativeSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbsSum.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbs", "      \
    \  val n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n    \
    \    for (i <- 0 until n) {\n            val digit = arr(i).abs\n            sums\
    \ += digit\n        }\n        sums.sum", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.count(_ > 0)", "        var\
    \ sum = 0\n        var count = 0\n        arr.foreach(x => sum += x)\n       \
    \ arr.foreach(x => if (sum > 0) count += 1)\n        count", "        val digits\
    \ = arr.map(_.toInt)\n        val sum = digits.sum\n        val negative = digits.map(_.signum).toSet\n\
    \        val firstDigit = digits.head\n        if (sum < 0) firstDigit * -1\n\
    \        else firstDigit", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet3 = numsSums.map(x => math.abs(x))\n        val numsSumsSet4\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet5 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet6 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet7 = numsSums.map(x => math.abs(x))\n        val numsSumsSet8\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet9 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet10 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet11 = numsSums.map(x => math.abs(x))\n        val numsSumsSet12\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet13 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet14 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet15 = numsSums.map(x => math.abs(x))\n        val numsSumsSet16\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet17 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet18 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet19 = numsSums.map(x => math.abs(x))\n        val numsSumsSet20\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet21 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet22 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet23 = numsSums.map(x => math.abs(x))\n        val numsSumsSet24\
    \ = nums", "        val n = arr.length\n        val sums = arr.map(x => if (x\
    \ < 0) x.toLong * -1 else x.toLong)\n        val res = sums.foldLeft(0l)((acc,\
    \ x) => acc + x)\n        if (res > 0) res + 1 else res", "        val nums =\
    \ arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n      \
    \  nums.filter(x => x.toString.toInt > 0).count(x => x.toString.toInt - numsSum\
    \ > 0)", "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n\
    \        val numsSums = nums.map(x => sums.filter(y => y == x).length)\n     \
    \   numsSums.sum", "        val sums = arr.map(x => math.abs(x))\n        val\
    \ count = sums.count(x => x > 0)\n        count", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.filter(_ > x).size)\n        numsSums.sum", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.filter(_ > x).size)\n        numsSums.sum", "        val n = arr.length\n\
    \        var sum = 0\n        var count = 0\n        for (i <- 0 until n) {\n\
    \            sum += arr(i)\n            if (sum > 0) {\n                count\
    \ += 1\n            }\n        }\n        count", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n        sums",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt)\n\
    \        val count = sums.count(x => x > 0)\n        sums.count(x => x < 0) -\
    \ count", "        val n = arr.length\n        val sum = 0\n        for (i <-\
    \ 0 until n) {\n            sum += arr(i)\n        }\n        if (sum > 0) {\n\
    \            sum\n        } else {\n            arr.takeWhile(_ < 0).length\n\
    \        }", "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt)\n\
    \        val sumsSum = sums.sum\n        val sumsSumPositive = sums.filter(x =>\
    \ x > 0).sum\n        val sumsSumNegative = sums.filter(x => x < 0).sum\n    \
    \    sumsSumPositive - sumsSumNegative", "        val nums = arr.filter(_ > 0)\n\
    \        val sums = nums.map(x => x.toString.toInt).sum\n        sums", "    \
    \    val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n  \
    \      val negative = arr.exists(_ < 0)\n        val firstSign = arr.takeWhile(_\
    \ < 0).head\n        val firstDigit = if (negative) firstSign.toInt else firstSign.toLong\n\
    \        val firstDigitSum = digits.takeWhile(_ >= firstDigit).sum\n        if\
    \ (firstDigitSum > 0) sum else firstDigitSum", "        val n = arr.size\n   \
    \     val sums = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n      \
    \  sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet3 = numsSumsSet2.map(x => math.abs(x))\n        val numsSumsSet4\
    \ = numsSumsSet3.map(x => math.abs(x))\n        val numsSumsSet5 = numsSumsSet4.map(x\
    \ => math.abs(x))\n        val numsSumsSet6 = numsSumsSet5.map(x => math.abs(x))\n\
    \        val numsSumsSet7 = numsSumsSet6.map(x => math.abs(x))\n        val numsSumsSet8\
    \ = numsSumsSet7.map(x => math.abs(x))\n        val numsSumsSet9 = numsSumsSet8.map(x\
    \ => math.abs(x))\n        val numsSumsSet10 = numsSumsSet9.map(x => math.abs(x))\n\
    \        val numsSumsSet11 = numsSumsSet10.map(x => math.abs(x))\n        val\
    \ numsSumsSet12 = numsSumsSet11.map(x => math.abs(x))\n        val numsSumsSet13\
    \ = numsSumsSet12.map(x => math.abs(x))\n        val numsSumsSet14 = numsSumsSet13.map(x\
    \ => math.abs(x))\n        val numsSumsSet15 = numsSumsSet14.map(x => math.abs(x))\n\
    \        val numsSumsSet16 = numsSumsSet15.map(x => math.abs(x))\n        val\
    \ numsSumsSet17 = numsSumsSet16.map(x => math.abs(x))\n        val numsSumsSet18\
    \ = numsSumsSet17.map(x => math.abs(x))\n        val numsSumsSet19 = numsSumsSet18.map(x\
    \ => math.abs(x))\n        val numsSumsSet20 = numsSumsSet19.map(x => math.abs(x))\n\
    \        val numsSumsSet21 = numsSumsSet20.map(x => math.abs(x))\n        val\
    \ numsSumsSet22 = numsSums", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong", "        val\
    \ nums = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n        val\
    \ numsSumSet = numsSum.toSet\n        val numsSumSetSize = numsSumSet.size\n \
    \       val numsSumSetSum = numsSumSet.sum\n        val numsSumSetSumSet = numsSumSetSum.toSet\n\
    \        val numsSumSetSumSetSize = numsSumSetSumSet.size\n        val numsSumSetSumSetSum\
    \ = numsSumSetSumSet.sum\n        val numsSumSetSumSetSumSet = numsSumSetSumSetSum.toSet\n\
    \        val numsSumSetSumSetSumSetSize = numsSumSetSumSetSumSet.size\n      \
    \  val numsSumSetSumSetSumSetSum = numsSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSum", "        val sums = arr.map(x => if (x < 0) -x.toLong else\
    \ x.toLong).sum\n        sums.toLong", "        val nums = arr.toSet\n       \
    \ val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).length)\n        numsSums.sum", "        val nums = arr.toSet\n       \
    \ val numsSum = arr.map(x => x.toString.toInt).sum\n        nums.filter(x => x\
    \ > 0).count(x => numsSum - x > 0)", "        val sum = 0\n        arr.foreach(x\
    \ => sum += x)\n        arr.count(x => x > 0)", "        val n = arr.size\n  \
    \      var count = 0\n        var sum = 0\n        var lastSum = 0\n        var\
    \ lastDigit = 0\n        var lastDigitSum = 0\n        var lastDigitSum2 = 0\n\
    \        var lastDigitSum3 = 0\n        var lastDigitSum4 = 0\n        var lastDigitSum5\
    \ = 0\n        var lastDigitSum6 = 0\n        var lastDigitSum7 = 0\n        var\
    \ lastDigitSum8 = 0\n        var lastDigitSum9 = 0\n        var lastDigitSum10\
    \ = 0\n        var lastDigitSum11 = 0\n        var lastDigitSum12 = 0\n      \
    \  var lastDigitSum13 = 0\n        var lastDigitSum14 = 0\n        var lastDigitSum15\
    \ = 0\n        var lastDigitSum16 = 0\n        var lastDigitSum17 = 0\n      \
    \  var lastDigitSum18 = 0\n        var lastDigitSum19 = 0\n        var lastDigitSum20\
    \ = 0\n        var lastDigitSum21 = 0\n        var lastDigitSum22 = 0\n      \
    \  var lastDigitSum23 = 0\n        var lastDigitSum24 = 0\n        var lastDigitSum25\
    \ = 0\n        var lastDigitSum26 = 0\n        var lastDigitSum27 = 0\n      \
    \  var lastDigitSum28 = 0\n        var lastDigitSum29 = 0\n        var lastDigitSum30\
    \ = 0\n        var lastDigitSum31 = 0\n        var lastDigitSum32 = 0\n      \
    \  var lastDigitSum33 = 0\n        var lastDigitSum34 = 0\n        var lastDigitSum35\
    \ = 0\n        var lastDigitSum36 = 0\n        var lastDigitSum37 = 0\n      \
    \  var lastDigitSum38 = 0\n        var lastDigitSum39 = 0\n        var lastDigitSum40\
    \ = 0\n        var lastDigitSum41 = 0\n        var lastDigitSum42 = 0\n      \
    \  var lastDigitSum43 = 0\n        var lastDigitSum44 = 0\n        var lastDigitSum45\
    \ = 0\n        var lastDigitSum46 = 0\n        var lastDigitSum47 = 0\n      \
    \  var lastDigitSum48 = 0\n        var lastDigitSum49 = 0\n        var lastDigitSum50\
    \ = 0\n        var lastDigitSum51 = 0\n        var lastDigitSum52 = 0\n      \
    \  var lastDigitSum53 = 0\n        var lastDigitSum54 = 0\n        var lastDigitSum55\
    \ = 0\n        var lastDigitSum56 = 0\n        var lastDigitSum57 = 0\n      \
    \  var lastDigitSum58 = 0\n        var lastDigitSum59 = 0\n        var lastDigitSum60\
    \ = 0\n        var lastDigitSum61 = 0\n        var lastDigitSum62 = 0\n      \
    \  var lastDigitSum63 = 0\n        var lastDigitSum64 = 0\n        var lastDigitSum65\
    \ = 0\n        var lastDigitSum66 = 0\n        var lastDigitSum67 = 0\n      \
    \  var lastDigitSum68 = 0\n        var lastDigitSum69 = 0\n        var lastDigitSum70\
    \ = 0\n", "        val sums = arr.map(x => if (x < 0) x.toLong else x.toInt).sum\n\
    \        sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSum = nums.map(x => math.abs(x)).sum\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSetSet = numsSumSet.toSet\n        val numsSumSetSetSet\
    \ = numsSumSetSet.toSet\n        val numsSumSetSetSetSet = numsSumSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSet = numsSumSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSet\
    \ = numsSumSetSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSet = numsSumSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSum", "        val\
    \ sums = arr.map(x => x.toString.toInt).map(x => x * x)\n        val counts =\
    \ sums.groupBy(x => x.toInt).mapValues(_.size)\n        val maxCount = counts.max\n\
    \        val maxSum = counts.map(x => x._2).max\n        val maxSums = sums.filter(x\
    \ => x.toInt == maxSum)\n        val maxSumsCount = maxSums.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val maxSumsCountSum = maxSumsCount.sum\n        val maxSumsCountSum2\
    \ = maxSumsCountSum * maxSumsCountSum\n        val maxSumsCountSum3 = maxSumsCountSum2\
    \ * maxSumsCountSum\n        val maxSumsCountSum4 = maxSumsCountSum3 * maxSumsCountSum\n\
    \        val maxSumsCountSum5 = maxSumsCountSum4 * maxSumsCountSum\n        val\
    \ maxSumsCountSum6 = maxSumsCountSum5 * maxSumsCountSum\n        val maxSumsCountSum7\
    \ = maxSumsCountSum6 * maxSumsCountSum\n        val maxSumsCountSum8 = maxSumsCountSum7\
    \ * maxSumsCountSum\n        val maxSumsCountSum9 = maxSumsCountSum8 * maxSumsCountSum\n\
    \        val maxSumsCountSum10 = maxSumsCountSum9 * maxSumsCountSum\n        val\
    \ maxSumsCountSum11 = maxSumsCountSum10 * maxSumsCountSum\n        val maxSumsCountSum12\
    \ = maxSumsCountSum11 * maxSumsCountSum\n        val maxSumsCountSum13 = maxSumsCountSum12\
    \ * maxSumsCountSum\n        val maxSumsCountSum14 = maxSumsCountSum13 * maxSumsCountSum\n\
    \        val maxSumsCountSum15 = maxSumsCountSum14 * maxSumsCountSum\n       \
    \ val maxSumsCountSum16 = maxSumsCountSum15 * maxSumsCountSum\n        val maxSumsCountSum17\
    \ = maxSumsCountSum16 * maxSumsCountSum\n        val maxSumsCountSum18 = maxSumsCountSum17\
    \ * maxSumsCountSum\n        val maxSumsCountSum19 = maxSumsCountSum18 * maxSumsCountSum\n\
    \        val maxSumsCountSum20 = maxSumsCountSum19 * max", "        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.count(_\
    \ > 0)", "        val n = arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        var sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n\
    \            sums += sum\n        }\n        sums.toList.count(_ > 0)", "    \
    \    val sums = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n       \
    \ sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSetSet = numsSums.map(x => math.abs(x)).toSet\n\
    \        val numsSumsSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet\n\
    \        val numsSumsSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.to",
  "        val sums = arr.map(x => if (x < 0) x.toLong else x.toInt).sum\n       \
    \ sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_ > x).size)\n\
    \        numsSums.sum", "        val digits = arr.map(_.toString.toInt)\n    \
    \    val sum = digits.sum\n        val positives = arr.filter(x => x > 0).length\n\
    \        val negatives = arr.filter(x => x < 0).length\n        val zeros = arr.filter(x\
    \ => x == 0).length\n        val positiveSum = digits.filter(x => x > 0).sum\n\
    \        val negativeSum = digits.filter(x => x < 0).sum\n        val zeroSum\
    \ = digits.filter(x => x == 0).sum\n        val positiveSumDigits = digits.filter(x\
    \ => x > 0).map(_.toString.toInt).sum\n        val negativeSumDigits = digits.filter(x\
    \ => x < 0).map(_.toString.toInt).sum\n        val zeroSumDigits = digits.filter(x\
    \ => x == 0).map(_.toString.toInt).sum\n        val positiveSumDigitDigits = digits.filter(x\
    \ => x > 0).map(_.toString.toInt).map(_.toString.toInt).sum\n        val negativeSumDigitDigits\
    \ = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val negativeSumDigitDigitDigits = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val negativeSumDigitDigitDigitDigits = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigitDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x * x).sum\n       \
    \ sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSum = nums.map(x => math.abs(x)).sum\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.to", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val positiveSums = sums.filter(x => x > 0)\n        val\
    \ negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.size\n\
    \        val negativeSumsCount = negativeSums.size\n        val positiveSumsSum\
    \ = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n       \
    \ val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.size\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n    \
    \    val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n    \
    \    val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbsSum)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.size\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.size\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs", "        val n = arr.length\n  \
    \      val m = arr.map(_.toString.toInt).sum\n        val r = arr.map(_.toString.toInt).map(_.toLong).sum\n\
    \        val s = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).sum\n \
    \       val t = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val u = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val v = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val w = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val x = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val y = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val z = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val a = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val b = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val c = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n\
    \        val numsSumsSet2 = numsSums.map(x => math.abs(x))\n        val numsSumsSet3\
    \ = numsSumsSet2.map(x => math.abs(x))\n        val numsSumsSet4 = numsSumsSet3.map(x\
    \ => math.abs(x))\n        val numsSumsSet5 = numsSumsSet4.map(x => math.abs(x))\n\
    \        val numsSumsSet6 = numsSumsSet5.map(x => math.abs(x))\n        val numsSumsSet7\
    \ = numsSumsSet6.map(x => math.abs(x))\n        val numsSumsSet8 = numsSumsSet7.map(x\
    \ => math.abs(x))\n        val numsSumsSet9 = numsSumsSet8.map(x => math.abs(x))\n\
    \        val numsSumsSet10 = numsSumsSet9.map(x => math.abs(x))\n        val numsSumsSet11\
    \ = numsSumsSet10.map(x => math.abs(x))\n        val numsSumsSet12 = numsSumsSet11.map(x\
    \ => math.abs(x))\n        val numsSumsSet13 = numsSumsSet12.map(x => math.abs(x))\n\
    \        val numsSumsSet14 = numsSumsSet13.map(x => math.abs(x))\n        val\
    \ numsSumsSet15 = numsSumsSet14.map(x => math.abs(x))\n        val numsSumsSet16\
    \ = numsSumsSet15.map(x => math.abs(x))\n        val numsSumsSet17 = numsSumsSet16.map(x\
    \ => math.abs(x))\n        val numsSumsSet18 = numsSumsSet17.map(x => math.abs(x))\n\
    \        val numsSumsSet19 = numsSumsSet18.map(x => math.abs(x))\n        val\
    \ numsSumsSet20 = numsSumsSet19.map(x => math.abs(x))\n        val numsSumsSet21\
    \ = numsSumsSet20.map(x => math.abs(x))\n        val numsSumsSet22 = numsSums",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        sums.count(_ > 0)", "        var count = 0\n        arr.foreach(x =>\
    \ {\n            val digits = x.toString.toLong.digits\n            val sum =\
    \ digits.sum\n            if (sum > 0) {\n                count += 1\n       \
    \     }\n        })\n        count", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => sums.filter(_\
    \ > x).size)\n        numsSums.sum", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => if (x < 0) -x else x)\n        val nums = arr.filter(x => sums.contains(x)).size\n\
    \        nums", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val positiveSums = sums.filter(x => x > 0)\n        val\
    \ negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.size\n\
    \        val negativeSumsCount = negativeSums.size\n        val positiveSumsSum\
    \ = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n       \
    \ val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.size\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n    \
    \    val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n    \
    \    val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbsSum)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.size\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.size\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs", "        val digits = arr.map(_.toInt)\n\
    \        val sum = digits.sum\n        val negativeSum = sum < 0\n        val\
    \ firstSignedDigit = if (negativeSum) -digits.head else digits.head\n        val\
    \ nums = arr.filter(_ > 0).filter(_ % firstSignedDigit == 0)\n        nums.count(_\
    \ > 0)", "        val n = arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            val digits = arr(i).toString.reverse.map(_.toInt)\n\
    \            sums += digits.sum\n        }\n        sums.sum", "        val n\
    \ = arr.size\n        val sum = 0\n        for(i <- 0 until n){\n            val\
    \ digit = arr(i).toInt\n            sum += digit\n            if(sum > 0){\n \
    \               sum -= digit\n            }\n        }\n        n", "        val\
    \ nums = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val\
    \ sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum => sum\
    \ > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n        val positiveSumCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumCount = negativeSums.count(_\
    \ < 0)\n        val positiveSumCountAndNegativeSumCount = positiveSumCount + negativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCount = positiveSumCountAndNegativeSumCount\
    \ + negativeSumCountAndNegativeSumCount\n        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCount + negativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ + negativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAnd",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val positiveSums = sums.filter(x => x > 0)\n        val negativeSums =\
    \ sums.filter(x => x < 0)\n        val positiveSumsCount = positiveSums.size\n\
    \        val negativeSumsCount = negativeSums.size\n        val positiveSumsSum\
    \ = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n       \
    \ val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.size\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n    \
    \    val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n    \
    \    val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbsSum)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.size\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.size\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs", "        val nums = arr.filter(x\
    \ => x > 0).map(x => x.toString.toInt)\n        val sums = nums.map(x => x.sum)\n\
    \        sums.sum", "        val nums = arr.filter(x => x > 0).map(x => x.toInt)\n\
    \        val sums = nums.map(x => x.sum)\n        sums.count(x => x > 0)", " \
    \       val nums = arr.toSet\n        val numsSet = nums.toSet\n        val numsSum\
    \ = nums.map(x => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSumSet.filter(x => numsSumSet.contains(x-1))\n\
    \        val numsSumSet3 = numsSumSet.filter(x => numsSumSet.contains(x+1))\n\
    \        numsSumSet2.size + numsSumSet3.size", "        var sum = 0\n        var\
    \ count = 0\n        for(i <- arr) {\n            sum += i\n            count\
    \ += 1\n        }\n        if(sum > 0) {\n            count\n        } else {\n\
    \            count * -1\n        }", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        sums.count(_ > 0)", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsWithSum = sums.filter(x => x > 0)\n        numsWithSum.size ", "       \
    \ val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n       \
    \ val numsSums = nums.map(x => sums.count(y => y > x))\n        numsSums.sum",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.foldLeft(0L){\
    \ (sum, digit) =>\n            val digitSum = sum + digit\n            if (digitSum\
    \ > 0) digitSum else -digitSum\n        }\n        sum", "        val n = arr.length\n\
    \        val sum = 0\n        for(i <- 0 until n){\n            val digit = arr(i).abs\n\
    \            sum += digit\n            if(digit < 0){\n                sum -=\
    \ digit.abs\n            }\n        }\n        sum", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val nums = sums.filter(sum > 0)\n\
    \        nums.toList.size", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.toList.map(_.toString.toInt).sum\n        nums.filter(_ > 0).count(numsSum\
    \ > 0)", "        val n = arr.length\n        val sum = 0\n        var i = 0\n\
    \        while (i < n) {\n            sum += arr(i)\n            i += 1\n    \
    \    }\n        if (sum > 0) {\n            sum\n        } else {\n          \
    \  arr.takeWhile(x => x < 0).length\n        }", "        val n = arr.size\n \
    \       val sum = 0\n        for(i <- 0 until n) {\n            val digit = arr(i).abs\n\
    \            sum += digit\n            if(digit > 0) {\n                val sign\
    \ = digit < 0 ? -1 : 1\n                sum += sign * digit\n            }\n \
    \       }\n        sum", "        var count = 0\n        for(i <- arr) {\n   \
    \         val digit = i.toString.toInt\n            val sum = digit + digit\n\
    \            count += sum > 0\n        }\n        count", "        val nums =\
    \ arr.toList\n        val sums = arr.map(x => x.toString.toLong).map(x => x.toString.toInt).map(x\
    \ => x.sum)\n        val sumsSorted = sums.sorted\n        val sumsSortedReversed\
    \ = sumsSorted.reverse\n        val sumsSortedReversedReversed = sumsSortedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversed = sumsSortedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversed = sumsSortedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversed = sumsSortedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversed = sumsSortedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse",
  "        val n = arr.length\n        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x).map(x => x.toInt)\n        val sumsSum = sums.sum\n        val nums\
    \ = arr.filter(x => sums.contains(x)).length\n        val numsSum = nums.sum\n\
    \        val numsSumDigits = numsSum.toString.length\n        val numsSumDigitsDigits\
    \ = numsSumDigits.toString.length\n        val numsSumDigitsDigitDigits = numsSumDigitsDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigits = numsSumDigitsDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigits = numsSumDigitsDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigits", "        val n = arr.size\n        var count = 0\n       \
    \ for(i <- 0 until n) {\n            val sum = arr(i).toLong\n            val\
    \ digits = sum % 10\n            count += if (digits > 0) 1 else 0\n        }\n\
    \        count", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val count = sums.count(x => x > 0)\n        val negative\
    \ = sums.count(x => x < 0)\n        val firstNegative = sums.find(x => x < 0).getOrElse(0)\n\
    \        val firstPositive = sums.find(x => x > 0).getOrElse(0)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        ", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(_.isPositive)\n\
    \        val negativeSums = sums.filter(_.isNegative)\n        positiveSums.size\
    \ + (negativeSums.size * -1)", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => if (x < 0) x.toLong else x.toLong % 10).sum\n        nums.count(x\
    \ => x > 0 && numsSum - x > 0)", "        val sum = 0\n        arr.foreach(x =>\
    \ sum += x)\n        arr.count(x => x > 0 && sum > 0)", "        var count = 0\n\
    \        for (i <- 0 until arr.length) {\n            val num = arr(i)\n     \
    \       if (num < 0) num *= -1\n            val digits = num.toString.toInt\n\
    \            val sumOfDigits = digits.sum\n            if (sumOfDigits > 0) count\
    \ += 1\n        }\n        count", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val count = sums.count(x => x > 0)\n        sums.count(x\
    \ => x < 0) * count", "        val digits = arr.map(_.toString.toInt)\n      \
    \  val nums = arr.map(_.toString.toInt)\n        val sums = arr.map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n\
    \        val numsSums = nums.intersect(sums)\n        numsSums.size", "      \
    \  val nums = arr.filter(x => x >= 0).map(x => x.toString.toInt).sum\n       \
    \ if (nums < 0) nums.toLong * -1\n        else nums", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val numsSums = nums.map(x\
    \ => sums.filter(_ > x).size)\n        numsSums.sum", "        val n = arr.size\n\
    \        val sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n\
    \        }\n        if (sum > 0) {\n            sum\n        } else {\n      \
    \      arr.takeWhile(_ > 0).sum\n        }", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ > 0)\n        positiveSums.count(sum)", "        val sums = arr.foldLeft(mutable.Map[Long,\
    \ Long]()){\n            case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1))\n\
    \        }\n        sums.filter(_._2 > 0).size", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val count = sums.count(x\
    \ => x > 0)\n        count", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(x => math.abs(x))\n        val numsSums = sums.filter(_ > 0)\n\
    \        numsSums.sum", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x.sum)\n        sums.sum", "        val nums = arr.filter(_ > 0).map(_.toInt)\n\
    \        val sums = nums.map(_.toInt).sum\n        sums > 0 ? sums : 0", "   \
    \     val nums = arr.toList\n        val sums = nums.map(x => x.toString.toLong).map(x\
    \ => x.toInt).map(x => x.sum)\n        sums.count(x => x > 0)", "        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ val counts = sums.groupBy(x => math.abs(x))\n        val result = counts.mapValues(_.size).sum\n\
    \        result", "        val sums = arr.foldLeft(Map[Long, Long]()){\n     \
    \       case (acc, x) => acc + (x -> (acc.getOrElse(x, 0) + 1))\n        }\n \
    \       sums.filter(_._2 > 0).length", "        val nums = arr.toSet\n       \
    \ val sums = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.size\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n    \
    \    val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n        val\
    \ positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n    \
    \    val positiveSumsSumAbsSumAbsSumAbs = math.abs(positiveSumsSumAbsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = math.abs(negativeSumsSumAbsSumAbsSum)\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbs.size\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbs.size\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbs.sum\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbsSumAbsSumAbs.sum\n\
    \        val positiveSumsSumAbsSumAbsSumAbs", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum\
    \ => sum > 0)\n        val negativeSums = sums.filter(sum => sum < 0)\n      \
    \  positiveSums.size + (negativeSums.size * negativeSums.sum)", "        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong", "        val sums = arr.map(x => if (x < 0) x.toLong %\
    \ 10 else x.toLong / 10).sum\n        sums.toLong", "        val nums = arr.toSet\n\
    \        val sums = nums.map(x => x.toString.toInt).map(x => x * x).sum\n    \
    \    sums.toLong", "        val nums = arr.toSet\n        val sums = arr.map(x\
    \ => math.abs(x))\n        val counts = sums.groupBy(x => math.abs(x))\n     \
    \   val numsWithSum = nums.filter(x => counts(x) > 1)\n        numsWithSum.size\
    \ + (nums.size - numsWithSum.size)", "        val nums = arr.toSet\n        val\
    \ numsSet = nums.toSet\n        val numsSortedSet = nums.toSeq.sortBy(_.toLong)\n\
    \        val numsSortedSetSet = numsSortedSet.toSet\n        val numsSortedSetSetSet\
    \ = numsSortedSetSet.toSet\n        val numsSortedSetSetSetSet = numsSortedSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSet = numsSortedSetSetSetSet.toSet\n      \
    \  val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n      \
    \  val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSorted", "       \
    \ val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        sums.filter(_.toLong > 0).size", "        val nums = arr.filter(_ > 0)\n\
    \        val sum = nums.sum\n        val digits = nums.map(_.toString.toInt)\n\
    \        val negative = digits.map(_.toInt).sum > 0\n        val firstNegative\
    \ = digits.map(_.toInt).takeWhile(_ < 0).sum\n        val firstPositive = digits.map(_.toInt).takeWhile(_\
    \ >= 0).sum\n        val firstPositiveDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).head\n        val firstNegativeDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).head\n        val firstNegativeDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigit",
  "        val n = arr.length\n        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x).map(x => x.toLong)\n        val sumsSum = sums.sum\n        val sumsSum2\
    \ = sums.map(x => x.toLong).sum\n        val sumsSum3 = sums.map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val sumsSum4 = sums.map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val sumsSum5 = sums.map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val sumsSum6 = sums.map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val sumsSum7 = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val sumsSum8\
    \ = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val sumsSum9\
    \ = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val sumsSum10\
    \ = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val sumsSum11 = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val sumsSum12 = sums.map(x => x.", "        var sum\
    \ = 0\n        var count = 0\n        for (i <- arr) {\n            sum += i\n\
    \            if (sum > 0) {\n                count += 1\n            }\n     \
    \   }\n        count", "        val nums = arr.filter(_ > 0)\n        val sums\
    \ = nums.map(x => x.toString.toInt).sum\n        if (sums > 0) sums else 0", " \
    \       val nums = arr.toSet\n        val numsSet = nums.toSet\n        val numsSum\
    \ = nums.map(x => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSumSet.filter(_ > 0)\n        val numsSumSet3 =\
    \ numsSumSet2.filter(_ > 0)\n        numsSumSet3.size", "        val nums = arr.filter(_\
    \ > 0).map(_.toInt)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums > 0 ? sums : 0", "        val nums = arr.toSet\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val numsSum = sums.filter(x => x > 0).size\n\
    \        numsSum", "        val nums = arr.filter(_ > 0).map(_.toInt)\n      \
    \  val sums = nums.map(x => math.abs(x))\n        val count = sums.count(_ > 0)\n\
    \        count", "        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        positiveSums.count(x => x > 0)", "        val nums = arr.toSet\n    \
    \    val numsSum = arr.map(x => math.abs(x)).sum\n        nums.filter(_ > 0).count(x\
    \ => numsSum - math.abs(x) > 0)", "        val nums = arr.filter(_ > 0)\n    \
    \    val sums = nums.map(x => x.toString.toInt).sum\n        sums.toLong", " \
    \       val nums = arr.filter(_ > 0)\n        val sum = nums.sum\n        if (sum\
    \ < 0) sum.abs.toLong\n        else sum", "        var count = 0\n        arr.foreach(x\
    \ => {\n            val digits = x.toString.reverse.map(_.toInt)\n           \
    \ val sum = digits.sum\n            if (sum > 0) {\n                count += 1\n\
    \            }\n        })\n        count", "        val nums = arr.toSet\n  \
    \      val digits = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n\
    \        val positiveSums = sums.filter(_.isPositive)\n        val negativeSums\
    \ = sums.filter(_.isNegative)\n        val positiveSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumCount = negativeSums.count(_ > 0)\n        val\
    \ positiveSumSum = positiveSums.sum\n        val negativeSumSum = negativeSums.sum\n\
    \        val positiveSumSumCount = positiveSums.count(_ > 0)\n        val negativeSumSumCount\
    \ = negativeSums.count(_ > 0)\n        val positiveSumSumSum = positiveSums.sum\n\
    \        val negativeSumSumSum = negativeSums.sum\n        val positiveSumSumSumCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_\
    \ > 0)\n        val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > ", "        val n = arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n) {\n            val sum = arr(i).toLong\n        \
    \    if(sum > 0) {\n                sums += sum\n            }\n        }\n  \
    \      sums.sum", "        val nums = arr.toList\n        val sums = arr.map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong)\n        val sumsSum = sums.sum\n        val numsSum =\
    \ nums.sum\n        val numsSumDigits = numsSum.toString.length\n        val sumsSumDigits\
    \ = sumsSum.toString.length\n        val numsSumDigitDigits = numsSumDigits.toString.length\n\
    \        val sumsSumDigitDigits = sumsSumDigits.toString.length\n        val numsSumDigitDigitDigits\
    \ = numsSumDigitDigits.toString.length\n        val sumsSumDigitDigitDigits =\
    \ sumsSumDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigitDigitDigitDigits\
    \ = numsSumDigitDigitDigits.toString.length\n        val sumsSumDigitDigitDigitDigits\
    \ = sumsSumDigitDigitDigits.toString.length\n        val numsSumDigit", "    \
    \    val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val digits\
    \ = arr.map(_.toString.toInt)\n        val nums = arr.filter(x => x > 0).map(x\
    \ => digits(x) - digits(x - 1))\n        nums.sum", "        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(_.sum)\n        val nums = sums.filter(x => x >\
    \ 0)\n        nums.sum", "        val n = arr.size\n        val sums = arr.map(x\
    \ => if (x < 0) x.toLong * -1 else x).toList\n        val sumsSorted = sums.sortWith((x,\
    \ y) => x > y)\n        val sumsSortedReversed = sumsSorted.reverse\n        val\
    \ sumsSortedReversedSum = sumsSortedReversed.sum\n        val sumsSortedReversedSum2\
    \ = sumsSortedReversedSum * sumsSortedReversedSum\n        val sumsSortedReversedSum3\
    \ = sumsSortedReversedSum2 * sumsSortedReversedSum\n        val sumsSortedReversedSum4\
    \ = sumsSortedReversedSum3 * sumsSortedReversedSum\n        val sumsSortedReversedSum5\
    \ = sumsSortedReversedSum4 * sumsSortedReversedSum\n        val sumsSortedReversedSum6\
    \ = sumsSortedReversedSum5 * sumsSortedReversedSum\n        val sumsSortedReversedSum7\
    \ = sumsSortedReversedSum6 * sumsSortedReversedSum\n        val sumsSortedReversedSum8\
    \ = sumsSortedReversedSum7 * sumsSortedReversedSum\n        val sumsSortedReversedSum9\
    \ = sumsSortedReversedSum8 * sumsSortedReversedSum\n        val sumsSortedReversedSum10\
    \ = sumsSortedReversedSum9 * sumsSortedReversedSum\n        val sumsSortedReversedSum11\
    \ = sumsSortedReversedSum10 * sumsSortedReversedSum\n        val sumsSortedReversedSum12\
    \ = sumsSortedReversedSum11 * sumsSortedReversedSum\n        val sumsSortedReversedSum13\
    \ = sumsSortedReversedSum12 * sumsSortedReversedSum\n        val sumsSortedReversedSum14\
    \ = sumsSortedReversedSum13 * sumsSortedReversedSum\n        val sumsSortedReversedSum15\
    \ = sumsSortedReversedSum14 * sumsSortedReversedSum\n        val sumsSortedReversedSum16\
    \ = sumsSortedReversedSum15 * sumsSortedReversedSum\n        val sumsSortedReversedSum17\
    \ = sumsSortedReversedSum16 * sumsSortedReversedSum\n        val sumsSortedReversedSum18\
    \ = sumsSortedReversedSum17 * sumsSortedReversedSum\n        val sumsSortedReversedSum19\
    \ = sumsSortedReversedSum18 * sumsSortedReversedSum\n        val sumsSortedReversedSum",
  "        val nums = arr.filter(x => x > 0).map(x => math.abs(x))\n        val sum\
    \ = nums.sum\n        val numsLessThanZero = nums.filter(x => x < 0).map(x =>\
    \ math.abs(x))\n        val numsLessThanZeroSum = numsLessThanZero.sum\n     \
    \   val numsLessThanZeroSumLessThanZero = numsLessThanZeroSum - numsLessThanZero.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZero = numsLessThanZeroSumLessThanZero.head\
    \ - numsLessThanZero.tail.head\n        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.head - numsLessThanZero.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.head - numsLessThanZero.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.head - numsLessThanZero.tail.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.head - numsLessThanZero.tail.tail.tail.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.tail.tail.head -\
    \ numsLessThanZero.tail.tail.tail.tail.tail.tail.tail.head\n        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ - numsLessThanZero.tail.tail.tail.tail.tail.", "        val nums = arr.filter(_\
    \ > 0)\n        val sums = nums.map(x => math.abs(x))\n        sums.count(_ >\
    \ 0)", "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x =>\
    \ x.toString.toInt).sum\n        sums.toLong", "        val nums = arr.toSet\n\
    \        val sums = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.toInt\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n        val positiveSumsSumAbsSum\
    \ = positiveSumsSumAbs.toLong\n        val negativeSumsSumAbsSum = negativeSumsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.toLong\n       \
    \ val negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.toLong\n        val positiveSumsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbs.toInt\n        val negativeSumsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbs.toInt\n        val positiveSumsSumAbsSumAbsSum =\
    \ positiveSumsSumAbsSumAbs.toLong\n        val negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbs = positiveSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbs = negativeSumsSumAbsSumAbsSumAbs.toLong\n\
    \        val positiveSumsSumAbsSumAbsSumAbsCount = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \        val negativeSumsSumAbsSumAbsSumAbsCount = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \        val positiveSumsSumAbsSumAbsSumAbsSum = positiveSumsSumAbsSumAbsSumAbsSum.toLong\n\
    \        val negativeSumsSumAbsSumAbsSumAbsSum = negativeSumsSumAbs", "      \
    \  var count = 0\n        for(i <- 0 until arr.length) {\n            val digit\
    \ = arr(i).abs\n            if(digit > 0) count += digit\n        }\n        count",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt).sum\n\
    \        sums.toLong", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x).map(x => x.toInt).sum\n        sums.toLong", "        val digits =\
    \ arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val negativeSum\
    \ = sum.filter(_ < 0).sum\n        val positiveSum = sum.filter(_ >= 0).sum\n\
    \        val positiveSumDigits = positiveSum.toString.toInt\n        val negativeSumDigits\
    \ = negativeSum.toString.toInt\n        val positiveSumDigitCount = positiveSumDigits\
    \ / 10\n        val negativeSumDigitCount = negativeSumDigits / 10\n        val\
    \ positiveSumDigitCount2 = positiveSumDigits % 10\n        val negativeSumDigitCount2\
    \ = negativeSumDigits % 10\n        val positiveSumDigitCount3 = positiveSumDigits\
    \ / 100\n        val negativeSumDigitCount3 = negativeSumDigits / 100\n      \
    \  val positiveSumDigitCount4 = positiveSumDigits / 1000\n        val negativeSumDigitCount4\
    \ = negativeSumDigits / 1000\n        val positiveSumDigitCount5 = positiveSumDigits\
    \ / 10000\n        val negativeSumDigitCount5 = negativeSumDigits / 10000\n  \
    \      val positiveSumDigitCount6 = positiveSumDigits / 100000\n        val negativeSumDigitCount6\
    \ = negativeSumDigits / 100000\n        val positiveSumDigitCount7 = positiveSumDigits\
    \ / 1000000\n        val negativeSumDigitCount7 = negativeSumDigits / 1000000\n\
    \        val positiveSumDigitCount8 = positiveSumDigits / 10000000\n        val\
    \ negativeSumDigitCount8 = negativeSumDigits / 10000000\n        val positiveSumDigitCount9\
    \ = positiveSumDigits / 100000000\n        val negativeSumDigitCount9 = negativeSumDigits\
    \ / 100000000\n        val positiveSumDigitCount10 = positiveSumDigits / 1000000000\n\
    \        val negativeSumDigitCount10 = negativeSumDigits / 1000000000\n      \
    \  val positiveSumDigitCount11 = positiveSumDigits / 10000000000\n        val\
    \ negativeSumDigitCount11 = negativeSumDigits / 10000000000\n        val positiveSumDigitCount12\
    \ = positiveSumDigits / 100000000000\n        val negativeSumDigitCount12 = negativeSumDigits\
    \ / 100000000000\n        val positiveSumDigitCount13 = positiveSumDigits / 1000000000000\n\
    \        val negativeSumDigitCount13 = negativeSumDigits / 1000000000000\n   \
    \     val positiveSumDigitCount14 = positiveSumDigits / 10000000000000\n     \
    \   val negativeSumDigitCount14 = negativeSumDigits / 10000000000000\n       \
    \ val positiveSumDigitCount15 = positiveSumDigits / 100000000000000\n        val\
    \ negativeSumDigitCount15 = negativeSum", "        val n = arr.size\n        val\
    \ sum = 0\n        for(i <- 0 until n){\n            sum += arr(i)\n        }\n\
    \        sum", "        val sums = arr.map(x => x.toString.toInt).map(x => if\
    \ (x < 0) -x else x)\n        val count = sums.count(x => x > 0)\n        count",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums", "        val nums = arr.toSet\n        val sums = arr.map(x =>\
    \ math.abs(x))\n        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n\
    \        val numsSums = nums.map(x => math.abs(x))\n        val numsSumsSet =\
    \ numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsSums = nums.map(x => sums.count(y => y == x))\n        numsSums.sum",
  "        val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n  \
    \      val numsWithSums = nums.filter(x => sums.contains(x))\n        numsWithSums.size",
  "        val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val\
    \ numsSumDigits = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigits)\n        numsSumDigits\
    \ - numsSumDigit", "        val digits = arr.map(_.toString.toInt)\n        val\
    \ digitSums = digits.map(_.sum)\n        val nums = arr.filter(_ > 0)\n      \
    \  val numsWithSum = nums.zip(digitSums)\n        numsWithSum.count(_._2 > 0)",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt)\n        val\
    \ sumsSorted = sums.sortWith((x, y) => x < y)\n        val sumsSortedCount = sumsSorted.length\n\
    \        val sumsSortedSum = sumsSorted.sum\n        val sumsSortedSumCount =\
    \ sumsSortedSum.toInt\n        val sumsSortedSumCount2 = sumsSortedSumCount *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount3 = sumsSortedSumCount2 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount4 = sumsSortedSumCount3 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount5 = sumsSortedSumCount4 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount6 = sumsSortedSumCount5 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount7 = sumsSortedSumCount6 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount8 = sumsSortedSumCount7 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount9 = sumsSortedSumCount8 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount10 = sumsSortedSumCount9 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount11 = sumsSortedSumCount10\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount12 = sumsSortedSumCount11\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount13 = sumsSortedSumCount12\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount14 = sumsSortedSumCount13\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount15 = sumsSortedSumCount14\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount16 = sumsSortedSumCount15\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount17 = sumsSortedSumCount16\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount18 = sumsSortedSumCount17\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount19 = sumsSortedSumCount18\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount20 = sumsSortedSumCount19\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount21 = sumsSortedSumCount20\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount22 = sumsSortedSum", " \
    \       var sum = 0\n        var count = 0\n        for (i <- arr) {\n       \
    \     sum += i\n            if (sum > 0) {\n                count += 1\n     \
    \       }\n        }\n        count", "        val n = arr.length\n        val\
    \ sums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n     \
    \       val sum = arr(i).toLong\n            sums += sum\n        }\n        sums.sum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong", "        val digits = arr.map(_.toString.toInt)\n     \
    \   val sums = digits.map(_.sum)\n        val positiveSums = sums.filter(sum =>\
    \ sum > 0)\n        positiveSums.sum", "        val nums = arr.filter(x => x >\
    \ 0).map(x => x.toString.toInt)\n        val sums = nums.map(x => x.sum)\n   \
    \     sums.filter(x => x > 0).length", "        val arr = arr.toList\n       \
    \ val sum = 0\n        val nums = arr.filter(_ > 0)\n        val sign = arr.filter(_\
    \ < 0).head\n        val signDigit = math.signum(sign)\n        val signDigits\
    \ = signDigit % 10\n        val numDigits = arr.filter(_ >= 0).length\n      \
    \  val numDigitSum = numDigits.map(x => math.signum(x / 10)).sum\n        val\
    \ numDigitSums = numDigitSum.map(x => math.signum(x)).sum\n        val numDigitSumsSum\
    \ = numDigitSums.map(x => math.signum(x)).sum\n        val numDigitSumsSums =\
    \ numDigitSumsSum.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSum\
    \ = numDigitSumsSums.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSums\
    \ = numDigitSumsSumsSum.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSumsSum\
    \ = numDigitSumsSumsSums.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSumsSums\
    \ = numDigitSumsSumsSumsSum.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSum\
    \ = numDigitSumsSumsSumsSums.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSums\
    \ = numDigitSumsSumsSumsSumsSum.map(x => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSum\
    \ = numDigitSumsSumsSumsSumsSumsSums.map(x => math.signum(x)).sum\n        val\
    \ numDigitSumsSumsSumsSumsSumsSumsSum = numDigitSumsSumsSumsSumsSumsSumsSum.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSumsSum = numDigitSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSumsSumsSum\
    \ = numDigitSumsSumsSumsSumsSumsSumsSumsSum.map(x => math.sig", "        val n\
    \ = arr.length\n        val sum = 0\n        for(i <- 0 until n){\n          \
    \  sum += arr(i)\n        }\n        if(sum > 0){\n            return n\n    \
    \    }\n        else{\n            val firstDigit = math.abs(arr(0))\n       \
    \     val lastDigit = math.abs(arr(n-1))\n            val firstDigitSum = math.abs(arr(0)\
    \ + (lastDigit - firstDigit))\n            val lastDigitSum = math.abs(arr(n-1)\
    \ + (firstDigit - lastDigit))\n            if(firstDigitSum > lastDigitSum){\n\
    \                return n\n            }\n            else{\n                return\
    \ n-1\n            }\n        }", "        val sums = arr.map(x => math.abs(x))\n\
    \        val positiveSums = sums.filter(x => x > 0)\n        val negativeSums\
    \ = sums.filter(x => x < 0)\n        positiveSums.sum", "        var sum = 0\n\
    \        var count = 0\n        for(i <- arr) {\n            sum += i\n      \
    \      count += if(sum > 0) 1 else 0\n        }\n        count", "        val\
    \ nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        if (sums > 0) sums else 0", "        val nums = arr.toSet\n        val\
    \ sums = arr.map(x => math.abs(x))\n        val numsWithSum = sums.filter(x =>\
    \ x > 0)\n        numsWithSum.size", "        val sums = arr.map(x => if (x <\
    \ 0) x.toLong else x.toLong % 10)\n        val nums = arr.filter(x => sums.contains(x)).size\n\
    \        nums", "        val nums = arr.toList\n        var sum = 0\n        var\
    \ count = 0\n        for (i <- 0 until nums.size) {\n            val num = nums(i)\n\
    \            if (num < 0) {\n                val first = nums.take(i).sum\n  \
    \              val second = nums.drop(i).sum\n                sum += first - second\n\
    \                count += nums.size\n            } else {\n                sum\
    \ += num\n                count += 1\n            }\n        }\n        sum",
  "        val sums = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n     \
    \   sums.toLong", "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x\
    \ => x.toString.toInt).map(_.sum)\n        sums.count(x => x > 0)", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ sumsSet = sums.toSet\n        val sumsSetSize = sumsSet.size\n        val numsSize\
    \ = nums.size\n        val numsSetSize = numsSet.size\n        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n",
  "        val nums = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n\
    \        val sums = digits.map(x => x.toLong).sum\n        val numsWithSum = nums.filter(x\
    \ => sums.contains(x))\n        numsWithSum.size", "        val nums = arr.toSet\n\
    \        val numsSum = arr.map(x => x.toString.toInt).sum\n        nums.count(x\
    \ => x > 0 && x.toString.toInt.toLong > numsSum)", "        val nums = arr.toSet\n\
    \        val numsSum = arr.map(x => x.toString.toInt).sum\n        val numsSumDigits\
    \ = numsSum.toString.toInt\n        val numsSumDigitsLessThanZero = numsSumDigits\
    \ - 1\n        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZer", "  \
    \      val n = arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n\
    \        arr.foreach(x => sums += x)\n        sums.sum", "        var count =\
    \ 0\n        var sum = 0\n        var sign = 1\n        for (i <- arr) {\n   \
    \         sum += i\n            if (sum > 0) {\n                count += 1\n \
    \           }\n            sign *= -1\n        }\n        count", "        val\
    \ nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val\
    \ numsSums = nums.map(x => sums.filter(y => y > x).size)\n        numsSums.sum",
  "        val nums = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong", "        val n = arr.length\n        val sum = 0\n    \
    \    var count = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n\
    \            if (sum > 0) {\n                count += 1\n            }\n     \
    \   }\n        count", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val counts = sums.groupBy(x => x).mapValues(_.size)\n   \
    \     counts.map(_._2).sum", "        val nums = arr.toSet\n        val sums =\
    \ arr.map(x => math.abs(x))\n        val numsSums = nums.map(x => math.abs(x))\n\
    \        val numsSumsSum = numsSums.map(x => math.abs(x))\n        val numsSumsSumSum\
    \ = numsSumsSum.map(x => math.abs(x))\n        val numsSumsSumSumSum = numsSumsSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n", "        val nums = arr.filter(_ > 0)\n        val sums\
    \ = nums.map(x => x.toString.toInt).sum\n        sums.toLong", "        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt)\n\
    \        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSum = nums.map(x => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet3 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet4\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet5 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet6 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet7 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet8 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet9\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet10 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet11 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet12 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet13 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet14\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet15 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet16 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet17 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet18 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet19\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet20 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val ", "        val sums = arr.map(x => if\
    \ (x < 0) x.toLong - x.toLong % 10 else x.toLong)\n        val sumsSorted = sums.sortWith(_\
    \ < _)\n        val sumsSorted = sumsSorted.toList\n        val sumsSorted = sumsSorted.reverse\n\
    \        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted\
    \ = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n\
    \        val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.", "      \
    \  val n = arr.size\n        val m = arr.max\n        val sum = arr.sum\n    \
    \    val digits = arr.map(_.toString.toInt)\n        val digitSums = digits.map(_.sum)\n\
    \        val digitSumsSum = digitSums.sum\n        val digitSumsSum2 = digitSumsSum\
    \ * digitSumsSum\n        val digitSumsSum3 = digitSumsSum2 * digitSumsSum\n \
    \       val digitSumsSum4 = digitSumsSum3 * digitSumsSum\n        val digitSumsSum5\
    \ = digitSumsSum4 * digitSumsSum\n        val digitSumsSum6 = digitSumsSum5 *\
    \ digitSumsSum\n        val digitSumsSum7 = digitSumsSum6 * digitSumsSum\n   \
    \     val digitSumsSum8 = digitSumsSum7 * digitSumsSum\n        val digitSumsSum9\
    \ = digitSumsSum8 * digitSumsSum\n        val digitSumsSum10 = digitSumsSum9 *\
    \ digitSumsSum\n        val digitSumsSum11 = digitSumsSum10 * digitSumsSum\n \
    \       val digitSumsSum12 = digitSumsSum11 * digitSumsSum\n        val digitSumsSum13\
    \ = digitSumsSum12 * digitSumsSum\n        val digitSumsSum14 = digitSumsSum13\
    \ * digitSumsSum\n        val digitSumsSum15 = digitSumsSum14 * digitSumsSum\n\
    \        val digitSumsSum16 = digitSumsSum15 * digitSumsSum\n        val digitSumsSum17\
    \ = digitSumsSum16 * digitSumsSum\n        val digitSumsSum18 = digitSumsSum17\
    \ * digitSumsSum\n        val digitSumsSum19 = digitSumsSum18 * digitSumsSum\n\
    \        val digitSumsSum20 = digitSumsSum19 * digitSumsSum\n        val digitSumsSum21\
    \ = digitSumsSum20 * digitSumsSum\n        val digitSumsSum22 = digitSumsSum21\
    \ * digitSumsSum\n        val digitSumsSum23 = digitSumsSum22 * digitSumsSum\n\
    \        val digitSumsSum24 = digitSumsSum23 * digitSumsSum\n        val digitSumsSum25\
    \ = digitSumsSum24 * digitSumsSum\n        val digitSumsSum26 = digitSumsSum25\
    \ * digitSumsSum\n        ", "        val sum = 0\n        arr.foreach(x => sum\
    \ += x)\n        sum", "        val arr = arr.toList\n        val sums = arr.map(x\
    \ => x.toString.toInt).map(x => x.toLong).map(x => x.toInt)\n        val count\
    \ = sums.count(x => x > 0)\n        arr.count(x => x > 0) * (count - arr.count(x\
    \ => x > 0))", "        val sum = 0\n        arr.foreach(x => sum += x)\n    \
    \    arr.count(x => x > 0)", "        val nums = arr.filter(_ > 0)\n        val\
    \ sums = nums.map(_.toString.toInt).sum\n        sums.toLong", "        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.filter(x => x > 0).count(x => numsSum - x > 0)"]
stop_tokens:
- "\n    }\n"
