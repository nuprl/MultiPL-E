name: HumanEval_108_count_nums
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function count_nums which takes an array of integers and returns\n\
  \    // the number of elements which has a sum of digits > 0.\n    // If a number\
  \ is negative, then its first signed digit will be negative:\n    // e.g. -123 has\
  \ signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n\
  \    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    //\
  \ (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n  \
  \  // (3l)\n    def countNums(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
  \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
  \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
  \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
  \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
  \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
  \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n   \
  \ assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
  \ == (1l));\n    }\n\n}\n"
completions: ["        val sums = arr.foldLeft(List[Long]())((sums, num) => {\n  \
    \          val digits = num.toString.reverse.grouped(2).map(_.toInt)\n       \
    \     val sum = digits.foldLeft(0l)(_ + _)\n            sums ::: List(sum)\n \
    \       })\n        sums.count(_ > 0)", "        val nums = arr.toSet\n      \
    \  val numsSet = nums.toSeq\n        val numsSetLen = numsSet.length\n       \
    \ val numsSetSum = numsSet.sum\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigit", "        val sums = arr.foldLeft(List[Long]())((acc,\
    \ x) => acc :+ x.toLong)\n        sums.count(_ > 0)", "        val n = arr.length\n\
    \        val m = arr.map(_.toInt).sum\n        val s = arr.map(_.toInt).map(_.signum).sum\n\
    \        val r = arr.map(_.toInt).map(_.abs).sum\n        val c = arr.map(_.toInt).map(_.signum).map(_.abs).sum\n\
    \        val d = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val e = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val f = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val g = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val h = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val i = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val j = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val k = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val l = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val m = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        val nums = arr.filter(_ > 0).map(_ - sum)\n        nums.count(_ > 0)",
  "        val nums = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val\
    \ numsSumDigits = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigits)\n        val\
    \ numsSumDigit = numsSum.toString.charAt(numsSumDigit + 1)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 2)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 3)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 4)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 5)\n     \
    \   val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 6)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 7)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 8)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 9)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 10)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 11)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 12)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 13)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 14)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 15)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 16)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 17)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 18)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 19)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 20)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 21)\n        val num", "        val nums = arr.toSet\n        val numsSum\
    \ = arr.map(x => math.abs(x)).sum\n        nums.filter(x => x > 0).count(x =>\
    \ x > 0 && numsSum - math.abs(x) > 0)", "        val sums = arr.map(x => x.toString.toInt).map(x\
    \ => if (x < 0) -x else x)\n        val counts = sums.groupBy(x => x).map(x =>\
    \ (x._1, x._2.length)).toMap\n        sums.count(x => counts.getOrElse(x.toString.toInt,\
    \ 0) > 0)", "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x\
    \ => x.toString.toInt).map(_.sum)\n        val positiveSums = sums.filter(x =>\
    \ x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        positiveSums.size\
    \ + (negativeSums.size * negativeSums.sum)", "        val arr = arr.toList\n \
    \       val sums = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x\
    \ => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n        val positiveSumsCount\
    \ = positiveSums.size\n        val negativeSumsCount = negativeSums.size\n   \
    \     val positiveSumsSum = positiveSums.sum\n        val negativeSumsSum = negativeSums.sum\n\
    \        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n        val negativeSumsSumAbs\
    \ = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount = positiveSumsSumAbs.toInt\n\
    \        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n        val positiveSumsSumAbsCountAbs\
    \ = positiveSumsSumAbsCount + negativeSumsSumAbsCount\n        val negativeSumsSumAbsCountAbs\
    \ = negativeSumsSumAbsCount + positiveSumsSumAbsCount\n        val positiveSumsSumAbsCountAbsCount\
    \ = positiveSumsSumAbsCountAbs + negativeSumsSumAbsCountAbs\n        val negativeSumsSumAbsCountAbsCount\
    \ = negativeSumsSumAbsCountAbs + positiveSumsSumAbsCountAbs\n        val positiveSumsSumAbsCountAbsCountAbs\
    \ = positiveSumsSumAbsCountAbsCount + negativeSumsSumAbsCountAbs\n        val\
    \ negativeSumsSumAbsCountAbsCountAbs = negativeSumsSumAbsCountAbsCount + positiveSumsSumAbsCountAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCountAbsCount = positiveSumsSumAbsCountAbsCountAbs\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCount\
    \ = negativeSumsSumAbsCountAbsCountAbs + positiveSumsSumAbsCountAbsCountAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCountAbsCountAbs = positiveSumsSumAbsCountAbsCountAbsCount\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCountAbs\
    \ = negativeSumsSumAbsCountAbsCountAbsCount + positiveSumsSumAbsCountAbsCountAbs",
  "        val digits = arr.map(_.toInt)\n        val sums = digits.map(x => math.abs(x))\n\
    \        val nums = sums.filter(x => x > 0)\n        nums.sum", "        val nums\
    \ = arr.toSet\n        val numsSet = arr.toSet\n        val numsSet2 = arr.toSet\n\
    \        val numsSet3 = arr.toSet\n        val numsSet4 = arr.toSet\n        val\
    \ numsSet5 = arr.toSet\n        val numsSet6 = arr.toSet\n        val numsSet7\
    \ = arr.toSet\n        val numsSet8 = arr.toSet\n        val numsSet9 = arr.toSet\n\
    \        val numsSet10 = arr.toSet\n        val numsSet11 = arr.toSet\n      \
    \  val numsSet12 = arr.toSet\n        val numsSet13 = arr.toSet\n        val numsSet14\
    \ = arr.toSet\n        val numsSet15 = arr.toSet\n        val numsSet16 = arr.toSet\n\
    \        val numsSet17 = arr.toSet\n        val numsSet18 = arr.toSet\n      \
    \  val numsSet19 = arr.toSet\n        val numsSet20 = arr.toSet\n        val numsSet21\
    \ = arr.toSet\n        val numsSet22 = arr.toSet\n        val numsSet23 = arr.toSet\n\
    \        val numsSet24 = arr.toSet\n        val numsSet25 = arr.toSet\n      \
    \  val numsSet26 = arr.toSet\n        val numsSet27 = arr.toSet\n        val numsSet28\
    \ = arr.toSet\n        val numsSet29 = arr.toSet\n        val numsSet30 = arr.toSet\n\
    \        val numsSet31 = arr.toSet\n        val numsSet32 = arr.toSet\n      \
    \  val numsSet33 = arr.toSet\n        val numsSet34 = arr.toSet\n        val numsSet35\
    \ = arr.toSet\n        val numsSet36 = arr.toSet\n        val numsSet37 = arr.toSet\n\
    \        val numsSet38 = arr.toSet\n        val numsSet39 = arr.toSet\n      \
    \  val numsSet40 = arr.toSet\n        val numsSet41 = arr.toSet\n        val numsSet42\
    \ = arr.toSet\n        val numsSet43 = arr.toSet\n        val numsSet44 = arr.toSet\n\
    \        val numsSet45 = arr.toSet\n        val numsSet46 = arr.toSet\n      \
    \  val numsSet47 = arr.toSet", "        var sum = 0\n        var count = 0\n \
    \       for (i <- arr) {\n            if (i >= 0) {\n                sum += i\n\
    \                count += 1\n            }\n        }\n        if (sum > 0) {\n\
    \            count\n        } else {\n            -count\n        }", "      \
    \  val nums = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n      \
    \  val numsSums = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum",
  "        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt).map(x => x\
    \ * x).sum\n        sums.toLong", "        val nums = arr.toList\n        val\
    \ sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n        val sumsSum\
    \ = sums.sum\n        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.toInt\n\
    \        val sumsSumDigits = sumsSum.toString.toInt\n        if (sumsSumDigits\
    \ == numsSumDigits) {\n            sumsSum\n        } else {\n            sumsSumDigits\
    \ - numsSumDigits\n        }", "        val sums = arr.map(x => math.abs(x))\n\
    \        val count = sums.count(x => x > 0)\n        count", "        val arr\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toInt).map(x => x *\
    \ x).map(x => x.toInt)\n        val count = sums.count(x => x > 0)\n        count",
  "        val digits = arr.map(_.toString.toInt)\n        val sum = digits.sum\n\
    \        val negative = digits.map(_.toString.toInt).sum < 0\n        val firstSignedDigit\
    \ = if (negative) digits.head - 1 else digits.head\n        val nums = arr.filter(x\
    \ => x > 0).map(x => x - firstSignedDigit)\n        nums.count(x => x > 0).sum",
  "        val n = arr.size\n        val sums = arr.map(x => x.toString.toLong).map(x\
    \ => x.toInt).map(x => x * x).map(x => x.toInt)\n        val sumsSum = sums.sum\n\
    \        val sumsSum2 = sums.map(x => x * x).sum\n        val sumsSum3 = sums.map(x\
    \ => x * x * x).sum\n        val sumsSum4 = sums.map(x => x * x * x * x).sum\n\
    \        val sumsSum5 = sums.map(x => x * x * x * x * x).sum\n        val sumsSum6\
    \ = sums.map(x => x * x * x * x * x * x).sum\n        val sumsSum7 = sums.map(x\
    \ => x * x * x * x * x * x * x).sum\n        val sumsSum8 = sums.map(x => x *\
    \ x * x * x * x * x * x * x).sum\n        val sumsSum9 = sums.map(x => x * x *\
    \ x * x * x * x * x * x * x * x).sum\n        val sumsSum10 = sums.map(x => x\
    \ * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum11 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum12\
    \ = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n\
    \        val sumsSum13 = sums.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x).sum\n        val sumsSum14 = sums.map(x => x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n \
    \       val sumsSum15 = sums.map(x => x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum16 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x).sum\n        val sumsSum17 = sums.map(x => x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n       \
    \ val sumsSum18 = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum19 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * "]
stop_tokens:
- "\n    }\n"
