language: scala
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.foldLeft(lst4) { (acc,\
    \ elem) => acc + elem }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_5rua93.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_5rua93.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_5rua93.scala:23:63\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e\
    [0m _ => lst3.foldLeft(lst4) { (acc, elem) => acc + elem }\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[String], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2).map(_ + lst2.count(_ == _))\n        if (lst3.size == lst2.size) {\n \
    \           lst3\n        } else {\n            lst1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_1pzwt2.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2).map(_ + lst2.count(_ == _))\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Found:    (lst2 : List[String])\n\e[31m   |\e[0m        \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpi_1pzwt2.scala:19:60 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst1.filter(_\
    \ < lst2).map(_ + lst2.count(_ == _))\n\e[31m\e[31m   |\e[0m                 \
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkh7z51o.scala:24)\n\tat Problem.main(tmppkh7z51o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => lst1.zip(lst2).filter(_._1 < _._1).map(_._1)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpetw9t0xn.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m _ => lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._1)\n\e[31m\e[31m   |\e[0m                                   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter( x =>\
    \ lst2.contains(x))\n        if(lst3.size == lst2.size) {\n            lst3\n\
    \        } else {\n            lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfntjy8ei.scala:28)\n\tat Problem.main(tmpfntjy8ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2 match {\n                case\
    \ Nil => lst2\n                case _ => lst1 ++ lst2 match {\n              \
    \      case Nil => lst2\n                    case _ => lst1 ++ lst2 match {\n\
    \                        case Nil => lst2\n                        case _ => lst1\
    \ ++ lst2 match {\n                            case Nil => lst2\n            \
    \                case _ => lst1 ++ lst2 match {\n                            \
    \    case Nil => lst2\n                                case _ => lst1 ++ lst2\
    \ match {\n                                    case Nil => lst2\n            \
    \                        case _ => lst1 ++ lst2 match {\n                    \
    \                    case Nil => lst2\n                                      \
    \  case _ => lst1 ++ lst2 match {\n                                          \
    \  case Nil => lst2\n                                            case _ => lst1\
    \ ++ lst2 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 ++ lst2\
    \ match {\n                                                    case Nil => lst2\n\
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                        case Nil => lst2\n\
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                            case Nil\
    \ => lst2\n                                                            case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \              case Nil => lst2\n                                            \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                            case Nil => lst2\n              \
    \                                                      case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \      case Nil => lst2\n                                                    \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                    case Nil => lst2\n      \
    \                                                                      case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \                              case Nil => lst2\n                            \
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                                        \
    \            case Nil => lst2\n                                              \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                          case _ => lst1 ++ lst2 match {\n  \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \                                  case Nil => lst2\n                        \
    \                                                                            case\
    \ _ => lst1 ++ lst2 match {\n                                                \
    \                                                        case Nil => lst2\n  \
    \                                                                            \
    \                          case _ => lst1 ++ lst2 match {\n                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                case _ => lst1\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4ww46bb.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4ww46bb.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpb4ww46bb.scala:71:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz_38l21.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz_38l21.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter{ case\
    \ (elem1, elem2) => elem1.length < elem2.length }.map{ case (elem1, elem2) =>\
    \ elem1 }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkaq7147m.scala:23)\n\tat Problem.main(tmpkaq7147m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toList\n        val lst5 = lst4.filterNot(_ == \"\")\n\
    \        val lst6 = lst5.filterNot(_ == \"\")\n        val lst7 = lst6.filterNot(_\
    \ == \"\")\n        val lst8 = lst7.filterNot(_ == \"\")\n        val lst9 = lst8.filterNot(_\
    \ == \"\")\n        val lst10 = lst9.filterNot(_ == \"\")\n        val lst11 =\
    \ lst10.filterNot(_ == \"\")\n        val lst12 = lst11.filterNot(_ == \"\")\n\
    \        val lst13 = lst12.filterNot(_ == \"\")\n        val lst14 = lst13.filterNot(_\
    \ == \"\")\n        val lst15 = lst14.filterNot(_ == \"\")\n        val lst16\
    \ = lst15.filterNot(_ == \"\")\n        val lst17 = lst16.filterNot(_ == \"\"\
    )\n        val lst18 = lst17.filterNot(_ == \"\")\n        val lst19 = lst18.filterNot(_\
    \ == \"\")\n        val lst20 = lst19.filterNot(_ == \"\")\n        val lst21\
    \ = lst20.filterNot(_ == \"\")\n        val lst22 = lst21.filterNot(_ == \"\"\
    )\n        val lst23 = lst22.filterNot(_ == \"\")\n        val lst24 = lst23.filterNot(_\
    \ == \"\")\n        val lst25 = lst24.filterNot(_ == \"\")\n        val lst26\
    \ = lst25.filterNot(_ == \"\")\n        val lst27 = lst26.filterNot(_ == \"\"\
    )\n        val lst28 = lst27.filterNot(_ == \"\")\n        val lst29 = lst28.filterNot(_\
    \ == \"\")\n        val lst30 = lst29.filterNot(_ == \"\")\n        val lst31\
    \ = lst30.filterNot(_ == \"\")\n        val lst32 = lst31.filterNot(_ == \"\"\
    )\n        val lst33 = lst32.filterNot(_ == \"\")\n        val lst34 = lst33.filterNot(_\
    \ == \"\")\n        val lst35 = lst34.filterNot(_ == \"\")\n        val lst36\
    \ = lst35.filterNot(_ == \"\")\n        val lst37 = lst36.filterNot(_ == \"\"\
    )\n        val lst38 = lst37.filterNot(_ == \"\")\n        val lst39 = lst38.filterNot(_\
    \ == \"\")\n        val lst40 = lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qy9j0bb.scala:56:20 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlst40\e[0m = lst\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qy9j0bb.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3\n        else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_izfc4op.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_izfc4op.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst1 ++ lst5\n        val lst7 = lst6.filter(_ < lst3)\n        val lst8 =\
    \ lst7.filter(_ < lst2)\n        val lst9 = lst8.filter(_ < lst1)\n        val\
    \ lst10 = lst9.filter(_ < lst3)\n        val lst11 = lst10.filter(_ < lst2)\n\
    \        val lst12 = lst11.filter(_ < lst1)\n        val lst13 = lst12.filter(_\
    \ < lst3)\n        val lst14 = lst13.filter(_ < lst2)\n        val lst15 = lst14.filter(_\
    \ < lst1)\n        val lst16 = lst15.filter(_ < lst3)\n        val lst17 = lst16.filter(_\
    \ < lst2)\n        val lst18 = lst17.filter(_ < lst1)\n        val lst19 = lst18.filter(_\
    \ < lst3)\n        val lst20 = lst19.filter(_ < lst2)\n        val lst21 = lst20.filter(_\
    \ < lst1)\n        val lst22 = lst21.filter(_ < lst3)\n        val lst23 = lst22.filter(_\
    \ < lst2)\n        val lst24 = lst23.filter(_ < lst1)\n        val lst25 = lst24.filter(_\
    \ < lst3)\n        val lst26 = lst25.filter(_ < lst2)\n        val lst27 = lst26.filter(_\
    \ < lst1)\n        val lst28 = lst27.filter(_ < lst3)\n        val lst29 = lst28.filter(_\
    \ < lst2)\n        val lst30 = lst29.filter(_ < lst1)\n        val lst31 = lst30.filter(_\
    \ < lst3)\n        val lst32 = lst31.filter(_ < lst2)\n        val lst33 = lst32.filter(_\
    \ < lst1)\n        val lst34 = lst33.filter(_ < lst3)\n        val lst35 = lst34.filter(_\
    \ < lst2)\n        val lst36 = lst35.filter(_ < lst1)\n        val lst37 = lst36.filter(_\
    \ < lst3)\n        val lst38 = lst37.filter(_ < lst2)\n        val lst39 = lst38.filter(_\
    \ < lst1)\n        val lst40 = lst39.filter(_ < lst3)\n        val lst41 = lst40.filter(_\
    \ < lst2)\n        val lst42 = lst41.filter(_ < lst1)\n        val lst43 = lst42.filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpycufizyi.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpycufizyi.scala:23:35 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mlst7\e[0m = lst6.filter(_ < lst3)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (lst3 : List[String])\n\e[31m   |\e[0m\
    \                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:24:35 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlst8\e[0m = lst7.filter(_\
    \ < lst2)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst2 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:25:35 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlst9\e[0m = lst8.filter(_\
    \ < lst1)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst1 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:26:36 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlst10\e[0m = lst9.filter(_\
    \ < lst3)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    (lst3 : List[String])\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with "
  stdout: ''
  timestamp: 1659800361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
