language: scala
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.foldLeft(lst4) { (acc,\
    \ elem) => acc + elem }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_5rua93.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf_5rua93.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_5rua93.scala:23:63\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e\
    [0m _ => lst3.foldLeft(lst4) { (acc, elem) => acc + elem }\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue + is not a member of List[String], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2).map(_ + lst2.count(_ == _))\n        if (lst3.size == lst2.size) {\n \
    \           lst3\n        } else {\n            lst1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi_1pzwt2.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2).map(_ + lst2.count(_ == _))\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                    Found:    (lst2 : List[String])\n\e[31m   |\e[0m        \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpi_1pzwt2.scala:19:60 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst1.filter(_\
    \ < lst2).map(_ + lst2.count(_ == _))\n\e[31m\e[31m   |\e[0m                 \
    \                                           ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                            Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkh7z51o.scala:24)\n\tat Problem.main(tmppkh7z51o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => lst1.zip(lst2).filter(_._1 < _._1).map(_._1)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpetw9t0xn.scala:23:50 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m _ => lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._1)\n\e[31m\e[31m   |\e[0m                                   \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \ value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter( x =>\
    \ lst2.contains(x))\n        if(lst3.size == lst2.size) {\n            lst3\n\
    \        } else {\n            lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfntjy8ei.scala:28)\n\tat Problem.main(tmpfntjy8ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2 match {\n                case\
    \ Nil => lst2\n                case _ => lst1 ++ lst2 match {\n              \
    \      case Nil => lst2\n                    case _ => lst1 ++ lst2 match {\n\
    \                        case Nil => lst2\n                        case _ => lst1\
    \ ++ lst2 match {\n                            case Nil => lst2\n            \
    \                case _ => lst1 ++ lst2 match {\n                            \
    \    case Nil => lst2\n                                case _ => lst1 ++ lst2\
    \ match {\n                                    case Nil => lst2\n            \
    \                        case _ => lst1 ++ lst2 match {\n                    \
    \                    case Nil => lst2\n                                      \
    \  case _ => lst1 ++ lst2 match {\n                                          \
    \  case Nil => lst2\n                                            case _ => lst1\
    \ ++ lst2 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 ++ lst2\
    \ match {\n                                                    case Nil => lst2\n\
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                        case Nil => lst2\n\
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                            case Nil\
    \ => lst2\n                                                            case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \              case Nil => lst2\n                                            \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                            case Nil => lst2\n              \
    \                                                      case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \      case Nil => lst2\n                                                    \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                    case Nil => lst2\n      \
    \                                                                      case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \                              case Nil => lst2\n                            \
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                                        \
    \            case Nil => lst2\n                                              \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                          case _ => lst1 ++ lst2 match {\n  \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \                                  case Nil => lst2\n                        \
    \                                                                            case\
    \ _ => lst1 ++ lst2 match {\n                                                \
    \                                                        case Nil => lst2\n  \
    \                                                                            \
    \                          case _ => lst1 ++ lst2 match {\n                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                case _ => lst1\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4ww46bb.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4ww46bb.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpb4ww46bb.scala:71:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz_38l21.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuz_38l21.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter{ case\
    \ (elem1, elem2) => elem1.length < elem2.length }.map{ case (elem1, elem2) =>\
    \ elem1 }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkaq7147m.scala:23)\n\tat Problem.main(tmpkaq7147m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toList\n        val lst5 = lst4.filterNot(_ == \"\")\n\
    \        val lst6 = lst5.filterNot(_ == \"\")\n        val lst7 = lst6.filterNot(_\
    \ == \"\")\n        val lst8 = lst7.filterNot(_ == \"\")\n        val lst9 = lst8.filterNot(_\
    \ == \"\")\n        val lst10 = lst9.filterNot(_ == \"\")\n        val lst11 =\
    \ lst10.filterNot(_ == \"\")\n        val lst12 = lst11.filterNot(_ == \"\")\n\
    \        val lst13 = lst12.filterNot(_ == \"\")\n        val lst14 = lst13.filterNot(_\
    \ == \"\")\n        val lst15 = lst14.filterNot(_ == \"\")\n        val lst16\
    \ = lst15.filterNot(_ == \"\")\n        val lst17 = lst16.filterNot(_ == \"\"\
    )\n        val lst18 = lst17.filterNot(_ == \"\")\n        val lst19 = lst18.filterNot(_\
    \ == \"\")\n        val lst20 = lst19.filterNot(_ == \"\")\n        val lst21\
    \ = lst20.filterNot(_ == \"\")\n        val lst22 = lst21.filterNot(_ == \"\"\
    )\n        val lst23 = lst22.filterNot(_ == \"\")\n        val lst24 = lst23.filterNot(_\
    \ == \"\")\n        val lst25 = lst24.filterNot(_ == \"\")\n        val lst26\
    \ = lst25.filterNot(_ == \"\")\n        val lst27 = lst26.filterNot(_ == \"\"\
    )\n        val lst28 = lst27.filterNot(_ == \"\")\n        val lst29 = lst28.filterNot(_\
    \ == \"\")\n        val lst30 = lst29.filterNot(_ == \"\")\n        val lst31\
    \ = lst30.filterNot(_ == \"\")\n        val lst32 = lst31.filterNot(_ == \"\"\
    )\n        val lst33 = lst32.filterNot(_ == \"\")\n        val lst34 = lst33.filterNot(_\
    \ == \"\")\n        val lst35 = lst34.filterNot(_ == \"\")\n        val lst36\
    \ = lst35.filterNot(_ == \"\")\n        val lst37 = lst36.filterNot(_ == \"\"\
    )\n        val lst38 = lst37.filterNot(_ == \"\")\n        val lst39 = lst38.filterNot(_\
    \ == \"\")\n        val lst40 = lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qy9j0bb.scala:56:20 ------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mlst40\e[0m = lst\n\e[31m\e\
    [31m   |\e[0m                    ^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Not found: lst\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2qy9j0bb.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3\n        else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_izfc4op.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_izfc4op.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst1 ++ lst5\n        val lst7 = lst6.filter(_ < lst3)\n        val lst8 =\
    \ lst7.filter(_ < lst2)\n        val lst9 = lst8.filter(_ < lst1)\n        val\
    \ lst10 = lst9.filter(_ < lst3)\n        val lst11 = lst10.filter(_ < lst2)\n\
    \        val lst12 = lst11.filter(_ < lst1)\n        val lst13 = lst12.filter(_\
    \ < lst3)\n        val lst14 = lst13.filter(_ < lst2)\n        val lst15 = lst14.filter(_\
    \ < lst1)\n        val lst16 = lst15.filter(_ < lst3)\n        val lst17 = lst16.filter(_\
    \ < lst2)\n        val lst18 = lst17.filter(_ < lst1)\n        val lst19 = lst18.filter(_\
    \ < lst3)\n        val lst20 = lst19.filter(_ < lst2)\n        val lst21 = lst20.filter(_\
    \ < lst1)\n        val lst22 = lst21.filter(_ < lst3)\n        val lst23 = lst22.filter(_\
    \ < lst2)\n        val lst24 = lst23.filter(_ < lst1)\n        val lst25 = lst24.filter(_\
    \ < lst3)\n        val lst26 = lst25.filter(_ < lst2)\n        val lst27 = lst26.filter(_\
    \ < lst1)\n        val lst28 = lst27.filter(_ < lst3)\n        val lst29 = lst28.filter(_\
    \ < lst2)\n        val lst30 = lst29.filter(_ < lst1)\n        val lst31 = lst30.filter(_\
    \ < lst3)\n        val lst32 = lst31.filter(_ < lst2)\n        val lst33 = lst32.filter(_\
    \ < lst1)\n        val lst34 = lst33.filter(_ < lst3)\n        val lst35 = lst34.filter(_\
    \ < lst2)\n        val lst36 = lst35.filter(_ < lst1)\n        val lst37 = lst36.filter(_\
    \ < lst3)\n        val lst38 = lst37.filter(_ < lst2)\n        val lst39 = lst38.filter(_\
    \ < lst1)\n        val lst40 = lst39.filter(_ < lst3)\n        val lst41 = lst40.filter(_\
    \ < lst2)\n        val lst42 = lst41.filter(_ < lst1)\n        val lst43 = lst42.filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpycufizyi.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpycufizyi.scala:23:35 --------------------\e[0m\e[0m\n\e[31m23 |\e[0m\
    \        \e[33mval\e[0m \e[36mlst7\e[0m = lst6.filter(_ < lst3)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                             Found:    (lst3 : List[String])\n\e[31m   |\e[0m\
    \                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:24:35 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mlst8\e[0m = lst7.filter(_\
    \ < lst2)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst2 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:25:35 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlst9\e[0m = lst8.filter(_\
    \ < lst1)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst1 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpycufizyi.scala:26:36 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlst10\e[0m = lst9.filter(_\
    \ < lst3)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Found:    (lst3 : List[String])\n\
    \e[31m   |\e[0m                                    Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with "
  stdout: ''
  timestamp: 1659800361
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.size\n\
    \        val lst2Size = lst2.size\n        val lst3Size = lst1.size + lst2.size\n\
    \        val lst3Chars = lst3.size\n        if (lst1Size == lst2Size) {\n    \
    \        if (lst1Size == lst3Size) {\n                lst1\n            } else\
    \ {\n                lst2\n            }\n        } else {\n            if (lst1Size\
    \ < lst2Size) {\n                lst1\n            } else {\n                lst2\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5p89scqb.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst3Chars\e[0m = lst3.size\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Not found: lst3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009621
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => {\n                val lst3 = lst1 ++ lst2\n\
    \                val lst4 = lst3.toSet\n                lst4.filter(_ < lst3.length).map(_\
    \ => lst3(0))\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbhn18thj.scala:24:37\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                lst4.filter(_\
    \ < lst3.length).map(_ => lst3(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m         \
    \                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \            Found:    Int\n\e[31m   |\e[0m                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(_ < lst1.head)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpojxmkp1w.scala:26)\n\tat Problem.main(tmpojxmkp1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        if(lst1Set.size == lst2Set.size)\n\
    \            lst1\n        else\n            lst2.filter(x => !lst1Set.contains(x))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd55820x8.scala:28)\n\tat Problem.main(tmpd55820x8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst1\n        else lst3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp71qxpys4.scala:25)\n\tat Problem.main(tmp71qxpys4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ ==\
    \ x) < lst2.count(_ == x))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhy5xoha.scala:26)\n\tat Problem.main(tmpuhy5xoha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2).map(_ + lst2.filter(_ < _).size)\n        lst3.size == lst2.size ? lst3\
    \ : lst1\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplda1lmdh.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2).map(_ + lst2.filter(_ < _).size)\n\e[31m\e[31m   |\e\
    [0m                                   ^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Found:    (lst2 : List[String])\n\e[31m   |\e[0m      \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmplda1lmdh.scala:19:61 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst1.filter(_\
    \ < lst2).map(_ + lst2.filter(_ < _).size)\n\e[31m\e[31m   |\e[0m            \
    \                                                 ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplda1lmdh.scala:20:40 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        lst3.size == lst2.size ? lst3 : \e[35mlst1\e\
    [0m\n\e[31m\e[31m   |\e[0m                                        ^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: type lst1\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplda1lmdh.scala:20:31\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst3.size == lst2.size\
    \ ? lst3 : \e[35mlst1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value ? is not a member of Int\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.foldLeft(lst2)((a, b)\
    \ => a ++ b).filterNot(_.isEmpty)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_vsrpo8j.scala:19:43\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.foldLeft(lst2)((\e\
    [36ma\e[0m, \e[36mb\e[0m) => a ++ b).filterNot(_.isEmpty)\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                                  Found:    (b : String)\n\e[31m   |\e[0m   \
    \                                       Required: IterableOnce[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.toMap\n\
    \        val lst2Map = lst2.toMap\n        val lst3Map = lst1.toMap\n        val\
    \ lst4Map = lst2.toMap\n        val lst5Map = lst1.toMap\n        val lst6Map\
    \ = lst2.toMap\n        val lst7Map = lst1.toMap\n        val lst8Map = lst2.toMap\n\
    \        val lst9Map = lst1.toMap\n        val lst10Map = lst2.toMap\n       \
    \ val lst11Map = lst1.toMap\n        val lst12Map = lst2.toMap\n        val lst13Map\
    \ = lst1.toMap\n        val lst14Map = lst2.toMap\n        val lst15Map = lst1.toMap\n\
    \        val lst16Map = lst2.toMap\n        val lst17Map = lst1.toMap\n      \
    \  val lst18Map = lst2.toMap\n        val lst19Map = lst1.toMap\n        val lst20Map\
    \ = lst2.toMap\n        val lst21Map = lst1.toMap\n        val lst22Map = lst2.toMap\n\
    \        val lst23Map = lst1.toMap\n        val lst24Map = lst2.toMap\n      \
    \  val lst25Map = lst1.toMap\n        val lst26Map = lst2.toMap\n        val lst27Map\
    \ = lst1.toMap\n        val lst28Map = lst2.toMap\n        val lst29Map = lst1.toMap\n\
    \        val lst30Map = lst2.toMap\n        val lst31Map = lst1.toMap\n      \
    \  val lst32Map = lst2.toMap\n        val lst33Map = lst1.toMap\n        val lst34Map\
    \ = lst2.toMap\n        val lst35Map = lst1.toMap\n        val lst36Map = lst2.toMap\n\
    \        val lst37Map = lst1.toMap\n        val lst38Map = lst2.toMap\n      \
    \  val lst39Map = lst1.toMap\n        val lst40Map = lst2.toMap\n        val lst41Map\
    \ = lst1.toMap\n        val lst42Map = lst2.toMap\n        val lst43Map = lst1.toMap\n\
    \        val lst44Map = lst2.toMap\n        val lst45Map = lst1.toMap\n      \
    \  val lst46Map = lst2.toMap\n        val lst47Map = lst1.toMap\n        val lst48Map\
    \ = lst2.toMap\n        val lst49Map = lst1.toMap\n        val lst50Map = lst2.toMap\n\
    \        val lst51Map = lst1.toMap\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgslbkic2.scala:70:11 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:19:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst1Map\e[0m = lst1.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that String <:< (K, V)\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m                                where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                          V is a type\
    \ variable\n\e[31m   |\e[0m                                .\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgslbkic2.scala:20:32 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst2Map\e[0m = lst2.toMap\n\e\
    [31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m   \
    \                             Cannot prove that String <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n\e[31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:21:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlst3Map\e[0m = lst1.toMap\n\e[31m\e[31m   |\e[0m      \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \     Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \                              where:    K is a type variable\n\e[31m   |\e[0m\
    \                                          V is a type variable\n\e[31m   |\e\
    [0m                                .\n\e[31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:22:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlst4Map\e[0m = lst2.toMap\n\e[31m\e[31m   |\e[0m      \
    \                        "
  stdout: ''
  timestamp: 1660009629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toSet\n        lst3.filterNot(lst4.contains)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2_rm9ce.scala:25)\n\tat Problem.main(tmpa2_rm9ce.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toArray\n        val lst8 = lst3.toIterator\n\
    \        val lst9 = lst3.toStream\n        val lst10 = lst3.toList\n        val\
    \ lst11 = lst3.toArray\n        val lst12 = lst3.toIterator\n        val lst13\
    \ = lst3.toStream\n        val lst14 = lst3.toList\n        val lst15 = lst3.toArray\n\
    \        val lst16 = lst3.toIterator\n        val lst17 = lst3.toStream\n    \
    \    val lst18 = lst3.toList\n        val lst19 = lst3.toArray\n        val lst20\
    \ = lst3.toIterator\n        val lst21 = lst3.toStream\n        val lst22 = lst3.toList\n\
    \        val lst23 = lst3.toArray\n        val lst24 = lst3.toIterator\n     \
    \   val lst25 = lst3.toStream\n        val lst26 = lst3.toList\n        val lst27\
    \ = lst3.toArray\n        val lst28 = lst3.toIterator\n        val lst29 = lst3.toStream\n\
    \        val lst30 = lst3.toList\n        val lst31 = lst3.toArray\n        val\
    \ lst32 = lst3.toIterator\n        val lst33 = lst3.toStream\n        val lst34\
    \ = lst3.toList\n        val lst35 = lst3.toArray\n        val lst36 = lst3.toIterator\n\
    \        val lst37 = lst3.toStream\n        val lst38 = lst3.toList\n        val\
    \ lst39 = lst3.toArray\n        val lst40 = lst3.toIterator\n        val lst41\
    \ = lst3.toStream\n        val lst42 = lst3.toList\n        val lst43 = lst3.toArray\n\
    \        val lst44 = lst3.toIterator\n        val lst45 = lst3.toStream\n    \
    \    val lst46 = lst3.toList\n        val lst47 = lst3.toArray\n        val lst48\
    \ = lst3.toIterator\n        val lst49 = lst3.toStream\n        val lst50 = lst3.toList\n\
    \        val lst51 = lst3.toArray\n        val lst52 = lst3.toIterator\n     \
    \   val lst53 = lst3.toStream\n        val lst54 = lst3.toList\n        \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo04z7_qm.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size).map(_ => lst3(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp876v2d4j.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size).map(_\
    \ => lst3(_))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Int\n\e[31m   |\e[0m          \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti8y81ul.scala:26)\n\tat Problem.main(tmpti8y81ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toSet\n        lst3.filter(x => lst4.contains(x))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtsjo7cc.scala:25)\n\tat Problem.main(tmpbtsjo7cc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.size\n\
    \        val lst2Size = lst2.size\n        if(lst1Size == lst2Size) {\n      \
    \      lst1\n        }\n        else {\n            val lst1Set = lst1.toSet\n\
    \            val lst2Set = lst2.toSet\n            if(lst1Set.size == lst2Set.size)\
    \ {\n                lst1\n            }\n            else {\n               \
    \ val lst1SetSize = lst1Set.size\n                val lst2SetSize = lst2Set.size\n\
    \                if(lst1SetSize < lst2SetSize) {\n                    lst1\n \
    \               }\n                else {\n                    lst2\n        \
    \        }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xsa2l7c.scala:44)\n\tat Problem.main(tmp4xsa2l7c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2 match {\n                case\
    \ Nil => lst2\n                case _ => lst1 ++ lst2 match {\n              \
    \      case Nil => lst2\n                    case _ => lst1 ++ lst2 match {\n\
    \                        case Nil => lst2\n                        case _ => lst1\
    \ ++ lst2 match {\n                            case Nil => lst2\n            \
    \                case _ => lst1 ++ lst2 match {\n                            \
    \    case Nil => lst2\n                                case _ => lst1 ++ lst2\
    \ match {\n                                    case Nil => lst2\n            \
    \                        case _ => lst1 ++ lst2 match {\n                    \
    \                    case Nil => lst2\n                                      \
    \  case _ => lst1 ++ lst2 match {\n                                          \
    \  case Nil => lst2\n                                            case _ => lst1\
    \ ++ lst2 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 ++ lst2\
    \ match {\n                                                    case Nil => lst2\n\
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                        case Nil => lst2\n\
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                            case Nil\
    \ => lst2\n                                                            case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \              case Nil => lst2\n                                            \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                            case Nil => lst2\n              \
    \                                                      case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \      case Nil => lst2\n                                                    \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                    case Nil => lst2\n      \
    \                                                                      case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \                              case Nil => lst2\n                            \
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                                        \
    \            case Nil => lst2\n                                              \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                          case _ => lst1 ++ lst2 match {\n  \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \                                  case Nil => lst2\n                        \
    \                                                                            case\
    \ _ => lst1 ++ lst2 match {\n                                                \
    \                                                        case Nil => lst2\n  \
    \                                                                            \
    \                          case _ => lst1 ++ lst2 match {\n                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                case _ => lst1\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4ww46bb.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4ww46bb.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpb4ww46bb.scala:71:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst1.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tay9v5k.scala:28)\n\tat Problem.main(tmp9tay9v5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.toMap\n\
    \        val lst2Map = lst2.toMap\n        val lst1Set = lst1.toSet\n        val\
    \ lst2Set = lst2.toSet\n        val lst1List = lst1.toList\n        val lst2List\
    \ = lst2.toList\n        val lst1SetMap = lst1Map.toSet\n        val lst2SetMap\
    \ = lst2Map.toSet\n        val lst1SetList = lst1Set.toList\n        val lst2SetList\
    \ = lst2Set.toList\n        val lst1SetMapList = lst1SetMap.toList\n        val\
    \ lst2SetMapList = lst2SetMap.toList\n        val lst1SetSetMap = lst1SetMap.toSet\n\
    \        val lst2SetSetMap = lst2SetMap.toSet\n        val lst1SetSetList = lst1SetSet.toList\n\
    \        val lst2SetSetList = lst2SetSet.toList\n        val lst1SetSetMapList\
    \ = lst1SetSetMap.toList\n        val lst2SetSetMapList = lst2SetSetMap.toList\n\
    \        val lst1SetSetSetMap = lst1SetSetMap.toSet\n        val lst2SetSetSetMap\
    \ = lst2SetSetMap.toSet\n        val lst1SetSetSetList = lst1SetSetSet.toList\n\
    \        val lst2SetSetSetList = lst2SetSetSet.toList\n        val lst1SetSetSetMapList\
    \ = lst1SetSetSetMap.toList\n        val lst2SetSetSetMapList = lst2SetSetSetMap.toList\n\
    \        val lst1SetSetSetSetMap = lst1SetSetSetMap.toSet\n        val lst2SetSetSetMap\
    \ = lst2SetSetSetMap.toSet\n        val lst1SetSetSetSetList = lst1SetSetSetSet.toList\n\
    \        val lst2SetSetSetList = lst2SetSetSet.toList\n        val lst1SetSetSetSetMapList\
    \ = lst1SetSetSetSetMap.toList\n        val lst2SetSetSetMapList = lst2SetSetSetMap.toList\n\
    \        val lst1SetSetSetSetSetMap = lst1SetSetSetSetMap.toSet\n        val lst2SetSetSetSetMap\
    \ = lst2SetSetSetMap.toSet\n        val lst1SetSetSetSetSetList = lst1SetSetSetSetSet.toList\n\
    \        val lst2SetSetSetList = lst2SetSetSet.toList\n        val lst1Set\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj761esnv.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj761esnv.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlst2SetSetSetMap\e[0m = lst2SetSetSetMap.toSet\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mlst2SetSetSetMap\
    \ is already defined as \e[33mvalue\e[0m \e[35mlst2SetSetSetMap\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpj761esnv.scala:46:12 ---------------------------\e[0m\e[0m\n\e[31m46\
    \ |\e[0m        \e[33mval\e[0m \e[36mlst2SetSetSetList\e[0m = lst2SetSetSet.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mlst2SetSetSetList is already defined as \e[33mvalue\e[0m \e[35mlst2SetSetSetList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpj761esnv.scala:48:12 ---------------------------\e[0m\e[0m\n\e\
    [31m48 |\e[0m        \e[33mval\e[0m \e[36mlst2SetSetSetMapList\e[0m = lst2SetSetSetMap.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlst2SetSetSetMapList is already defined as \e[33mvalue\e[0m\
    \ \e[35mlst2SetSetSetMapList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpj761esnv.scala:52:12 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mlst2SetSetSetList\e[0m =\
    \ lst2SetSetSet.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mlst2SetSetSetList is already defined as \e[33mvalue\e[0m \e\
    [35mlst2SetSetSetList\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defin"
  stdout: ''
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            return lst3\n        }\n  \
    \      val lst4 = lst2.filterNot(lst1.contains)\n        if(lst4.size == lst1.size)\
    \ {\n            return lst4\n        }\n        lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnlb6brh.scala:31)\n\tat Problem.main(tmpsnlb6brh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.toSet\n  \
    \      val list2 = lst2.toSet\n        if (list1.size == list2.size) {\n     \
    \       lst1\n        } else {\n            lst2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6s8pss8w.scala:30)\n\tat Problem.main(tmp6s8pss8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7127mkfj.scala:25)\n\tat Problem.main(tmp7127mkfj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            return lst3\n        }\n \
    \       val lst4 = lst2.filterNot(lst1.contains)\n        if (lst4.size == lst1.size)\
    \ {\n            return lst4\n        }\n        lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf18no2rk.scala:31)\n\tat Problem.main(tmpf18no2rk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.groupBy(x => x).mapValues(_.size)\n        val lst5 =\
    \ lst4.maxBy(_._2)\n        lst5._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_fnyhjjo.scala:22:13\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst5._1\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\e[31m\
    \   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrw80jhf.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        lst4.filter(\
    \ x => !lst5.contains(x) )\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn1__5weu.scala:22:19\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst4.filter( \e[36mx\e\
    [0m => !lst5.contains(x) )\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mSet\e[0m[String]\n\e[31m   |\e\
    [0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7127mkfj.scala:25)\n\tat Problem.main(tmp7127mkfj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        if(lst1Set.length == lst2Set.length){\n\
    \            if(lst1Set < lst2Set){\n                return lst1\n           \
    \ }\n            return lst2\n        }\n        val lst1Set2 = lst1.toSet\n \
    \       val lst2Set2 = lst2.toSet\n        if(lst1Set2.length == lst2Set2.length){\n\
    \            if(lst1Set2 < lst2Set2){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set3 = lst1.toSet\n\
    \        val lst2Set3 = lst2.toSet\n        if(lst1Set3.length == lst2Set3.length){\n\
    \            if(lst1Set3 < lst2Set3){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set4 = lst1.toSet\n\
    \        val lst2Set4 = lst2.toSet\n        if(lst1Set4.length == lst2Set4.length){\n\
    \            if(lst1Set4 < lst2Set4){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set5 = lst1.toSet\n\
    \        val lst2Set5 = lst2.toSet\n        if(lst1Set5.length == lst2Set5.length){\n\
    \            if(lst1Set5 < lst2Set5){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set6 = lst1.toSet\n\
    \        val lst2Set6 = lst2.toSet\n        if(lst1Set6.length == lst2Set6.length){\n\
    \            if(lst1Set6 < lst2Set6){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set7 = lst1.toSet\n\
    \        val lst2Set7 = lst2.toSet\n        if(lst1Set7.length == lst2Set7.length){\n\
    \            if(lst1Set7 < lst2Set7){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set8 = lst1.toSet\n\
    \        val lst2Set8 = lst2.toSet\n        if(lst1Set8.length == lst2Set8.length){\n\
    \            if(lst1Set8 < lst2Set8){\n                return lst1\n         \
    \   }\n            return lst2\n        }\n        val lst1Set9 = lst1.toSet\n\
    \        val lst2Set9 = lst2.toSet\n        if(lst1Set9.length == lst2Set9.length){\n\
    \            if(lst\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpda6big0d.scala:87:4 ----------------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpda6big0d.scala:101:0\
    \ ---------------------------\e[0m\e[0m\n\e[31m101 |\e[0m\n\e[31m\e[31m    |\e\
    [0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpda6big0d.scala:21:19 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(lst1Set.length == lst2Set.length){\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \  value length is not a member of Set[String]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpda6big0d.scala:22:23 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m(lst1Set < lst2Set){\n\e[31m\e[31m   |\e[0m \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Set[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpda6big0d.scala:29:20 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(lst1Set2.length == lst2Set2.length){\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \   value length is not a member of Set[String]\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpda6big0d.scala:30:24 ------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m            \e[33mif\e[0m(lst1Set2 < lst2Set2){\n\e[31m\e[31m   |\e[0m\
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue < is not a member of Set[String],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m "
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size).sortWith(_ <\
    \ _).head\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd3bcpd07.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size).sortWith(_\
    \ < _).head\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Int\n\e[31m   |\e[0m             \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpew6bebig.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst3.toSet\n        val lst7 = lst3.toSet\n        val lst8 = lst3.toSet\n\
    \        val lst9 = lst3.toSet\n        val lst10 = lst3.toSet\n        val lst11\
    \ = lst3.toSet\n        val lst12 = lst3.toSet\n        val lst13 = lst3.toSet\n\
    \        val lst14 = lst3.toSet\n        val lst15 = lst3.toSet\n        val lst16\
    \ = lst3.toSet\n        val lst17 = lst3.toSet\n        val lst18 = lst3.toSet\n\
    \        val lst19 = lst3.toSet\n        val lst20 = lst3.toSet\n        val lst21\
    \ = lst3.toSet\n        val lst22 = lst3.toSet\n        val lst23 = lst3.toSet\n\
    \        val lst24 = lst3.toSet\n        val lst25 = lst3.toSet\n        val lst26\
    \ = lst3.toSet\n        val lst27 = lst3.toSet\n        val lst28 = lst3.toSet\n\
    \        val lst29 = lst3.toSet\n        val lst30 = lst3.toSet\n        val lst31\
    \ = lst3.toSet\n        val lst32 = lst3.toSet\n        val lst33 = lst3.toSet\n\
    \        val lst34 = lst3.toSet\n        val lst35 = lst3.toSet\n        val lst36\
    \ = lst3.toSet\n        val lst37 = lst3.toSet\n        val lst38 = lst3.toSet\n\
    \        val lst39 = lst3.toSet\n        val lst40 = lst3.toSet\n        val lst41\
    \ = lst3.toSet\n        val lst42 = lst3.toSet\n        val lst43 = lst3.toSet\n\
    \        val lst44 = lst3.toSet\n        val lst45 = lst3.toSet\n        val lst46\
    \ = lst3.toSet\n        val lst47 = lst3.toSet\n        val lst48 = lst3.toSet\n\
    \        val lst49 = lst3.toSet\n        val lst50 = lst3.toSet\n        val lst51\
    \ = lst3.toSet\n        val lst52 = lst3.toSet\n        val lst53 = lst3.toSet\n\
    \        val lst54 = lst3.toSet\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2q20v1op.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst1 ++ lst5\n        val lst7 = lst6.filter(x => !lst4.contains(x))\n   \
    \     val lst8 = lst7.filter(x => !lst5.contains(x))\n        lst8.headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqf383c2a.scala:25:13\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        lst8.headOption\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mOption\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            return lst3\n        }\n  \
    \      val lst4 = lst2.filterNot(lst1.contains)\n        if(lst4.size == lst1.size)\
    \ {\n            return lst4\n        }\n        lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnlb6brh.scala:31)\n\tat Problem.main(tmpsnlb6brh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toSeq\n        val lst8 = lst3.toList\n\
    \        val lst9 = lst3.toSeq\n        val lst10 = lst3.toList\n        val lst11\
    \ = lst3.toSeq\n        val lst12 = lst3.toList\n        val lst13 = lst3.toSeq\n\
    \        val lst14 = lst3.toList\n        val lst15 = lst3.toSeq\n        val\
    \ lst16 = lst3.toList\n        val lst17 = lst3.toSeq\n        val lst18 = lst3.toList\n\
    \        val lst19 = lst3.toSeq\n        val lst20 = lst3.toList\n        val\
    \ lst21 = lst3.toSeq\n        val lst22 = lst3.toList\n        val lst23 = lst3.toSeq\n\
    \        val lst24 = lst3.toList\n        val lst25 = lst3.toSeq\n        val\
    \ lst26 = lst3.toList\n        val lst27 = lst3.toSeq\n        val lst28 = lst3.toList\n\
    \        val lst29 = lst3.toSeq\n        val lst30 = lst3.toList\n        val\
    \ lst31 = lst3.toSeq\n        val lst32 = lst3.toList\n        val lst33 = lst3.toSeq\n\
    \        val lst34 = lst3.toList\n        val lst35 = lst3.toSeq\n        val\
    \ lst36 = lst3.toList\n        val lst37 = lst3.toSeq\n        val lst38 = lst3.toList\n\
    \        val lst39 = lst3.toSeq\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toList\n        val lst43 = lst3.toSeq\n\
    \        val lst44 = lst3.toList\n        val lst45 = lst3.toSeq\n        val\
    \ lst46 = lst3.toList\n        val lst47 = lst3.toSeq\n        val lst48 = lst3.toList\n\
    \        val lst49 = lst3.toSeq\n        val lst50 = lst3.toList\n        val\
    \ lst51 = lst3.toSeq\n        val lst52 = lst3.toList\n        val lst53 = lst3.toSeq\n\
    \        val lst54 = lst3.toList\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1pagr9e_.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ ==\
    \ x) < lst2.count(_ == x))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhy5xoha.scala:26)\n\tat Problem.main(tmpuhy5xoha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst1.size) lst3\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdsldnoj.scala:25)\n\tat Problem.main(tmpzdsldnoj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.toSet\n  \
    \      val list2 = lst2.toSet\n        if(list1.size == list2.size) {\n      \
    \      lst1\n        } else {\n            lst2\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphp9liiti.scala:30)\n\tat Problem.main(tmphp9liiti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toArray\n        val lst8 = lst3.toIterator\n\
    \        val lst9 = lst3.toStream\n        val lst10 = lst3.toList\n        val\
    \ lst11 = lst3.toArray\n        val lst12 = lst3.toIterator\n        val lst13\
    \ = lst3.toStream\n        val lst14 = lst3.toList\n        val lst15 = lst3.toArray\n\
    \        val lst16 = lst3.toIterator\n        val lst17 = lst3.toStream\n    \
    \    val lst18 = lst3.toList\n        val lst19 = lst3.toArray\n        val lst20\
    \ = lst3.toIterator\n        val lst21 = lst3.toStream\n        val lst22 = lst3.toList\n\
    \        val lst23 = lst3.toArray\n        val lst24 = lst3.toIterator\n     \
    \   val lst25 = lst3.toStream\n        val lst26 = lst3.toList\n        val lst27\
    \ = lst3.toArray\n        val lst28 = lst3.toIterator\n        val lst29 = lst3.toStream\n\
    \        val lst30 = lst3.toList\n        val lst31 = lst3.toArray\n        val\
    \ lst32 = lst3.toIterator\n        val lst33 = lst3.toStream\n        val lst34\
    \ = lst3.toList\n        val lst35 = lst3.toArray\n        val lst36 = lst3.toIterator\n\
    \        val lst37 = lst3.toStream\n        val lst38 = lst3.toList\n        val\
    \ lst39 = lst3.toArray\n        val lst40 = lst3.toIterator\n        val lst41\
    \ = lst3.toStream\n        val lst42 = lst3.toList\n        val lst43 = lst3.toArray\n\
    \        val lst44 = lst3.toIterator\n        val lst45 = lst3.toStream\n    \
    \    val lst46 = lst3.toList\n        val lst47 = lst3.toArray\n        val lst48\
    \ = lst3.toIterator\n        val lst49 = lst3.toStream\n        val lst50 = lst3.toList\n\
    \        val lst51 = lst3.toArray\n        val lst52 = lst3.toIterator\n     \
    \   val lst53 = lst3.toStream\n        val lst54 = lst3.toList\n        \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo04z7_qm.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1pa8rj49.scala:24)\n\tat Problem.main(tmp1pa8rj49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst3.filter(_\
    \ < lst4)\n        val lst6 = lst4.filter(_ < lst3)\n        val lst7 = lst5.filter(_\
    \ < lst6)\n        val lst8 = lst6.filter(_ < lst5)\n        val lst9 = lst7.filter(_\
    \ < lst8)\n        val lst10 = lst8.filter(_ < lst7)\n        val lst11 = lst9.filter(_\
    \ < lst10)\n        val lst12 = lst10.filter(_ < lst9)\n        val lst13 = lst11.filter(_\
    \ < lst12)\n        val lst14 = lst12.filter(_ < lst11)\n        val lst15 = lst13.filter(_\
    \ < lst14)\n        val lst16 = lst14.filter(_ < lst13)\n        val lst17 = lst15.filter(_\
    \ < lst16)\n        val lst18 = lst16.filter(_ < lst15)\n        val lst19 = lst17.filter(_\
    \ < lst18)\n        val lst20 = lst18.filter(_ < lst17)\n        val lst21 = lst19.filter(_\
    \ < lst20)\n        val lst22 = lst20.filter(_ < lst19)\n        val lst23 = lst21.filter(_\
    \ < lst22)\n        val lst24 = lst22.filter(_ < lst21)\n        val lst25 = lst23.filter(_\
    \ < lst24)\n        val lst26 = lst24.filter(_ < lst23)\n        val lst27 = lst25.filter(_\
    \ < lst26)\n        val lst28 = lst26.filter(_ < lst25)\n        val lst29 = lst27.filter(_\
    \ < lst28)\n        val lst30 = lst28.filter(_ < lst27)\n        val lst31 = lst29.filter(_\
    \ < lst30)\n        val lst32 = lst30.filter(_ < lst29)\n        val lst33 = lst31.filter(_\
    \ < lst32)\n        val lst34 = lst32.filter(_ < lst31)\n        val lst35 = lst33.filter(_\
    \ < lst34)\n        val lst36 = lst34.filter(_ < lst33)\n        val lst37 = lst35.filter(_\
    \ < lst36)\n        val lst38 = lst36.filter(_ < lst35)\n        val lst39 = lst37.filter(_\
    \ < lst38)\n        val lst40 = lst38.filter(_ < lst37)\n        val lst41 = lst39.filter(_\
    \ < lst40)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e\
    [0m = lst3.filter(_ < lst4)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst4 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst6\e\
    [0m = lst4.filter(_ < lst3)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst3 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlst7\e\
    [0m = lst5.filter(_ < lst6)\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => !lst1.contains(x))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kmwowr5.scala:26)\n\tat Problem.main(tmp6kmwowr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti8y81ul.scala:26)\n\tat Problem.main(tmpti8y81ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst1.size){\n            return lst3\n        }\n   \
    \     else if(lst3.size < lst1.size){\n            return lst1\n        }\n  \
    \      else{\n            return lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_8kq8545.scala:32)\n\tat Problem.main(tmp_8kq8545.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti8y81ul.scala:26)\n\tat Problem.main(tmpti8y81ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Set = lst1.toSet\n\
    \        val lst2Set = lst2.toSet\n        if(lst1Set.isEmpty || lst2Set.isEmpty)\
    \ return lst1\n        if(lst1Set.size == lst2Set.size) lst1\n        else lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctz7a72r.scala:28)\n\tat Problem.main(tmpctz7a72r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => !lst1.contains(x))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kmwowr5.scala:26)\n\tat Problem.main(tmp6kmwowr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => lst1 match {\n                    case Nil =>\
    \ lst2\n                    case _ => lst1 match {\n                        case\
    \ Nil => lst2\n                        case _ => lst1 match {\n              \
    \              case Nil => lst2\n                            case _ => lst1 match\
    \ {\n                                case Nil => lst2\n                      \
    \          case _ => lst1 match {\n                                    case Nil\
    \ => lst2\n                                    case _ => lst1 match {\n      \
    \                                  case Nil => lst2\n                        \
    \                case _ => lst1 match {\n                                    \
    \        case Nil => lst2\n                                            case _\
    \ => lst1 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 match {\n\
    \                                                    case Nil => lst2\n      \
    \                                              case _ => lst1 match {\n      \
    \                                                  case Nil => lst2\n        \
    \                                                case _ => lst1 match {\n    \
    \                                                        case Nil => lst2\n  \
    \                                                          case _ => lst1 match\
    \ {\n                                                                case Nil\
    \ => lst2\n                                                                case\
    \ _ => lst1 match {\n                                                        \
    \            case Nil => lst2\n                                              \
    \                      case _ => lst1 match {\n                              \
    \                                          case Nil => lst2\n                \
    \                                                        case _ => lst1 match\
    \ {\n                                                                        \
    \    case Nil => lst2\n                                                      \
    \                      case _ => lst1 match {\n                              \
    \                                                  case Nil => lst2\n        \
    \                                                                        case\
    \ _ => lst1 match {\n                                                        \
    \                            case Nil => lst2\n                              \
    \                                                      case _ => lst1 match {\n\
    \                                                                            \
    \            case Nil => lst2\n                                              \
    \                                          case _ => lst1 match {\n          \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                        case _ => lst1 match {\n            \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                              case _ => lst1 match {\n      \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                            case _ => lst1 match\
    \ {\n                                                                        \
    \                                case Nil => lst2\n                          \
    \                                                                            \
    \  case _ => lst1 match {\n                                                  \
    \                                                          case Nil => lst2\n\
    \                                                                            \
    \                                case _ => lst1 match {\n                    \
    \                                                                            \
    \                case Nil => lst2\n                                          \
    \                                                                      case _\
    \ => lst1 match {\n                                                          \
    \                                                          case Nil => lst2\n\
    \                                                                            \
    \                                        case _ => lst1 match {\n            \
    \                                                                            \
    \                                case Nil => lst2\n                          \
    \                                                                            \
    \                  case _ => lst1 match {\n                                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                            \
    \    case \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7dbst2ir.scala:77:128 --------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m                                                    \
    \                                                                        \e[33mcase\e\
    [0m \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                                   \
    \     pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7dbst2ir.scala:92:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7dbst2ir.scala:89:5 ---------------------\e[0m\e[0m\n\
    \e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp7dbst2ir.scala:79:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.isEmpty) lst1\n        else lst3\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaft40vv.scala:25)\n\tat Problem.main(tmpmaft40vv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkamwq0z.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lst3.length <= lst4.length ? lst3 : \e[35mlst4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                            ^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Not found: type lst4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkamwq0z.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst3.length <= lst4.length\
    \ ? lst3 : \e[35mlst4\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value ? is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ ==\
    \ x) < lst2.count(_ == x))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhy5xoha.scala:26)\n\tat Problem.main(tmpuhy5xoha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._2).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsssrw4m5.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._1).map(_._2).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp399umovi.scala:29)\n\tat Problem.main(tmp399umovi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.length).map(_ + lst3.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu7gv4poh.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.length).map(_\
    \ + lst3.length)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Found:    Int\n\e[31m   |\e[0m        \
    \                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).map { case (x,\
    \ y) => if (x.length == y.length) x else y }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3zddrcg1.scala:24)\n\tat Problem.main(tmp3zddrcg1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Len = lst1.size\n \
    \       val lst2Len = lst2.size\n        if (lst1Len < lst2Len) {\n          \
    \  lst1\n        } else if (lst1Len == lst2Len) {\n            lst1\n        }\
    \ else {\n            lst2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeqm7g6f5.scala:31)\n\tat Problem.main(tmpeqm7g6f5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size).map(_ + lst3.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7eu3b4x3.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size).map(_\
    \ + lst3.size)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Int\n\e[31m   |\e[0m          \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst3.filter(_\
    \ < lst4)\n        lst5.headOption\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e\
    [0m = lst3.filter(_ < lst4)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst4 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:22:13\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst5.headOption\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mOption\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst3.filter(_\
    \ < lst4)\n        val lst6 = lst4.filter(_ < lst3)\n        val lst7 = lst5.filter(_\
    \ < lst6)\n        val lst8 = lst6.filter(_ < lst5)\n        val lst9 = lst7.filter(_\
    \ < lst8)\n        val lst10 = lst8.filter(_ < lst7)\n        val lst11 = lst9.filter(_\
    \ < lst10)\n        val lst12 = lst10.filter(_ < lst9)\n        val lst13 = lst11.filter(_\
    \ < lst12)\n        val lst14 = lst12.filter(_ < lst11)\n        val lst15 = lst13.filter(_\
    \ < lst14)\n        val lst16 = lst14.filter(_ < lst13)\n        val lst17 = lst15.filter(_\
    \ < lst16)\n        val lst18 = lst16.filter(_ < lst15)\n        val lst19 = lst17.filter(_\
    \ < lst18)\n        val lst20 = lst18.filter(_ < lst17)\n        val lst21 = lst19.filter(_\
    \ < lst20)\n        val lst22 = lst20.filter(_ < lst19)\n        val lst23 = lst21.filter(_\
    \ < lst22)\n        val lst24 = lst22.filter(_ < lst21)\n        val lst25 = lst23.filter(_\
    \ < lst24)\n        val lst26 = lst24.filter(_ < lst23)\n        val lst27 = lst25.filter(_\
    \ < lst26)\n        val lst28 = lst26.filter(_ < lst25)\n        val lst29 = lst27.filter(_\
    \ < lst28)\n        val lst30 = lst28.filter(_ < lst27)\n        val lst31 = lst29.filter(_\
    \ < lst30)\n        val lst32 = lst30.filter(_ < lst29)\n        val lst33 = lst31.filter(_\
    \ < lst32)\n        val lst34 = lst32.filter(_ < lst31)\n        val lst35 = lst33.filter(_\
    \ < lst34)\n        val lst36 = lst34.filter(_ < lst33)\n        val lst37 = lst35.filter(_\
    \ < lst36)\n        val lst38 = lst36.filter(_ < lst35)\n        val lst39 = lst37.filter(_\
    \ < lst38)\n        val lst40 = lst38.filter(_ < lst37)\n        val lst41 = lst39.filter(_\
    \ < lst40)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e\
    [0m = lst3.filter(_ < lst4)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst4 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst6\e\
    [0m = lst4.filter(_ < lst3)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst3 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlst7\e\
    [0m = lst5.filter(_ < lst6)\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => {\n                val map1 = lst1.map(x\
    \ => (x, 1)).toMap\n                val map2 = lst2.map(x => (x, 1)).toMap\n \
    \               val map3 = map1.filter(_._2 > map2.getOrElse(x, 0))\n        \
    \        map3.map(_._1)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4p1r4tpn.scala:24:61 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mmap3\e[0m = map1.filter(_._2\
    \ > map2.getOrElse(x, \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                                                  Not found: x\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4p1r4tpn.scala:25:24 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                map3.map(_._1)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:  \
    \  scala.collection.immutable.Iterable[String]\n\e[31m   |\e[0m              \
    \  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrw80jhf.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => {\n                val lst3 = lst1.filterNot(lst2.contains)\n\
    \                if (lst3.size == lst2.size) {\n                    lst3\n   \
    \             } else {\n                    lst1\n                }\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwrs4uft6.scala:33)\n\tat Problem.main(tmpwrs4uft6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSet\n        val lst7 = lst3.toList\n        val lst8 = lst3.toSet\n\
    \        val lst9 = lst3.toList\n        val lst10 = lst3.toSet\n        val lst11\
    \ = lst3.toList\n        val lst12 = lst3.toSet\n        val lst13 = lst3.toList\n\
    \        val lst14 = lst3.toSet\n        val lst15 = lst3.toList\n        val\
    \ lst16 = lst3.toSet\n        val lst17 = lst3.toList\n        val lst18 = lst3.toSet\n\
    \        val lst19 = lst3.toList\n        val lst20 = lst3.toSet\n        val\
    \ lst21 = lst3.toList\n        val lst22 = lst3.toSet\n        val lst23 = lst3.toList\n\
    \        val lst24 = lst3.toSet\n        val lst25 = lst3.toList\n        val\
    \ lst26 = lst3.toSet\n        val lst27 = lst3.toList\n        val lst28 = lst3.toSet\n\
    \        val lst29 = lst3.toList\n        val lst30 = lst3.toSet\n        val\
    \ lst31 = lst3.toList\n        val lst32 = lst3.toSet\n        val lst33 = lst3.toList\n\
    \        val lst34 = lst3.toSet\n        val lst35 = lst3.toList\n        val\
    \ lst36 = lst3.toSet\n        val lst37 = lst3.toList\n        val lst38 = lst3.toSet\n\
    \        val lst39 = lst3.toList\n        val lst40 = lst3.toSet\n        val\
    \ lst41 = lst3.toList\n        val lst42 = lst3.toSet\n        val lst43 = lst3.toList\n\
    \        val lst44 = lst3.toSet\n        val lst45 = lst3.toList\n        val\
    \ lst46 = lst3.toSet\n        val lst47 = lst3.toList\n        val lst48 = lst3.toSet\n\
    \        val lst49 = lst3.toList\n        val lst50 = lst3.toSet\n        val\
    \ lst51 = lst3.toList\n        val lst52 = lst3.toSet\n        val lst53 = lst3.toList\n\
    \        val lst54 = lst3.\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd2pt1u70.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd2pt1u70.scala:71:5 ---------------------\e[0m\e[0m\n\e[31m71\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst1.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tay9v5k.scala:28)\n\tat Problem.main(tmp9tay9v5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        lst3.length match {\n\
    \            case 0 => lst4\n            case _ => lst3.head :: totalMatch(lst3.tail,\
    \ lst4)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj33ock0o.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst2\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp94wm2yfs.scala:29)\n\tat Problem.main(tmp94wm2yfs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => {\n                val lst3 = lst1.filterNot(lst2.contains)\n\
    \                if (lst3.size == lst2.size) {\n                    lst3\n   \
    \             } else {\n                    lst1\n                }\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwrs4uft6.scala:33)\n\tat Problem.main(tmpwrs4uft6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zipWithIndex.filter(_._1\
    \ < lst2.length).map(_._2).map(_._1).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpca562cm9.scala:19:45\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        lst1.zipWithIndex.filter(_._1\
    \ < lst2.length).map(_._2).map(_._1).toList\n\e[31m\e[31m   |\e[0m           \
    \                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          Found:    Int\n\e[31m   |\e[0m                    \
    \                    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpca562cm9.scala:19:69 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        lst1.zipWithIndex.filter(_._1 < lst2.length).map(_._2).map(_._1).toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \  value _1 is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.size\n\
    \        val lst2Size = lst2.size\n        val lst3Size = lst1.size + lst2.size\n\
    \        val lst3Chars = lst3.map(_.length).sum\n        if (lst1Size == lst2Size)\
    \ {\n            if (lst1Size == lst3Size) {\n                if (lst1Size ==\
    \ lst3Chars) {\n                    lst1\n                } else {\n         \
    \           lst2\n                }\n            } else {\n                lst1\n\
    \            }\n        } else {\n            lst2\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppo12p0ca.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst3Chars\e[0m = lst3.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Not found: lst3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toSeq\n        val lst8 = lst3.toSet\n\
    \        val lst9 = lst3.toSeq\n        val lst10 = lst3.toList\n        val lst11\
    \ = lst3.toSeq\n        val lst12 = lst3.toSet\n        val lst13 = lst3.toSeq\n\
    \        val lst14 = lst3.toList\n        val lst15 = lst3.toSeq\n        val\
    \ lst16 = lst3.toSet\n        val lst17 = lst3.toSeq\n        val lst18 = lst3.toList\n\
    \        val lst19 = lst3.toSeq\n        val lst20 = lst3.toSet\n        val lst21\
    \ = lst3.toSeq\n        val lst22 = lst3.toList\n        val lst23 = lst3.toSeq\n\
    \        val lst24 = lst3.toSet\n        val lst25 = lst3.toSeq\n        val lst26\
    \ = lst3.toList\n        val lst27 = lst3.toSeq\n        val lst28 = lst3.toSet\n\
    \        val lst29 = lst3.toSeq\n        val lst30 = lst3.toList\n        val\
    \ lst31 = lst3.toSeq\n        val lst32 = lst3.toSet\n        val lst33 = lst3.toSeq\n\
    \        val lst34 = lst3.toList\n        val lst35 = lst3.toSeq\n        val\
    \ lst36 = lst3.toSet\n        val lst37 = lst3.toSeq\n        val lst38 = lst3.toList\n\
    \        val lst39 = lst3.toSeq\n        val lst40 = lst3.toSet\n        val lst41\
    \ = lst3.toSeq\n        val lst42 = lst3.toList\n        val lst43 = lst3.toSeq\n\
    \        val lst44 = lst3.toSet\n        val lst45 = lst3.toSeq\n        val lst46\
    \ = lst3.toList\n        val lst47 = lst3.toSeq\n        val lst48 = lst3.toSet\n\
    \        val lst49 = lst3.toSeq\n        val lst50 = lst3.toList\n        val\
    \ lst51 = lst3.toSeq\n        val lst52 = lst3.toSet\n        val lst53 = lst3.toSeq\n\
    \        val lst54 = lst3.toList\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_74orf1l.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2).map(_ + lst2.filter(_ < _).map(_ + 1))\n        lst3.filter(_ < lst2.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9k35k4bu.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2).map(_ + lst2.filter(_ < _).map(_ + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    (lst2 : List[String])\n\e[31m\
    \   |\e[0m                                   Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp9k35k4bu.scala:19:61 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst1.filter(_\
    \ < lst2).map(_ + lst2.filter(_ < _).map(_ + \e[31m1\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9k35k4bu.scala:20:29 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        lst3.filter(_ < lst2.size)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \     Found:    Int\n\e[31m   |\e[0m                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toArray\n        val lst8 = lst3.toIterator\n\
    \        val lst9 = lst3.toStream\n        val lst10 = lst3.toListBuffer\n   \
    \     val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val\
    \ lst13 = lst3.toSeq\n        val lst14 = lst3.toArray\n        val lst15 = lst3.toIterator\n\
    \        val lst16 = lst3.toStream\n        val lst17 = lst3.toListBuffer\n  \
    \      val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toArray\n        val lst22 = lst3.toIterator\n\
    \        val lst23 = lst3.toStream\n        val lst24 = lst3.toListBuffer\n  \
    \      val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toArray\n        val lst29 = lst3.toIterator\n\
    \        val lst30 = lst3.toStream\n        val lst31 = lst3.toListBuffer\n  \
    \      val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toArray\n        val lst36 = lst3.toIterator\n\
    \        val lst37 = lst3.toStream\n        val lst38 = lst3.toListBuffer\n  \
    \      val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toArray\n        val lst43 = lst3.toIterator\n\
    \        val lst44 = lst3.toStream\n        val lst45 = lst3.toListBuffer\n  \
    \      val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toArray\n        val lst50 = lst3.toIterator\n\
    \        val lst51 = lst3.toStream\n        val lst52 = lst3.toListBuffer\n  \
    \      val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeqg72io2.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:26:25\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mlst10\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:33:25\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mlst17\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:40:25\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e\
    [36mlst24\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:47:25\
    \ ------------------------\e[0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e\
    [36mlst31\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:54:25\
    \ ------------------------\e[0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e\
    [36mlst38\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqg72io2.scala:61:25\
    \ ------------------------\e[0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e\
    [36mlst45\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value toListBuffer is not a member o"
  stdout: ''
  timestamp: 1660009652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst3.toSet\n        val lst7 = lst3.toSet\n        val lst8 = lst3.toSet\n\
    \        val lst9 = lst3.toSet\n        val lst10 = lst3.toSet\n        val lst11\
    \ = lst3.toSet\n        val lst12 = lst3.toSet\n        val lst13 = lst3.toSet\n\
    \        val lst14 = lst3.toSet\n        val lst15 = lst3.toSet\n        val lst16\
    \ = lst3.toSet\n        val lst17 = lst3.toSet\n        val lst18 = lst3.toSet\n\
    \        val lst19 = lst3.toSet\n        val lst20 = lst3.toSet\n        val lst21\
    \ = lst3.toSet\n        val lst22 = lst3.toSet\n        val lst23 = lst3.toSet\n\
    \        val lst24 = lst3.toSet\n        val lst25 = lst3.toSet\n        val lst26\
    \ = lst3.toSet\n        val lst27 = lst3.toSet\n        val lst28 = lst3.toSet\n\
    \        val lst29 = lst3.toSet\n        val lst30 = lst3.toSet\n        val lst31\
    \ = lst3.toSet\n        val lst32 = lst3.toSet\n        val lst33 = lst3.toSet\n\
    \        val lst34 = lst3.toSet\n        val lst35 = lst3.toSet\n        val lst36\
    \ = lst3.toSet\n        val lst37 = lst3.toSet\n        val lst38 = lst3.toSet\n\
    \        val lst39 = lst3.toSet\n        val lst40 = lst3.toSet\n        val lst41\
    \ = lst3.toSet\n        val lst42 = lst3.toSet\n        val lst43 = lst3.toSet\n\
    \        val lst44 = lst3.toSet\n        val lst45 = lst3.toSet\n        val lst46\
    \ = lst3.toSet\n        val lst47 = lst3.toSet\n        val lst48 = lst3.toSet\n\
    \        val lst49 = lst3.toSet\n        val lst50 = lst3.toSet\n        val lst51\
    \ = lst3.toSet\n        val lst52 = lst3.toSet\n        val lst53 = lst3.toSet\n\
    \        val lst54 = lst3.toSet\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2q20v1op.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toSeq\n        val lst8 = lst3.toList\n\
    \        val lst9 = lst3.toSeq\n        val lst10 = lst3.toList\n        val lst11\
    \ = lst3.toSeq\n        val lst12 = lst3.toList\n        val lst13 = lst3.toSeq\n\
    \        val lst14 = lst3.toList\n        val lst15 = lst3.toSeq\n        val\
    \ lst16 = lst3.toList\n        val lst17 = lst3.toSeq\n        val lst18 = lst3.toList\n\
    \        val lst19 = lst3.toSeq\n        val lst20 = lst3.toList\n        val\
    \ lst21 = lst3.toSeq\n        val lst22 = lst3.toList\n        val lst23 = lst3.toSeq\n\
    \        val lst24 = lst3.toList\n        val lst25 = lst3.toSeq\n        val\
    \ lst26 = lst3.toList\n        val lst27 = lst3.toSeq\n        val lst28 = lst3.toList\n\
    \        val lst29 = lst3.toSeq\n        val lst30 = lst3.toList\n        val\
    \ lst31 = lst3.toSeq\n        val lst32 = lst3.toList\n        val lst33 = lst3.toSeq\n\
    \        val lst34 = lst3.toList\n        val lst35 = lst3.toSeq\n        val\
    \ lst36 = lst3.toList\n        val lst37 = lst3.toSeq\n        val lst38 = lst3.toList\n\
    \        val lst39 = lst3.toSeq\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toList\n        val lst43 = lst3.toSeq\n\
    \        val lst44 = lst3.toList\n        val lst45 = lst3.toSeq\n        val\
    \ lst46 = lst3.toList\n        val lst47 = lst3.toSeq\n        val lst48 = lst3.toList\n\
    \        val lst49 = lst3.toSeq\n        val lst50 = lst3.toList\n        val\
    \ lst51 = lst3.toSeq\n        val lst52 = lst3.toList\n        val lst53 = lst3.toSeq\n\
    \        val lst54 = lst3.toList\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1pagr9e_.scala:72:5\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size).map(_ => lst3(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp876v2d4j.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size).map(_\
    \ => lst3(_))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Found:    Int\n\e[31m   |\e[0m          \
    \              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) lst3\n        else lst1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypvj9fqh.scala:25)\n\tat Problem.main(tmpypvj9fqh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toListIterator\n    \
    \    val lst13 = lst3.toListStream\n        val lst14 = lst3.toSetBuffer\n   \
    \     val lst15 = lst3.toSetArray\n        val lst16 = lst3.toSetIterator\n  \
    \      val lst17 = lst3.toSetStream\n        val lst18 = lst3.toMap\n        val\
    \ lst19 = lst3.toMapIterator\n        val lst20 = lst3.toMapStream\n        val\
    \ lst21 = lst3.toSetBuffer\n        val lst22 = lst3.toSetArray\n        val lst23\
    \ = lst3.toSetIterator\n        val lst24 = lst3.toSetStream\n        val lst25\
    \ = lst3.toMap\n        val lst26 = lst3.toMapIterator\n        val lst27 = lst3.toMapStream\n\
    \        val lst28 = lst3.toListBuffer\n        val lst29 = lst3.toListArray\n\
    \        val lst30 = lst3.toListIterator\n        val lst31 = lst3.toListStream\n\
    \        val lst32 = lst3.toSetBuffer\n        val lst33 = lst3.toSetArray\n \
    \       val lst34 = lst3.toSetIterator\n        val lst35 = lst3.toSetStream\n\
    \        val lst36 = lst3.toMap\n        val lst37 = lst3.toMapIterator\n    \
    \    val lst38 = lst3.toMapStream\n        val lst39 = lst3.toListBuffer\n   \
    \     val lst40 = lst3.toListArray\n        val lst41 = lst3.toListIterator\n\
    \        val lst42 = lst3.toListStream\n        val lst43 = lst3.toSetBuffer\n\
    \        val lst44 = lst3.toSetArray\n        val lst45 = lst3.toSetIterator\n\
    \        val lst46 = lst3.toSetStream\n        val lst47 = lst3.toMap\n      \
    \  val lst48 = lst3.toMapIterator\n        val lst49 = lst3.toMapStream\n    \
    \    val lst50 = lst3.toListBuffer\n        val lst51 = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpuuzov6kq.scala:67:19 ---------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mval\e[0m \e[36mlst51\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpuuzov6kq.scala:25:24 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        value toListBuffer is not a member of List[String]\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuuzov6kq.scala:28:25 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlst12\e[0m = lst3.toListIterator\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListIterator is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuzov6kq.scala:29:25 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlst13\e[0m = lst3.toListStream\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListStream is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuzov6kq.scala:30:25 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mlst14\e[0m = lst3.toSetBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSetBuffer is not a member of List[String] - did you mean lst3.toBuffer?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuzov6kq.scala:31:25 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mlst15\e[0m = lst3.toSetArray\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSetArray is not a member of List[String] - did you mean lst3.toArray?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpuuzov6kq.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m      "
  stdout: ''
  timestamp: 1660009655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => lst1 match {\n                    case Nil =>\
    \ lst2\n                    case _ => lst1 match {\n                        case\
    \ Nil => lst2\n                        case _ => lst1 match {\n              \
    \              case Nil => lst2\n                            case _ => lst1 match\
    \ {\n                                case Nil => lst2\n                      \
    \          case _ => lst1 match {\n                                    case Nil\
    \ => lst2\n                                    case _ => lst1 match {\n      \
    \                                  case Nil => lst2\n                        \
    \                case _ => lst1 match {\n                                    \
    \        case Nil => lst2\n                                            case _\
    \ => lst1 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 match {\n\
    \                                                    case Nil => lst2\n      \
    \                                              case _ => lst1 match {\n      \
    \                                                  case Nil => lst2\n        \
    \                                                case _ => lst1 match {\n    \
    \                                                        case Nil => lst2\n  \
    \                                                          case _ => lst1 match\
    \ {\n                                                                case Nil\
    \ => lst2\n                                                                case\
    \ _ => lst1 match {\n                                                        \
    \            case Nil => lst2\n                                              \
    \                      case _ => lst1 match {\n                              \
    \                                          case Nil => lst2\n                \
    \                                                        case _ => lst1 match\
    \ {\n                                                                        \
    \    case Nil => lst2\n                                                      \
    \                      case _ => lst1 match {\n                              \
    \                                                  case Nil => lst2\n        \
    \                                                                        case\
    \ _ => lst1 match {\n                                                        \
    \                            case Nil => lst2\n                              \
    \                                                      case _ => lst1 match {\n\
    \                                                                            \
    \            case Nil => lst2\n                                              \
    \                                          case _ => lst1 match {\n          \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                        case _ => lst1 match {\n            \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                              case _ => lst1 match {\n      \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                            case _ => lst1 match\
    \ {\n                                                                        \
    \                                case Nil => lst2\n                          \
    \                                                                            \
    \  case _ => lst1 match {\n                                                  \
    \                                                          case Nil => lst2\n\
    \                                                                            \
    \                                case _ => lst1 match {\n                    \
    \                                                                            \
    \                case Nil => lst2\n                                          \
    \                                                                      case _\
    \ => lst1 match {\n                                                          \
    \                                                          case Nil => lst2\n\
    \                                                                            \
    \                                        case _ => lst1 match {\n            \
    \                                                                            \
    \                                case Nil => lst2\n                          \
    \                                                                            \
    \                  case _ => lst1 match {\n                                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                            \
    \    case \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7dbst2ir.scala:77:128 --------------------------\e\
    [0m\e[0m\n\e[31m77 |\e[0m                                                    \
    \                                                                        \e[33mcase\e\
    [0m \n\e[31m\e[31m   |\e[0m                                                  \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m                                                   \
    \     pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7dbst2ir.scala:92:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m92 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp7dbst2ir.scala:89:5 ---------------------\e[0m\e[0m\n\
    \e[31m89 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmp7dbst2ir.scala:79:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m79 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.toList.sortWith(_ < _)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf5th8ftg.scala:25)\n\tat Problem.main(tmpf5th8ftg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst1.toSet\n        lst4.intersect(lst5).intersect(lst6).filter(x => lst3.contains(x)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpufpj58xr.scala:23:75 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        lst4.intersect(lst5).intersect(lst6).filter(\e\
    [36mx\e[0m => lst3.contains(x)).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value sorted is not a member of Set[String]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filterNot(lst1.contains)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti8y81ul.scala:26)\n\tat Problem.main(tmpti8y81ul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toList ++ lst2.toList\n\
    \        val lst4 = lst3.toSet\n        lst3.filter(x => lst4.contains(x))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtsjo7cc.scala:25)\n\tat Problem.main(tmpbtsjo7cc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrw80jhf.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7127mkfj.scala:25)\n\tat Problem.main(tmp7127mkfj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toSeq\n        val lst6\
    \ = lst3.toList\n        val lst7 = lst3.toBuffer\n        val lst8 = lst3.toMap\n\
    \        val lst9 = lst3.toSeq.sortBy(x => x)\n        val lst10 = lst3.toList.sortBy(x\
    \ => x)\n        val lst11 = lst3.toBuffer.sortBy(x => x)\n        val lst12 =\
    \ lst3.toMap.sortBy(x => x)\n        val lst13 = lst3.toSeq.sortBy(x => x).sortBy(x\
    \ => x)\n        val lst14 = lst3.toList.sortBy(x => x).sortBy(x => x)\n     \
    \   val lst15 = lst3.toBuffer.sortBy(x => x).sortBy(x => x)\n        val lst16\
    \ = lst3.toMap.sortBy(x => x).sortBy(x => x)\n        val lst17 = lst3.toSeq.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x)\n        val lst18 = lst3.toList.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x)\n        val lst19 = lst3.toBuffer.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x)\n        val lst20 = lst3.toMap.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x)\n        val lst21 = lst3.toSeq.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x)\n        val lst22 = lst3.toList.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x)\n        val lst23 = lst3.toBuffer.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x)\n        val lst24 = lst3.toMap.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x)\n        val lst25 = lst3.toSeq.sortBy(x\
    \ => x).sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x => x)\n        val\
    \ lst26 = lst3.toList.sortBy(x => x).sortBy(x => x).sortBy(x => x).sortBy(x =>\
    \ x).sortBy(x => x).sortBy(x => x)\n        val lst27 = lst3.toBuffer.sortBy(x\
    \ => x).sortBy(x => x).sortBy(\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmposatt61d.scala:43:71 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mlst27\e[0m = lst3.toBuffer.sortBy(\e\
    [36mx\e[0m => x).sortBy(\e[36mx\e[0m => x).sortBy(\n\e[31m\e[31m   |\e[0m    \
    \                                                                   ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmposatt61d.scala:24:29\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlst8\e[0m = lst3.toMap\n\e[31m\e[31m   |\e[0m         \
    \                    ^\e[0m\n\e[31m   |\e[0m                             Cannot\
    \ prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                where:    K is a type variable\n\e[31m   |\e[0m             \
    \                          V is a type variable\n\e[31m   |\e[0m             \
    \                .\n\e[31m\e[31m-- Error: /tmp/tmposatt61d.scala:28:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlst12\e[0m = lst3.toMap.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e\
    [31m   |\e[0m                              Cannot prove that String <:< (K, V)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                              where:    K is a\
    \ type variable\n\e[31m   |\e[0m                                        V is a\
    \ type variable\n\e[31m   |\e[0m                              .\n\e[31m\e[31m--\
    \ Error: /tmp/tmposatt61d.scala:32:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toMap.sortBy(\e\
    [36mx\e[0m => x).sortBy(\e[36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m            \
    \                  ^\e[0m\n\e[31m   |\e[0m                              Cannot\
    \ prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                 where:    K is a type variable\n\e[31m   |\e[0m            \
    \                            V is a type variable\n\e[31m   |\e[0m           \
    \  "
  stdout: ''
  timestamp: 1660009654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst1.filter(_\
    \ < lst2)\n        val lst6 = lst2.filter(_ < lst1)\n        val lst7 = lst1.filter(_\
    \ < lst2)\n        val lst8 = lst2.filter(_ < lst1)\n        val lst9 = lst1.filter(_\
    \ < lst2)\n        val lst10 = lst2.filter(_ < lst1)\n        val lst11 = lst1.filter(_\
    \ < lst2)\n        val lst12 = lst2.filter(_ < lst1)\n        val lst13 = lst1.filter(_\
    \ < lst2)\n        val lst14 = lst2.filter(_ < lst1)\n        val lst15 = lst1.filter(_\
    \ < lst2)\n        val lst16 = lst2.filter(_ < lst1)\n        val lst17 = lst1.filter(_\
    \ < lst2)\n        val lst18 = lst2.filter(_ < lst1)\n        val lst19 = lst1.filter(_\
    \ < lst2)\n        val lst20 = lst2.filter(_ < lst1)\n        val lst21 = lst1.filter(_\
    \ < lst2)\n        val lst22 = lst2.filter(_ < lst1)\n        val lst23 = lst1.filter(_\
    \ < lst2)\n        val lst24 = lst2.filter(_ < lst1)\n        val lst25 = lst1.filter(_\
    \ < lst2)\n        val lst26 = lst2.filter(_ < lst1)\n        val lst27 = lst1.filter(_\
    \ < lst2)\n        val lst28 = lst2.filter(_ < lst1)\n        val lst29 = lst1.filter(_\
    \ < lst2)\n        val lst30 = lst2.filter(_ < lst1)\n        val lst31 = lst1.filter(_\
    \ < lst2)\n        val lst32 = lst2.filter(_ < lst1)\n        val lst33 = lst1.filter(_\
    \ < lst2)\n        val lst34 = lst2.filter(_ < lst1)\n        val lst35 = lst1.filter(_\
    \ < lst2)\n        val lst36 = lst2.filter(_ < lst1)\n        val lst37 = lst1.filter(_\
    \ < lst2)\n        val lst38 = lst2.filter(_ < lst1)\n        val lst39 = lst1.filter(_\
    \ < lst2)\n        val lst40 = lst2.filter(_ < lst1)\n        val lst41 = lst1.filter(_\
    \ < lst2)\n        val lst42 = lst2.filter(_ < lst1)\n        val \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpoch884rm.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoch884rm.scala:19:35 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e[0m = lst1.filter(_\
    \ < lst2)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst2 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoch884rm.scala:20:35 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e[0m = lst2.filter(_\
    \ < lst1)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst1 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoch884rm.scala:21:35 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e[0m = lst1.filter(_\
    \ < lst2)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst2 : List[String])\n\
    \e[31m   |\e[0m                                   Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoch884rm.scala:22:35 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst6\e[0m = lst2.filter(_\
    \ < lst1)\n\e[31m\e[31m   |\e[0m                                   ^^^^\e[0m\n\
    \e[31m   |\e[0m                                   Found:    (lst1 : List[String])\n\
    \e[31m   |\e[0m                          "
  stdout: ''
  timestamp: 1660009656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.toSet\n  \
    \      val list2 = lst2.toSet\n        if (list1.size == list2.size) {\n     \
    \       lst1\n        } else if (list1.size > list2.size) {\n            lst2\n\
    \        } else {\n            lst1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3poqqhmn.scala:34)\n\tat Problem.main(tmp3poqqhmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst3.filter(_\
    \ < lst4)\n        lst5.headOption\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e\
    [0m = lst3.filter(_ < lst4)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst4 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd2u21ym0.scala:22:13\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst5.headOption\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mOption\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter( x =>\
    \ lst2.contains(x) )\n        val lst4 = lst2.filter( x => lst1.contains(x) )\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8v69ftoc.scala:27)\n\tat Problem.main(tmp8v69ftoc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.toList.sortWith(_ < _)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf5th8ftg.scala:25)\n\tat Problem.main(tmpf5th8ftg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.groupBy(x => x).mapValues(_.size)\n        val lst5 =\
    \ lst4.filter(_._2 > lst1.size)\n        lst5.map(_._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyh55u2fu.scala:22:16\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst5.map(_._1)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    scala.collection.View[String]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._2).map(_._1).distinct\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmt9e4smb.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._2).map(_._1).distinct\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).map { case (first,\
    \ second) =>\n            val firstChars = first.map(_.toInt)\n            val\
    \ secondChars = second.map(_.toInt)\n            if (firstChars.toSet.size ==\
    \ secondChars.toSet.size) {\n                first\n            } else {\n   \
    \             second\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpftbgjlt9.scala:32)\n\tat Problem.main(tmpftbgjlt9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.toSet ++ lst2.toSet\n\
    \        lst3.toList.sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkh7z51o.scala:24)\n\tat Problem.main(tmppkh7z51o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ ==\
    \ x) < lst2.count(_ == x))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhy5xoha.scala:26)\n\tat Problem.main(tmpuhy5xoha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst2 match {\n                case Nil =>\
    \ lst1\n                case _ => lst1 ++ lst2.filterNot(lst1.contains)\n    \
    \        }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpthinawf8.scala:29)\n\tat Problem.main(tmpthinawf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009657
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.map(x =>\
    \ (x, 1)).toMap\n        val lst2Map = lst2.map(x => (x, 1)).toMap\n        val\
    \ lst3Map = lst1.map(x => (x, 1)).toMap\n        val lst4Map = lst2.map(x => (x,\
    \ 1)).toMap\n        val lst5Map = lst1.map(x => (x, 1)).toMap\n        val lst6Map\
    \ = lst2.map(x => (x, 1)).toMap\n        val lst7Map = lst1.map(x => (x, 1)).toMap\n\
    \        val lst8Map = lst2.map(x => (x, 1)).toMap\n        val lst9Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst10Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst11Map = lst1.map(x => (x, 1)).toMap\n        val lst12Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst13Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst14Map = lst2.map(x => (x, 1)).toMap\n        val lst15Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst16Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst17Map = lst1.map(x => (x, 1)).toMap\n        val lst18Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst19Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst20Map = lst2.map(x => (x, 1)).toMap\n        val lst21Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst22Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst23Map = lst1.map(x => (x, 1)).toMap\n        val lst24Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst25Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst26Map = lst2.map(x => (x, 1)).toMap\n        val lst27Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst28Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val lst29Map = lst1.map(x => (x, 1)).toMap\n        val lst30Map = lst2.map(x\
    \ => (x, 1)).toMap\n        val lst31Map = lst1.map(x => (x, 1)).toMap\n     \
    \   val lst32Map = lst2.map(x => (x, 1)).toMap\n        val lst33Map = lst1.map(x\
    \ => (x, 1)).toMap\n        val lst34Map = lst2.map(x => (x, 1)).toMap\n     \
    \   val \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsa0ulp8_.scala:53:11 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa0ulp8_.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7127mkfj.scala:25)\n\tat Problem.main(tmp7127mkfj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArrayBuffer\n\
    \        val lst11 = lst3.toListIterator\n        val lst12 = lst3.toListStream\n\
    \        val lst13 = lst3.toSetBuffer\n        val lst14 = lst3.toSetBuffer\n\
    \        val lst15 = lst3.toSetIterator\n        val lst16 = lst3.toSetStream\n\
    \        val lst17 = lst3.toMap\n        val lst18 = lst3.toMap\n        val lst19\
    \ = lst3.toMapIterator\n        val lst20 = lst3.toMapStream\n        val lst21\
    \ = lst3.toSetBuffer\n        val lst22 = lst3.toSetBuffer\n        val lst23\
    \ = lst3.toSetIterator\n        val lst24 = lst3.toSetStream\n        val lst25\
    \ = lst3.toSeq\n        val lst26 = lst3.toSeq\n        val lst27 = lst3.toSeq\n\
    \        val lst28 = lst3.toSeq\n        val lst29 = lst3.toSeq\n        val lst30\
    \ = lst3.toSeq\n        val lst31 = lst3.toSeq\n        val lst32 = lst3.toSeq\n\
    \        val lst33 = lst3.toSeq\n        val lst34 = lst3.toSeq\n        val lst35\
    \ = lst3.toSeq\n        val lst36 = lst3.toSeq\n        val lst37 = lst3.toSeq\n\
    \        val lst38 = lst3.toSeq\n        val lst39 = lst3.toSeq\n        val lst40\
    \ = lst3.toSeq\n        val lst41 = lst3.toSeq\n        val lst42 = lst3.toSeq\n\
    \        val lst43 = lst3.toSeq\n        val lst44 = lst3.toSeq\n        val lst45\
    \ = lst3.toSeq\n        val lst46 = lst3.toSeq\n        val lst47 = lst3.toSeq\n\
    \        val lst48 = lst3.toSeq\n        val lst49 = lst3.toSeq\n        val lst50\
    \ = lst3.toSeq\n        val lst51 = lst3.toSeq\n        val lst52 = lst3.toSeq\n\
    \        val lst53 = lst3.to\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mlst9\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                   value toListBuffer is not a member of List[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:26:25 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mlst10\e[0m = lst3.toArrayBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toArrayBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:27:25 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mlst11\e[0m = lst3.toListIterator\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListIterator is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:28:25 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mlst12\e[0m = lst3.toListStream\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListStream is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:29:25 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlst13\e[0m = lst3.toSetBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSetBuffer is not a member of List[String] - did you mean lst3.toBuffer?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:30:25 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mlst14\e[0m = lst3.toSetBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toSetBuffer is not a member of List[String] - did you mean lst3.toBuffer?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp_abhtov0.scala:31:25 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mlst15\e[0m = lst3.t"
  stdout: ''
  timestamp: 1660009659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val list1 = lst1.toSet\n  \
    \      val list2 = lst2.toSet\n        if(list1.size == list2.size) {\n      \
    \      lst1\n        }\n        else {\n            lst2\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsklkcm9m.scala:31)\n\tat Problem.main(tmpsklkcm9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1.length\
    \ < _._2.length).map(_._1)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgx5c9soj.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1.length < _._2.length).map(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        lst3.length <= lst4.length\
    \ ? lst3 : lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkamwq0z.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lst3.length <= lst4.length ? lst3 : \e[35mlst4\e\
    [0m\n\e[31m\e[31m   |\e[0m                                            ^^^^\e[0m\n\
    \e[31m   |\e[0m                                            Not found: type lst4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdkamwq0z.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst3.length <= lst4.length\
    \ ? lst3 : \e[35mlst4\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value ? is not a member of Int\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        lst4.intersect(lst5).map(x\
    \ => lst1.filter(_ != x))\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8dk39tws.scala:22:32\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        lst4.intersect(lst5).map(\e\
    [36mx\e[0m => lst1.filter(_ != x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mSet\e[0m\e[1m\e[31m[\e[0mList[String\e\
    [1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter( x =>\
    \ lst2.contains(x))\n        val lst4 = lst2.filter( x => lst1.contains(x))\n\
    \        if(lst3.size == lst4.size) lst3\n        else lst4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxn2ajq_j.scala:27)\n\tat Problem.main(tmpxn2ajq_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if(lst3.size == lst4.size)\
    \ lst3 else lst4\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy0knq3pp.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst3.toList\n        val lst6\
    \ = lst3.toSeq\n        val lst7 = lst3.toIterator\n        val lst8 = lst3.toStream\n\
    \        val lst9 = lst3.toListBuffer\n        val lst10 = lst3.toArray\n    \
    \    val lst11 = lst3.toBuffer\n        val lst12 = lst3.toList\n        val lst13\
    \ = lst3.toSeq\n        val lst14 = lst3.toIterator\n        val lst15 = lst3.toStream\n\
    \        val lst16 = lst3.toListBuffer\n        val lst17 = lst3.toArray\n   \
    \     val lst18 = lst3.toBuffer\n        val lst19 = lst3.toList\n        val\
    \ lst20 = lst3.toSeq\n        val lst21 = lst3.toIterator\n        val lst22 =\
    \ lst3.toStream\n        val lst23 = lst3.toListBuffer\n        val lst24 = lst3.toArray\n\
    \        val lst25 = lst3.toBuffer\n        val lst26 = lst3.toList\n        val\
    \ lst27 = lst3.toSeq\n        val lst28 = lst3.toIterator\n        val lst29 =\
    \ lst3.toStream\n        val lst30 = lst3.toListBuffer\n        val lst31 = lst3.toArray\n\
    \        val lst32 = lst3.toBuffer\n        val lst33 = lst3.toList\n        val\
    \ lst34 = lst3.toSeq\n        val lst35 = lst3.toIterator\n        val lst36 =\
    \ lst3.toStream\n        val lst37 = lst3.toListBuffer\n        val lst38 = lst3.toArray\n\
    \        val lst39 = lst3.toBuffer\n        val lst40 = lst3.toList\n        val\
    \ lst41 = lst3.toSeq\n        val lst42 = lst3.toIterator\n        val lst43 =\
    \ lst3.toStream\n        val lst44 = lst3.toListBuffer\n        val lst45 = lst3.toArray\n\
    \        val lst46 = lst3.toBuffer\n        val lst47 = lst3.toList\n        val\
    \ lst48 = lst3.toSeq\n        val lst49 = lst3.toIterator\n        val lst50 =\
    \ lst3.toStream\n        val lst51 = lst3.toListBuffer\n        val lst52 = lst3.toArray\n\
    \        val lst53 = lst3.toBuffer\n        val lst54\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfput3kr.scala:71:4 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:25:24\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mlst9\e[0m = lst3.toListBuffer\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value toListBuffer is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:32:25 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mlst16\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:39:25 ------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mlst23\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:46:25 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mlst30\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:53:25 ------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mlst37\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxfput3kr.scala:60:25 ------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \e[36mlst44\e[0m = lst3.toListBuffer\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toListBuffer is not a member of L"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.length).map(lst3.indexOf(_)).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkivakt7l.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.length).map(lst3.indexOf(_)).toList\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    Int\n\e[31m   |\e[0m                      \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Size = lst1.size\n\
    \        val lst2Size = lst2.size\n        val lst3Size = lst1.size + lst2.size\n\
    \        val lst3Chars = lst3.map(_.length).sum\n        val lst3CharsDiff = lst3Chars\
    \ - lst1Size + lst2Size\n        val lst3CharsDiff2 = lst3CharsDiff - lst1Size\
    \ - lst2Size\n        val lst3CharsDiff3 = lst3CharsDiff - lst1Size + lst2Size\n\
    \        val lst3CharsDiff4 = lst3CharsDiff - lst1Size - lst2Size\n        val\
    \ lst3CharsDiff5 = lst3CharsDiff - lst1Size + lst2Size\n        val lst3CharsDiff6\
    \ = lst3CharsDiff - lst1Size - lst2Size\n        val lst3CharsDiff7 = lst3CharsDiff\
    \ - lst1Size + lst2Size\n        val lst3CharsDiff8 = lst3CharsDiff - lst1Size\
    \ - lst2Size\n        val lst3CharsDiff9 = lst3CharsDiff - lst1Size + lst2Size\n\
    \        val lst3CharsDiff10 = lst3CharsDiff - lst1Size - lst2Size\n        val\
    \ lst3CharsDiff11 = lst3CharsDiff - lst1Size + lst2Size\n        val lst3CharsDiff12\
    \ = lst3CharsDiff - lst1Size - lst2Size\n        val lst3CharsDiff13 = lst3CharsDiff\
    \ - lst1Size + lst2Size\n        val lst3CharsDiff14 = lst3CharsDiff - lst1Size\
    \ - lst2Size\n        val lst3CharsDiff15 = lst3CharsDiff - lst1Size + lst2Size\n\
    \        val lst3CharsDiff16 = lst3CharsDiff - lst1Size - lst2Size\n        val\
    \ lst3CharsDiff17 = lst3CharsDiff - lst1Size + lst2Size\n        val lst3CharsDiff18\
    \ = lst3CharsDiff - lst1Size - lst2Size\n        val lst3CharsDiff19 = lst3CharsDiff\
    \ - lst1Size + lst2Size\n        val lst3CharsDiff20 = lst3CharsDiff - lst1Size\
    \ - lst2Size\n        val lst3CharsDiff21 = lst3CharsDiff - lst1Size + lst2Size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpooqm3g4t.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst3Chars\e[0m = lst3.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                        ^^^^\e[0m\n\e[31m   |\e[0m      \
    \                  Not found: lst3\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpooqm3g4t.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        val lst5 = lst3.filter(_\
    \ < lst4)\n        val lst6 = lst4.filter(_ < lst3)\n        val lst7 = lst5.filter(_\
    \ < lst6)\n        val lst8 = lst6.filter(_ < lst5)\n        val lst9 = lst7.filter(_\
    \ < lst8)\n        val lst10 = lst8.filter(_ < lst7)\n        val lst11 = lst9.filter(_\
    \ < lst10)\n        val lst12 = lst10.filter(_ < lst9)\n        val lst13 = lst11.filter(_\
    \ < lst12)\n        val lst14 = lst12.filter(_ < lst11)\n        val lst15 = lst13.filter(_\
    \ < lst14)\n        val lst16 = lst14.filter(_ < lst13)\n        val lst17 = lst15.filter(_\
    \ < lst16)\n        val lst18 = lst16.filter(_ < lst15)\n        val lst19 = lst17.filter(_\
    \ < lst18)\n        val lst20 = lst18.filter(_ < lst17)\n        val lst21 = lst19.filter(_\
    \ < lst20)\n        val lst22 = lst20.filter(_ < lst19)\n        val lst23 = lst21.filter(_\
    \ < lst22)\n        val lst24 = lst22.filter(_ < lst21)\n        val lst25 = lst23.filter(_\
    \ < lst24)\n        val lst26 = lst24.filter(_ < lst23)\n        val lst27 = lst25.filter(_\
    \ < lst26)\n        val lst28 = lst26.filter(_ < lst25)\n        val lst29 = lst27.filter(_\
    \ < lst28)\n        val lst30 = lst28.filter(_ < lst27)\n        val lst31 = lst29.filter(_\
    \ < lst30)\n        val lst32 = lst30.filter(_ < lst29)\n        val lst33 = lst31.filter(_\
    \ < lst32)\n        val lst34 = lst32.filter(_ < lst31)\n        val lst35 = lst33.filter(_\
    \ < lst34)\n        val lst36 = lst34.filter(_ < lst33)\n        val lst37 = lst35.filter(_\
    \ < lst36)\n        val lst38 = lst36.filter(_ < lst35)\n        val lst39 = lst37.filter(_\
    \ < lst38)\n        val lst40 = lst38.filter(_ < lst37)\n        val lst41 = lst39.filter(_\
    \ < lst40)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:21:35\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mlst5\e\
    [0m = lst3.filter(_ < lst4)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst4 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:22:35\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlst6\e\
    [0m = lst4.filter(_ < lst3)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst3 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_awhzbyq.scala:23:35\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mlst7\e\
    [0m = lst5.filter(_ < lst6)\n\e[31m\e[31m   "
  stdout: ''
  timestamp: 1660009642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst1.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9tay9v5k.scala:28)\n\tat Problem.main(tmp9tay9v5k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2.filter(x => lst1.count(_ < x)\
    \ < lst2.count(_ < x))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwgqswbhi.scala:26)\n\tat Problem.main(tmpwgqswbhi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst1\n        else lst3.head :: totalMatch(lst3.tail,\
    \ lst2)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4741aj1c.scala:25)\n\tat Problem.main(tmp4741aj1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        val lst4 = lst2.filterNot(lst1.contains)\n        val lst5 = lst3.filterNot(lst4.contains)\n\
    \        val lst6 = lst4.filterNot(lst3.contains)\n        val lst7 = lst5.filterNot(lst6.contains)\n\
    \        val lst8 = lst6.filterNot(lst5.contains)\n        val lst9 = lst7.filterNot(lst8.contains)\n\
    \        val lst10 = lst8.filterNot(lst7.contains)\n        val lst11 = lst9.filterNot(lst10.contains)\n\
    \        val lst12 = lst10.filterNot(lst9.contains)\n        val lst13 = lst11.filterNot(lst12.contains)\n\
    \        val lst14 = lst12.filterNot(lst11.contains)\n        val lst15 = lst13.filterNot(lst14.contains)\n\
    \        val lst16 = lst14.filterNot(lst13.contains)\n        val lst17 = lst15.filterNot(lst16.contains)\n\
    \        val lst18 = lst16.filterNot(lst15.contains)\n        val lst19 = lst17.filterNot(lst18.contains)\n\
    \        val lst20 = lst18.filterNot(lst17.contains)\n        val lst21 = lst19.filterNot(lst20.contains)\n\
    \        val lst22 = lst20.filterNot(lst19.contains)\n        val lst23 = lst21.filterNot(lst22.contains)\n\
    \        val lst24 = lst22.filterNot(lst21.contains)\n        val lst25 = lst23.filterNot(lst24.contains)\n\
    \        val lst26 = lst24.filterNot(lst23.contains)\n        val lst27 = lst25.filterNot(lst26.contains)\n\
    \        val lst28 = lst26.filterNot(lst25.contains)\n        val lst29 = lst27.filterNot(lst28.contains)\n\
    \        val lst30 = lst28.filterNot(lst27.contains)\n        val lst31 = lst29.filterNot(lst30.contains)\n\
    \        val lst32 = lst30.filterNot(lst29.contains)\n        val lst33 = lst31.filterNot(lst32.contains)\n\
    \        val lst34 = lst32.filterNot(lst31.contains)\n        val lst35 = lst33.filterNot(lst34.contains)\n\
    \        val lst36 = lst34.filterNot(lst33.contains)\n        val lst37 = lst35.filterNot(lst36.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcemt0_jn.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcemt0_jn.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        lst4.filter(_ < lst3.size)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnjoww7lz.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        lst4.filter(_ < lst3.size)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                       Found:    Int\n\e[31m   |\e[0m                       \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1 ++ lst2\n \
    \       val lst4 = lst3.toSet\n        val lst5 = lst2.toSet\n        val lst6\
    \ = lst1.toSet\n        val lst7 = lst1.toSet ++ lst2\n        val lst8 = lst1.toSet\
    \ ++ lst2\n        val lst9 = lst1.toSet ++ lst2\n        val lst10 = lst1.toSet\
    \ ++ lst2\n        val lst11 = lst1.toSet ++ lst2\n        val lst12 = lst1.toSet\
    \ ++ lst2\n        val lst13 = lst1.toSet ++ lst2\n        val lst14 = lst1.toSet\
    \ ++ lst2\n        val lst15 = lst1.toSet ++ lst2\n        val lst16 = lst1.toSet\
    \ ++ lst2\n        val lst17 = lst1.toSet ++ lst2\n        val lst18 = lst1.toSet\
    \ ++ lst2\n        val lst19 = lst1.toSet ++ lst2\n        val lst20 = lst1.toSet\
    \ ++ lst2\n        val lst21 = lst1.toSet ++ lst2\n        val lst22 = lst1.toSet\
    \ ++ lst2\n        val lst23 = lst1.toSet ++ lst2\n        val lst24 = lst1.toSet\
    \ ++ lst2\n        val lst25 = lst1.toSet ++ lst2\n        val lst26 = lst1.toSet\
    \ ++ lst2\n        val lst27 = lst1.toSet ++ lst2\n        val lst28 = lst1.toSet\
    \ ++ lst2\n        val lst29 = lst1.toSet ++ lst2\n        val lst30 = lst1.toSet\
    \ ++ lst2\n        val lst31 = lst1.toSet ++ lst2\n        val lst32 = lst1.toSet\
    \ ++ lst2\n        val lst33 = lst1.toSet ++ lst2\n        val lst34 = lst1.toSet\
    \ ++ lst2\n        val lst35 = lst1.toSet ++ lst2\n        val lst36 = lst1.toSet\
    \ ++ lst2\n        val lst37 = lst1.toSet ++ lst2\n        val lst38 = lst1.toSet\
    \ ++ lst2\n        val lst39 = lst1.toSet ++ lst2\n        val lst40 = lst1.toSet\
    \ ++ lst2\n        val lst41 = lst1.toSet ++ lst2\n        val lst42 = lst1.toSet\
    \ ++ lst2\n        val lst43 = lst1.toSet ++ lst2\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmdlmz5tb.scala:61:5\
    \ ---------------------\e[0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst1Map = lst1.toMap\n\
    \        val lst2Map = lst2.toMap\n        val lst3Map = lst1.toMap\n        val\
    \ lst4Map = lst2.toMap\n        val lst5Map = lst1.toMap\n        val lst6Map\
    \ = lst2.toMap\n        val lst7Map = lst1.toMap\n        val lst8Map = lst2.toMap\n\
    \        val lst9Map = lst1.toMap\n        val lst10Map = lst2.toMap\n       \
    \ val lst11Map = lst1.toMap\n        val lst12Map = lst2.toMap\n        val lst13Map\
    \ = lst1.toMap\n        val lst14Map = lst2.toMap\n        val lst15Map = lst1.toMap\n\
    \        val lst16Map = lst2.toMap\n        val lst17Map = lst1.toMap\n      \
    \  val lst18Map = lst2.toMap\n        val lst19Map = lst1.toMap\n        val lst20Map\
    \ = lst2.toMap\n        val lst21Map = lst1.toMap\n        val lst22Map = lst2.toMap\n\
    \        val lst23Map = lst1.toMap\n        val lst24Map = lst2.toMap\n      \
    \  val lst25Map = lst1.toMap\n        val lst26Map = lst2.toMap\n        val lst27Map\
    \ = lst1.toMap\n        val lst28Map = lst2.toMap\n        val lst29Map = lst1.toMap\n\
    \        val lst30Map = lst2.toMap\n        val lst31Map = lst1.toMap\n      \
    \  val lst32Map = lst2.toMap\n        val lst33Map = lst1.toMap\n        val lst34Map\
    \ = lst2.toMap\n        val lst35Map = lst1.toMap\n        val lst36Map = lst2.toMap\n\
    \        val lst37Map = lst1.toMap\n        val lst38Map = lst2.toMap\n      \
    \  val lst39Map = lst1.toMap\n        val lst40Map = lst2.toMap\n        val lst41Map\
    \ = lst1.toMap\n        val lst42Map = lst2.toMap\n        val lst43Map = lst1.toMap\n\
    \        val lst44Map = lst2.toMap\n        val lst45Map = lst1.toMap\n      \
    \  val lst46Map = lst2.toMap\n        val lst47Map = lst1.toMap\n        val lst48Map\
    \ = lst2.toMap\n        val lst49Map = lst1.toMap\n        val lst50Map = lst2.toMap\n\
    \        val lst51Map = lst1.toMap\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgslbkic2.scala:70:11 ---------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:19:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst1Map\e[0m = lst1.toMap\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               Cannot prove that String <:< (K, V)\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m                                where:    K is a type\
    \ variable\n\e[31m   |\e[0m                                          V is a type\
    \ variable\n\e[31m   |\e[0m                                .\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpgslbkic2.scala:20:32 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst2Map\e[0m = lst2.toMap\n\e\
    [31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m   \
    \                             Cannot prove that String <:< (K, V)\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                where:    K is a type variable\n\
    \e[31m   |\e[0m                                          V is a type variable\n\
    \e[31m   |\e[0m                                .\n\e[31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:21:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlst3Map\e[0m = lst1.toMap\n\e[31m\e[31m   |\e[0m      \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \     Cannot prove that String <:< (K, V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m  \
    \                              where:    K is a type variable\n\e[31m   |\e[0m\
    \                                          V is a type variable\n\e[31m   |\e\
    [0m                                .\n\e[31m\e[31m-- Error: /tmp/tmpgslbkic2.scala:22:32\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ \e[33mval\e[0m \e[36mlst4Map\e[0m = lst2.toMap\n\e[31m\e[31m   |\e[0m      \
    \                        "
  stdout: ''
  timestamp: 1660009629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).map {\n    \
    \        case (lst1Item, lst2Item) => lst1Item.count(lst2Item)\n        }.maxBy(_\
    \ > 0).getOrElse(lst1)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl_5w2kc_.scala:20:56\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (lst1Item,\
    \ lst2Item) => lst1Item.count(lst2Item)\n\e[31m\e[31m   |\e[0m               \
    \                                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                      Found:    (lst2Item : String)\n\e[31m \
    \  |\e[0m                                           Required: Char => Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filter(_ <\
    \ lst2)\n        val lst4 = lst2.filter(_ < lst1)\n        if (lst3.size == lst4.size)\
    \ {\n            lst3\n        } else {\n            lst4\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlst3\e\
    [0m = lst1.filter(_ < lst2)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst2 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7pyhktko.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlst4\e\
    [0m = lst2.filter(_ < lst1)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^\e[0m\n\e[31m   |\e[0m                                   Found: \
    \   (lst1 : List[String])\n\e[31m   |\e[0m                                   Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.isEmpty) lst1\n        else lst3\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp71qxpys4.scala:25)\n\tat Problem.main(tmp71qxpys4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if(lst3.size == lst2.size) {\n            lst3\n        } else {\n  \
    \          lst1\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprwxutnud.scala:28)\n\tat Problem.main(tmprwxutnud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1.zip(lst2).filter(_._1\
    \ < _._1).map(_._2)\n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdrw80jhf.scala:19:32 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst1.zip(lst2).filter(_._1 < _._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value _1 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        val lst3 = lst1.filterNot(lst2.contains)\n\
    \        if (lst3.size == lst2.size) {\n            lst3\n        } else {\n \
    \           lst1\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(totalMatch((List[String]()), (List[String]())).equals((List[String]())));\n\
    \    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\"\
    , \"hi\"))).equals((List[String](\"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"\
    hi\", \"admin\"))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsfnmcde.scala:28)\n\tat Problem.main(tmpbsfnmcde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts two lists of strings and returns the\
    \ list that has \n    // total number of chars in the all strings of the list\
    \ less than the other list.\n    // if the two lists have the same number of chars,\
    \ return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\"\
    , \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"\
    ))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    //\
    \ >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"\
    4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String],\
    \ lst2 : List[String]) : List[String] = {\n        lst1 match {\n            case\
    \ Nil => lst2\n            case _ => lst1 ++ lst2 match {\n                case\
    \ Nil => lst2\n                case _ => lst1 ++ lst2 match {\n              \
    \      case Nil => lst2\n                    case _ => lst1 ++ lst2 match {\n\
    \                        case Nil => lst2\n                        case _ => lst1\
    \ ++ lst2 match {\n                            case Nil => lst2\n            \
    \                case _ => lst1 ++ lst2 match {\n                            \
    \    case Nil => lst2\n                                case _ => lst1 ++ lst2\
    \ match {\n                                    case Nil => lst2\n            \
    \                        case _ => lst1 ++ lst2 match {\n                    \
    \                    case Nil => lst2\n                                      \
    \  case _ => lst1 ++ lst2 match {\n                                          \
    \  case Nil => lst2\n                                            case _ => lst1\
    \ ++ lst2 match {\n                                                case Nil =>\
    \ lst2\n                                                case _ => lst1 ++ lst2\
    \ match {\n                                                    case Nil => lst2\n\
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                        case Nil => lst2\n\
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                            case Nil\
    \ => lst2\n                                                            case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \              case Nil => lst2\n                                            \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                            case Nil => lst2\n              \
    \                                                      case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \      case Nil => lst2\n                                                    \
    \                    case _ => lst1 ++ lst2 match {\n                        \
    \                                                    case Nil => lst2\n      \
    \                                                                      case _\
    \ => lst1 ++ lst2 match {\n                                                  \
    \                              case Nil => lst2\n                            \
    \                                                    case _ => lst1 ++ lst2 match\
    \ {\n                                                                        \
    \            case Nil => lst2\n                                              \
    \                                      case _ => lst1 ++ lst2 match {\n      \
    \                                                                            \
    \      case Nil => lst2\n                                                    \
    \                                    case _ => lst1 ++ lst2 match {\n        \
    \                                                                            \
    \        case Nil => lst2\n                                                  \
    \                                          case _ => lst1 ++ lst2 match {\n  \
    \                                                                            \
    \                  case Nil => lst2\n                                        \
    \                                                        case _ => lst1 ++ lst2\
    \ match {\n                                                                  \
    \                                  case Nil => lst2\n                        \
    \                                                                            case\
    \ _ => lst1 ++ lst2 match {\n                                                \
    \                                                        case Nil => lst2\n  \
    \                                                                            \
    \                          case _ => lst1 ++ lst2 match {\n                  \
    \                                                                            \
    \              case Nil => lst2\n                                            \
    \                                                                case _ => lst1\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
    \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\"\
    , \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"\
    ))));\n    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\"\
    , \"3\", \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\"\
    , \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n   \
    \ assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"\
    hi\", \"hii\"))).equals((List[String](\"hi\", \"admin\"))));\n    assert(totalMatch((List[String]()),\
    \ (List[String](\"this\"))).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
    this\")), (List[String]())).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb4ww46bb.scala:84:0 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb4ww46bb.scala:81:5\
    \ ---------------------\e[0m\e[0m\n\e[31m81 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpb4ww46bb.scala:71:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800030
