language: scala
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        (x == (x + y) && x == (x + z) && x == (y + z)) || (x == (x - y) && x\
    \ == (x - z) && x == (y - z))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwanoxost.scala:20)\n\tat Problem.main(tmpwanoxost.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum.toInt == sum\n     \
    \   val isSum = x + y == sum\n        val isAllInteger = isInteger && isSum\n\
    \        isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmv_dsv3p.scala:24)\n\tat Problem.main(tmpmv_dsv3p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum.toInt == sum\n     \
    \   val isSum = x + y + z == sum\n        val isEqual = x + y + z == sum\n   \
    \     val isEqual2 = x + y == sum\n        val isEqual3 = x + z == sum\n     \
    \   val isEqual4 = x + y == z\n        val isEqual5 = x + z == y\n        val\
    \ isEqual6 = x + y == z\n        val isEqual7 = x + z == y\n        val isEqual8\
    \ = x + y == z\n        val isEqual9 = x + z == y\n        val isEqual10 = x +\
    \ y == z\n        val isEqual11 = x + z == y\n        val isEqual12 = x + y ==\
    \ z\n        val isEqual13 = x + z == y\n        val isEqual14 = x + y == z\n\
    \        val isEqual15 = x + z == y\n        val isEqual16 = x + y == z\n    \
    \    val isEqual17 = x + z == y\n        val isEqual18 = x + y == z\n        val\
    \ isEqual19 = x + z == y\n        val isEqual20 = x + y == z\n        val isEqual21\
    \ = x + z == y\n        val isEqual22 = x + y == z\n        val isEqual23 = x\
    \ + z == y\n        val isEqual24 = x + y == z\n        val isEqual25 = x + z\
    \ == y\n        val isEqual26 = x + y == z\n        val isEqual27 = x + z == y\n\
    \        val isEqual28 = x + y == z\n        val isEqual29 = x + z == y\n    \
    \    val isEqual30 = x + y == z\n        val isEqual31 = x + z == y\n        val\
    \ isEqual32 = x + y == z\n        val isEqual33 = x + z == y\n        val isEqual34\
    \ = x + y == z\n        val isEqual35 = x + z == y\n        val isEqual36 = x\
    \ + y == z\n        val isEqual37 = x + z == y\n        val isEqual38 = x + y\
    \ == z\n        val isEqual39 = x + z == y\n        val isEqual40 = x + y == z\n\
    \        val isEqual41 = x + z == y\n        val isEqual42 = x + y == z\n    \
    \    val isEqual43 = x + z == y\n        val isEqual44 = x + y == z\n        val\
    \ isEqual45 = x + z == y\n        val isEqual46 = x + y == z\n        val isEqual47\
    \ = x + z == y\n\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpslde28tx.scala:68:5\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = (sum % 1) == 0\n       \
    \ val isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi0pwb06.scala:24)\n\tat Problem.main(tmpxi0pwb06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = (sum.toInt % 1 == 0)\n \
    \       val isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n\
    \        isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpkxeyrh.scala:24)\n\tat Problem.main(tmpdpkxeyrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = (sum % 1) == 0\n       \
    \ val isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      isAllInteger\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi0pwb06.scala:24)\n\tat Problem.main(tmpxi0pwb06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val xs = List(x, y, z)\n        val ys = xs.map(_.toInt)\n        val\
    \ zs = xs.map(_.toInt)\n        val sum = xs.sum\n        val xIsInt = xs.forall(_.toInt\
    \ % 1 == 0)\n        val yIsInt = ys.forall(_.toInt % 1 == 0)\n        val zIsInt\
    \ = zs.forall(_.toInt % 1 == 0)\n        val sum = sum.toInt\n        (xIsInt\
    \ && yIsInt && zIsInt) || (sum == xs.sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_8_xx_lm.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = sum.toInt\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = (sum.toInt)\n        val\
    \ isEqual = sum == (x + y + z)\n        val isEqualInt = isInteger && isEqual\n\
    \        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble =\
    \ isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n      \
    \  val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = isInteger && isEqual\n        val isEqualFloat = isInteger && isEqual\n  \
    \      val isEqualDouble = isInteger && isEqual\n        val isEqualInt = isInteger\
    \ && isEqual\n        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble\
    \ = isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n    \
    \    val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = isInteger && isEqual\n        val isEqualFloat = isInteger && isEqual\n  \
    \      val isEqualDouble = isInteger && isEqual\n        val isEqualInt = isInteger\
    \ && isEqual\n        val isEqualFloat = isInteger && isEqual\n        val isEqualDouble\
    \ = isInteger && isEqual\n        val isEqualInt = isInteger && isEqual\n    \
    \    val isEqualFloat = isInteger && isEqual\n        val isEqualDouble = isInteger\
    \ && isEqual\n        val isEqualInt = isInteger && isEqual\n        val isEqualFloat\
    \ = isInteger && isEqual\n        val isEqualDouble = isInteger && isEqual\n \
    \       val isEqualInt = isInteger && isEqual\n        val isEqualFloat = isInteger\
    \ && isEqual\n        val isEqualDouble = isInteger && isEqual\n        val isEqualInt\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1a1losxl.scala:62:24 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mval\e[0m \e[36misEqualInt\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp1a1losxl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misEqualInt\e[0m = isInteger\
    \ && isEqual\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0misEqualInt is already defined as \e[33mvalue\e[0m \e[35misEqualInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1a1losxl.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36misEqualFloat\e[0m = isInteger && isEqual\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misEqualFloat is already defined as \e[33mvalue\e[0m \e[35misEqualFloat\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1a1losxl.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misEqualDouble\e[0m = isInteger && isEqual\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0misEqualDouble is already defined as \e[33mvalue\e[0m \e[35misEqualDouble\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1a1losxl.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misEqualInt\e[0m = isInteger && isEqual\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0misEqualInt is already defined as \e[33mvalue\e[0m \e[35misEqualInt\e\
    [0m\n\e["
  stdout: ''
  timestamp: 1659794326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = (x + y + z).toInt\n        val isSum = (sum == (x + y + z).toInt)\n\
    \        val isInteger = (x.toInt == x.toInt && y.toInt == y.toInt && z.toInt\
    \ == z.toInt)\n        val isEqual = sum == (x + y + z)\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\
    \ = isEqual || isSum\n        val isEqualOrInteger = isEqual || isInteger\n  \
    \      val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger = isEqual\
    \ || isInteger\n        val isEqualOrSum = isEqual || isSum\n        val isEqualOrInteger\
    \ = isEqual || isInteger\n        val isEqualOrSum = isEqual || isSum\n      \
    \  val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum = isEqual\
    \ || isSum\n        val isEqualOrInteger = isEqual || isInteger\n        val isEqualOrSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_qps38p5.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_qps38p5.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36misEqualOrInteger\e[0m = isEqual || isInteger\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0misEqualOrInteger\
    \ is already defined as \e[33mvalue\e[0m \e[35misEqualOrInteger\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_qps38p5.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36misEqualOrSum\e[0m = isEqual || isSum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0misEqualOrSum is already defined as \e[33mvalue\e[0m \e[35misEqualOrSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qps38p5.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36misEqualOrInteger\e[0m = isEqual || isInteger\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0misEqualOrInteger is already defined as \e[33mvalue\e[0m \e[35misEqualOrInteger\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_qps38p5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36misEqualOrSum\e[0m = isEqual || isSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0misEqualOrSum is already defined as \e[33mvalue\e[0m \e[35misEqualOrSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tm"
  stdout: ''
  timestamp: 1659794326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum % 1 == 0\n        val\
    \ isSum = sum == x + y + z\n        val isEqual = sum == x + y\n        val isEqual2\
    \ = sum == x + z\n        val isEqual3 = sum == x + y + z\n        val isEqual4\
    \ = sum == x + y + z\n        val isEqual5 = sum == x + y + z\n        val isEqual6\
    \ = sum == x + y + z\n        val isEqual7 = sum == x + y + z\n        val isEqual8\
    \ = sum == x + y + z\n        val isEqual9 = sum == x + y + z\n        val isEqual10\
    \ = sum == x + y + z\n        val isEqual11 = sum == x + y + z\n        val isEqual12\
    \ = sum == x + y + z\n        val isEqual13 = sum == x + y + z\n        val isEqual14\
    \ = sum == x + y + z\n        val isEqual15 = sum == x + y + z\n        val isEqual16\
    \ = sum == x + y + z\n        val isEqual17 = sum == x + y + z\n        val isEqual18\
    \ = sum == x + y + z\n        val isEqual19 = sum == x + y + z\n        val isEqual20\
    \ = sum == x + y + z\n        val isEqual21 = sum == x + y + z\n        val isEqual22\
    \ = sum == x + y + z\n        val isEqual23 = sum == x + y + z\n        val isEqual24\
    \ = sum == x + y + z\n        val isEqual25 = sum == x + y + z\n        val isEqual26\
    \ = sum == x + y + z\n        val isEqual27 = sum == x + y + z\n        val isEqual28\
    \ = sum == x + y + z\n        val isEqual29 = sum == x + y + z\n        val isEqual30\
    \ = sum == x + y + z\n        val isEqual31 = sum == x + y + z\n        val isEqual32\
    \ = sum == x + y + z\n        val isEqual33 = sum == x + y + z\n        val isEqual34\
    \ = sum == x + y + z\n        val isEqual35 = sum == x + y + z\n        val isEqual36\
    \ = sum == x + y + z\n        val isEqual37 = sum == x + y + z\n        val isEqual38\
    \ = sum == x + y + z\n        val isEqual39 = sum == x + y + z\n        val isEqual40\
    \ = sum == x + y + z\n        val isEqual41 = sum == x + y + z\n        val isEqual42\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l,\
    \ 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu96krysl.scala:61:23 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36misEqual42\e[0m = \n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpu96krysl.scala:62:5 ---------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum.toString.toInt\n   \
    \     val isEqual = sum == isInteger\n        val isInt = isInteger.toString.toInt\n\
    \        isEqual && isInt\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnnfsd3du.scala:21:19\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        isEqual && isInt\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m            \
    \       Found:    (isInt : Int)\n\e[31m   |\e[0m                   Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInt = sum.asInstanceOf[Int] == sum\n\
    \        val isInteger = isInt && sum.asInstanceOf[Int].toDouble == sum\n    \
    \    val isFloat = sum.asInstanceOf[Float] == sum\n        isInt || isInteger\
    \ || isFloat\n    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l,\
    \ 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuat3fjy.scala:25)\n\tat Problem.main(tmpsuat3fjy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val xSum = x + y\n        val ySum = y + z\n        val zSum = z + x\n\
    \        xSum == zSum || ySum == zSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_4dhyx1.scala:23)\n\tat Problem.main(tmpx_4dhyx1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val intSum = math.round(sum)\n        val\
    \ intSum2 = math.round(sum * 2)\n        val intSum3 = math.round(sum * 3)\n \
    \       val intSum4 = math.round(sum * 4)\n        val intSum5 = math.round(sum\
    \ * 5)\n        val intSum6 = math.round(sum * 6)\n        val intSum7 = math.round(sum\
    \ * 7)\n        val intSum8 = math.round(sum * 8)\n        val intSum9 = math.round(sum\
    \ * 9)\n        val intSum10 = math.round(sum * 10)\n        val intSum11 = math.round(sum\
    \ * 11)\n        val intSum12 = math.round(sum * 12)\n        val intSum13 = math.round(sum\
    \ * 13)\n        val intSum14 = math.round(sum * 14)\n        val intSum15 = math.round(sum\
    \ * 15)\n        val intSum16 = math.round(sum * 16)\n        val intSum17 = math.round(sum\
    \ * 17)\n        val intSum18 = math.round(sum * 18)\n        val intSum19 = math.round(sum\
    \ * 19)\n        val intSum20 = math.round(sum * 20)\n        val intSum21 = math.round(sum\
    \ * 21)\n        val intSum22 = math.round(sum * 22)\n        val intSum23 = math.round(sum\
    \ * 23)\n        val intSum24 = math.round(sum * 24)\n        val intSum25 = math.round(sum\
    \ * 25)\n        val intSum26 = math.round(sum * 26)\n        val intSum27 = math.round(sum\
    \ * 27)\n        val intSum28 = math.round(sum * 28)\n        val intSum29 = math.round(sum\
    \ * 29)\n        val intSum30 = math.round(sum * 30)\n        val intSum31 = math.round(sum\
    \ * 31)\n        val intSum32 = math.round(sum * 32)\n        val intSum33 = math.round(sum\
    \ * 33)\n        val intSum34 = math.round(sum * 34)\n        val intSum35 = math.round(sum\
    \ * 35)\n        val intSum36 = math.round(sum * 36)\n        val intSum37 = math.round(sum\
    \ * 37)\n        val intSum38 = math.round(sum * 38)\n        val intSum39 = math.round(sum\
    \ * 39)\n        val intSum40 = math.round(sum * 40)\n        val intSum41 = math.round(sum\
    \ * 41)\n        val intSum42 = math.round(sum * 42)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f),\
    \ 2l, 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n \
    \   assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n\
    \    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l,\
    \ 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l,\
    \ 4l, 7l) == (true));\n    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3qmh3k62.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659794156
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        (x == (x + y) && x == (x + z) && x == (y + z)) || (x == (x - y) && x\
    \ == (x - z) && x == (y - z))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l, 3l)\
    \ == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwanoxost.scala:20)\n\tat Problem.main(tmpwanoxost.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = math.floor(sum) == sum\n\
    \        val isEqual = math.abs(x - sum) == math.abs(y - sum) == math.abs(z -\
    \ sum)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpslt1gps5.scala:19:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misEqual\e[0m = math.abs(x\
    \ - sum) == math.abs(y - sum) == math.abs(z - sum)\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Values of types Boolean and Float cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum.toInt == sum\n     \
    \   val isAllInteger = x.toInt == y.toInt == z.toInt\n        isInteger && isAllInteger\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp97uk5a_f.scala:19:27 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misAllInteger\e[0m = x.toInt\
    \ == y.toInt == z.toInt\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = (sum % 1 == 0)\n       \
    \ val isSum = (sum == x)\n        val isAllInteger = (isInteger && isSum)\n  \
    \      val isAllIntegerAndNotEqualToSum = (isInteger && !isSum)\n        isAllInteger\
    \ || isAllIntegerAndNotEqualToSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc2hclac.scala:27)\n\tat Problem.main(tmpyc2hclac.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = sum.toString.toInt\n   \
    \     val isSum = sum.toString.toDouble\n        val isSumOfThree = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOne = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOneAndOne = sum.toString.toDouble\n  \
    \      val isSumOfThreeAndOneAndOneAndOneAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne = sum.toString.toDouble\n\
    \        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOne\
    \ = sum.toString.toDouble\n        val isSumOfThreeAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAndOneAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(anyInt(2l, 3l, 1l) ==\
    \ (true));\n    assert(anyInt((2.5f), 2l, 3l) == (false));\n    assert(anyInt((1.5f),\
    \ 5l, (3.5f)) == (false));\n    assert(anyInt(2l, 6l, 2l) == (false));\n    assert(anyInt(4l,\
    \ 2l, 2l) == (true));\n    assert(anyInt((2.2f), (2.2f), (2.2f)) == (false));\n\
    \    assert(anyInt(-4l, 6l, 2l) == (true));\n    assert(anyInt(2l, 1l, 1l) ==\
    \ (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n    assert(anyInt((3.0f),\
    \ 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_itu09d1.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_itu09d1.scala:35:5 ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes 3 numbers.\n    // Returns true if one\
    \ of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    \    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l,\
    \ 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    //\
    \ >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n\
    \    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n\
    \        val sum = x + y + z\n        val isInteger = math.floor(sum) == sum\n\
    \        val isEqual = math.abs(x - sum) == math.abs(y - sum) == math.abs(z -\
    \ sum)\n        isInteger && isEqual\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(anyInt(2l, 3l, 1l) == (true));\n    assert(anyInt((2.5f), 2l,\
    \ 3l) == (false));\n    assert(anyInt((1.5f), 5l, (3.5f)) == (false));\n    assert(anyInt(2l,\
    \ 6l, 2l) == (false));\n    assert(anyInt(4l, 2l, 2l) == (true));\n    assert(anyInt((2.2f),\
    \ (2.2f), (2.2f)) == (false));\n    assert(anyInt(-4l, 6l, 2l) == (true));\n \
    \   assert(anyInt(2l, 1l, 1l) == (true));\n    assert(anyInt(3l, 4l, 7l) == (true));\n\
    \    assert(anyInt((3.0f), 4l, 7l) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpslt1gps5.scala:19:22 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36misEqual\e[0m = math.abs(x\
    \ - sum) == math.abs(y - sum) == math.abs(z - sum)\n\e[31m\e[31m   |\e[0m    \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Values of types Boolean and Float cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794161
