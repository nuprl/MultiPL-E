name: HumanEval_61_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"(\" and \")\".\n    // return True if every opening\
  \ bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
  (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n \
  \   // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
  )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n   \
  \ assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
  )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
  (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
  )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"\
  ()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        val openingBrackets = brackets.split(\"\\\\(\")\n        val\
    \ closingBrackets = brackets.split(\"\\\\)\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        if (openingBracketsCount != closingBracketsCount) {\n            return\
    \ false\n        }\n        val openingBracketsMap = mutable.HashMap[String, Int]()\n\
    \        for (openingBracket <- openingBrackets) {\n            val closingBracketIndex\
    \ = openingBracket.lastIndexOf(\"\\\\)\")\n            val closingBracket = openingBracket.substring(closingBracketIndex\
    \ + 1)\n            val closingBracketCount = openingBracketsMap.get(closingBracket)\n\
    \            if (closingBracketCount == null) {\n                openingBracketsMap.put(closingBracket,\
    \ 1)\n            } else {\n                openingBracketsMap.put(closingBracket,\
    \ closingBracketCount + 1)\n            }\n        }\n        val closingBracketsMap\
    \ = mutable.HashMap[String, Int]()\n        for (closingBracket <- closingBrackets)\
    \ {\n            val openingBracketIndex = closingBracket.lastIndexOf(\"\\\\(\"\
    )\n            val openingBracket = closingBracket.substring(openingBracketIndex\
    \ + 1)\n            val openingBracketCount = closingBracketsMap.get(openingBracket)\n\
    \            if (openingBracketCount == null) {\n                closingBracketsMap.put(openingBracket,\
    \ 1)\n            } else {\n                closingBracketsMap.put(openingBracket,\
    \ openingBracketCount + 1)\n            }\n        }\n        for (openingBracket\
    \ <- openingBracketsMap.keys) {\n            val closingBracketCount = closingBracketsMap.get(openingBracket)\n\
    \            if (closingBracketCount != openingBracketsMap.get(openingBracket))\
    \ {\n                return false\n            }\n        }\n        true", " \
    \       val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets = brackets.split(\"\
    \\\\)\")\n        val openingBracketsCount = openingBrackets.length\n        val\
    \ closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ stack = mutable.Stack[String]()\n        val bracketMap = new mutable.HashMap[String,\
    \ String]()\n        brackets.split(\"\\\\(\").foreach(x => stack += x)\n    \
    \    while(stack.nonEmpty) {\n            val x = stack.pop()\n            val\
    \ y = stack.pop()\n            val bracket = bracketMap.getOrElse(x + \"|\" +\
    \ y, \"\")\n            if(bracket.nonEmpty) {\n                bracketMap +=\
    \ x + \"|\" + y -> bracket\n                stack += bracket\n            }\n\
    \        }\n        !bracketMap.nonEmpty", "        val stack = mutable.Stack[String]()\n\
    \        for (i <- 0 until brackets.length)\n            if (brackets(i) == '(')\n\
    \                stack.push(brackets(i))\n            else if (brackets(i) ==\
    \ ')')\n                stack.pop\n            else\n                false\n \
    \       stack.isEmpty", "        val openingBrackets = brackets.split(\"\\\\(\"\
    )\n        val closingBrackets = brackets.split(\"\\\\)\")\n        val openingBracketsCount\
    \ = openingBrackets.length\n        val closingBracketsCount = closingBrackets.length\n\
    \        openingBracketsCount == closingBracketsCount && openingBrackets.forall(openingBracket\
    \ => closingBrackets.contains(openingBracket))", "        val bracketsArray =\
    \ brackets.toList\n        val openingBrackets = bracketsArray.filter(x => x !=\
    \ \")\")\n        val closingBrackets = bracketsArray.filter(x => x != \")\")\n\
    \        val openingBracketsCount = openingBrackets.size\n        val closingBracketsCount\
    \ = closingBrackets.size\n        openingBracketsCount == closingBracketsCount",
  "        val bracketsArray = brackets.toArray\n        var openingBrackets = 0\n\
    \        var closingBrackets = 0\n        var currentBracket = bracketsArray(0)\n\
    \        var currentBracketIndex = 0\n        var currentBracketOpeningIndex =\
    \ 0\n        var currentBracketClosingIndex = 0\n        for(i <- 1 to bracketsArray.length){\n\
    \            currentBracket = bracketsArray(i)\n            currentBracketIndex\
    \ = i\n            currentBracketOpeningIndex = openingBrackets\n            currentBracketClosingIndex\
    \ = closingBrackets\n            openingBrackets = currentBracketIndex\n     \
    \       closingBrackets = currentBracketIndex\n            currentBracket = bracketsArray(i)\n\
    \            currentBracketIndex = i\n            currentBracketOpeningIndex =\
    \ openingBrackets\n            currentBracketClosingIndex = closingBrackets\n\
    \            openingBrackets = currentBracketIndex\n            closingBrackets\
    \ = currentBracketIndex\n        }\n        openingBrackets == closingBrackets",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets = brackets.split(\"\
    \\\\)\")\n        val openingBracketsCount = openingBrackets.length\n        val\
    \ closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val bracketsArray = brackets.toCharArray\n        val openingBracketsCount\
    \ = bracketsArray.count(_ == '(')\n        val closingBracketsCount = bracketsArray.count(_\
    \ == ')')\n        openingBracketsCount == closingBracketsCount", "        val\
    \ openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets = brackets.split(\"\
    \\\\)\")\n        val openingBracketsCount = openingBrackets.length\n        val\
    \ closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(x => closingBrackets.contains(x))",
  "        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        if (openingBracketsCount\
    \ != closingBracketsCount) {\n            return false\n        }\n        val\
    \ openingBracketsMap = openingBrackets.toMap\n        val closingBracketsMap =\
    \ closingBrackets.toMap\n        val openingBracketsKeys = openingBracketsMap.keys\n\
    \        val closingBracketsKeys = closingBracketsMap.keys\n        val openingBracketsValues\
    \ = openingBracketsMap.values.toList\n        val closingBracketsValues = closingBracketsMap.values.toList\n\
    \        val openingBracketsKeysCount = openingBracketsKeys.length\n        val\
    \ closingBracketsKeysCount = closingBracketsKeys.length\n        val openingBracketsValuesCount\
    \ = openingBracketsValues.length\n        val closingBracketsValuesCount = closingBracketsValues.length\n\
    \        if (openingBracketsKeysCount != openingBracketsValuesCount) {\n     \
    \       return false\n        }\n        if (openingBracketsKeysCount != closingBracketsKeysCount)\
    \ {\n            return false\n        }\n        val openingBracketsKeysMap =\
    \ openingBracketsKeys.toMap\n        val closingBracketsKeysMap = closingBracketsKeys.toMap\n\
    \        val openingBracketsValuesMap = openingBracketsValues.toMap\n        val\
    \ closingBracketsValuesMap = closingBracketsValues.toMap\n        val openingBracketsKeysMapKeys\
    \ = openingBracketsKeysMap.keys\n        val closingBracketsKeysMapKeys = closingBracketsKeysMap.keys\n\
    \        val openingBracketsKeysMapValues = openingBracketsKeysMap.values.toList\n\
    \        val closingBracketsKeysMapValues = closingBracketsKeysMap.values.toList\n\
    \        val openingBracketsKeysMapValuesCount = openingBracketsKeysMapValues.length\n\
    \        val closingBracketsKeysMapValuesCount = closingBracketsKeysMapValues.length\n\
    \        if (openingBracketsKeysMapValuesCount != openingBracketsValuesCount)\
    \ {", "        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsSet = openingBrackets.toSet\n\
    \        val closingBracketsSet = closingBrackets.toSet\n        openingBracketsSet.forall(closingBracketsSet.contains)",
  "        val bracketsSet = brackets.toSet\n        val openingBrackets = bracketsSet.filter(_\
    \ == \"(\")\n        val closingBrackets = bracketsSet.filter(_ == \")\")\n  \
    \      openingBrackets.size == closingBrackets.size", "        val openingBrackets\
    \ = brackets.split(\"\\\\(\")\n        val closingBrackets = brackets.split(\"\
    \\\\)\")\n        val openingBracketsCount = openingBrackets.length\n        val\
    \ closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)", "        val\
    \ openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets = brackets.split(\"\
    \\\\)\")\n        val openingBracketsCount = openingBrackets.length\n        val\
    \ closingBracketsCount = closingBrackets.length\n        openingBracketsCount\
    \ == closingBracketsCount && openingBrackets.forall(openingBracket => closingBrackets.contains(openingBracket))",
  "        val bracketsArray = brackets.toCharArray\n        val bracketsArrayLength\
    \ = bracketsArray.length\n        val openingBracketsCount = bracketsArray.filter(c\
    \ => c == '(').length\n        val closingBracketsCount = bracketsArray.filter(c\
    \ => c == ')').length\n        openingBracketsCount != closingBracketsCount",
  "        val openingBrackets = brackets.split(\"\\\\(\")\n        val closingBrackets\
    \ = brackets.split(\"\\\\)\")\n        val openingBracketsCount = openingBrackets.length\n\
    \        val closingBracketsCount = closingBrackets.length\n        val openingBracketsSet\
    \ = openingBrackets.toSet\n        val closingBracketsSet = closingBrackets.toSet\n\
    \        openingBracketsSet.forall(closingBracketsSet.contains)"]
stop_tokens:
- "\n    }\n"
