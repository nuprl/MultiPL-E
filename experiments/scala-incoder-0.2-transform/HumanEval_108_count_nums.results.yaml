language: scala
name: HumanEval_108_count_nums
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.foldLeft(List[Long]())((sums, num) => {\n            val digits = num.toString.reverse.grouped(2).map(_.toInt)\n\
    \            val sum = digits.foldLeft(0l)(_ + _)\n            sums ::: List(sum)\n\
    \        })\n        sums.count(_ > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"1-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpu3l35v4k.scala:16)\n\
    \tat scala.collection.Iterator$$anon$9.next(Iterator.scala:577)\n\tat scala.collection.IterableOnceOps.foldLeft(IterableOnce.scala:646)\n\
    \tat scala.collection.IterableOnceOps.foldLeft$(IterableOnce.scala:642)\n\tat\
    \ scala.collection.AbstractIterator.foldLeft(Iterator.scala:1293)\n\tat Problem$.$anonfun$1(tmpu3l35v4k.scala:17)\n\
    \tat Problem$.$anonfun$adapted$1(tmpu3l35v4k.scala:19)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.countNums(tmpu3l35v4k.scala:19)\n\tat Problem$.main(tmpu3l35v4k.scala:24)\n\
    \tat Problem.main(tmpu3l35v4k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.sc"
  stdout: ''
  timestamp: 1659798928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSet = nums.toSeq\n        val numsSetLen = numsSet.length\n\
    \        val numsSetSum = numsSet.sum\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigits = numsSetSum.toString.length\n        val numsSetSumDigit\
    \ = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits = numsSetSum.toString.length\n\
    \        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n        val numsSetSumDigits\
    \ = numsSetSum.toString.length\n        val numsSetSumDigit = numsSetSum.toString.charAt(0)\n\
    \        val numsSetSumDigit\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps84swpk0.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps84swpk0.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetSumDigits\e[0m = numsSetSum.toString.length\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsSetSumDigits is already defined as \e[33mvalue\e[0m \e[35mnumsSetSumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps84swpk0.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSetSumDigit\e[0m = numsSetSum.toString.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetSumDigit is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSetSumDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps84swpk0.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSetSumDigits\e[0m =\
    \ numsSetSum.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetSumDigits is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSetSumDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps84swpk0.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSetSumDigit\e[0m = numsSetSum.toString.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetSumDigit is already defined as \e[33mvalue\e[0m \e\
    [35mnumsSetSumDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1659798926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.foldLeft(List[Long]())((acc, x) => acc :+ x.toLong)\n        sums.count(_\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzk8qkhw.scala:24)\n\tat Problem.main(tmpwzk8qkhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val m = arr.map(_.toInt).sum\n        val s = arr.map(_.toInt).map(_.signum).sum\n\
    \        val r = arr.map(_.toInt).map(_.abs).sum\n        val c = arr.map(_.toInt).map(_.signum).map(_.abs).sum\n\
    \        val d = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val e = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val f = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val g = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val h = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val i = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val j = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val k = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).sum\n\
    \        val l = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).sum\n\
    \        val m = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn3rxs4r9.scala:30:4 ----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpn3rxs4r9.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = arr.map(_.toInt).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).map(_.abs).map(_.signum).\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mm is already defined as \e[33mvalue\e[0m \e[35mm\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpn3rxs4r9.scala:30:5 ---------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val nums\
    \ = arr.filter(_ > 0).map(_ - sum)\n        nums.count(_ > 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpczgds4iv.scala:23)\n\tat Problem.main(tmpczgds4iv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigits)\n        val\
    \ numsSumDigit = numsSum.toString.charAt(numsSumDigit + 1)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 2)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 3)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 4)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 5)\n     \
    \   val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 6)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 7)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 8)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 9)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 10)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 11)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 12)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 13)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 14)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 15)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 16)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 17)\n    \
    \    val numsSumDigits = numsSum.toString.charAt(numsSumDigit + 18)\n        val\
    \ numsSumDigits = numsSum.toString.charAt(numsSumDigit + 19)\n        val numsSumDigits\
    \ = numsSum.toString.charAt(numsSumDigit + 20)\n        val numsSumDigits = numsSum.toString.charAt(numsSumDigit\
    \ + 21)\n        val num\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppjj0h49g.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppjj0h49g.scala:19:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumDigits\e[0m = numsSum.toString.charAt(numsSumDigits)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigits is already defined as \e[33mvalue\e[0m \e[35mnumsSumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppjj0h49g.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigit\e[0m = numsSum.toString.charAt(numsSumDigit\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigit is already defined as \e[33mvalue\e[0m \e[35mnumsSumDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppjj0h49g.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigits\e[0m = numsSum.toString.charAt(numsSumDigit\
    \ + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigits is already defined as \e[33mvalue\e[0m \e[35mnumsSumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppjj0h49g.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigits\e[0m = numsSum.toString.charAt(numsSumDigit\
    \ + \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigits is already defined as \e[33mval"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n        nums.filter(x\
    \ => x > 0).count(x => x > 0 && numsSum - math.abs(x) > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdnmmkfec.scala:22)\n\tat Problem.main(tmpdnmmkfec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => if (x < 0) -x else x)\n        val\
    \ counts = sums.groupBy(x => x).map(x => (x._1, x._2.length)).toMap\n        sums.count(x\
    \ => counts.getOrElse(x.toString.toInt, 0) > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpollses6k.scala:21)\n\tat Problem.main(tmpollses6k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toInt)\n        val sums = digits.map(x => x.toString.toInt).map(_.sum)\n\
    \        val positiveSums = sums.filter(x => x > 0)\n        val negativeSums\
    \ = sums.filter(x => x < 0)\n        positiveSums.size + (negativeSums.size *\
    \ negativeSums.sum)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzw8c6kxv.scala:16:59 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(\e\
    [36mx\e[0m => x.toString.toInt).map(_.sum)\n\e[31m\e[31m   |\e[0m            \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value sum is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpzw8c6kxv.scala:17:46 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzw8c6kxv.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnegativeSums\e[0m = sums.filter(\e[36mx\e[0m => x < \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                            ^^^\e[0m\n\e[31m   |\e\
    [0mvalue < is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798928
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val arr\
    \ = arr.toList\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.toInt\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n\
    \        val positiveSumsSumAbsCountAbs = positiveSumsSumAbsCount + negativeSumsSumAbsCount\n\
    \        val negativeSumsSumAbsCountAbs = negativeSumsSumAbsCount + positiveSumsSumAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCount = positiveSumsSumAbsCountAbs + negativeSumsSumAbsCountAbs\n\
    \        val negativeSumsSumAbsCountAbsCount = negativeSumsSumAbsCountAbs + positiveSumsSumAbsCountAbs\n\
    \        val positiveSumsSumAbsCountAbsCountAbs = positiveSumsSumAbsCountAbsCount\
    \ + negativeSumsSumAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbs\
    \ = negativeSumsSumAbsCountAbsCount + positiveSumsSumAbsCountAbsCount\n      \
    \  val positiveSumsSumAbsCountAbsCountAbsCount = positiveSumsSumAbsCountAbsCountAbs\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCount\
    \ = negativeSumsSumAbsCountAbsCountAbs + positiveSumsSumAbsCountAbsCountAbsCount\n\
    \        val positiveSumsSumAbsCountAbsCountAbsCountAbs = positiveSumsSumAbsCountAbsCountAbsCount\
    \ + negativeSumsSumAbsCountAbsCountAbs\n        val negativeSumsSumAbsCountAbsCountAbsCountAbs\
    \ = negativeSumsSumAbsCountAbsCountAbsCount + positiveSumsSumAbsCountAbsCountAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1no7uqel.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1no7uqel.scala:37:5 ---------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toInt)\n        val sums = digits.map(x => math.abs(x))\n      \
    \  val nums = sums.filter(x => x > 0)\n        nums.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphsq_e4rc.scala:22)\n\tat Problem.main(tmphsq_e4rc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSet = arr.toSet\n        val numsSet2 = arr.toSet\n\
    \        val numsSet3 = arr.toSet\n        val numsSet4 = arr.toSet\n        val\
    \ numsSet5 = arr.toSet\n        val numsSet6 = arr.toSet\n        val numsSet7\
    \ = arr.toSet\n        val numsSet8 = arr.toSet\n        val numsSet9 = arr.toSet\n\
    \        val numsSet10 = arr.toSet\n        val numsSet11 = arr.toSet\n      \
    \  val numsSet12 = arr.toSet\n        val numsSet13 = arr.toSet\n        val numsSet14\
    \ = arr.toSet\n        val numsSet15 = arr.toSet\n        val numsSet16 = arr.toSet\n\
    \        val numsSet17 = arr.toSet\n        val numsSet18 = arr.toSet\n      \
    \  val numsSet19 = arr.toSet\n        val numsSet20 = arr.toSet\n        val numsSet21\
    \ = arr.toSet\n        val numsSet22 = arr.toSet\n        val numsSet23 = arr.toSet\n\
    \        val numsSet24 = arr.toSet\n        val numsSet25 = arr.toSet\n      \
    \  val numsSet26 = arr.toSet\n        val numsSet27 = arr.toSet\n        val numsSet28\
    \ = arr.toSet\n        val numsSet29 = arr.toSet\n        val numsSet30 = arr.toSet\n\
    \        val numsSet31 = arr.toSet\n        val numsSet32 = arr.toSet\n      \
    \  val numsSet33 = arr.toSet\n        val numsSet34 = arr.toSet\n        val numsSet35\
    \ = arr.toSet\n        val numsSet36 = arr.toSet\n        val numsSet37 = arr.toSet\n\
    \        val numsSet38 = arr.toSet\n        val numsSet39 = arr.toSet\n      \
    \  val numsSet40 = arr.toSet\n        val numsSet41 = arr.toSet\n        val numsSet42\
    \ = arr.toSet\n        val numsSet43 = arr.toSet\n        val numsSet44 = arr.toSet\n\
    \        val numsSet45 = arr.toSet\n        val numsSet46 = arr.toSet\n      \
    \  val numsSet47 = arr.toSet\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmperi7kdws.scala:63:5\
    \ ---------------------\e[0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for (i <- arr) {\n            if (i >= 0)\
    \ {\n                sum += i\n                count += 1\n            }\n   \
    \     }\n        if (sum > 0) {\n            count\n        } else {\n       \
    \     -count\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmrtfpqwp.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659798926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x.toInt).map(x => x * x).sum\n   \
    \     sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa6mnm3lh.scala:20)\n\tat Problem.main(tmpa6mnm3lh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toList\n        val sums = nums.map(x => x.toString.toInt).map(x => x.toInt)\n\
    \        val sumsSum = sums.sum\n        val numsSum = nums.sum\n        val numsSumDigits\
    \ = numsSum.toString.toInt\n        val sumsSumDigits = sumsSum.toString.toInt\n\
    \        if (sumsSumDigits == numsSumDigits) {\n            sumsSum\n        }\
    \ else {\n            sumsSumDigits - numsSumDigits\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcypaizj1.scala:29)\n\tat Problem.main(tmpcypaizj1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val count = sums.count(x => x > 0)\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr874ux9.scala:21)\n\tat Problem.main(tmpmr874ux9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val arr\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toInt).map(x => x *\
    \ x).map(x => x.toInt)\n        val count = sums.count(x => x > 0)\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpaf5g6rrq.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659798923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val negative\
    \ = digits.map(_.toString.toInt).sum < 0\n        val firstSignedDigit = if (negative)\
    \ digits.head - 1 else digits.head\n        val nums = arr.filter(x => x > 0).map(x\
    \ => x - firstSignedDigit)\n        nums.count(x => x > 0).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8u6snqt2.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        nums.count(\e[36mx\e[0m => x > \e[31m0\e[0m).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        value sum is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sums = arr.map(x => x.toString.toLong).map(x => x.toInt).map(x\
    \ => x * x).map(x => x.toInt)\n        val sumsSum = sums.sum\n        val sumsSum2\
    \ = sums.map(x => x * x).sum\n        val sumsSum3 = sums.map(x => x * x * x).sum\n\
    \        val sumsSum4 = sums.map(x => x * x * x * x).sum\n        val sumsSum5\
    \ = sums.map(x => x * x * x * x * x).sum\n        val sumsSum6 = sums.map(x =>\
    \ x * x * x * x * x * x).sum\n        val sumsSum7 = sums.map(x => x * x * x *\
    \ x * x * x * x).sum\n        val sumsSum8 = sums.map(x => x * x * x * x * x *\
    \ x * x * x).sum\n        val sumsSum9 = sums.map(x => x * x * x * x * x * x *\
    \ x * x * x * x).sum\n        val sumsSum10 = sums.map(x => x * x * x * x * x\
    \ * x * x * x * x * x * x).sum\n        val sumsSum11 = sums.map(x => x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum12 = sums.map(x\
    \ => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val\
    \ sumsSum13 = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x).sum\n        val sumsSum14 = sums.map(x => x * x * x * x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val\
    \ sumsSum15 = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x).sum\n        val sumsSum16 = sums.map(x => x *\
    \ x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x).sum\n        val sumsSum17 = sums.map(x => x * x * x * x * x * x * x * x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumsSum18\
    \ = sums.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * x * x * x * x * x * x * x).sum\n        val sumsSum19 = sums.map(x => x\
    \ * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1p89y4sq.scala:35:105 --------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36msumsSum19\e[0m = sums.map(\e\
    [36mx\e[0m => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x *\
    \ x * \n\e[31m\e[31m   |\e[0m                                                \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1p89y4sq.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x > 0).map(x => math.abs(x))\n        val sums = nums.map(x\
    \ => math.pow(10, x.length))\n        val sumOfDigits = sums.map(x => x.sum)\n\
    \        val numsWithSumOfDigits =\n            sumOfDigits.zip(nums).filter(_._1\
    \ > 0).map(_._2)\n        numsWithSumOfDigits.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwa2r5w3o.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = nums.map(\e\
    [36mx\e[0m => math.pow(\e[31m10\e[0m, x.length))\n\e[31m\e[31m   |\e[0m      \
    \                                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                              value length is not a member of Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpwa2r5w3o.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = sums.map(\e\
    [36mx\e[0m => x.sum)\n\e[31m\e[31m   |\e[0m                                  \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                                     value sum\
    \ is not a member of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwa2r5w3o.scala:19:46\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            sumOfDigits.zip(nums).filter(_._1\
    \ > \e[31m0\e[0m).map(_._2)\n\e[31m\e[31m   |\e[0m                           \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for(i <- 0 until n){\n            val\
    \ digit = arr(i).toInt\n            sum += digit\n        }\n        if(sum >\
    \ 0)\n            sum\n        else\n            arr.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1_t3itng.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for(i <- arr) {\n            sum += i\n\
    \            count += 1\n            if(sum > 0) {\n                sum -= i\n\
    \            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2lj7uggs.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2lj7uggs.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum -= i\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.foldLeft(Map[Long, Long]()){\n            case (acc, x) => acc + (x ->\
    \ (acc.getOrElse(x, 0) + 1))\n        }\n        sums.filter(_._2 > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5czti21g.scala:16:62 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, x) => acc + (x -> (acc.getOrElse(x,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of AnyVal, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5czti21g.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        sums.filter(_._2 > \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue length\
    \ is not a member of scala.collection.mutable.Map[Long, Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        var i = 0\n        while (i < n) {\n\
    \            val digit = arr(i).toInt\n            sum += digit\n            i\
    \ += 1\n        }\n        if (sum > 0) {\n            sum\n        } else {\n\
    \            arr.takeWhile(x => x < 0).sum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgz4tz3lv.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for(i <- 0 until n) {\n            sum\
    \ += arr(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpir3t4q9h.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009521
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n   \
    \     val numsSumsSetSet = numsSumsSet.toSet\n        val numsSumsSetSetSet =\
    \ numsSumsSetSet.toSet\n        val numsSumsSetSetSetSet = numsSumsSetSetSet.toSet\n\
    \        val numsSumsSetSetSetSetSet = numsSumsSetSetSetSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSumsSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSetSet\
    \ = numsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet.toSet\n        val numsSumsSetSetSetSetSetSetSetSetSetSetSet\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqspjnp_t.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqspjnp_t.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumsSetSetSetSetSetSetSetSetSetSet\e[0m = numsSumsSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSetSetSetSetSetSetSetSetSetSet is already defined\
    \ as \e[33mvalue\e[0m \e[35mnumsSumsSetSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpqspjnp_t.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m = numsSumsSetSetSetSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSumsSetSetSetSetSetSetSetSetSetSetSetSetSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpqspjnp_t.scala:35:5 ---------------------\e[0m\e[0m\n\
    \e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val m = arr.map(_.toString.toInt).sum\n        val r = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).sum\n        val s = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).sum\n        val t =\
    \ arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).sum\n        val u = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).sum\n        val v = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).sum\n\
    \        val w = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).sum\n\
    \        val x = arr.map(_.toString.toInt).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).sum\n        val y = arr.map(_.toString.toInt).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x\
    \ => if (x > 0) x else -x).map(x => if (x > 0) x else -x).map(x => if (x > 0)\
    \ x else -x).sum\n        val z = arr.map(_.toString.toInt).map(x => if (x > 0)\
    \ x else -x).map(x => if (x > 0) x else \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6oztb6is.scala:25:99 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mz\e[0m = arr.map(_.toString.toInt).map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x > \e[31m0\e[0m) x \e[33melse\e[0m -x).map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x > \e[31m0\e[0m) x \e[33melse\e[0m \n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6oztb6is.scala:26:5 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for (i <- 0 until n) {\n            val\
    \ x = arr(i)\n            if (x < 0) x += x.toInt\n            sum += x\n    \
    \    }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp85yfbra.scala:19:25 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m (x < \e[31m0\e[0m) x += x.toInt\n\
    \e[31m\e[31m   |\e[0m                       ^^^^\e[0m\n\e[31m   |\e[0m       \
    \            value += is not a member of Long - did you mean x.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpp85yfbra.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.toInt\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.toLong\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.toLong\n        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.toLong\n\
    \        val negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.toLong\n       \
    \ val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.toInt\n       \
    \ val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.toInt\n       \
    \ val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.toLong\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.toLong\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = positiveSumsSumAbsSumAbsSumAbs.toLong\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = negativeSumsSumAbsSumAbsSumAbs.toLong\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbsSum.toLong\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbs\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:35:45 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSumAbsSumAbs\e\
    [0m = positiveSumsSumAbsSumAbsSumAbs.toLong\n\e[31m\e[31m   |\e[0m           \
    \                                  ^\e[0m\n\e[31m   |\e[0m               Recursive\
    \ \e[33mvalue\e[0m \e[35mpositiveSumsSumAbsSumAbsSumAbs\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:36:45 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSumAbsSumAbs\e\
    [0m = negativeSumsSumAbsSumAbsSumAbs.toLong\n\e[31m\e[31m   |\e[0m           \
    \                                  ^\e[0m\n\e[31m   |\e[0m               Recursive\
    \ \e[33mvalue\e[0m \e[35mnegativeSumsSumAbsSumAbsSumAbs\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:37:50 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSumAbsSumAbsCount\e\
    [0m = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n\e[31m\e[31m   |\e[0m       \
    \                                           ^\e[0m\n\e[31m   |\e[0m          Recursive\
    \ \e[33mvalue\e[0m \e[35mpositiveSumsSumAbsSumAbsSumAbsCount\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:38:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnegativeSumsSumAbsSumAbsSumAbsCount\e[0m = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mnegativeSumsSumAbsSumAbsSumAbsCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:39:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 0 until n) {\n            val digit = arr(i).abs\n            sums += digit\n\
    \        }\n        sums.sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplc76zvei.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009516
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.count(_\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums.count(_ > \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of\
    \ Nothing, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        arr.foreach(x => sum += x)\n        arr.foreach(x\
    \ => if (sum > 0) count += 1)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnxl81een.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        arr.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toInt)\n        val sum = digits.sum\n        val negative = digits.map(_.signum).toSet\n\
    \        val firstDigit = digits.head\n        if (sum < 0) firstDigit * -1\n\
    \        else firstDigit\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.countNums(tmpkj_2z2xl.scala:18)\n\
    \tat Problem$.main(tmpkj_2z2xl.scala:23)\n\tat Problem.main(tmpkj_2z2xl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet2\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet3 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet4 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet5 = numsSums.map(x => math.abs(x))\n        val numsSumsSet6\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet7 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet8 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet9 = numsSums.map(x => math.abs(x))\n        val numsSumsSet10\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet11 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet12 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet13 = numsSums.map(x => math.abs(x))\n        val numsSumsSet14\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet15 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet16 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet17 = numsSums.map(x => math.abs(x))\n        val numsSumsSet18\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet19 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet20 = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSet21 = numsSums.map(x => math.abs(x))\n        val numsSumsSet22\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet23 = numsSums.map(x\
    \ => math.abs(x))\n        val numsSumsSet24 = nums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdmuoss9f.scala:44:5\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = arr.map(x => if (x < 0) x.toLong * -1 else x.toLong)\n\
    \        val res = sums.foldLeft(0l)((acc, x) => acc + x)\n        if (res > 0)\
    \ res + 1 else res\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qua8vty.scala:22)\n\tat Problem.main(tmp6qua8vty.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.filter(x => x.toString.toInt > 0).count(x => x.toString.toInt - numsSum\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1fkc7mx.scala:22)\n\tat Problem.main(tmpx1fkc7mx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009526
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(y => y == x).length)\n        numsSums.sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn_k9jvam.scala:22)\n\tat Problem.main(tmpn_k9jvam.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val count = sums.count(x => x > 0)\n  \
    \      count\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr874ux9.scala:21)\n\tat Problem.main(tmpmr874ux9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        var sum = 0\n        var count = 0\n        for (i <- 0\
    \ until n) {\n            sum += arr(i)\n            if (sum > 0) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_lvzsrx3.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009523
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdmzfdjgi.scala:22)\n\tat Problem.main(tmpdmzfdjgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt)\n       \
    \ val count = sums.count(x => x > 0)\n        sums.count(x => x < 0) - count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r825liu.scala:21)\n\tat Problem.main(tmp0r825liu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sum = 0\n        for (i <- 0 until n) {\n          \
    \  sum += arr(i)\n        }\n        if (sum > 0) {\n            sum\n       \
    \ } else {\n            arr.takeWhile(_ < 0).length\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9uv3jvv.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009522
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x.toInt)\n        val sumsSum = sums.sum\n\
    \        val sumsSumPositive = sums.filter(x => x > 0).sum\n        val sumsSumNegative\
    \ = sums.filter(x => x < 0).sum\n        sumsSumPositive - sumsSumNegative\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79znq335.scala:23)\n\tat Problem.main(tmp79znq335.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009541
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdmzfdjgi.scala:22)\n\tat Problem.main(tmpdmzfdjgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val negative\
    \ = arr.exists(_ < 0)\n        val firstSign = arr.takeWhile(_ < 0).head\n   \
    \     val firstDigit = if (negative) firstSign.toInt else firstSign.toLong\n \
    \       val firstDigitSum = digits.takeWhile(_ >= firstDigit).sum\n        if\
    \ (firstDigitSum > 0) sum else firstDigitSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpoobd2k0v.scala:20:47 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfirstDigitSum\e[0m = digits.takeWhile(_\
    \ >= firstDigit).sum\n\e[31m\e[31m   |\e[0m                                  \
    \           ^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35m>=\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e\
    [31m   |\e[0m (x: Double): Boolean\n\e[31m   |\e[0m (x: Float): Boolean\n\e[31m\
    \   |\e[0m (x: Long): Boolean\n\e[31m   |\e[0m (x: Int): Boolean\n\e[31m   |\e\
    [0m (x: Char): Boolean\n\e[31m   |\e[0m (x: Short): Boolean\n\e[31m   |\e[0m (x:\
    \ Byte): Boolean\n\e[31m   |\e[0mmatch arguments ((firstDigit : AnyVal))\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009536
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sums = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_0p9cif1.scala:21)\n\tat Problem.main(tmp_0p9cif1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet2\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet3 = numsSumsSet2.map(x\
    \ => math.abs(x))\n        val numsSumsSet4 = numsSumsSet3.map(x => math.abs(x))\n\
    \        val numsSumsSet5 = numsSumsSet4.map(x => math.abs(x))\n        val numsSumsSet6\
    \ = numsSumsSet5.map(x => math.abs(x))\n        val numsSumsSet7 = numsSumsSet6.map(x\
    \ => math.abs(x))\n        val numsSumsSet8 = numsSumsSet7.map(x => math.abs(x))\n\
    \        val numsSumsSet9 = numsSumsSet8.map(x => math.abs(x))\n        val numsSumsSet10\
    \ = numsSumsSet9.map(x => math.abs(x))\n        val numsSumsSet11 = numsSumsSet10.map(x\
    \ => math.abs(x))\n        val numsSumsSet12 = numsSumsSet11.map(x => math.abs(x))\n\
    \        val numsSumsSet13 = numsSumsSet12.map(x => math.abs(x))\n        val\
    \ numsSumsSet14 = numsSumsSet13.map(x => math.abs(x))\n        val numsSumsSet15\
    \ = numsSumsSet14.map(x => math.abs(x))\n        val numsSumsSet16 = numsSumsSet15.map(x\
    \ => math.abs(x))\n        val numsSumsSet17 = numsSumsSet16.map(x => math.abs(x))\n\
    \        val numsSumsSet18 = numsSumsSet17.map(x => math.abs(x))\n        val\
    \ numsSumsSet19 = numsSumsSet18.map(x => math.abs(x))\n        val numsSumsSet20\
    \ = numsSumsSet19.map(x => math.abs(x))\n        val numsSumsSet21 = numsSumsSet20.map(x\
    \ => math.abs(x))\n        val numsSumsSet22 = numsSums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmctjd3.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => math.abs(x))\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSetSize = numsSumSet.size\n        val numsSumSetSum\
    \ = numsSumSet.sum\n        val numsSumSetSumSet = numsSumSetSum.toSet\n     \
    \   val numsSumSetSumSetSize = numsSumSetSumSet.size\n        val numsSumSetSumSetSum\
    \ = numsSumSetSumSet.sum\n        val numsSumSetSumSetSumSet = numsSumSetSumSetSum.toSet\n\
    \        val numsSumSetSumSetSumSetSize = numsSumSetSumSetSumSet.size\n      \
    \  val numsSumSetSumSetSumSetSum = numsSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSum\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.sum\n        val numsSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.size\n        val numsSumSetSumSetSumSetSumSetSumSetSumSetSumSetSumSetSize\
    \ = numsSumSetSum\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ydflldj.scala:20:45 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSetSumSet\e[0m =\
    \ numsSumSetSum.toSet\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value toSet is not a member of Long - did you mean numsSumSetSum.toInt?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ydflldj.scala:29:49 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSetSumSetSumSetSumSetSumSet\e\
    [0m = numsSumSetSumSetSumSetSumSetSumSet.toSet\n\e[31m\e[31m   |\e[0m        \
    \                                         ^\e[0m\n\e[31m   |\e[0m           Recursive\
    \ \e[33mvalue\e[0m \e[35mnumsSumSetSumSetSumSetSumSetSumSet\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ydflldj.scala:32:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSetSumSetSumSetSumSetSumSetSumSet\e[0m = numsSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n\
    \e[31m\e[31m   |\e[0m                                                       ^\e\
    [0m\n\e[31m   |\e[0m     Recursive \e[33mvalue\e[0m \e[35mnumsSumSetSumSetSumSetSumSetSumSetSumSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ydflldj.scala:34:61\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSetSumSetSumSetSumSetSumSetSumSetSumSet\e[0m = numsSumSetSumSetSumSetSumSetSumSetSumSetSumSet.toSet\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSumSetSumSetSumSetSumSetSumSetSumSetSumSet\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ydflldj.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660009542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2me9vgq.scala:20)\n\tat Problem.main(tmpc2me9vgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).length)\n        numsSums.sum\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp13nwr5tn.scala:22)\n\tat Problem.main(tmp13nwr5tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.filter(x => x > 0).count(x => numsSum - x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6q0s6zlr.scala:22)\n\tat Problem.main(tmp6q0s6zlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sum\
    \ = 0\n        arr.foreach(x => sum += x)\n        arr.count(x => x > 0)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdzxe5oy1.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        arr.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        var count = 0\n        var sum = 0\n        var lastSum =\
    \ 0\n        var lastDigit = 0\n        var lastDigitSum = 0\n        var lastDigitSum2\
    \ = 0\n        var lastDigitSum3 = 0\n        var lastDigitSum4 = 0\n        var\
    \ lastDigitSum5 = 0\n        var lastDigitSum6 = 0\n        var lastDigitSum7\
    \ = 0\n        var lastDigitSum8 = 0\n        var lastDigitSum9 = 0\n        var\
    \ lastDigitSum10 = 0\n        var lastDigitSum11 = 0\n        var lastDigitSum12\
    \ = 0\n        var lastDigitSum13 = 0\n        var lastDigitSum14 = 0\n      \
    \  var lastDigitSum15 = 0\n        var lastDigitSum16 = 0\n        var lastDigitSum17\
    \ = 0\n        var lastDigitSum18 = 0\n        var lastDigitSum19 = 0\n      \
    \  var lastDigitSum20 = 0\n        var lastDigitSum21 = 0\n        var lastDigitSum22\
    \ = 0\n        var lastDigitSum23 = 0\n        var lastDigitSum24 = 0\n      \
    \  var lastDigitSum25 = 0\n        var lastDigitSum26 = 0\n        var lastDigitSum27\
    \ = 0\n        var lastDigitSum28 = 0\n        var lastDigitSum29 = 0\n      \
    \  var lastDigitSum30 = 0\n        var lastDigitSum31 = 0\n        var lastDigitSum32\
    \ = 0\n        var lastDigitSum33 = 0\n        var lastDigitSum34 = 0\n      \
    \  var lastDigitSum35 = 0\n        var lastDigitSum36 = 0\n        var lastDigitSum37\
    \ = 0\n        var lastDigitSum38 = 0\n        var lastDigitSum39 = 0\n      \
    \  var lastDigitSum40 = 0\n        var lastDigitSum41 = 0\n        var lastDigitSum42\
    \ = 0\n        var lastDigitSum43 = 0\n        var lastDigitSum44 = 0\n      \
    \  var lastDigitSum45 = 0\n        var lastDigitSum46 = 0\n        var lastDigitSum47\
    \ = 0\n        var lastDigitSum48 = 0\n        var lastDigitSum49 = 0\n      \
    \  var lastDigitSum50 = 0\n        var lastDigitSum51 = 0\n        var lastDigitSum52\
    \ = 0\n        var lastDigitSum53 = 0\n        var lastDigitSum54 = 0\n      \
    \  var lastDigitSum55 = 0\n        var lastDigitSum56 = 0\n        var lastDigitSum57\
    \ = 0\n        var lastDigitSum58 = 0\n        var lastDigitSum59 = 0\n      \
    \  var lastDigitSum60 = 0\n        var lastDigitSum61 = 0\n        var lastDigitSum62\
    \ = 0\n        var lastDigitSum63 = 0\n        var lastDigitSum64 = 0\n      \
    \  var lastDigitSum65 = 0\n        var lastDigitSum66 = 0\n        var lastDigitSum67\
    \ = 0\n        var lastDigitSum68 = 0\n        var lastDigitSum69 = 0\n      \
    \  var lastDigitSum70 = 0\n\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoi23f27p.scala:91:5\
    \ ---------------------\e[0m\e[0m\n\e[31m91 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009543
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) x.toLong else x.toInt).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7dgcy2n2.scala:15:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = arr.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x < \e[31m0\e[0m) x.toLong \e[33melse\e[0m x.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type\
    \ variable with constraint >: AnyVal\n\e[31m   |\e[0m                .\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSum = nums.map(x\
    \ => math.abs(x)).sum\n        val numsSumSet = numsSum.toSet\n        val numsSumSetSet\
    \ = numsSumSet.toSet\n        val numsSumSetSetSet = numsSumSetSet.toSet\n   \
    \     val numsSumSetSetSetSet = numsSumSetSetSet.toSet\n        val numsSumSetSetSetSetSet\
    \ = numsSumSetSetSetSet.toSet\n        val numsSumSetSetSetSetSetSet = numsSumSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSet = numsSumSetSetSetSetSetSet.toSet\n   \
    \     val numsSumSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSet.toSet\n   \
    \     val numsSumSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSumSetSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSumSetSetSetSetSetSetSetSetSetSetSet = numsSum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprb8reiop.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSetSetSetSetSetSet\e\
    [0m = numsSumSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmprb8reiop.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSetSetSetSetSetSetSetSetSet\e\
    [0m = numsSumSetSetSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSetSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSumSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprb8reiop.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSetSetSetSetSetSetSetSetSet\e[0m = numsSumSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSetSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSumSetSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprb8reiop.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSetSetSetSetSetSetSetSetSetSet\e[0m = numsSumSetSetSetSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSetSetS"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x)\n        val counts = sums.groupBy(x\
    \ => x.toInt).mapValues(_.size)\n        val maxCount = counts.max\n        val\
    \ maxSum = counts.map(x => x._2).max\n        val maxSums = sums.filter(x => x.toInt\
    \ == maxSum)\n        val maxSumsCount = maxSums.map(x => x.toString.toInt).map(x\
    \ => x * x)\n        val maxSumsCountSum = maxSumsCount.sum\n        val maxSumsCountSum2\
    \ = maxSumsCountSum * maxSumsCountSum\n        val maxSumsCountSum3 = maxSumsCountSum2\
    \ * maxSumsCountSum\n        val maxSumsCountSum4 = maxSumsCountSum3 * maxSumsCountSum\n\
    \        val maxSumsCountSum5 = maxSumsCountSum4 * maxSumsCountSum\n        val\
    \ maxSumsCountSum6 = maxSumsCountSum5 * maxSumsCountSum\n        val maxSumsCountSum7\
    \ = maxSumsCountSum6 * maxSumsCountSum\n        val maxSumsCountSum8 = maxSumsCountSum7\
    \ * maxSumsCountSum\n        val maxSumsCountSum9 = maxSumsCountSum8 * maxSumsCountSum\n\
    \        val maxSumsCountSum10 = maxSumsCountSum9 * maxSumsCountSum\n        val\
    \ maxSumsCountSum11 = maxSumsCountSum10 * maxSumsCountSum\n        val maxSumsCountSum12\
    \ = maxSumsCountSum11 * maxSumsCountSum\n        val maxSumsCountSum13 = maxSumsCountSum12\
    \ * maxSumsCountSum\n        val maxSumsCountSum14 = maxSumsCountSum13 * maxSumsCountSum\n\
    \        val maxSumsCountSum15 = maxSumsCountSum14 * maxSumsCountSum\n       \
    \ val maxSumsCountSum16 = maxSumsCountSum15 * maxSumsCountSum\n        val maxSumsCountSum17\
    \ = maxSumsCountSum16 * maxSumsCountSum\n        val maxSumsCountSum18 = maxSumsCountSum17\
    \ * maxSumsCountSum\n        val maxSumsCountSum19 = maxSumsCountSum18 * maxSumsCountSum\n\
    \        val maxSumsCountSum20 = maxSumsCountSum19 * max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp2cef2wgd.scala:40:50 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmaxSumsCountSum20\e[0m =\
    \ maxSumsCountSum19 * max\n\e[31m\e[31m   |\e[0m                             \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments ((Int, Int) => Int)\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp2cef2wgd.scala:41:5 ---------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009546
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.count(_\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums.count(_ > \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of\
    \ Nothing, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n        var\
    \ sum = 0\n        for (i <- 0 until n) {\n            sum += arr(i)\n       \
    \     sums += sum\n        }\n        sums.toList.count(_ > 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppi_fkdu7.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppi_fkdu7.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2me9vgq.scala:20)\n\tat Problem.main(tmpc2me9vgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSetSet\
    \ = numsSums.map(x => math.abs(x)).toSet\n        val numsSumsSetSetSet = numsSums.map(x\
    \ => math.abs(x)).toSet.toSet\n        val numsSumsSetSetSetSet = numsSums.map(x\
    \ => math.abs(x)).toSet.toSet.toSet\n        val numsSumsSetSetSetSetSet = numsSums.map(x\
    \ => math.abs(x)).toSet.toSet.toSet.toSet\n        val numsSumsSetSetSetSetSet\
    \ = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet\n        val\
    \ numsSumsSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \        val numsSumsSetSetSetSetSetSetSetSetSet = numsSums.map(x => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplffv3_ha.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSetSetSetSetSet\e\
    [0m = numsSums.map(\e[36mx\e[0m => math.abs(x)).toSet.toSet.toSet.toSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumsSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplffv3_ha.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSetSetSetSetSetSetSet\e\
    [0m = numsSums.map(\e[36mx\e[0m => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumsSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmplffv3_ha.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSetSetSetSetSetSetSetSet\e\
    [0m = numsSums.map(\e[36mx\e[0m => math.abs(x)).toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSumsSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplffv3_ha.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnu"
  stdout: ''
  timestamp: 1660009547
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) x.toLong else x.toInt).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp7dgcy2n2.scala:15:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = arr.map(\e[36mx\e\
    [0m => \e[33mif\e[0m (x < \e[31m0\e[0m) x.toLong \e[33melse\e[0m x.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                No implicit Ordering defined\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                where:    B is a type\
    \ variable with constraint >: AnyVal\n\e[31m   |\e[0m                .\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009544
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val positives\
    \ = arr.filter(x => x > 0).length\n        val negatives = arr.filter(x => x <\
    \ 0).length\n        val zeros = arr.filter(x => x == 0).length\n        val positiveSum\
    \ = digits.filter(x => x > 0).sum\n        val negativeSum = digits.filter(x =>\
    \ x < 0).sum\n        val zeroSum = digits.filter(x => x == 0).sum\n        val\
    \ positiveSumDigits = digits.filter(x => x > 0).map(_.toString.toInt).sum\n  \
    \      val negativeSumDigits = digits.filter(x => x < 0).map(_.toString.toInt).sum\n\
    \        val zeroSumDigits = digits.filter(x => x == 0).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val negativeSumDigitDigits = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val negativeSumDigitDigitDigits = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val negativeSumDigitDigitDigitDigits = digits.filter(x => x < 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val zeroSumDigitDigitDigitDigits = digits.filter(x => x == 0).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).sum\n\
    \        val positiveSumDigitDigitDigitDigitDigits = digits.filter(x => x > 0).map(_.toString.toInt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptrzaf38e.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptrzaf38e.scala:36:5 ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp069j3s3b.scala:20)\n\tat Problem.main(tmp069j3s3b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009549
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSum = nums.map(x\
    \ => math.abs(x)).sum\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.toSet\n        val numsSumSet\
    \ = numsSum.toSet\n        val numsSumSet = numsSum.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2m_utqrq.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsSumSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumSet\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2m_utqrq.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSumSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSumSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2m_utqrq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSet\e[0m = numsSum.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2m_utqrq.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSumSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSumSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2m_utqrq.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumSet\e[0m = numsSum.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.size\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.sum\n        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n    \
    \    val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n     \
    \   val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.size\n      \
    \  val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = math.abs(positiveSumsSumAbsSumAbsSum)\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = math.abs(negativeSumsSumAbsSumAbsSum)\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvs7lbzva.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveSumsSumAbsCount\e[0m = positiveSumsSumAbs.size\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value size is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:26:57 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsCount\e\
    [0m = negativeSumsSumAbs.size\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value size is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvs7lbzva.scala:27:55 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSum\e[0m =\
    \ positiveSumsSumAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \          value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvs7lbzva.scala:28:55 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSum\e[0m = negativeSumsSumAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs7lbzva.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val m = arr.map(_.toString.toInt).sum\n        val r = arr.map(_.toString.toInt).map(_.toLong).sum\n\
    \        val s = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).sum\n \
    \       val t = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val u = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val v = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val w = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val x = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val y = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val z = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val a = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val b = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).sum\n\
    \        val c = arr.map(_.toString.toInt).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong).map(_.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8cranpwo.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8cranpwo.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet2\
    \ = numsSums.map(x => math.abs(x))\n        val numsSumsSet3 = numsSumsSet2.map(x\
    \ => math.abs(x))\n        val numsSumsSet4 = numsSumsSet3.map(x => math.abs(x))\n\
    \        val numsSumsSet5 = numsSumsSet4.map(x => math.abs(x))\n        val numsSumsSet6\
    \ = numsSumsSet5.map(x => math.abs(x))\n        val numsSumsSet7 = numsSumsSet6.map(x\
    \ => math.abs(x))\n        val numsSumsSet8 = numsSumsSet7.map(x => math.abs(x))\n\
    \        val numsSumsSet9 = numsSumsSet8.map(x => math.abs(x))\n        val numsSumsSet10\
    \ = numsSumsSet9.map(x => math.abs(x))\n        val numsSumsSet11 = numsSumsSet10.map(x\
    \ => math.abs(x))\n        val numsSumsSet12 = numsSumsSet11.map(x => math.abs(x))\n\
    \        val numsSumsSet13 = numsSumsSet12.map(x => math.abs(x))\n        val\
    \ numsSumsSet14 = numsSumsSet13.map(x => math.abs(x))\n        val numsSumsSet15\
    \ = numsSumsSet14.map(x => math.abs(x))\n        val numsSumsSet16 = numsSumsSet15.map(x\
    \ => math.abs(x))\n        val numsSumsSet17 = numsSumsSet16.map(x => math.abs(x))\n\
    \        val numsSumsSet18 = numsSumsSet17.map(x => math.abs(x))\n        val\
    \ numsSumsSet19 = numsSumsSet18.map(x => math.abs(x))\n        val numsSumsSet20\
    \ = numsSumsSet19.map(x => math.abs(x))\n        val numsSumsSet21 = numsSumsSet20.map(x\
    \ => math.abs(x))\n        val numsSumsSet22 = numsSums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfmmctjd3.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ sums.count(_ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp511hgnug.scala:25)\n\tat Problem.main(tmp511hgnug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        arr.foreach(x => {\n            val digits = x.toString.toLong.digits\n\
    \            val sum = digits.sum\n            if (sum > 0) {\n              \
    \  count += 1\n            }\n        })\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpijrge7e6.scala:17:43 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mdigits\e[0m = x.toString.toLong.digits\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         value digits is not a member of Long\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1660009547
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => if (x < 0) -x else x)\n        val\
    \ nums = arr.filter(x => sums.contains(x)).size\n        nums\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_pm7466.scala:21)\n\tat Problem.main(tmpl_pm7466.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009551
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.size\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.sum\n        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n    \
    \    val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n     \
    \   val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.size\n      \
    \  val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = math.abs(positiveSumsSumAbsSumAbsSum)\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = math.abs(negativeSumsSumAbsSumAbsSum)\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvs7lbzva.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveSumsSumAbsCount\e[0m = positiveSumsSumAbs.size\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value size is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:26:57 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsCount\e\
    [0m = negativeSumsSumAbs.size\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value size is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvs7lbzva.scala:27:55 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSum\e[0m =\
    \ positiveSumsSumAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \          value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvs7lbzva.scala:28:55 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSum\e[0m = negativeSumsSumAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs7lbzva.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toInt)\n        val sum = digits.sum\n        val negativeSum =\
    \ sum < 0\n        val firstSignedDigit = if (negativeSum) -digits.head else digits.head\n\
    \        val nums = arr.filter(_ > 0).filter(_ % firstSignedDigit == 0)\n    \
    \    nums.count(_ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.countNums(tmpq6un8yez.scala:18)\n\
    \tat Problem$.main(tmpq6un8yez.scala:23)\n\tat Problem.main(tmpq6un8yez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 0 until n) {\n            val digits = arr(i).toString.reverse.map(_.toInt)\n\
    \            sums += digits.sum\n        }\n        sums.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzkzgs2_b.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009556
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for(i <- 0 until n){\n            val\
    \ digit = arr(i).toInt\n            sum += digit\n            if(sum > 0){\n \
    \               sum -= digit\n            }\n        }\n        n\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpniyb9m88.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpniyb9m88.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum -= digit\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val sums\
    \ = digits.map(_.sum)\n        val positiveSums = sums.filter(sum => sum > 0)\n\
    \        val negativeSums = sums.filter(sum => sum < 0)\n        val positiveSumCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumCount = negativeSums.count(_\
    \ < 0)\n        val positiveSumCountAndNegativeSumCount = positiveSumCount + negativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCount = positiveSumCountAndNegativeSumCount\
    \ + negativeSumCountAndNegativeSumCount\n        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCount + negativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ + negativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\n\
    \        val positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCount\
    \ = positiveSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAndNegativeSumCountAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ujtsmdp.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp5ujtsmdp.scala:18:50 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(\e\
    [36msum\e[0m => sum > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5ujtsmdp.scala:19:50\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mnegativeSums\e[0m = sums.filter(\e[36msum\e[0m => sum < \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.size\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.sum\n        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n    \
    \    val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n     \
    \   val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.size\n      \
    \  val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = math.abs(positiveSumsSumAbsSumAbsSum)\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = math.abs(negativeSumsSumAbsSumAbsSum)\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvs7lbzva.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveSumsSumAbsCount\e[0m = positiveSumsSumAbs.size\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value size is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:26:57 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsCount\e\
    [0m = negativeSumsSumAbs.size\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value size is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvs7lbzva.scala:27:55 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSum\e[0m =\
    \ positiveSumsSumAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \          value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvs7lbzva.scala:28:55 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSum\e[0m = negativeSumsSumAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs7lbzva.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x > 0).map(x => x.toString.toInt)\n        val sums = nums.map(x\
    \ => x.sum)\n        sums.sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbk72iidc.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = nums.map(\e\
    [36mx\e[0m => x.sum)\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value sum is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x > 0).map(x => x.toInt)\n        val sums = nums.map(x =>\
    \ x.sum)\n        sums.count(x => x > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3elwn17.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = nums.map(\e\
    [36mx\e[0m => x.sum)\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value sum is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz3elwn17.scala:17:26\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        sums.count(\e[36mx\e\
    [0m => x > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\
    \e[31m   |\e[0mvalue > is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSet = nums.toSet\n        val numsSum = nums.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n        val\
    \ numsSumSet2 = numsSumSet.filter(x => numsSumSet.contains(x-1))\n        val\
    \ numsSumSet3 = numsSumSet.filter(x => numsSumSet.contains(x+1))\n        numsSumSet2.size\
    \ + numsSumSet3.size\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps0fgd2jy.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value toSet is not a member of Int - did you mean numsSum.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009564
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for(i <- arr) {\n            sum += i\n\
    \            count += 1\n        }\n        if(sum > 0) {\n            count\n\
    \        } else {\n            count * -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn_41vopa.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009563
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.count(_\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpo4z2zqhb.scala:17:21 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums.count(_ > \e[31m0\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                   ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of\
    \ Nothing, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009524
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsWithSum\
    \ = sums.filter(x => x > 0)\n        numsWithSum.size \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzblrm_l2.scala:22)\n\tat Problem.main(tmpzblrm_l2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.count(y => y > x))\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpno7yeyh8.scala:22)\n\tat Problem.main(tmpno7yeyh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009571
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.foldLeft(0L){ (sum, digit)\
    \ =>\n            val digitSum = sum + digit\n            if (digitSum > 0) digitSum\
    \ else -digitSum\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfnt117o4.scala:24)\n\tat Problem.main(tmpfnt117o4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sum = 0\n        for(i <- 0 until n){\n            val\
    \ digit = arr(i).abs\n            sum += digit\n            if(digit < 0){\n \
    \               sum -= digit.abs\n            }\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqhrwtd8a.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqhrwtd8a.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum -= digit.abs\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value -= is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ nums = sums.filter(sum > 0)\n        nums.toList.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwg73yj8u.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpwg73yj8u.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = sums.filter(sum\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                               ^^^\e[0m\n\
    \e[31m   |\e[0m                               Not found: sum\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009566
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.toList.map(_.toString.toInt).sum\n  \
    \      nums.filter(_ > 0).count(numsSum > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprilzslmo.scala:17:33\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        nums.filter(_ > \e[31m0\e\
    [0m).count(numsSum > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   Found:    Boolean\n\e[31m   |\e[0m                                 Required:\
    \ \e[1m\e[32mLong\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e\
    [32m \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sum = 0\n        var i = 0\n        while (i < n) {\n\
    \            sum += arr(i)\n            i += 1\n        }\n        if (sum > 0)\
    \ {\n            sum\n        } else {\n            arr.takeWhile(x => x < 0).length\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpehifjrr0.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for(i <- 0 until n) {\n            val\
    \ digit = arr(i).abs\n            sum += digit\n            if(digit > 0) {\n\
    \                val sign = digit < 0 ? -1 : 1\n                sum += sign *\
    \ digit\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdc5lfpz.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += digit\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptdc5lfpz.scala:21:37\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36msign\e[0m = digit < \e[31m0\e[0m ? -\e[31m1\e[0m : \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m\
    \                                   value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptdc5lfpz.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                sum += sign * digit\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009569
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        for(i <- arr) {\n            val digit = i.toString.toInt\n   \
    \         val sum = digit + digit\n            count += sum > 0\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdo8amnwq.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            count += sum > \e[31m0\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009568
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toLong).map(x => x.toString.toInt).map(x\
    \ => x.sum)\n        val sumsSorted = sums.sorted\n        val sumsSortedReversed\
    \ = sumsSorted.reverse\n        val sumsSortedReversedReversed = sumsSortedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversed = sumsSortedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversed = sumsSortedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversed = sumsSortedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversed = sumsSortedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \        val sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpty9b1zdz.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36msumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumsSortedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpty9b1zdz.scala:16:89 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = arr.map(\e[36mx\e\
    [0m => x.toString.toLong).map(\e[36mx\e[0m => x.toString.toInt).map(\e[36mx\e\
    [0m => x.sum)\n\e[31m\e[31m   |\e[0m                                         \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                     value sum is not a member of Int\n\e[31m\e\
    [31m-- Error: /tmp/tmpty9b1zdz.scala:17:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36msumsSorted\e[0m = sums.sorted\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e["
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x\
    \ => x.toInt)\n        val sumsSum = sums.sum\n        val nums = arr.filter(x\
    \ => sums.contains(x)).length\n        val numsSum = nums.sum\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigitsDigits = numsSumDigits.toString.length\n\
    \        val numsSumDigitsDigitDigits = numsSumDigitsDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigits = numsSumDigitsDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigits = numsSumDigitsDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigits = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \        val numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\
    \ = numsSumDigits\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa7sgg0pa.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSum\e[0m = nums.sum\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  value sum is not a member of Int\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpa7sgg0pa.scala:31:84 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\e\
    [0m = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                            ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m\
    \ \e[35mnumsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpa7sgg0pa.scala:32:89\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\e\
    [0m = numsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits.toString.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mnumsSumDigitsDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigits\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa7sgg0pa.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        var count = 0\n        for(i <- 0 until n) {\n           \
    \ val sum = arr(i).toLong\n            val digits = sum % 10\n            count\
    \ += if (digits > 0) 1 else 0\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjo_3phbb.scala:20:21 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            count += \e[33mif\e[0m (digits > \e[31m0\e\
    [0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        \
    \             ^^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpjo_3phbb.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            count += \e[33mif\e[0m (digits > \e[31m0\e[0m) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009570
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val count\
    \ = sums.count(x => x > 0)\n        val negative = sums.count(x => x < 0)\n  \
    \      val firstNegative = sums.find(x => x < 0).getOrElse(0)\n        val firstPositive\
    \ = sums.find(x => x > 0).getOrElse(0)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        val firstNegativeSign = math.signum(firstNegative)\n        val firstPositiveSign\
    \ = math.signum(firstPositive)\n        val firstNegativeSign = math.signum(firstNegative)\n\
    \        val firstPositiveSign = math.signum(firstPositive)\n        val firstNegativeSign\
    \ = math.signum(firstNegative)\n        val firstPositiveSign = math.signum(firstPositive)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv3mmqjdm.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfirstPositiveSign\e[0m =\
    \ math.signum(firstPositive)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstPositiveSign is already defined as \e[33mvalue\e[0m \e\
    [35mfirstPositiveSign\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv3mmqjdm.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfirstNegativeSign\e[0m =\
    \ math.signum(firstNegative)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstNegativeSign is already defined as \e[33mvalue\e[0m \e\
    [35mfirstNegativeSign\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv3mmqjdm.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mfirstPositiveSign\e[0m =\
    \ math.signum(firstPositive)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstPositiveSign is already defined as \e[33mvalue\e[0m \e\
    [35mfirstPositiveSign\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv3mmqjdm.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mfirstNegativeSign\e[0m =\
    \ math.signum(firstNegative)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstNegativeSign is already defined as \e[33mvalue\e[0m \e\
    [35mfirstNegativeSign\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpv3mmqjdm.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    "
  stdout: ''
  timestamp: 1660009572
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ positiveSums = sums.filter(_.isPositive)\n        val negativeSums = sums.filter(_.isNegative)\n\
    \        positiveSums.size + (negativeSums.size * -1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hw22hoh.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp4hw22hoh.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(_.isPositive)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             value isPositive is not a member of\
    \ Nothing\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4hw22hoh.scala:18:41\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnegativeSums\e[0m = sums.filter(_.isNegative)\n\e[31m\e[31m   |\e[0m     \
    \                                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                     value isNegative is not a member of Nothing\n3 errors found\n"
  stdout: ''
  timestamp: 1660009573
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => if (x < 0) x.toLong else x.toLong\
    \ % 10).sum\n        nums.count(x => x > 0 && numsSum - x > 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztbjamrr.scala:22)\n\tat Problem.main(tmpztbjamrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009575
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sum\
    \ = 0\n        arr.foreach(x => sum += x)\n        arr.count(x => x > 0 && sum\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_707lo4j.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        arr.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009577
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        for (i <- 0 until arr.length) {\n            val num = arr(i)\n\
    \            if (num < 0) num *= -1\n            val digits = num.toString.toInt\n\
    \            val sumOfDigits = digits.sum\n            if (sumOfDigits > 0) count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73h0soif.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (num < \e[31m0\e[0m) num *=\
    \ -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value *= is not a member of Long - did you mean\
    \ num.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73h0soif.scala:20:37\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36msumOfDigits\e[0m = digits.sum\n\e[31m\e[31m   |\e[0m                 \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ sum is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x)\n        val count = sums.count(x\
    \ => x > 0)\n        sums.count(x => x < 0) * count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp368omqo4.scala:22)\n\tat Problem.main(tmp368omqo4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009588
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val nums = arr.map(_.toString.toInt)\n\
    \        val sums = arr.map(_.toString.toInt).map(_.toString.toInt)\n        val\
    \ numsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt)\n\
    \        val numsSumsSumsSumsSumsSumsSumsSumsSums = arr.map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.toInt).map(_.toString.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyd5x_fl1.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpyd5x_fl1.scala:26:5 ---------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x)).toSet\n        val\
    \ numsSums = nums.intersect(sums)\n        numsSums.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0x8b7_db.scala:22)\n\tat Problem.main(tmp0x8b7_db.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x >= 0).map(x => x.toString.toInt).sum\n        if (nums <\
    \ 0) nums.toLong * -1\n        else nums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8pk78v6.scala:22)\n\tat Problem.main(tmpk8pk78v6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(_ > x).size)\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjtd7e2ml.scala:22)\n\tat Problem.main(tmpjtd7e2ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798927
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for (i <- 0 until n) {\n            sum\
    \ += arr(i)\n        }\n        if (sum > 0) {\n            sum\n        } else\
    \ {\n            arr.takeWhile(_ > 0).sum\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_81p7mzj.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009587
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ positiveSums = sums.filter(sum > 0)\n        positiveSums.count(sum)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnean_7f7.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpnean_7f7.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(sum\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \  ^^^\e[0m\n\e[31m   |\e[0m                                       Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnean_7f7.scala:18:27\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        positiveSums.count(sum)\n\
    \e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m   |\e[0m    \
    \                       Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009589
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.foldLeft(mutable.Map[Long, Long]()){\n            case (acc, x) => acc\
    \ + (x -> (acc.getOrElse(x, 0) + 1))\n        }\n        sums.filter(_._2 > 0).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphx9qbgqj.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = arr.foldLeft(mutable.Map[\e\
    [35mLong\e[0m, \e[35mLong\e[0m]()){\n\e[31m\e[31m   |\e[0m                   \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                                Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphx9qbgqj.scala:16:33\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e\
    [0m (acc, x) => acc + (x -> (acc.getOrElse(x, \e[31m0\e[0m) + \e[31m1\e[0m))\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of Any, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphx9qbgqj.scala:16:46 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, x) => acc + (x -> (acc.getOrElse(x,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             value getOrElse is not a member of Any\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmphx9qbgqj.scala:18:13 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        sums.filter(_._2 > \e[31m0\e[0m).size\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value filter is not a member\
    \ of Any\n4 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val count\
    \ = sums.count(x => x > 0)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpypbmkf2e.scala:22)\n\tat Problem.main(tmpypbmkf2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ val numsSums = sums.filter(_ > 0)\n        numsSums.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9difjfk.scala:23)\n\tat Problem.main(tmpv9difjfk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009593
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x.sum)\n        sums.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptic3rfxv.scala:15:61 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = arr.map(\e[36mx\e\
    [0m => x.toString.toInt).map(\e[36mx\e[0m => x.sum)\n\e[31m\e[31m   |\e[0m   \
    \                                                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                        value sum is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0).map(_.toInt)\n        val sums = nums.map(_.toInt).sum\n\
    \        sums > 0 ? sums : 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl82ws45n.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums > \e[31m0\e[0m ? sums : \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               value\
    \ ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toList\n        val sums = nums.map(x => x.toString.toLong).map(x => x.toInt).map(x\
    \ => x.sum)\n        sums.count(x => x > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpql0r_yuq.scala:16:81 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = nums.map(\e\
    [36mx\e[0m => x.toString.toLong).map(\e[36mx\e[0m => x.toInt).map(\e[36mx\e[0m\
    \ => x.sum)\n\e[31m\e[31m   |\e[0m                                           \
    \                                    ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                           value sum is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpql0r_yuq.scala:17:26 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        sums.count(\e[36mx\e[0m => x > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a\
    \ member of Nothing, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009592
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ val counts = sums.groupBy(x => math.abs(x))\n        val result = counts.mapValues(_.size).sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb575fbnh.scala:18:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = counts.mapValues(_.size).sum\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m           No implicit Ordering defined for B\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m           where:    B is a type variable with constraint >: (Long,\
    \ Int)\n\e[31m   |\e[0m           .\n1 error found\n"
  stdout: ''
  timestamp: 1660009590
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.foldLeft(Map[Long, Long]()){\n            case (acc, x) => acc + (x ->\
    \ (acc.getOrElse(x, 0) + 1))\n        }\n        sums.filter(_._2 > 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5czti21g.scala:16:62 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m (acc, x) => acc + (x -> (acc.getOrElse(x,\
    \ \e[31m0\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of AnyVal, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5czti21g.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        sums.filter(_._2 > \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue length\
    \ is not a member of scala.collection.mutable.Map[Long, Long]\n2 errors found\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.size\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.size\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.sum\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.sum\n        val positiveSumsSumAbsSumAbs = math.abs(positiveSumsSumAbsSum)\n\
    \        val negativeSumsSumAbsSumAbs = math.abs(negativeSumsSumAbsSum)\n    \
    \    val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.size\n     \
    \   val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.size\n      \
    \  val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.sum\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = math.abs(positiveSumsSumAbsSumAbsSum)\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = math.abs(negativeSumsSumAbsSumAbsSum)\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbs.size\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbs.size\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbs.sum\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbsSumAbsSumAbs.sum\n        val positiveSumsSumAbsSumAbsSumAbs\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvs7lbzva.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:25:57\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mpositiveSumsSumAbsCount\e[0m = positiveSumsSumAbs.size\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      value size is not a member of\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvs7lbzva.scala:26:57 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsCount\e\
    [0m = negativeSumsSumAbs.size\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                    value size is not a member of Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpvs7lbzva.scala:27:55 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSum\e[0m =\
    \ positiveSumsSumAbs.sum\n\e[31m\e[31m   |\e[0m                              \
    \      ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \          value sum is not a member of Long\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvs7lbzva.scala:28:55 ------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSum\e[0m = negativeSumsSumAbs.sum\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value sum is not a member\
    \ of Long\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvs7lbzva.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660009548
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ positiveSums = sums.filter(sum => sum > 0)\n        val negativeSums = sums.filter(sum\
    \ => sum < 0)\n        positiveSums.size + (negativeSums.size * negativeSums.sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac_qifk5.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpac_qifk5.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(\e\
    [36msum\e[0m => sum > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac_qifk5.scala:18:50\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mnegativeSums\e[0m = sums.filter(\e[36msum\e[0m => sum < \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                              ^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of Nothing, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import concurrent"
  stdout: ''
  timestamp: 1660009595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) x.toLong % 10 else x.toLong / 10).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvoxj1xnd.scala:20)\n\tat Problem.main(tmpvoxj1xnd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = nums.map(x => x.toString.toInt).map(x => x *\
    \ x).sum\n        sums.toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ckprc1s.scala:21)\n\tat Problem.main(tmp_ckprc1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val counts\
    \ = sums.groupBy(x => math.abs(x))\n        val numsWithSum = nums.filter(x =>\
    \ counts(x) > 1)\n        numsWithSum.size + (nums.size - numsWithSum.size)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjnacnf21.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsWithSum\e[0m = nums.filter(\e\
    [36mx\e[0m => counts(x) > \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m               \
    \                            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a\
    \ member of List[Long], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1660009594
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSet = nums.toSet\n        val numsSortedSet = nums.toSeq.sortBy(_.toLong)\n\
    \        val numsSortedSetSet = numsSortedSet.toSet\n        val numsSortedSetSetSet\
    \ = numsSortedSetSet.toSet\n        val numsSortedSetSetSetSet = numsSortedSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSet = numsSortedSetSetSetSet.toSet\n      \
    \  val numsSortedSetSetSetSetSetSet = numsSortedSetSetSetSetSet.toSet\n      \
    \  val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSortedSetSetSetSetSetSetSetSetSet.toSet\n\
    \        val numsSortedSetSetSetSetSetSetSetSetSetSet = numsSorted\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp677edpoq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsSortedSetSetSetSetSetSetSet\e\
    [0m = numsSortedSetSetSetSetSetSet.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSortedSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp677edpoq.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetSetSetSetSetSetSetSet\e[0m = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSortedSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp677edpoq.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetSetSetSetSetSetSetSet\e[0m = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSortedSetSetSetSetSetSetSetSet is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSortedSetSetSetSetSetSetSetSet\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp677edpoq.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSortedSetSetSetSetSetSetSetSet\e[0m = numsSortedSetSetSetSetSetSetSet.toSet\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSort"
  stdout: ''
  timestamp: 1660009591
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        sums.filter(_.toLong\
    \ > 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8uz13jho.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8uz13jho.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums.filter(_.toLong > \e[31m0\e[0m).size\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toLong\
    \ is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sum = nums.sum\n        val digits = nums.map(_.toString.toInt)\n\
    \        val negative = digits.map(_.toInt).sum > 0\n        val firstNegative\
    \ = digits.map(_.toInt).takeWhile(_ < 0).sum\n        val firstPositive = digits.map(_.toInt).takeWhile(_\
    \ >= 0).sum\n        val firstPositiveDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).head\n        val firstNegativeDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).head\n        val firstNegativeDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigit = digits.map(_.toInt).takeWhile(_\
    \ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ < 0).last\n        val firstPositiveDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = digits.map(_.toInt).takeWhile(_ >= 0).last\n        val firstNegativeDigitDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz4oayrwf.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpz4oayrwf.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfirstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\e[0m = digits.map(_.toInt).takeWhile(_\
    \ >= \e[31m0\e[0m).last\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstPositiveDigitDigitDigitDigitDigitDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mfirstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz4oayrwf.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mfirstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = digits.map(_.toInt).takeWhile(_ < \e[31m0\e[0m).last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstNegativeDigitDigitDigitDigitDigitDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mfirstNegativeDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpz4oayrwf.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mfirstPositiveDigitDigitDigitDigitDigitDigitDigitDigit\e\
    [0m = digits.map(_.toInt).takeWhile(_ >= \e[31m0\e[0m).last\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstPositiveDigitDigitDigitDigitDigitDigitDigitDigit is already\
    \ defined as \e[33mvalue\e[0m \e[35mfirstPositiveDigitDigitDigitDig"
  stdout: ''
  timestamp: 1660009596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = arr.map(x => x.toString.toInt).map(x => x * x).map(x\
    \ => x.toLong)\n        val sumsSum = sums.sum\n        val sumsSum2 = sums.map(x\
    \ => x.toLong).sum\n        val sumsSum3 = sums.map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val sumsSum4 = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val sumsSum5 = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).sum\n        val sumsSum6 = sums.map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val sumsSum7\
    \ = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val sumsSum8 = sums.map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val sumsSum9 = sums.map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).sum\n        val sumsSum10 = sums.map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n        val sumsSum11\
    \ = sums.map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x\
    \ => x.toLong).map(x => x.toLong).map(x => x.toLong).map(x => x.toLong).sum\n\
    \        val sumsSum12 = sums.map(x => x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjze32e98.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjze32e98.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009598
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for (i <- arr) {\n            sum += i\n\
    \            if (sum > 0) {\n                count += 1\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hc80ui3.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        if (sums > 0) sums else 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlymi7qp.scala:22)\n\tat Problem.main(tmpvlymi7qp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSet = nums.toSet\n        val numsSum = nums.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n        val\
    \ numsSumSet2 = numsSumSet.filter(_ > 0)\n        val numsSumSet3 = numsSumSet2.filter(_\
    \ > 0)\n        numsSumSet3.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwjm7wl01.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value toSet is not a member of Int - did you mean numsSum.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0).map(_.toInt)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums > 0 ? sums : 0\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcmq_2tvs.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums > \e[31m0\e[0m ? sums : \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m               value\
    \ ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSum\
    \ = sums.filter(x => x > 0).size\n        numsSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1c6sfjo2.scala:22)\n\tat Problem.main(tmp1c6sfjo2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0).map(_.toInt)\n        val sums = nums.map(x => math.abs(x))\n\
    \        val count = sums.count(_ > 0)\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2zd0upk3.scala:26)\n\tat Problem.main(tmp2zd0upk3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x => x >\
    \ 0)\n        val negativeSums = sums.filter(x => x < 0)\n        positiveSums.count(x\
    \ => x > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzbuh34b.scala:22)\n\tat Problem.main(tmpkzbuh34b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009613
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => math.abs(x)).sum\n        nums.filter(_\
    \ > 0).count(x => numsSum - math.abs(x) > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfmdxb4wm.scala:22)\n\tat Problem.main(tmpfmdxb4wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sum = nums.sum\n        if (sum < 0) sum.abs.toLong\n\
    \        else sum\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1elki7x5.scala:23)\n\tat Problem.main(tmp1elki7x5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009614
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        arr.foreach(x => {\n            val digits = x.toString.reverse.map(_.toInt)\n\
    \            val sum = digits.sum\n            if (sum > 0) {\n              \
    \  count += 1\n            }\n        })\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptd7al5h2.scala:27)\n\tat Problem.main(tmptd7al5h2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val sums\
    \ = digits.map(_.sum)\n        val positiveSums = sums.filter(_.isPositive)\n\
    \        val negativeSums = sums.filter(_.isNegative)\n        val positiveSumCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumCount = negativeSums.count(_\
    \ > 0)\n        val positiveSumSum = positiveSums.sum\n        val negativeSumSum\
    \ = negativeSums.sum\n        val positiveSumSumCount = positiveSums.count(_ >\
    \ 0)\n        val negativeSumSumCount = negativeSums.count(_ > 0)\n        val\
    \ positiveSumSumSum = positiveSums.sum\n        val negativeSumSumSum = negativeSums.sum\n\
    \        val positiveSumSumSumCount = positiveSums.count(_ > 0)\n        val negativeSumSumSumCount\
    \ = negativeSums.count(_ > 0)\n        val positiveSumSumSumSum = positiveSums.sum\n\
    \        val negativeSumSumSumSum = negativeSums.sum\n        val positiveSumSumSumCount\
    \ = positiveSums.count(_ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_\
    \ > 0)\n        val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > 0)\n        val negativeSumSumSumCount = negativeSums.count(_ > 0)\n     \
    \   val positiveSumSumSumSum = positiveSums.sum\n        val negativeSumSumSumSum\
    \ = negativeSums.sum\n        val positiveSumSumSumSumCount = positiveSums.count(_\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp6f3m6ii9.scala:52:62 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumSumSumSumCount\e\
    [0m = positiveSums.count(_ > \n\e[31m\e[31m   |\e[0m                         \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6f3m6ii9.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumSumSumCount\e\
    [0m = positiveSums.count(_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpositiveSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mpositiveSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6f3m6ii9.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumSumSumCount\e\
    [0m = negativeSums.count(_ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnegativeSumSumSumCount is already defined as \e[33mvalue\e\
    [0m \e[35mnegativeSumSumSumCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6f3m6ii9.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumSumSumSum\e[0m\
    \ = positiveSums.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mpositiveSumSumSumSum is already defined as \e[33mvalue\e[0m\
    \ \e[35mpositiveSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6f3m6ii9.scala:35:12 ---------------------------"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until n) {\n            val sum = arr(i).toLong\n            if(sum > 0)\
    \ {\n                sums += sum\n            }\n        }\n        sums.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2m0qu3w.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009607
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toLong).map(x => x.toString.toLong).map(x\
    \ => x.toString.toLong).map(x => x.toString.toLong)\n        val sumsSum = sums.sum\n\
    \        val numsSum = nums.sum\n        val numsSumDigits = numsSum.toString.length\n\
    \        val sumsSumDigits = sumsSum.toString.length\n        val numsSumDigitDigits\
    \ = numsSumDigits.toString.length\n        val sumsSumDigitDigits = sumsSumDigits.toString.length\n\
    \        val numsSumDigitDigitDigits = numsSumDigitDigits.toString.length\n  \
    \      val sumsSumDigitDigitDigits = sumsSumDigitDigits.toString.length\n    \
    \    val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigitDigitDigitDigits = numsSumDigitDigitDigits.toString.length\n\
    \        val sumsSumDigitDigitDigitDigits = sumsSumDigitDigitDigits.toString.length\n\
    \        val numsSumDigit\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppy5x_ctf.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy5x_ctf.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumDigitDigitDigitDigits\e[0m = numsSumDigitDigitDigits.toString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitDigitDigitDigits is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumDigitDigitDigitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy5x_ctf.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36msumsSumDigitDigitDigitDigits\e\
    [0m = sumsSumDigitDigitDigits.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumsSumDigitDigitDigitDigits is already defined as \e[33mvalue\e\
    [0m \e[35msumsSumDigitDigitDigitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy5x_ctf.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigitDigitDigitDigits\e\
    [0m = numsSumDigitDigitDigits.toString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitDigitDigitDigits is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumDigitDigitDigitDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppy5x_ctf.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36msumsSumDigitDigitDigitDigits\e\
    [0m = sumsSumDigitDigitDigits.t"
  stdout: ''
  timestamp: 1660009612
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ val count = sums.count(x => x > 0)\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8vstrxhv.scala:26)\n\tat Problem.main(tmp8vstrxhv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009616
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val nums = arr.filter(x => x > 0).map(x\
    \ => digits(x) - digits(x - 1))\n        nums.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3glqff_m.scala:16:58\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e\
    [0m = arr.filter(\e[36mx\e[0m => x > \e[31m0\e[0m).map(\e[36mx\e[0m => digits(x)\
    \ - digits(x - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                         \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                                Found:    (x : Long)\n\e[31m   |\e[0m       \
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3glqff_m.scala:16:70 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = arr.filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m).map(\e[36mx\e[0m => digits(x) - digits(x - \e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                            ^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                                     Found:    Long\n\e[31m   |\e[0m        \
    \                                                  Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ nums = sums.filter(x => x > 0)\n        nums.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrd9tz3a.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbrd9tz3a.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = sums.filter(\e\
    [36mx\e[0m => x > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \             ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\
    \e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\
    \e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\
    \e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\
    \e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sums = arr.map(x => if (x < 0) x.toLong * -1 else x).toList\n\
    \        val sumsSorted = sums.sortWith((x, y) => x > y)\n        val sumsSortedReversed\
    \ = sumsSorted.reverse\n        val sumsSortedReversedSum = sumsSortedReversed.sum\n\
    \        val sumsSortedReversedSum2 = sumsSortedReversedSum * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum3 = sumsSortedReversedSum2 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum4 = sumsSortedReversedSum3 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum5 = sumsSortedReversedSum4 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum6 = sumsSortedReversedSum5 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum7 = sumsSortedReversedSum6 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum8 = sumsSortedReversedSum7 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum9 = sumsSortedReversedSum8 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum10 = sumsSortedReversedSum9 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum11 = sumsSortedReversedSum10 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum12 = sumsSortedReversedSum11 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum13 = sumsSortedReversedSum12 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum14 = sumsSortedReversedSum13 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum15 = sumsSortedReversedSum14 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum16 = sumsSortedReversedSum15 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum17 = sumsSortedReversedSum16 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum18 = sumsSortedReversedSum17 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum19 = sumsSortedReversedSum18 * sumsSortedReversedSum\n\
    \        val sumsSortedReversedSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcd82c15r.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpcd82c15r.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x > 0).map(x => math.abs(x))\n        val sum = nums.sum\n\
    \        val numsLessThanZero = nums.filter(x => x < 0).map(x => math.abs(x))\n\
    \        val numsLessThanZeroSum = numsLessThanZero.sum\n        val numsLessThanZeroSumLessThanZero\
    \ = numsLessThanZeroSum - numsLessThanZero.head\n        val numsLessThanZeroSumLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.head - numsLessThanZero.tail.head\n      \
    \  val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZero = numsLessThanZeroSumLessThanZero.tail.head\
    \ - numsLessThanZero.tail.tail.head\n        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.head - numsLessThanZero.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.head - numsLessThanZero.tail.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.head - numsLessThanZero.tail.tail.tail.tail.tail.tail.head\n\
    \        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.tail.tail.head -\
    \ numsLessThanZero.tail.tail.tail.tail.tail.tail.tail.head\n        val numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ - numsLessThanZero.tail.tail.tail.tail.tail.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ye473ae.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp6ye473ae.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\e\
    [0m = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.head - numsLessThanZero.tail.tail.tail.tail.tail.tail.head\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp6ye473ae.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\e\
    [0m = numsLessThanZeroSumLessThanZero.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ - numsLessThanZero.tail.tail.tail.tail.tail.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numsLessThanZeroSumLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZeroLessThanZero\n\
    \e[31m   |\e[0m\e[0m\n\e[31m  "
  stdout: ''
  timestamp: 1660009619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => math.abs(x))\n       \
    \ sums.count(_ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp511hgnug.scala:25)\n\tat Problem.main(tmp511hgnug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009550
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val positiveSums\
    \ = sums.filter(x => x > 0)\n        val negativeSums = sums.filter(x => x < 0)\n\
    \        val positiveSumsCount = positiveSums.size\n        val negativeSumsCount\
    \ = negativeSums.size\n        val positiveSumsSum = positiveSums.sum\n      \
    \  val negativeSumsSum = negativeSums.sum\n        val positiveSumsSumAbs = math.abs(positiveSumsSum)\n\
    \        val negativeSumsSumAbs = math.abs(negativeSumsSum)\n        val positiveSumsSumAbsCount\
    \ = positiveSumsSumAbs.toInt\n        val negativeSumsSumAbsCount = negativeSumsSumAbs.toInt\n\
    \        val positiveSumsSumAbsSum = positiveSumsSumAbs.toLong\n        val negativeSumsSumAbsSum\
    \ = negativeSumsSumAbs.toLong\n        val positiveSumsSumAbsSumAbs = positiveSumsSumAbsSum.toLong\n\
    \        val negativeSumsSumAbsSumAbs = negativeSumsSumAbsSum.toLong\n       \
    \ val positiveSumsSumAbsSumAbsCount = positiveSumsSumAbsSumAbs.toInt\n       \
    \ val negativeSumsSumAbsSumAbsCount = negativeSumsSumAbsSumAbs.toInt\n       \
    \ val positiveSumsSumAbsSumAbsSum = positiveSumsSumAbsSumAbs.toLong\n        val\
    \ negativeSumsSumAbsSumAbsSum = negativeSumsSumAbsSumAbs.toLong\n        val positiveSumsSumAbsSumAbsSumAbs\
    \ = positiveSumsSumAbsSumAbsSumAbs.toLong\n        val negativeSumsSumAbsSumAbsSumAbs\
    \ = negativeSumsSumAbsSumAbsSumAbs.toLong\n        val positiveSumsSumAbsSumAbsSumAbsCount\
    \ = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n        val negativeSumsSumAbsSumAbsSumAbsCount\
    \ = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n        val positiveSumsSumAbsSumAbsSumAbsSum\
    \ = positiveSumsSumAbsSumAbsSumAbsSum.toLong\n        val negativeSumsSumAbsSumAbsSumAbsSum\
    \ = negativeSumsSumAbs\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:35:45 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSumAbsSumAbs\e\
    [0m = positiveSumsSumAbsSumAbsSumAbs.toLong\n\e[31m\e[31m   |\e[0m           \
    \                                  ^\e[0m\n\e[31m   |\e[0m               Recursive\
    \ \e[33mvalue\e[0m \e[35mpositiveSumsSumAbsSumAbsSumAbs\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:36:45 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnegativeSumsSumAbsSumAbsSumAbs\e\
    [0m = negativeSumsSumAbsSumAbsSumAbs.toLong\n\e[31m\e[31m   |\e[0m           \
    \                                  ^\e[0m\n\e[31m   |\e[0m               Recursive\
    \ \e[33mvalue\e[0m \e[35mnegativeSumsSumAbsSumAbsSumAbs\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:37:50 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mpositiveSumsSumAbsSumAbsSumAbsCount\e\
    [0m = positiveSumsSumAbsSumAbsSumAbsCount.toInt\n\e[31m\e[31m   |\e[0m       \
    \                                           ^\e[0m\n\e[31m   |\e[0m          Recursive\
    \ \e[33mvalue\e[0m \e[35mpositiveSumsSumAbsSumAbsSumAbsCount\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:38:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnegativeSumsSumAbsSumAbsSumAbsCount\e[0m = negativeSumsSumAbsSumAbsSumAbsCount.toInt\n\
    \e[31m\e[31m   |\e[0m                                                  ^\e[0m\n\
    \e[31m   |\e[0m          Recursive \e[33mvalue\e[0m \e[35mnegativeSumsSumAbsSumAbsSumAbsCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9zi9drly.scala:39:48\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1660009522
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        for(i <- 0 until arr.length) {\n            val digit = arr(i).abs\n\
    \            if(digit > 0) count += digit\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6rrga9ap.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m(digit > \e[31m0\e[0m) count\
    \ += digit\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt).sum\n   \
    \     sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf21ac_y2.scala:20)\n\tat Problem.main(tmpf21ac_y2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x).map(x => x.toInt).sum\n   \
    \     sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf21ac_y2.scala:20)\n\tat Problem.main(tmpf21ac_y2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sum = digits.sum\n        val negativeSum\
    \ = sum.filter(_ < 0).sum\n        val positiveSum = sum.filter(_ >= 0).sum\n\
    \        val positiveSumDigits = positiveSum.toString.toInt\n        val negativeSumDigits\
    \ = negativeSum.toString.toInt\n        val positiveSumDigitCount = positiveSumDigits\
    \ / 10\n        val negativeSumDigitCount = negativeSumDigits / 10\n        val\
    \ positiveSumDigitCount2 = positiveSumDigits % 10\n        val negativeSumDigitCount2\
    \ = negativeSumDigits % 10\n        val positiveSumDigitCount3 = positiveSumDigits\
    \ / 100\n        val negativeSumDigitCount3 = negativeSumDigits / 100\n      \
    \  val positiveSumDigitCount4 = positiveSumDigits / 1000\n        val negativeSumDigitCount4\
    \ = negativeSumDigits / 1000\n        val positiveSumDigitCount5 = positiveSumDigits\
    \ / 10000\n        val negativeSumDigitCount5 = negativeSumDigits / 10000\n  \
    \      val positiveSumDigitCount6 = positiveSumDigits / 100000\n        val negativeSumDigitCount6\
    \ = negativeSumDigits / 100000\n        val positiveSumDigitCount7 = positiveSumDigits\
    \ / 1000000\n        val negativeSumDigitCount7 = negativeSumDigits / 1000000\n\
    \        val positiveSumDigitCount8 = positiveSumDigits / 10000000\n        val\
    \ negativeSumDigitCount8 = negativeSumDigits / 10000000\n        val positiveSumDigitCount9\
    \ = positiveSumDigits / 100000000\n        val negativeSumDigitCount9 = negativeSumDigits\
    \ / 100000000\n        val positiveSumDigitCount10 = positiveSumDigits / 1000000000\n\
    \        val negativeSumDigitCount10 = negativeSumDigits / 1000000000\n      \
    \  val positiveSumDigitCount11 = positiveSumDigits / 10000000000\n        val\
    \ negativeSumDigitCount11 = negativeSumDigits / 10000000000\n        val positiveSumDigitCount12\
    \ = positiveSumDigits / 100000000000\n        val negativeSumDigitCount12 = negativeSumDigits\
    \ / 100000000000\n        val positiveSumDigitCount13 = positiveSumDigits / 1000000000000\n\
    \        val negativeSumDigitCount13 = negativeSumDigits / 1000000000000\n   \
    \     val positiveSumDigitCount14 = positiveSumDigits / 10000000000000\n     \
    \   val negativeSumDigitCount14 = negativeSumDigits / 10000000000000\n       \
    \ val positiveSumDigitCount15 = positiveSumDigits / 100000000000000\n        val\
    \ negativeSumDigitCount15 = negativeSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd65uw110.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnegativeSum\e[0m = sum.filter(_\
    \ < \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd65uw110.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mpositiveSum\e[0m = sum.filter(_\
    \ >= \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value filter is not a member of\
    \ Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd65uw110.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val sum = 0\n        for(i <- 0 until n){\n            sum\
    \ += arr(i)\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4mdu50jm.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => if (x < 0) -x else x)\n        val\
    \ count = sums.count(x => x > 0)\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7n7ld3zk.scala:21)\n\tat Problem.main(tmp7n7ld3zk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdmzfdjgi.scala:22)\n\tat Problem.main(tmpdmzfdjgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val numsSet = nums.toSet\n        val numsSums = nums.map(x\
    \ => math.abs(x))\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSumsSet = numsSums.toSet\n        val numsSumsSet\
    \ = numsSums.toSet\n        val numsSum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9okrbsfl.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9okrbsfl.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumsSet\e[0m = numsSums.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumsSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9okrbsfl.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSet\e[0m = numsSums.toSet\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsSumsSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumsSet\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp9okrbsfl.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSet\e[0m = numsSums.toSet\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSumsSet\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSumsSet\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9okrbsfl.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumsSet\e[0m = numsSums.toSet\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSet is already defined as \e[33mvalue\e[0m \e[35mnumsSumsSet\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9okrbsfl.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m     "
  stdout: ''
  timestamp: 1660009621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.count(y => y == x))\n        numsSums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1_91sahh.scala:22)\n\tat Problem.main(tmp1_91sahh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsWithSums\
    \ = nums.filter(x => sums.contains(x))\n        numsWithSums.size\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps3hr_e43.scala:22)\n\tat Problem.main(tmps3hr_e43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009631
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val numsSum = nums.sum\n        val numsSumDigits\
    \ = numsSum.toString.length\n        val numsSumDigit = numsSum.toString.charAt(0)\n\
    \        val numsSumDigits = numsSum.toString.charAt(numsSumDigits)\n        numsSumDigits\
    \ - numsSumDigit\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2tv77lsr.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigits\e[0m = numsSum.toString.charAt(numsSumDigits)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigits is already defined as \e[33mvalue\e[0m \e[35mnumsSumDigits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val digitSums = digits.map(_.sum)\n   \
    \     val nums = arr.filter(_ > 0)\n        val numsWithSum = nums.zip(digitSums)\n\
    \        numsWithSum.count(_._2 > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpssl8nue4.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mdigitSums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   value sum is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpssl8nue4.scala:19:31 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        numsWithSum.count(_._2 > \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0mvalue > is\
    \ not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009635
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x.toInt)\n        val sumsSorted =\
    \ sums.sortWith((x, y) => x < y)\n        val sumsSortedCount = sumsSorted.length\n\
    \        val sumsSortedSum = sumsSorted.sum\n        val sumsSortedSumCount =\
    \ sumsSortedSum.toInt\n        val sumsSortedSumCount2 = sumsSortedSumCount *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount3 = sumsSortedSumCount2 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount4 = sumsSortedSumCount3 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount5 = sumsSortedSumCount4 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount6 = sumsSortedSumCount5 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount7 = sumsSortedSumCount6 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount8 = sumsSortedSumCount7 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount9 = sumsSortedSumCount8 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount10 = sumsSortedSumCount9 *\
    \ sumsSortedSumCount\n        val sumsSortedSumCount11 = sumsSortedSumCount10\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount12 = sumsSortedSumCount11\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount13 = sumsSortedSumCount12\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount14 = sumsSortedSumCount13\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount15 = sumsSortedSumCount14\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount16 = sumsSortedSumCount15\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount17 = sumsSortedSumCount16\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount18 = sumsSortedSumCount17\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount19 = sumsSortedSumCount18\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount20 = sumsSortedSumCount19\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount21 = sumsSortedSumCount20\
    \ * sumsSortedSumCount\n        val sumsSortedSumCount22 = sumsSortedSum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprrcjbb8o.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009633
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for (i <- arr) {\n            sum += i\n\
    \            if (sum > 0) {\n                count += 1\n            }\n     \
    \   }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5hc80ui3.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009600
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until n){\n            val sum = arr(i).toLong\n            sums += sum\n\
    \        }\n        sums.sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxudyv7_v.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val sums = digits.map(_.sum)\n        val\
    \ positiveSums = sums.filter(sum => sum > 0)\n        positiveSums.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp723kcbrn.scala:16:32 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value sum is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp723kcbrn.scala:17:50 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mpositiveSums\e[0m = sums.filter(\e\
    [36msum\e[0m => sum > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(x => x > 0).map(x => x.toString.toInt)\n        val sums = nums.map(x\
    \ => x.sum)\n        sums.filter(x => x > 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5czx1fwv.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = nums.map(\e\
    [36mx\e[0m => x.sum)\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value sum is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5czx1fwv.scala:17:27\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        sums.filter(\e[36mx\e\
    [0m => x > \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Nothing, but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m \
    \ import Byte.byte2double\n\e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e\
    [0m  import Byte.byte2int\n\e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e\
    [0m  import Byte.byte2short\n\e[31m   |\e[0m  import Char.char2double\n\e[31m\
    \   |\e[0m  import Char.char2float\n\e[31m   |\e[0m  import Char.char2int\n\e\
    [31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\
    \e[31m   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009637
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val arr\
    \ = arr.toList\n        val sum = 0\n        val nums = arr.filter(_ > 0)\n  \
    \      val sign = arr.filter(_ < 0).head\n        val signDigit = math.signum(sign)\n\
    \        val signDigits = signDigit % 10\n        val numDigits = arr.filter(_\
    \ >= 0).length\n        val numDigitSum = numDigits.map(x => math.signum(x / 10)).sum\n\
    \        val numDigitSums = numDigitSum.map(x => math.signum(x)).sum\n       \
    \ val numDigitSumsSum = numDigitSums.map(x => math.signum(x)).sum\n        val\
    \ numDigitSumsSums = numDigitSumsSum.map(x => math.signum(x)).sum\n        val\
    \ numDigitSumsSumsSum = numDigitSumsSums.map(x => math.signum(x)).sum\n      \
    \  val numDigitSumsSumsSums = numDigitSumsSumsSum.map(x => math.signum(x)).sum\n\
    \        val numDigitSumsSumsSumsSum = numDigitSumsSumsSums.map(x => math.signum(x)).sum\n\
    \        val numDigitSumsSumsSumsSums = numDigitSumsSumsSumsSum.map(x => math.signum(x)).sum\n\
    \        val numDigitSumsSumsSumsSumsSum = numDigitSumsSumsSumsSums.map(x => math.signum(x)).sum\n\
    \        val numDigitSumsSumsSumsSumsSums = numDigitSumsSumsSumsSumsSum.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSum = numDigitSumsSumsSumsSumsSumsSums.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSumsSum = numDigitSumsSumsSumsSumsSumsSumsSum.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSumsSum = numDigitSumsSumsSumsSumsSumsSumsSums.map(x\
    \ => math.signum(x)).sum\n        val numDigitSumsSumsSumsSumsSumsSumsSumsSum\
    \ = numDigitSumsSumsSumsSumsSumsSumsSumsSum.map(x => math.sig\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb0kbzy19.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb0kbzy19.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitSumsSumsSumsSumsSumsSumsSum\e[0m = numDigitSumsSumsSumsSumsSumsSumsSums.map(\e\
    [36mx\e[0m => math.signum(x)).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumDigitSumsSumsSumsSumsSumsSumsSum is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumDigitSumsSumsSumsSumsSumsSumsSum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb0kbzy19.scala:15:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36marr\e[0m = arr.toList\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\
    \e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb0kbzy19.scala:32:46\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnumDigitSumsSumsSumsSumsSumsSum\e[0m = numDigitSumsSumsSumsSumsSumsSums.map(\e\
    [36mx\e[0m => math.signum(x)).sum\n\e[31m\e[31m   |\e[0m                     \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: numDigitSumsSumsSumsSumsSumsSums\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpb0kbzy19.scala:33:50\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumDigitSumsSumsSumsSumsSumsSumsSum\e[0m = numDigitSumsSumsSumsSumsSumsSumsSum.map(\e\
    [36mx\e[0m => math.signum(x)).sum\n\e[31m\e[31m   |\e[0m                     \
    \                             ^\e"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sum = 0\n        for(i <- 0 until n){\n            sum\
    \ += arr(i)\n        }\n        if(sum > 0){\n            return n\n        }\n\
    \        else{\n            val firstDigit = math.abs(arr(0))\n            val\
    \ lastDigit = math.abs(arr(n-1))\n            val firstDigitSum = math.abs(arr(0)\
    \ + (lastDigit - firstDigit))\n            val lastDigitSum = math.abs(arr(n-1)\
    \ + (firstDigit - lastDigit))\n            if(firstDigitSum > lastDigitSum){\n\
    \                return n\n            }\n            else{\n                return\
    \ n-1\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprwsl9hfb.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => math.abs(x))\n        val positiveSums = sums.filter(x => x >\
    \ 0)\n        val negativeSums = sums.filter(x => x < 0)\n        positiveSums.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9j8yw3s5.scala:22)\n\tat Problem.main(tmp9j8yw3s5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum\
    \ = 0\n        var count = 0\n        for(i <- arr) {\n            sum += i\n\
    \            count += if(sum > 0) 1 else 0\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3rdqtfui.scala:19:21 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            count += \e[33mif\e[0m(sum > \e[31m0\e[0m)\
    \ \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m           \
    \          ^^\e[0m\n\e[31m   |\e[0m                     expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3rdqtfui.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += i\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp3rdqtfui.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            count += \e[33mif\e[0m(sum > \e[31m0\e[0m) \e[31m1\e[0m \e\
    [33melse\e[0m \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        if (sums > 0) sums else 0\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvlymi7qp.scala:22)\n\tat Problem.main(tmpvlymi7qp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsWithSum\
    \ = sums.filter(x => x > 0)\n        numsWithSum.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk2_gvx5b.scala:22)\n\tat Problem.main(tmpk2_gvx5b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) x.toLong else x.toLong % 10)\n        val nums = arr.filter(x\
    \ => sums.contains(x)).size\n        nums\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12mammnr.scala:21)\n\tat Problem.main(tmp12mammnr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toList\n        var sum = 0\n        var count = 0\n        for (i <-\
    \ 0 until nums.size) {\n            val num = nums(i)\n            if (num < 0)\
    \ {\n                val first = nums.take(i).sum\n                val second\
    \ = nums.drop(i).sum\n                sum += first - second\n                count\
    \ += nums.size\n            } else {\n                sum += num\n           \
    \     count += 1\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6prehe2e.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                sum += first - second\n\e[31m\e[31m \
    \  |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp6prehe2e.scala:26:20 ------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                sum += num\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) -x.toLong else x.toLong).sum\n        sums.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2me9vgq.scala:20)\n\tat Problem.main(tmpc2me9vgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009545
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val digits\
    \ = arr.map(_.toInt)\n        val sums = digits.map(x => x.toString.toInt).map(_.sum)\n\
    \        sums.count(x => x > 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8188pfq5.scala:16:59 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = digits.map(\e\
    [36mx\e[0m => x.toString.toInt).map(_.sum)\n\e[31m\e[31m   |\e[0m            \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value sum is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8188pfq5.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        sums.count(\e[36mx\e[0m => x > \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0mvalue >\
    \ is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import concurrent.duration.Deadline.DeadlineIsOrdered.mkOrderingOps\n\e[31m\
    \   |\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val sumsSet\
    \ = sums.toSet\n        val sumsSetSize = sumsSet.size\n        val numsSize =\
    \ nums.size\n        val numsSetSize = numsSet.size\n        val numsSet = nums.toSet\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \        val numsSetSize = numsSet.size\n        val numsSetSize = numsSet.size\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7vr1eodq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsSetSize\e[0m = numsSet.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mnumsSetSize is already defined as \e[33mvalue\e[0m \e[35mnumsSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7vr1eodq.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnumsSetSize\e[0m = numsSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7vr1eodq.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetSize\e[0m = numsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetSize is already defined as \e[33mvalue\e[0m \e[35mnumsSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7vr1eodq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSetSize\e[0m = numsSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnumsSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7vr1eodq.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSetSize\e[0m = numsSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSetSize is already defined as \e[33mvalue\e[0m \e[35mnumsSetSize\e\
    [0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val digits = arr.map(_.toString.toInt)\n        val sums\
    \ = digits.map(x => x.toLong).sum\n        val numsWithSum = nums.filter(x =>\
    \ sums.contains(x))\n        numsWithSum.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__rb60jo.scala:18:48 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumsWithSum\e[0m = nums.filter(\e\
    [36mx\e[0m => sums.contains(x))\n\e[31m\e[31m   |\e[0m                       \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \             value contains is not a member of Long\n1 error found\n"
  stdout: ''
  timestamp: 1660009639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.count(x => x > 0 && x.toString.toInt.toLong > numsSum)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8m2z8r9_.scala:22)\n\tat Problem.main(tmp8m2z8r9_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    val numsSumDigits = numsSum.toString.toInt\n        val numsSumDigitsLessThanZero\
    \ = numsSumDigits - 1\n        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigit = numsSumDigitsLessThanZero.toString.toInt\n\
    \        val numsSumDigitsLessThanZeroDigits = numsSumDigitsLessThanZer\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpupsj5bfx.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigitsLessThanZeroDigits\e\
    [0m = numsSumDigitsLessThanZero.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitsLessThanZeroDigits is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumDigitsLessThanZeroDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpupsj5bfx.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumDigitsLessThanZeroDigit\e[0m = numsSumDigitsLessThanZero.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitsLessThanZeroDigit is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumDigitsLessThanZeroDigit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpupsj5bfx.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSumDigitsLessThanZeroDigits\e\
    [0m = numsSumDigitsLessThanZero.toString.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitsLessThanZeroDigits is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumDigitsLessThanZeroDigits\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpupsj5bfx.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumDigitsLessThanZeroDigit\e[0m = numsSumDigitsLessThanZero.toString.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumDigitsL"
  stdout: ''
  timestamp: 1660009639
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sums = mutable.ArrayBuffer.empty[Long]\n        arr.foreach(x\
    \ => sums += x)\n        sums.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy7vpyzy.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36msums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009634
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count\
    \ = 0\n        var sum = 0\n        var sign = 1\n        for (i <- arr) {\n \
    \           sum += i\n            if (sum > 0) {\n                count += 1\n\
    \            }\n            sign *= -1\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n\
    \    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong))) == (0l));\n\
    \    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong, -2l.toLong,\
    \ 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp15d0l974.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => sums.filter(y => y > x).size)\n        numsSums.sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(countNums((List[Long]())) ==\
    \ (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplmym7uwy.scala:22)\n\tat Problem.main(tmplmym7uwy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.length\n        val sum = 0\n        var count = 0\n        for (i <- 0\
    \ until n) {\n            sum += arr(i)\n            if (sum > 0) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdqs15i7n.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += arr(i)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => x.toString.toInt).map(x => x * x)\n        val counts = sums.groupBy(x\
    \ => x).mapValues(_.size)\n        counts.map(_._2).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppq59jikj.scala:21)\n\tat Problem.main(tmppq59jikj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009646
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => math.abs(x))\n        val numsSums\
    \ = nums.map(x => math.abs(x))\n        val numsSumsSum = numsSums.map(x => math.abs(x))\n\
    \        val numsSumsSumSum = numsSumsSum.map(x => math.abs(x))\n        val numsSumsSumSumSum\
    \ = numsSumsSumSum.map(x => math.abs(x))\n        val numsSumsSumSumSumSum = numsSumsSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSum = numsSumsSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSum = numsSumsSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n        val numsSumsSumSumSumSumSumSumSumSumSumSum = numsSumsSumSumSumSumSumSumSumSumSumSumSum.map(x\
    \ => math.abs(x))\n\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp726evtuf.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSumSumSumSumSumSumSum\e\
    [0m = numsSumsSumSumSumSumSumSumSum.map(\e[36mx\e[0m => math.abs(x))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSumSumSumSumSumSumSum is already defined as \e[33mvalue\e\
    [0m \e[35mnumsSumsSumSumSumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp726evtuf.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumsSumsSumSumSumSumSumSumSumSum\e\
    [0m = numsSumsSumSumSumSumSumSumSumSum.map(\e[36mx\e[0m => math.abs(x))\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSumSumSumSumSumSumSumSum is already defined as \e\
    [33mvalue\e[0m \e[35mnumsSumsSumSumSumSumSumSumSumSum\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp726evtuf.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumsSumSumSumSumSumSumSumSumSum\e[0m = numsSumsSumSumSumSumSumSumSumSumSum.map(\e\
    [36mx\e[0m => math.abs(x))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumsSumSumSumSumSumSumSumSumSum is already defined as\
    \ \e[33mvalue\e[0m \e[35mnumsSumsSumSumSumSumSumSumSumSumSum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp726evtuf.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumsSumSumSumSumSumSumSumSumSumSum\e[0m = numsSumsSumSumSumSumSumSumSumSumSumSumSum"
  stdout: ''
  timestamp: 1660009645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(x => x.toString.toInt).sum\n\
    \        sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyp1v_4tl.scala:22)\n\tat Problem.main(tmpyp1v_4tl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009525
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val sums = arr.map(x => x.toString.toInt).map(x => x.toInt)\n\
    \        val sumsSet = sums.toSet\n        val numsSet = nums.toSet\n        val\
    \ numsSum = nums.map(x => x.toString.toInt).sum\n        val numsSumSet = numsSum.toSet\n\
    \        val numsSumSet2 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet3 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet4\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet5 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet6 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet7 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet8 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet9\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet10 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet11 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet12 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet13 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet14\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet15 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val numsSumSet16 = numsSum.map(x => x.toString.toInt).sum\n\
    \        val numsSumSet17 = numsSum.map(x => x.toString.toInt).sum\n        val\
    \ numsSumSet18 = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet19\
    \ = numsSum.map(x => x.toString.toInt).sum\n        val numsSumSet20 = numsSum.map(x\
    \ => x.toString.toInt).sum\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp7zn1vh0r.scala:40:11 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zn1vh0r.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet\e[0m = numsSum.toSet\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        value toSet is not a member of Int - did you mean numsSum.toInt?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zn1vh0r.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet2\e[0m = numsSum.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map is\
    \ not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zn1vh0r.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSumSet3\e[0m = numsSum.map(\e[36mx\e[0m => x.toString.toInt).sum\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value map is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7zn1vh0r.scala:23:34 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsSumSet4\e[0m = numsSum.map(\e\
    [36mx\e[0m => x.toString.toInt).sum\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          value map is\
    \ not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7zn1vh0r.scala:24:34\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mnumsSumSet5\e[0m = numsSum.map(\e[36mx\e[0m => x.toString.toInt).sum\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value map is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7zn1vh0r.scala:25:34 ------------------------"
  stdout: ''
  timestamp: 1660009648
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sums\
    \ = arr.map(x => if (x < 0) x.toLong - x.toLong % 10 else x.toLong)\n        val\
    \ sumsSorted = sums.sortWith(_ < _)\n        val sumsSorted = sumsSorted.toList\n\
    \        val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_\
    \ > 0)\n        val sumsSorted = sumsSorted.reverse\n        val sumsSorted =\
    \ sumsSorted.takeWhile(_ > 0)\n        val sumsSorted = sumsSorted.reverse\n \
    \       val sumsSorted = sumsSorted.takeWhile(_ > 0)\n        val sumsSorted =\
    \ sumsSorted.reverse\n        val sumsSorted = sumsSorted.takeWhile(_ > 0)\n \
    \       val sumsSorted = sumsSorted.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_u9zjkdl.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_u9zjkdl.scala:17:12 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36msumsSorted\e[0m = sumsSorted.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msumsSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35msumsSorted\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_u9zjkdl.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumsSorted\e[0m = sumsSorted.reverse\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumsSorted is already defined as \e[33mvalue\e[0m \e[35msumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_u9zjkdl.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36msumsSorted\e[0m = sumsSorted.takeWhile(_\
    \ > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumsSorted is already defined as \e[33mvalue\e[0m \e[35msumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_u9zjkdl.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36msumsSorted\e[0m = sumsSorted.reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0msumsSorted is already defined as \e[33mvalue\e[0m \e[35msumsSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_u9zjkdl.scala:21:12 ---"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val n =\
    \ arr.size\n        val m = arr.max\n        val sum = arr.sum\n        val digits\
    \ = arr.map(_.toString.toInt)\n        val digitSums = digits.map(_.sum)\n   \
    \     val digitSumsSum = digitSums.sum\n        val digitSumsSum2 = digitSumsSum\
    \ * digitSumsSum\n        val digitSumsSum3 = digitSumsSum2 * digitSumsSum\n \
    \       val digitSumsSum4 = digitSumsSum3 * digitSumsSum\n        val digitSumsSum5\
    \ = digitSumsSum4 * digitSumsSum\n        val digitSumsSum6 = digitSumsSum5 *\
    \ digitSumsSum\n        val digitSumsSum7 = digitSumsSum6 * digitSumsSum\n   \
    \     val digitSumsSum8 = digitSumsSum7 * digitSumsSum\n        val digitSumsSum9\
    \ = digitSumsSum8 * digitSumsSum\n        val digitSumsSum10 = digitSumsSum9 *\
    \ digitSumsSum\n        val digitSumsSum11 = digitSumsSum10 * digitSumsSum\n \
    \       val digitSumsSum12 = digitSumsSum11 * digitSumsSum\n        val digitSumsSum13\
    \ = digitSumsSum12 * digitSumsSum\n        val digitSumsSum14 = digitSumsSum13\
    \ * digitSumsSum\n        val digitSumsSum15 = digitSumsSum14 * digitSumsSum\n\
    \        val digitSumsSum16 = digitSumsSum15 * digitSumsSum\n        val digitSumsSum17\
    \ = digitSumsSum16 * digitSumsSum\n        val digitSumsSum18 = digitSumsSum17\
    \ * digitSumsSum\n        val digitSumsSum19 = digitSumsSum18 * digitSumsSum\n\
    \        val digitSumsSum20 = digitSumsSum19 * digitSumsSum\n        val digitSumsSum21\
    \ = digitSumsSum20 * digitSumsSum\n        val digitSumsSum22 = digitSumsSum21\
    \ * digitSumsSum\n        val digitSumsSum23 = digitSumsSum22 * digitSumsSum\n\
    \        val digitSumsSum24 = digitSumsSum23 * digitSumsSum\n        val digitSumsSum25\
    \ = digitSumsSum24 * digitSumsSum\n        val digitSumsSum26 = digitSumsSum25\
    \ * digitSumsSum\n        \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcfvnvgwo.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdigitSums\e[0m = digits.map(_.sum)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   value sum is not a member of Int\n\e[31m\e\
    [31m-- Error: /tmp/tmpcfvnvgwo.scala:20:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigitSumsSum\e[0m = digitSums.sum\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mFloatIsFractional\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e[0m \e[35mByteIsIntegral\e\
    [0m in \e[33mobject\e[0m \e[35mNumeric\e[0m match type Numeric[B] of parameter\
    \ num of \e[33mmethod\e[0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcfvnvgwo.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sum\
    \ = 0\n        arr.foreach(x => sum += x)\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnb5mtkgn.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        arr.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009647
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val arr\
    \ = arr.toList\n        val sums = arr.map(x => x.toString.toInt).map(x => x.toLong).map(x\
    \ => x.toInt)\n        val count = sums.count(x => x > 0)\n        arr.count(x\
    \ => x > 0) * (count - arr.count(x => x > 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzxa392gv.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = arr.toList\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35marr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val sum\
    \ = 0\n        arr.foreach(x => sum += x)\n        arr.count(x => x > 0)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdzxe5oy1.scala:16:29 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        arr.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009542
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.filter(_ > 0)\n        val sums = nums.map(_.toString.toInt).sum\n   \
    \     sums.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(countNums((List[Long]()))\
    \ == (0l));\n    assert(countNums((List[Long](-1l.toLong, -2l.toLong, 0l.toLong)))\
    \ == (0l));\n    assert(countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 6l.toLong, 9l.toLong, -6l.toLong, 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n\
    \    assert(countNums((List[Long](1l.toLong, 100l.toLong, 98l.toLong, -7l.toLong,\
    \ 1l.toLong, -1l.toLong))) == (4l));\n    assert(countNums((List[Long](12l.toLong,\
    \ 23l.toLong, 34l.toLong, -45l.toLong, -56l.toLong, 0l.toLong))) == (5l));\n \
    \   assert(countNums((List[Long](0l.toLong, 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong)))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53wwzelh.scala:22)\n\tat Problem.main(tmp53wwzelh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function count_nums which takes an array of integers and returns\n\
    \    // the number of elements which has a sum of digits > 0.\n    // If a number\
    \ is negative, then its first signed digit will be negative:\n    // e.g. -123\
    \ has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    //\
    \ (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n\
    \    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n\
    \    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        val nums\
    \ = arr.toSet\n        val numsSum = arr.map(x => x.toString.toInt).sum\n    \
    \    nums.filter(x => x > 0).count(x => numsSum - x > 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(countNums((List[Long]())) == (0l));\n    assert(countNums((List[Long](-1l.toLong,\
    \ -2l.toLong, 0l.toLong))) == (0l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 1l.toLong, 2l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (6l));\n\
    \    assert(countNums((List[Long](1l.toLong, 6l.toLong, 9l.toLong, -6l.toLong,\
    \ 0l.toLong, 1l.toLong, 5l.toLong))) == (5l));\n    assert(countNums((List[Long](1l.toLong,\
    \ 100l.toLong, 98l.toLong, -7l.toLong, 1l.toLong, -1l.toLong))) == (4l));\n  \
    \  assert(countNums((List[Long](12l.toLong, 23l.toLong, 34l.toLong, -45l.toLong,\
    \ -56l.toLong, 0l.toLong))) == (5l));\n    assert(countNums((List[Long](0l.toLong,\
    \ 1l.toLong))) == (1l));\n    assert(countNums((List[Long](1l.toLong))) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6q0s6zlr.scala:22)\n\tat Problem.main(tmp6q0s6zlr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009547
