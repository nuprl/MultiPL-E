name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
  \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
  \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
  \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 >\
    \ m1) Left(s\"$n is greater than $m\")\n        else Right(n.toBinaryString.padTo(n,\
    \ \"0\"))", "        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) Left(-1)\n        else {\n            val sum = n.toLong + m.toLong\n   \
    \         val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(round(n1.toDouble / (m1.toDouble - n1.toDouble)).toBinary)", "       \
    \ val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) Left(s\"$n\
    \ is greater than $m\")\n        else if (n1 < m1) Right(-1)\n        else Right((n1\
    \ + m1) / 2)", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1/m1))", " \
    \       val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n    \
    \    val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMPlusMMinusM =\
    \ (nMinusM - m).toInt\n        val nMinusMMinusM = (n - m).toInt\n        val\
    \ nPlusMMinusM = (n + m - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM\
    \ - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM + m - m).toInt\n \
    \       val nPlusMMinusMPlusM = (nPlusM - m - m).toInt\n        val nMinusMMinusMPlusMPlusM\
    \ = (nMinusM - m + m - m).toInt\n        val nMinusMPlusMMinusMPlusM = (nMinusM\
    \ + m - m + m).toInt\n        val nPlusMMinusMMinusMPlusM = (nPlusM - m - m -\
    \ m).toInt\n        val nMinusMPlusMMinusMPlusMPlusM = (nMinusM + m - m + m -\
    \ m).toInt\n        val nPlusMMinusMPlusMMinusMPlusM = (nPlusM - m + m - m - m).toInt\n\
    \        val nMinusMMinusMPlusMPlusMPlusM = (nMinusM - m - m + m - m - m).toInt\n\
    \        val nPlusMMinusMMinusMPlusMPlusM = (nPlusM - m - m - m - m - m).toInt\n\
    \        val nMinusMPlusMMinusMPlusMPlusM = (nMinusM + m - m + m - m - m).toInt\n\
    \        val nPlusMMinusMPlusMMinusMPlusM = (nPlusM - m + m - m - m - m).toInt\n\
    \        val nMinusMMinusMPlusMPlusMPlusM = (nMinusM - m - m + m - m - m - m).toInt\n\
    \        val nPlusMMinusMMinusMPlusMPlusM = (nPlusM - m - m - m - m - m - m).toInt\n\
    \        val nMinusMPlusMMinusMPlusMPlusMPlusM = (nMinusM + m - m + m - m - m\
    \ - m - m).toInt\n        val nPlusMMinusMPlusMMinusMPlusMPlusM = (nPlusM", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"\
    $n must be greater than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n must be less than $m\")", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n < m) Left(s\"$n is less than $m\")\n \
    \       else if (n == m) Right(n.toBinaryString)\n        else Right(-1l)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n\
    \            val binary = Integer.toBinaryString(avg)\n            Right(binary)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) Left(-1)\n        else Right(math.ceil((n + m) / 2.0).toBinaryString)",
  "        val avg = ((n + m) / 2.0).toInt\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Right(bin)\n        } else {\n   \
    \         Left(s\"${bin.substring(0, 8)}...\")\n        }", "        val nMinusM\
    \ = (n - m).toInt\n        val nPlusM = (n + m).toInt\n        val nMinusMPlusM\
    \ = (nMinusM + m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m).toInt\n\
    \        val nMinusMMinusMPlusM = (nMinusM - m).toInt\n        val nMinusMMinusMMinusM\
    \ = (nMinusM - m).toInt\n        val nPlusMMinusM = (n + m - m).toInt\n      \
    \  val nMinusMMinusMPlusM = (nMinusM - m - m).toInt\n        val nMinusMPlusMMinusM\
    \ = (nMinusM - m + m).toInt\n        val nMinusMMinusMMinusM = (nMinusM - m -\
    \ m).toInt\n        val nPlusMMinusM = (n + m - m - m).toInt\n        val nMinusMPlusMMinusM\
    \ = (nMinusM - m + m - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM - m\
    \ - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m).toInt\n\
    \        val nPlusMMinusMPlusM = (n + m - m - m - m).toInt\n        val nMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m).toInt\n        val nPlusMMinusMPlusM = (n + m -\
    \ m - m - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m\
    \ - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM - m - m - m + m).toInt\n\
    \        val nPlusMMinusMMinusM = (n + m - m - m - m - m).toInt\n        val nMinusMPlusMPlusM\
    \ = (nMinusM - m + m + m + m).toInt\n        val nMinusMMinusMMinusM = (nMinusM\
    \ - m - m - m - m).toInt\n        val nPlusMMinusMPlusM = (n + m - m - m - m -\
    \ m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m + m - m).toInt\n\
    \        val nMinusMMinusMPlusM = (nMin", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val binary = avg.toBinaryString\n            Right(binary.length)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$bin is too short\")\n        } else if (bin.length > 8)\
    \ {\n            Right(bin)\n        } else {\n            Right(bin.substring(0,\
    \ 8))\n        }", "        val n = n.toInt\n        val m = m.toInt\n       \
    \ if (n > m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val binary =\
    \ binary(avg)\n            Right(binary.toLong)\n        }", "        val n =\
    \ n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMCount = nToMSum.toLong\n        val nToMAvg = (nToMSum\
    \ / nToMCount).toLong\n        val nToMBin = n.toBinary() + m.toBinary()\n   \
    \     val nToMBinSum = nToMBin.sum\n        val nToMBinCount = nToMBinSum.toLong\n\
    \        val nToMBinAvg = (nToMBinSum / nToMBinCount).toLong\n        val nToMBinBin\
    \ = n.toBinary() + m.toBinary() + nToMBin.sum\n        val nToMBinBinSum = nToMBinBin.sum\n\
    \        val nToMBinBinCount = nToMBinBinSum.toLong\n        val nToMBinBinAvg\
    \ = (nToMBinBinSum / nToMBinBinCount).toLong\n        val nToMBinBinBin = n.toBinary()\
    \ + m.toBinary() + nToMBinBin.sum + nToMBinBin.count\n        val nToMBinBinBinSum\
    \ = nToMBinBinBin.sum\n        val nToMBinBinBinCount = nToMBinBinBinSum.toLong\n\
    \        val nToMBinBinBinAvg = (nToMBinBinBinSum / nToMBinBinBinCount).toLong\n\
    \        val nToMBinBinBinBin = n.toBinary() + m.toBinary() + nToMBinBinBin.sum\
    \ + nToMBinBinBin.count\n        val nToMBinBinBinBinSum = nToMBinBinBinBin.sum\n\
    \        val nToMBinBinBinBinCount = nToMBinBinBinBinSum.toLong\n        val nToMBinBinBinBinAvg\
    \ = (nToMBinBinBinBinSum / nToMBinBinBinBinCount).toLong\n        val nToMBinBinBinBinBin\
    \ = n.toBinary() + m.toBinary() + nToMBinBinBinBin.sum + nToMBinBinBinBin.count\n\
    \        val nToMBinBinBinBinBinSum = nToMBinBinBinBinBin.sum\n        val nToMBinBinBinBinBinCount\
    \ = nToMBinBinBinBinBinSum.toLong\n        val nToMBin", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n >= m) {\n            Right(-1)\n     \
    \   } else {\n            val sum = n.toLong + m.toLong\n            val avg =\
    \ sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.padToLength(n\
    \ + m, 0))\n        }", "        val n = n.toInt\n        val m = m.toInt\n  \
    \      if (n >= m) Left(-1)\n        else {\n            val sum = n.toLong +\
    \ m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = avg.toBinaryString\n            Right(binary.toLong)\n   \
    \     }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 >\
    \ m1) Left(s\"$n is greater than $m\")\n        else Right(roundToNearest(n1,\
    \ m1))", "        val nToM = (n to m).map(_.toBinaryString).mkString\n       \
    \ val nToMInt = nToM.map(_.toInt)\n        val nToMIntSum = nToMInt.sum\n    \
    \    val nToMIntSumInt = nToMIntSum.toInt\n        val nToMIntSumBin = nToMIntSumInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBin.toInt\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n\
    \        val nToMIntSumBinInt = nToMIntSumBinInt.toBinaryString\n        val nToMIntSumBinInt\
    \ = nTo", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m)\
    \ Left(-1)\n        else Right(math.round(n/m)*m)", "        val nToM = (n to\
    \ m).toList\n        val nToMSum = nToM.sum\n        val nToMCount = nToM.size\n\
    \        val nToMAvg = nToMSum / nToMCount\n        val nToMBinaryString = nToMAvg.toBinaryString\n\
    \        val mToM = (m to n).toList\n        val mToMSum = mToM.sum\n        val\
    \ mToMCount = mToM.size\n        val mToMAvg = mToMSum / mToMCount\n        val\
    \ mToMBinaryString = mToMAvg.toBinaryString\n        val nToMBinaryString = nToMBinaryString.reverse\n\
    \        val mToMBinaryString = mToMBinaryString.reverse\n        val nToMBinaryStringLength\
    \ = nToMBinaryString.length\n        val mToMBinaryStringLength = mToMBinaryString.length\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val mToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToMBinaryStringLength - nToMBinaryStringLength\n\
    \        val nToMBinaryStringLength = mToM", "        val n = n.toInt\n      \
    \  val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = (n to m).foldLeft(0l){ (sum, v) => sum + v }\n    \
    \        val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = math.max(n.toInt, m.toInt)\n\
    \        val m = math.max(n.toInt, m.toInt)\n        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = Right(bin)\n        val n = math.max(n.toInt, m.toInt)\n\
    \        val m = math.max(n.toInt, m.toInt)\n        if (n == m) Left(-1)\n  \
    \      else result", "        val n = n.toInt\n        val m = m.toInt\n     \
    \   if (n > m) {\n            Left(-1)\n        } else {\n            val sum\
    \ = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.toLong)\n        }", "      \
    \  val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n      \
    \  val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n        val\
    \ nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt + m.toInt\n        val mBitsSumBitsSum = m.toInt + m.toInt\n     \
    \   val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n        val\
    \ mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits\
    \ = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toInt + m.toInt + m.toInt\n        val mBitsSumBitsSumBitsSum = m.toInt\
    \ + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBits", "        val\
    \ nToM : Long = n - m\n        val nToMInt : Long = math.ceil(nToM.toDouble)\n\
    \        val nToMBin = math.pow(2, math.ceil(nToM.toDouble))\n        val nToMBinInt\
    \ = math.ceil(nToMBin.toDouble)\n        val nToMBinIntStr = nToMBinInt.toString(2)\n\
    \        val nToMBinIntStrLen = nToMBinIntStr.length\n        val nToMBinIntStrLenMinusOne\
    \ = nToMBinIntStrLen - 1\n        val nToMBinIntStrLenMinusOneInt = math.pow(2,\
    \ nToMBinIntStrLenMinusOne)\n        val nToMBinIntStrLenMinusOneIntInt = math.ceil(nToMBinIntStrLenMinusOneInt.toDouble)\n\
    \        val nToMBinIntStrLenMinusOneIntIntInt = math.pow(2, nToMBinIntStrLenMinusOneIntInt)\n\
    \        val nToMBinIntStrLenMinusOneIntIntIntInt = math.ceil(nToMBinIntStrLenMinusOneIntIntIntInt.toDouble)\n\
    \        val nToMBinIntStrLenMinusOneIntIntIntIntInt = math.pow(2, nToMBinIntStrLenMinusOneIntIntIntIntInt)\n\
    \        val nToMBinIntStrLenMinusOneIntIntIntIntIntIntInt = math.pow(2, nToMBinIntStrLenMinusOneIntIntIntIntIntIntInt)\n\
    \        val nToMBinIntStrLenMinusOneIntIntIntIntIntIntIntIntInt = math.pow(2,\
    \ nToMBinIntStrLenMinusOneIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt",
  "        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 2) Left(s\"$avg can't be represented in binary\")\n\
    \        else if (bin.length < 4) Right(bin)\n        else Left(s\"$avg can't\
    \ be represented in binary with $bin.length bits\")", "        val n = n.toInt\n\
    \        val m = m.toInt\n        val sum = n + m\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$n through $m average is $avg but should be rounded to $bin\"\
    )\n        } else {\n            Right(bin)\n        }", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(round(n1.toDouble\
    \ / (m1.toDouble - n1.toDouble)))", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n >= m) {\n            Left(-1)\n        } else {\n   \
    \         val avg = ((n + m) / 2.0).toLong\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(round(n1 / m1) * m1)", "        val nToM = (n to m).map(_.toInt)\n   \
    \     val nToMSum = n.toLong + m.toLong\n        val nToMSumToNToM = nToMSum.zip(n.toLong).zip(m.toLong).map(x\
    \ => (x._1 + x._2)/2)\n        val nToMSumToNToMSum = nToMSumToNToM.sum\n    \
    \    val nToMSumToNToMSumToNToM = nToMSumToNToMSum.zip(nToMSumToNToM).map(x =>\
    \ (x._1 + x._2)/2)\n        val nToMSumToNToMSumToNToMSum = nToMSumToNToMSumToNToM.sum\n\
    \        val nToMSumToNToMSumToNToMSumToNToM = nToMSumToNToMSumToNToMSum.zip(nToMSumToNToM).map(x\
    \ => (x._1 + x._2)/2)\n        val nToMSumToNToMSumToNToMSumToNToMSum = nToMSumToNToMSumToNToMSumToNToM.sum\n\
    \        val nToMSumToNToMSumToNToMSumToNToMSumToNToM = nToMSumToNToMSumToNToMSumToNToMSum.zip(nToMSumToNToM).map(x\
    \ => (x._1 + x._2)/2)\n        val nToMSumToNToMSumToNToMSumToNToMSumToNToMSum\
    \ = nToMSumToNToMSumToNToMSumToNToMSumToNToM.sum\n        val nToMSumToNToMSumToNToMSumToNToMSumToNToMSumToNToM\
    \ = nToMSumToNToMSumToNToMSumToNToMSumToNToMSum.zip(nToMSumToNToM).map(x => (x._1\
    \ + x._2)/2)\n        val nToMSumToNToMSumToNToMSumToNToMSumToNToMSumToNToMSum\
    \ = nToMSumToNToMSumToNToMSumToNToMSumToNToMSumToN", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val nToM = n to m\n        val nToMSum = nToM.foldLeft(0l){\
    \ (sum, cur) => sum + cur }\n        val nToMCount = nToM.size\n        val nToMAvg\
    \ = nToMSum / nToMCount\n        val nToMBinaryString = nToMAvg.toBinaryString\n\
    \        val nToMBinaryStringLength = nToMBinaryString.length\n        val nToMBinaryStringWithZeros\
    \ = nToMBinaryString.padTo(nToMBinaryStringLength, \"0\")\n        val nToMBinaryStringWithOnes\
    \ = nToMBinaryStringWithZeros.reverse\n        val nToMBinaryStringWithOnesLength\
    \ = nToMBinaryStringWithOnes.length\n        val nToMBinaryStringWithOnesReversed\
    \ = nToMBinaryStringWithOnes.reverse\n        val nToMBinaryStringWithOnesReversedLength\
    \ = nToMBinaryStringWithOnesReversed.length\n        val nToMBinaryStringWithOnesReversedWithZeros\
    \ = nToMBinaryStringWithOnesReversed.padTo(nToMBinaryStringWithOnesLength, \"\
    0\")\n        val nToMBinaryStringWithOnesReversedWithOnes = nToMBinaryStringWithOnesReversedWithZeros.reverse\n\
    \        val nToMBinaryStringWithOnesReversedWithOnesLength = nToMBinaryStringWithOnesReversedWithOnes.length\n\
    \        val nToMBinaryStringWithOnesReversedWithOnesReversed = nToMBinaryStringWithOnesReversedWithOnes.reverse\n\
    \        val nToMBinaryStringWithOnesReversedWithOnesReversedLength = nToMBinaryStringWithOnesReversedWithOnesReversed.length\n\
    \        val nToMBinaryStringWithOnesReversedWithOnesReversedWithZeros = nToMBinaryStringWithOnesReversedWithOnesReversed.padTo(nToMBinaryStringWithOnesReversedWithOnesLength,\
    \ \"0\")\n        val nToMBinaryStringWithOnesReversedWithOnesReversedWithOnes\
    \ = nToMBinaryStringWithOnesReversedWithOnesReversedWithZeros.reverse\n      \
    \  val nToMBinaryStringWithOnesReversedWithOnesReversedWithOnesReversed = nToMBinaryStringWithOnesReversedWithOnesReversedWithOnes.reverse",
  "        val avg = n + (m / 2)\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < m) Left(s\"$avg cannot be represented with $m bits\"\
    )\n        else if (bin.charAt(m) == '1') Right(avg)\n        else Left(s\"$avg\
    \ cannot be represented with $m bits\")", "        val ns = n.toString.toInt\n\
    \        val ms = m.toString.toInt\n        if(ns > ms) Left(s\"$ns is greater\
    \ than $ms\")\n        else Right(n.toString.toInt + m.toString.toInt/2)", " \
    \       val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else Right(round(n1 / m1))", "        val nToM\
    \ = (n to m).toList\n        val nToM2 = nToM.filter(_ > 0)\n        val nToM3\
    \ = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_ > 2)\n        val\
    \ nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_ > 4)\n     \
    \   val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_ > 6)\n\
    \        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(-1)\n\
    \        else {\n            val sum = n.toLong + m.toLong\n            val avg\
    \ = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n < m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m.toBinaryString.length,\
    \ \"0\") + m.toBinaryString)", "        val sum = n.toLong + m.toLong\n      \
    \  val avg = sum / 2\n        val binary = avg.toBinaryString\n        val result\
    \ = Right(binary.padToLength(binary.length, \"0\"))\n        if (sum > m) Left(s\"\
    $sum > $m\")\n        else result", "        val avg = n + (m / 2)\n        val\
    \ bin = math.ceil(avg).toBinaryString\n        if (bin.length < 8) {\n       \
    \     Left(s\"$avg cannot be represented as a binary number\")\n        } else\
    \ {\n            Right(bin)\n        }", "        val n1 = n.toInt\n        val\
    \ m1 = m.toInt\n        if(n1 > m1) Left(s\"$n1 > $m1\")\n        else Right(round(n1\
    \ / m1))", "        val n = n.toInt\n        val m = m.toInt\n        if (n >\
    \ m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n >= m) Left(-1)\n        else Right(n.toBinaryString()\
    \ + m.toBinaryString).map(_.toLong)", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n >= m) {\n            Left(-1)\n        } else {\n \
    \           val sum = n.toLong + m.toLong\n            val avg = sum / 2\n   \
    \         val bin = Integer.toBinaryString(avg)\n            Right(bin)\n    \
    \    }", "        val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n\
    \        val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMMinusM = (nMinusM\
    \ - m).toInt\n        val nMinusMMinusMPlusM = (nMinusMMinusM + m).toInt\n   \
    \     val nMinusMMinusMMinusM = (nMinusMMinusM - m).toInt\n        val nMinusMMinusMMinusMPlusM\
    \ = (nMinusMMinusMMinusM + m).toInt\n        val nMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusMMinusM =\
    \ (nMinusMMin", "        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is too short\")\n   \
    \     } else {\n            Right(avg)\n        }", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right(n.toBinaryString.padLeft(m1.toBinaryString.length,\
    \ \"0\") + m1.toBinaryString)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n >= m) {\n            Right(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.padToLength(n + m.toInt, 0l))\n\
    \        }", "        val avg = ((n + m) / 2).round\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$bin is not a valid binary\
    \ number\")\n        } else {\n            Right(avg)\n        }", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n            Right(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.padToLength(n\
    \ + m, 2))\n        }", "        val n = n.toInt\n        val m = m.toInt\n  \
    \      if (n > m) {\n            Left(-1)\n        } else {\n            val sum\
    \ = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin =\
    \ Integer.toBinaryString(avg)\n            Right(bin)\n        }", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(s\"\
    $n is greater than $m\")\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val nMinusM = (n - m).toInt\n  \
    \      if(nMinusM < 0) Left(s\"$n is greater than $m\")\n        else Right((nMinusM.toString\
    \ + m.toString + nMinusM.toString.reverse).reverse)", "        val nToM = (n to\
    \ m).toList\n        val nToM2 = nToM.filter(_ > 0)\n        val nToM3 = nToM2.filter(_\
    \ > 1)\n        val nToM4 = nToM3.filter(_ > 2)\n        val nToM5 = nToM4.filter(_\
    \ > 3)\n        val nToM6 = nToM5.filter(_ > 4)\n        val nToM7 = nToM6.filter(_\
    \ > 5)\n        val nToM8 = nToM7.filter(_ > 6)\n        val nToM9 = nToM8.filter(_\
    \ > 7)\n        val nToM10 = nToM9.filter(_ > 8)\n        val nToM11 = nToM10.filter(_\
    \ > 9)\n        val nToM12 = nToM11.filter(_ > 10)\n        val nToM13 = nToM12.filter(_\
    \ > 11)\n        val nToM14 = nToM13.filter(_ > 12)\n        val nToM15 = nToM14.filter(_\
    \ > 13)\n        val nToM16 = nToM15.filter(_ > 14)\n        val nToM17 = nToM16.filter(_\
    \ > 15)\n        val nToM18 = nToM17.filter(_ > 16)\n        val nToM19 = nToM18.filter(_\
    \ > 17)\n        val nToM20 = nToM19.filter(_ > 18)\n        val nToM21 = nToM20.filter(_\
    \ > 19)\n        val nToM22 = nToM21.filter(_ > 20)\n        val nToM23 = nToM22.filter(_\
    \ > 21)\n        val nToM24 = nToM23.filter(_ > 22)\n        val nToM25 = nToM24.filter(_\
    \ > 23)\n        val nToM26 = nToM25.filter(_ > 24)\n        val nToM27 = nToM26.filter(_\
    \ > 25)\n        val nToM28 = nToM27.filter(_ > 26)\n        val nToM29 = nToM28.filter(_\
    \ > 27)\n        val nToM30 = nToM29.filter(_ > 28)\n        val nToM31 = nToM30.filter(_\
    \ > 29)\n        val nToM32 = nToM31.filter(_ > 30)\n        val nToM33 = nToM32.filter(_\
    \ > 31)\n        val nToM34 = nToM33.filter(_ > ", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n >= m) {\n            Left(-1)\n      \
    \  } else {\n            val sum = n.toLong + m.toLong\n            val avg =\
    \ sum / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1\
    \ > m1) {\n            Left(-1)\n        } else {\n            val n2 = n1.toInt\n\
    \            val m2 = m1.toInt\n            val sum = (n2 + m2) / 2\n        \
    \    val binary = sum.toBinaryString\n            Right(binary.reverse)\n    \
    \    }", "        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_\
    \ > 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_\
    \ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_\
    \ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val nBits = n.toBinaryString.length\n        val mBits = m.toBinaryString.length\n\
    \        val nBitsDiff = n - m\n        val mBitsDiff = m - n\n        val nBitsDiffToM\
    \ = mBits - nBitsDiff\n        val mBitsDiffToN = nBits - mBitsDiff\n        val\
    \ nBitsDiffToMToN = mBitsDiff - nBitsDiffToM\n        val mBitsDiffToNToM = mBitsDiff\
    \ - mBitsDiffToN\n        val nBitsDiffToMToNToM = mBitsDiff - nBitsDiffToMToN\n\
    \        val mBitsDiffToNToMToN = mBitsDiff - mBitsDiffToNToM\n        val nBitsDiffToMToNToMToN\
    \ = mBitsDiff - nBitsDiffToMToNToM\n        val mBitsDiffToNToMToNToM = mBitsDiff\
    \ - mBitsDiffToNToMToNToM\n        val nBitsDiffToMToNToMToNToM = mBitsDiff -\
    \ nBitsDiffToMToNToMToNToM\n        val mBitsDiffToNToMToNToMToN = mBitsDiff -\
    \ mBitsDiffToNToMToNToMToN\n        val nBitsDiffToMToNToMToNToMToN = mBitsDiff\
    \ - nBitsDiffToMToNToMToNToMToN\n        val mBitsDiffToNToMToNToMToNToM = mBitsDiff\
    \ - mBitsDiffToNToMToNToMToNToM\n        val nBitsDiffToMToNToMToNToMToNToM =\
    \ mBitsDiff - nBitsDiffToMToNToMToNToMToNToM\n        val mBitsDiffToNToMToNToMToNToMToNToM\
    \ = mBitsDiff - mBitsDiffToNToMToNToMToNToMToNToM\n        val nBitsDiffToMToNToMToNToMToNToMToNToM\
    \ = mBitsDiff - nBitsDiffToMTo", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = binary(avg)\n            Right(binary.toLong)\n        }", "        val nToM\
    \ : Long = n - m\n        val nToMInt : Long = math.ceil(nToM.toDouble)\n    \
    \    val nToMBin = Integer.toBinaryString(nToMInt)\n        val nToMBinLen = nToMBin\
    \ .length\n        val nToMBinLenMinusOne = nToMBinLen - 1\n        val nToMBinLenMinusOneInt\
    \ = Integer.parseInt(nToMBin.substring(0, nToMBinLenMinusOne))\n        val nToMBinLenMinusOneBin\
    \ = Integer.toBinaryString(nToMBinLenMinusOneInt)\n        val nToMBinLenMinusOneBinLen\
    \ = nToMBinLenMinusOneBin.length\n        val nToMBinLenMinusOneBinLenMinusOne\
    \ = nToMBinLenMinusOneBinLen - 1\n        val nToMBinLenMinusOneBinLenMinusOneInt\
    \ = Integer.parseInt(nToMBin.substring(nToMBinLenMinusOneBinLenMinusOne, nToMBinLenMinusOneBinLenMinusOne+1))\n\
    \        val nToMBinLenMinusOneBinLenMinusOneBin = Integer.toBinaryString(nToMBinLenMinusOneBinLenMinusOneInt)\n\
    \        val nToMBinLenMinusOneBinLenMinusOneBinLen = nToMBinLenMinusOneBinLenMinusOneBinLen\
    \ - 1\n        val nToMBinLenMinusOneBinLenMinusOneBinLenMinusOne = nToMBinLenMinusOneBinLenMinusOneBinLenMinusOne\
    \ - 1\n        val nToMBinLenMinusOneBinLenMinusOneBinLenMinusOneInt = Integer.parseInt(nToMBin.substring(nToMBinLenMinusOneBinLenMinusOneBinLenMinusOne,\
    \ nToMBinLenMinusOneBinLenMinusOneBinLenMinusOne+1))\n        val nToMBinLenMinusOneBinLenMinusOneBinLenMinusOneBin\
    \ = Integer.toBinaryString(nToMBinLenMinusOneBinLenMinusOneBinLenMinusOneInt)\n\
    \        val nToMBinLenMinusOneBinLenMinusOneBinLenMinusOneBinLen = nToMBinLenMinusOneBinLenMinusOneBinLenMinusOneBinLenMinusOne\
    \ - 1\n        ", "        val n = n.toInt\n        val m = m.toInt\n        if\
    \ (n >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n < m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m.toBinaryString.length,\
    \ '0').toLong)", "        val n = n.toInt\n        val m = m.toInt\n        if\
    \ (n > m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val nMinusM = (n - m).toInt\n  \
    \      if (nMinusM < 0) Left(s\"$n is greater than $m\")\n        else if (nMinusM\
    \ == 0) Right(m)\n        else Left(s\"$n is greater than $m and cannot be averaged\"\
    )", "        val nToM = (n to m).map(_.toInt)\n        val nToMSum = sum(nToM)\n\
    \        val nToMCount = nToM.size\n        val nToMAvg = nToMSum / nToMCount\n\
    \        val nToMBin = Integer.toBinaryString(nToMCount)\n        val mToN = (m\
    \ to n).map(_.toInt)\n        val mToNSum = sum(mToN)\n        val mToNCount =\
    \ mToN.size\n        val mToNAvg = mToNSum / mToNCount\n        val mToNBin =\
    \ Integer.toBinaryString(mToNCount)\n        val nToMBin = Integer.toBinaryString(nToMCount)\n\
    \        val mToNAvg = Integer.toBinaryString(mToNAvg)\n        val nToMBin =\
    \ Integer.toBinaryString(nToMCount)\n        val nToMSum = sum(nToM)\n       \
    \ val nToMAvg = nToMSum / nToMCount\n        val mToNAvg = Integer.toBinaryString(mToNAvg)\n\
    \        val nToMSum = sum(nToM)\n        val nToMAvg = nToMSum / nToMCount\n\
    \        val mToNBin = Integer.toBinaryString(mToNCount)\n        val mToNAvg\
    \ = Integer.toBinaryString(mToNAvg)\n        val nToMBin = Integer.toBinaryString(nToMCount)\n\
    \        val mToNBin = Integer.toBinaryString(mToNCount)\n        val nToMSum\
    \ = sum(nToM)\n        val nToMAvg = nToMSum / nToMCount\n        val mToNAvg\
    \ = Integer.toBinaryString(mToNAvg)\n        val nToMSum = sum(nToM)\n       \
    \ val nToMAvg = nToMSum / nToMCount\n        val mToNBin = Integer.toBinaryString(mToNCount)\n\
    \        val mToNAvg = Integer.toBinaryString(mToNAvg)\n        val nToMBin =\
    \ Integer.toBinaryString(nToMCount)\n        val mToNBin = Integer.toBinaryString(mToNCount)\n\
    \        val nToMSum = sum(nToM)\n        val nToMAvg = nToMSum / nToMCount\n",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"$n\
    \ must be greater than $m\")\n        else if (n == m) Right(n)\n        else\
    \ Right(roundToNearest(n, m))", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) Left(-1)\n        else Right(n.toBinaryString() + m.toBinaryString).map(_.toLong)",
  "        val avg = ((n + m) / 2).round\n        val binary = avg.toBinaryString\n\
    \        if (binary.length < 8) {\n            Left(s\"$binary is too short\"\
    )\n        } else {\n            Right(binary)\n        }", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) Left(-1)\n        else Right(math.round(n/m)*m)", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) Left(-1)\n        else if (n == m)\
    \ Right(m)\n        else Right(roundToNearest(n, m))", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n      \
    \  else Left(s\"$n is greater than $m\")", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLen = nBitsSumBits.length\n        val mBitsSumBitsLen\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = n.toInt + m.toInt\n   \
    \     val mBitsSumBitsSum = m.toInt + m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val\
    \ mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt + m.toInt + m.toInt\n        val\
    \ mBitsSumBitsSumBitsSum = m.toInt + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumBits\
    \ = nBitsSumBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = mBitsSumBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits", "        val n = n.toInt\n        val m = m.toInt\n\
    \        val avg = ((n + m) / 2)\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Left(s\"$n to $m is $avg\")\n    \
    \    } else {\n            Right(bin)\n        }", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n      \
    \  else Left(s\"$n is greater than $m\")", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n > m) Left(-1)\n        else Right(scala.math.round(n/m)*m)",
  "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n  \
    \      val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n    \
    \    val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen = nBitsSumLen.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.toBinaryString.length\n        val mBitsSumLen = mBitsSumLen.toBinaryString.length\n\
    \        val nBitsSumLen = nBits", "        val nBits = n.toBinaryString\n   \
    \     val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n    \
    \    val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLen = nBitsSumBits.length\n        val mBitsSumBitsLen\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = nBitsSumBits.toInt\n  \
    \      val mBitsSumBitsSum = mBitsSumBits.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val\
    \ mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = nBitsSumBitsSumBits.toInt\n        val mBitsSumBitsSumBitsSum\
    \ = mBitsSumBitsSumBits.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBit", "   \
    \     val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n       \
    \     Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLen = nBitsSumBits.length\n        val mBitsSumBitsLen\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = n.toInt + m.toInt\n   \
    \     val mBitsSumBitsSum = m.toInt + m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val\
    \ mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt + m.toInt + m.toInt\n        val\
    \ mBitsSumBitsSumBitsSum = m.toInt + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumBits\
    \ = nBitsSumBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = mBitsSumBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = (n + m) / 2\n            val bin = sum.toBinaryString\n            Right(bin.dropRight(bin.length\
    \ - 1)) // drop the leading zero\n        }", "        val n1 = n.toInt\n    \
    \    val m1 = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n\
    \        else Right(round(n1/m1))", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(round(n1.toDouble/m.toDouble).toBinary)", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumBits\
    \ = nBitsSum.toBinaryString\n        val mBitsSumBits = mBitsSum.toBinaryString\n\
    \        val nBitsSumBitsLen = nBitsSumBits.length\n        val mBitsSumBitsLen\
    \ = mBitsSumBits.length\n        val nBitsSumBitsSum = n.toInt + m.toInt\n   \
    \     val mBitsSumBitsSum = m.toInt + m.toInt\n        val nBitsSumBitsSumLen\
    \ = nBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val\
    \ mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt + m.toInt + m.toInt\n        val\
    \ mBitsSumBitsSumBitsSum = m.toInt + m.toInt + m.toInt\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBitsSumBits\
    \ = nBitsSumBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = mBitsSumBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n > m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = binary(avg)\n            Right(binary.toInt)\n        }", "        val nMinusM\
    \ = (n - m).toInt\n        if (nMinusM < 0) Left(s\"$n is greater than $m\")\n\
    \        else if (nMinusM == 0) Right(m)\n        else Left(s\"$n is greater than\
    \ $m and cannot be averaged\")", "        val n1 = n.toInt\n        val m1 = m.toInt\n\
    \        if(n1 > m1) Left(-1)\n        else Right(scala.math.round(n1/m1)*m1)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = binary(avg)\n            Right(binary.toLong)\n        }",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(-1)\n\
    \        else {\n            val sum = n.toLong + m.toLong\n            val avg\
    \ = sum / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val avg = n.toDouble / m.toDouble\n        val binary =\
    \ avg.toBinaryString\n        if (binary.length < 8) {\n            Right(binary.padToLength((8\
    \ - binary.length).toInt, 0))\n        } else {\n            Left(s\"$binary\"\
    )\n        }", "        val sum = n.toLong + m.toLong\n        val avg = sum /\
    \ 2\n        val binary = avg.toBinaryString\n        if (binary.length < 8) {\n\
    \            Left(s\"$binary\")\n        } else {\n            Right(binary.substring(binary.length\
    \ - 8))\n        }", "        val n1 = n.toInt\n        val m1 = m.toInt\n   \
    \     if (n1 > m1) {\n            Left(-1)\n        } else {\n            val\
    \ n2 = n1.toInt\n            val m2 = m1.toInt\n            val n3 = n2 - m1\n\
    \            val m3 = m2 - m1\n            val n4 = n3 / 2\n            val m4\
    \ = m3 / 2\n            val n5 = n4 / 2\n            val m5 = m4 / 2\n       \
    \     val n6 = n5 / 2\n            val m6 = m5 / 2\n            val n7 = n6 /\
    \ 2\n            val m7 = m6 / 2\n            val n8 = n7 / 2\n            val\
    \ m8 = m7 / 2\n            val n9 = (n8 + m8) / 2\n            val m9 = (m8 +\
    \ m8) / 2\n            val n10 = (n9 + m9) / 2\n            val m10 = (m9 + m9)\
    \ / 2\n            val n11 = (n10 + m10) / 2\n            val m11 = (m10 + m10)\
    \ / 2\n            val n12 = (n11 + m11) / 2\n            val m12 = (m11 + m11)\
    \ / 2\n            val n13 = (n12 + m12) / 2\n            val m13 = (m12 + m12)\
    \ / 2\n            val n14 = (n13 + m13) / 2\n            val m14 = (m13 + m13)\
    \ / 2\n            val n15 = (n14 + m14) / 2\n            val m15 = (m14 + m14)\
    \ / 2\n            val n16 = (n15 + m15) / 2\n            val m16 = (m15 + m15)\
    \ / 2\n            val n17 = (n16 + m16) / 2\n            val m17 = (m16 + m16)\
    \ / 2\n            val n18 = (n17 + m17) / 2\n            val m18 = (m17 + m17)\
    \ / 2\n            val n19 = (n18 + m18) / 2\n            val m19 = (m18 + m18)\
    \ / 2\n            val n20 = (n19 + m19) / 2\n            val m20 = (m19 + m19)\
    \ / 2\n            val n21 = (n20 + m20) / 2\n            val m21 = (m20 + m20)\
    \ / 2\n            val n22 = (n21 + m21) / 2\n            val m22 = (m21 + m21)\
    \ / 2\n            val n23 = (n22 + m22) / 2\n            val m23 = (m22 + m22)\
    \ / 2\n            ", "        val n = n.toInt\n        val m = m.toInt\n    \
    \    if (n <= m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than\
    \ $m\")", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m)\
    \ Left(-1)\n        else if (n == m) Right(n.toBinaryString)\n        else Right(n.toBinaryString\
    \ + m.toBinaryString + n.toBinaryString.reverse)", "        val nToM = (n+m)/2\n\
    \        val nToMStr = nToM.toBinaryString\n        val mToN = (m+n)/2\n     \
    \   val mToNStr = mToN.toBinaryString\n        if(nToMStr.length < mToNStr.length){\n\
    \            Left(s\"$nToMStr cannot be greater than $mToNStr\")\n        }else{\n\
    \            Right(nToMStr.substring(0, mToNStr.length))\n        }", "      \
    \  val ns = n.toString.reverse\n        val ms = m.toString.reverse\n        val\
    \ nm = ns ++ ms\n        val nn = nm.length\n        val mm = mm.length\n    \
    \    val nn = nm.toInt\n        val mm = mm.toInt\n        val nn = nm.toLong\n\
    \        val mm = mm.toLong\n        val nn = nm.toDouble\n        val mm = mm.toDouble\n\
    \        val nn = nm.toFloat\n        val mm = mm.toFloat\n        val nn = nm.toChar\n\
    \        val mm = mm.toChar\n        val nn = nm.toShort\n        val mm = mm.toShort\n\
    \        val nn = nm.toInt\n        val mm = mm.toInt\n        val nn = nm.toLong\n\
    \        val mm = mm.toLong\n        val nn = nm.toDouble\n        val mm = mm.toDouble\n\
    \        val nn = nm.toFloat\n        val mm = mm.toFloat\n        val nn = nm.toChar\n\
    \        val mm = mm.toChar\n        val nn = nm.toShort\n        val mm = mm.toShort\n\
    \        val nn = nm.toInt\n        val mm = mm.toInt\n        val nn = nm.toLong\n\
    \        val mm = mm.toLong\n        val nn = nm.toDouble\n        val mm = mm.toDouble\n\
    \        val nn = nm.toFloat\n        val mm = mm.toFloat\n        val nn = nm.toChar\n\
    \        val mm = mm.toChar\n        val nn = nm.toShort\n        val mm = mm.toShort\n\
    \        val nn = nm.toInt\n        val mm = mm.toInt\n        val nn = nm.toLong\n\
    \        val mm = mm.toLong\n        val nn = nm.toDouble\n        val mm = mm.toDouble\n\
    \        val nn = nm.toFloat\n        val mm = mm.toFloat\n        val nn = nm.toChar\n\
    \        val mm = mm.toChar\n        val nn = nm.toShort\n        val mm = mm.toShort\n\
    \        val nn = nm.toInt\n        val mm = mm.toInt\n        val nn = nm.toLong\n\
    \        val mm = mm.toLong\n        val nn = nm.toDouble\n        val mm = mm.toDouble\n\
    \        val nn = nm.toFloat\n        val ", "        val sum = n.toLong + m.toLong\n\
    \        val avg = sum / 2\n        val bin = Integer.toBinaryString(avg)\n  \
    \      if (bin.length < 8) {\n            Left(s\"$bin is too short\")\n     \
    \   } else {\n            Right(avg)\n        }", "        val nMinusM = (n -\
    \ m).toInt\n        if(nMinusM < 0) Left(s\"$n is greater than $m\")\n       \
    \ else Right((nMinusM.toBinaryString).reverse)", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsSum = n.toInt\n        val\
    \ mBitsSum = m.toInt\n        val nBitsSumLen = nBitsSum.toBinaryString.length\n\
    \        val mBitsSumLen = mBitsSum.toBinaryString.length\n        val nBitsSumLen\
    \ = nBitsSumLen.max(mBitsSumLen)\n        val mBitsSumLen = mBitsSumLen.max(nBitsSumLen)\n\
    \        val nBitsSumLen = nBitsSumLen.min(mBitsSumLen)\n        val mBitsSumLen\
    \ = mBitsSumLen.min(nBitsSumLen)\n        val nBitsSumLen = nBitsSumLen.max(mBitsSumLen)\n\
    \        val mBitsSumLen = mBitsSumLen.max(nBitsSumLen)\n        val nBitsSumLen\
    \ = nBitsSumLen.min(mBitsSumLen)\n        val mBitsSumLen = mBitsSumLen.min(nBitsSumLen)\n\
    \        val nBitsSumLen = nBitsSumLen.max(mBitsSumLen)\n        val mBitsSumLen\
    \ = mBitsSumLen.max(nBitsSumLen)\n        val nBitsSumLen = nBitsSumLen.min(mBitsSumLen)\n\
    \        val mBitsSumLen = mBitsSumLen.min(nBitsSumLen)\n        val nBitsSumLen\
    \ = nBitsSumLen.max(mBitsSumLen)\n        val mBitsSumLen = mBitsSumLen.max(nBitsSumLen)\n\
    \        val nBitsSumLen = nBitsSumLen.min(mBitsSumLen)\n        val mBitsSumLen\
    \ = mBitsSumLen.min(nBitsSumLen)\n        val nBitsSumLen = nBitsSumLen.max(mBitsSumLen)\n\
    \        val mBitsSumLen = mBitsSumLen.max(nBitsSumLen)\n        val nBitsSumLen\
    \ = nBitsSumLen.min(mBitsSumLen)\n        val mBitsSumLen = mBitsSumLen.min(nBitsSumLen",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) {\n  \
    \          Left(-1)\n        } else {\n            val n2 = n1.toInt\n       \
    \     val m2 = m1.toInt\n            val sum = n2 ++ m2\n            val avg =\
    \ sum / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        val\
    \ n2 = n1 + m1\n        val m2 = m1 + n1\n        val n3 = n2 + m1\n        val\
    \ m3 = m2 + n1\n        val n4 = n3 + m1\n        val m4 = m3 + n1\n        val\
    \ n5 = n4 + m1\n        val m5 = m4 + n1\n        val n6 = n5 + m1\n        val\
    \ m6 = m5 + n1\n        val n7 = n6 + m1\n        val m7 = m6 + n1\n        val\
    \ n8 = n7 + m1\n        val m8 = m7 + n1\n        val n9 = n8 + m1\n        val\
    \ m9 = m8 + n1\n        val n10 = n9 + m1\n        val m10 = m9 + n1\n       \
    \ val n11 = n10 + m1\n        val m11 = m10 + n1\n        val n12 = n11 + m1\n\
    \        val m12 = m11 + n1\n        val n13 = n12 + m1\n        val m13 = m12\
    \ + n1\n        val n14 = n13 + m1\n        val m14 = m13 + n1\n        val n15\
    \ = n14 + m1\n        val m15 = m14 + n1\n        val n16 = n15 + m1\n       \
    \ val m16 = m15 + n1\n        val n17 = n16 + m1\n        val m17 = m16 + n1\n\
    \        val n18 = n17 + m1\n        val m18 = m17 + n1\n        val n19 = n18\
    \ + m1\n        val m19 = m18 + n1\n        val n20 = n19 + m1\n        val m20\
    \ = m19 + n1\n        val n21 = n20 + m1\n        val m21 = m20 + n1\n       \
    \ val n22 = n21 + m1\n        val m22 = m21 + n1\n        val n23 = n22 + m1\n\
    \        val m23 = m22 + n1\n        val n24 = n23 + m1\n        val m24 = m23\
    \ + n1\n        val n25 = n24 + m1\n        val m25 = m24 + n1\n        val n26\
    \ = n25 + m1\n        val m26 = m25 + n1\n        val n27 = n26 + m1\n       \
    \ val m27 = m26 + n1\n        val n28 = n27 + m1\n        val m28 = m27 + n1\n\
    \        val n29 = n28 + m1\n        val m29 = m28 + n1\n", "        val sum =\
    \ n.toLong + m.toLong\n        val avg = sum / 2\n        val binary = avg.toBinaryString\n\
    \        val result = if (binary == \"\") -1 else binary.toLong\n        Right(result)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n >= m) {\n            Right(-1)\n        } else {\n  \
    \          val sum = n.toLong + m.toLong\n            val avg = sum / 2\n    \
    \        val bin = Integer.toBinaryString(avg)\n            Right(bin)\n     \
    \   }", "        val n = math.max(n.toInt, m.toInt)\n        val m = math.min(n.toInt,\
    \ m.toInt)\n        val sum = (n to m).sum\n        val avg = sum / 2\n      \
    \  val bin = Integer.toBinaryString(avg)\n        val result = if (bin == \"\"\
    ) -1 else bin\n        Right(result)", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n >= m) {\n            Right(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val bin = Integer.toBinaryString(avg)\n            Right(bin)\n   \
    \     }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val binary = avg.toBinaryString\n        if (binary.length < 8) {\n \
    \           Left(s\"$binary\")\n        } else {\n            Right(binary.substring(binary.length\
    \ - 8))\n        }", "        val nBits = n.toBinaryString\n        val mBits\
    \ = m.toBinaryString\n        val nBitsLen = nBits.length\n        val mBitsLen\
    \ = mBits.length\n        val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n\
    \        val nBitsSumLen = nBitsSum.toBinaryString.length\n        val mBitsSumLen\
    \ = mBitsSum.toBinaryString.length\n        val nBitsSumBits = nBitsSum.toBinaryString\n\
    \        val mBitsSumBits = mBitsSum.toBinaryString\n        val nBitsSumBitsLen\
    \ = nBitsSumBits.length\n        val mBitsSumBitsLen = mBitsSumBits.length\n \
    \       val nBitsSumBitsSum = nBitsSumBits.toInt\n        val mBitsSumBitsSum\
    \ = mBitsSumBits.toInt\n        val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n    \
    \    val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits\
    \ = mBitsSumBitsSum.toBinaryString\n        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val\
    \ nBitsSumBitsSumBitsSum = nBitsSumBitsSumBits.toInt\n        val mBitsSumBitsSumBitsSum\
    \ = mBitsSumBitsSumBits.toInt\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBit", "   \
    \     val n = n.toInt\n        val m = m.toInt\n        if (n >= m) Left(-1)\n\
    \        else Right(n.toBinaryString.padLeft(m.toBinaryString.length, \"0\") +\
    \ m.toBinaryString)", "        val sum = n.toLong + m.toLong\n        val avg\
    \ = sum / 2\n        val binary = avg.toBinaryString\n        val result = if\
    \ (binary == \"\") -1l else binary.toLong\n        Right(result)", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n         \
    \   Right(bin)\n        }", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n >= m) Left(-1)\n        else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin == \"\") Right(avg)\n\
    \        else Left(bin)", "        val nMinusM = n - m\n        if (nMinusM <\
    \ 0) Left(s\"$n is greater than $m\")\n        else if (nMinusM == 0) Right(m)\n\
    \        else Left(s\"$n is greater than $m, but $nMinusM does not divide $m\"\
    )", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumLen = nBitsSumLen.toBinaryString\n        val mBitsSumLen\
    \ = mBitsSumLen.toBinaryString\n        val nBitsSumBits = nBitsSum.toBinaryString\n\
    \        val mBitsSumBits = mBitsSum.toBinaryString\n        val nBitsSumBitsLen\
    \ = nBitsSumBits.length\n        val mBitsSumBitsLen = mBitsSumBits.length\n \
    \       val nBitsSumBitsSum = n.toBinaryString\n        val mBitsSumBitsSum =\
    \ m.toBinaryString\n        val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n    \
    \    val nBitsSumBitsSumLen = nBitsSumBitsSumLen.toBinaryString\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSumLen.toBinaryString\n        val nBitsSumBitsSumBits = nBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n        val\
    \ nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen\
    \ = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum = n.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSum = m.toBinaryString\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum.toBinaryString.length\n        val mBitsSumBitsSumBitsSumLen\
    \ = mBitsSumBitsSumBitsSumLen.toBinaryString.length\n        val nBitsSumBitsSumBitsSumLen\
    \ = nBitsSumBitsSumBitsSum", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n >= m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n       \
    \ val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n        val\
    \ nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toInt.toBinaryString\n        val mBitsSumBitsSum = m.toInt.toBinaryString\n\
    \        val nBitsSumBitsSumLen = nBitsSumBitsSum.length\n        val mBitsSumBitsSumLen\
    \ = mBitsSumBitsSum.length\n        val nBitsSumBitsSumBits = n.toInt.toBinaryString\n\
    \        val mBitsSumBitsSumBits = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsLen\
    \ = nBitsSumBitsSumBits.length\n        val mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n\
    \        val nBitsSumBitsSumBitsSum = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSum\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.length\n     \
    \   val nBitsSumBitsSumBitsSumBits = n.toInt.toBinaryString\n        val mBitsSumBitsSumBitsSumBits\
    \ = m.toInt.toBinaryString\n        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = mBitsSumBitsSumBitsSumBitsLen\n \
    \       val nBits", "        val n1 = n.toInt\n        val m1 = m.toInt\n    \
    \    if(n1 > m1) Left(s\"$n is greater than $m\")\n        else Right((n1 + m1)/2)",
  "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1) Left(s\"\
    $n is greater than $m\")\n        else Right(round(n1.toDouble / (m1.toDouble\
    \ - n1.toDouble)))", "        val nToM = (n to m).map(_ + _)\n        val nToMSum\
    \ = nToM.sum\n        val nToMCount = nToM.size\n        val nToMAvg = nToMSum\
    \ / nToMCount\n        val nToMBin = Integer.toBinaryString(nToMCount)\n     \
    \   val mToN = (m to n).map(_ + _)\n        val mToNSum = mToN.sum\n        val\
    \ mToNCount = mToN.size\n        val mToNAvg = mToNSum / mToNCount\n        val\
    \ mToNBin = Integer.toBinaryString(mToNCount)\n        val nToMBin = Integer.toBinaryString(nToMCount)\n\
    \        val mToNAvg = Integer.toBinaryString(mToNAvg)\n        val nToMBin =\
    \ Integer.toBinaryString(nToMCount)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parseLong(nToMBin)\n\
    \        val mToNAvg = Long.parseLong(mToNAvg)\n        val nToMSum = Long.parse",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n >= m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = (n to m).map(x => (x to m).map(y => (x to y)).sum)\n      \
    \      val avg = sum.sum / sum.size\n            Right(math.round(avg).toBinaryString).left\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ <= m) Right(n.toBinaryString)\n        else Left(s\"$n is greater than $m\")",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) Left(-1)\n\
    \        else if (n == m) Right(m)\n        else Right(roundToNearest(n, m))",
  "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val binary\
    \ = avg.toBinaryString\n        val result = if (binary == binary.reverse) -1\
    \ else binary\n        Right(result)", "        val n1 = n.toInt\n        val\
    \ m1 = m.toInt\n        if (n1 > m1) Left(-1)\n        else Right((n1 + m1) /\
    \ 2)", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 > m1)\
    \ Left(-1)\n        else Right(scala.math.round(n1/m1)*m1)", "        val nToM\
    \ = (n to m).toList\n        val nToM2 = nToM.filter(_ > 0)\n        val nToM3\
    \ = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_ > 2)\n        val\
    \ nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_ > 4)\n     \
    \   val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_ > 6)\n\
    \        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val n = n.toInt\n        val m = m.toInt\n        if (n <= m)\
    \ Right(n.toBinaryString)\n        else if (n > m) Left(-1)\n        else Right(n.toBinaryString\
    \ + m.toBinaryString)", "        val n = n.toInt\n        val m = m.toInt\n  \
    \      if (n > m) {\n            Left(-1)\n        } else {\n            val sum\
    \ = n.toLong + m.toLong\n            val avg = sum / 2\n            val binary\
    \ = avg.toBinaryString\n            Right(binary.toLong)\n        }", "      \
    \  val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n          \
    \  Left(-1)\n        } else {\n            val avg = n + (m - n) / 2\n       \
    \     val binary = avg.toBinaryString\n            Right(binary.toLong)\n    \
    \    }", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m)\
    \ {\n            Left(s\"$n is greater than $m\")\n        } else {\n        \
    \    val sum = (n to m).foldLeft(0l){\n                case (acc, i) => acc +\
    \ i\n            }\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val avg = n.toDouble / m.toDouble\n\
    \        val bin = math.ceil(avg).toBinaryString\n        val result = Right(bin)\n\
    \        if (n.toDouble > m.toDouble) {\n            Left(s\"$n > $m\")\n    \
    \    } else {\n            result\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n >= m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = (n to m).map(i => i.toLong).sum\n            val avg\
    \ = sum / m.toDouble\n            val bin = math.ceil(avg).toBinaryString\n  \
    \          Right(bin)\n        }", "        val avg = n.toDouble / m.toDouble\n\
    \        val rounded = math.round(avg).toBinaryString\n        val result = Right(rounded)\n\
    \        if (rounded == 0) Left(s\"$rounded is 0\")\n        else result", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"\
    $n is less than $m\")\n        else if (n == m) Right(m)\n        else Right(n.toBinaryString()\
    \ + m.toBinaryString).map(_.toLong)", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n < m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m,\
    \ \"0\") + m.toBinaryString.padRight(n, \"0\"))", "        val nBits = n.toBinaryString\n\
    \        val mBits = m.toBinaryString\n        val nBitsLen = nBits.length\n \
    \       val mBitsLen = mBits.length\n        val nBitsLenMinusOne = nBitsLen -\
    \ 1\n        val mBitsLenMinusOne = mBitsLen - 1\n        val nBitsLenMinusOneBits\
    \ = nBitsLen - 1 - 1\n        val mBitsLenMinusOneBits = mBitsLen - 1 - 1\n  \
    \      val nBitsLenMinusOneBitsBits = nBitsLen - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBits\
    \ = mBitsLen - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBits = nBitsLen\
    \ - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBits = mBitsLen - 1 - 1\
    \ - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBits = nBitsLen - 1 - 1 - 1\
    \ - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBits = mBitsLen - 1 - 1 - 1\
    \ - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBits = nBitsLen - 1 - 1\
    \ - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBits = mBitsLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val mBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBits\
    \ = mBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val nBitsLenMinusOneBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBitsLen - 1 - 1 - 1 - 1 - 1 - 1 - ", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n >= m) {\n            Left(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val bin = Integer.toBinaryString(avg)\n            Right(bin)\n   \
    \     }", "        val nMinusM = (n - m).toInt\n        if(nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else Right((nMinusM.toString + m.toString +\
    \ nMinusM.toString + m.toString + nMinusM.toString).substring(0, Math.ceil(nMinusM.toString.length\
    \ / 2)))", "        val n = n.toInt\n        val m = m.toInt\n        if (n <\
    \ m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n)\n      \
    \  else Right(roundToNearest(n, m))", "        val ns = n.toString.toInt\n   \
    \     val ms = m.toString.toInt\n        if(ns > ms) Left(s\"$ns is greater than\
    \ $ms\")\n        else Right(n.toString.toInt + m.toString.toInt)", "        val\
    \ n1 = n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) {\n           \
    \ Left(-1)\n        } else {\n            val n2 = n1.toInt\n            val m2\
    \ = m1.toInt\n            val sum = (n2 - m2)\n            val avg = sum / 2\n\
    \            val binary = Integer.toBinaryString(avg)\n            Right(binary.toLong)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) Left(-1)\n        else {\n            val sum =\
    \ (n to m).foldLeft(0l)(_ + _)\n            val avg = sum / m.toInt\n        \
    \    val bin = Integer.toBinaryString(avg)\n            Right(bin)\n        }",
  "        val sum = n + m\n        val avg = sum / 2\n        val bin = math.ceil(avg).toBinaryString\n\
    \        val result = bin.dropRight(1)\n        val right = bin.takeRight(1)\n\
    \        val left = bin.dropRight(1)\n        val leftRight = bin.takeRight(2)\n\
    \        val leftLeft = bin.dropRight(2)\n        val leftRightLeft = bin.takeRight(3)\n\
    \        val leftRightRight = bin.dropRight(3)\n        val leftRightLeftLeft\
    \ = bin.takeRight(4)\n        val leftRightLeftRight = bin.dropRight(4)\n    \
    \    val leftRightLeftLeftLeft = bin.takeRight(5)\n        val leftRightLeftLeftRight\
    \ = bin.dropRight(5)\n        val leftRightLeftLeftLeftLeft = bin.takeRight(6)\n\
    \        val leftRightLeftLeftLeftRight = bin.dropRight(6)\n        val leftRightLeftLeftLeftLeftLeft\
    \ = bin.takeRight(7)\n        val leftRightLeftLeftLeftRight = bin.dropRight(7)\n\
    \        val leftRightLeftLeftLeftLeftRight = bin.takeRight(8)\n        val leftRightLeftLeftLeftLeftLeftLeft\
    \ = bin.dropRight(8)\n        val leftRightLeftLeftLeftLeftRight = bin.takeRight(9)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeft = bin.dropRight(9)\n      \
    \  val leftRightLeftLeftLeftLeftLeftRight = bin.takeRight(10)\n        val leftRightLeftLeftLeftLeftLeftLeftRight\
    \ = bin.dropRight(10)\n        val leftRightLeftLeftLeftLeftLeftLeftLeftLeft =\
    \ bin.takeRight(11)\n        val leftRightLeftLeftLeftLeftLeftLeftRight = bin.dropRight(11)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftLeft = bin.takeRight(12)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftRight = bin.dropRight(12)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftLeft = bin.takeRight(13)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftRight = bin.dropRight(13)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftLeft = bin.takeRight(14)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftRight = bin.dropRight(14)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftLeftLeft = bin.takeRight(15)\n\
    \        val leftRightLeftLeftLeftLeftLeftLeftLeftLeftLeftRight", "        val\
    \ n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.size == 1)\n \
    \           Right(bin)\n        else\n            Left(s\"${bin.dropRight(1)}0${bin.takeRight(1)}\"\
    )", "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n\
    \            Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n > m) Left(-1)\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Right(n.toBinaryString + m.toBinaryString + n.toBinaryString.reverse)",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n >= m) Left(-1)\n\
    \        else {\n            val sum = n.toLong + m.toLong\n            val avg\
    \ = sum / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val nBits = n.toBinaryString.length\n        val mBits =\
    \ m.toBinaryString.length\n        val nBitsDiff = nBits - mBits\n        val\
    \ nBitsDiffBits = nBits - mBits\n        val nBitsDiffBitsBits = nBits - mBits\n\
    \        val nBitsDiffBitsBitsBits = nBits - mBits\n        val nBitsDiffBitsBitsBitsBits\
    \ = nBits - mBits\n        val nBitsDiffBitsBitsBitsBitsBits = nBits - mBits\n\
    \        val nBitsDiffBitsBitsBitsBitsBitsBits = nBits - mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBits\
    \ = nBits - mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBits = nBits -\
    \ mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBits = nBits - mBits\n\
    \        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBits = nBits - mBits\n \
    \       val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = nBits - mBits\n\
    \        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = nBits - mBits\n\
    \        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = nBits\
    \ - mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBits - mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBits - mBits\n        val nBitsDiffBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits\
    \ = nBits - mBits\n        val nBitsDiffBitsBitsBitsBit", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n <= m) Right(n.toBinaryString) \n     \
    \   else Left(s\"$n is greater than $m\")", "        val avg = ((n + m) / 2).round\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Right(bin)\n        } else {\n            Left(s\"${bin.substring(0,\
    \ 8)}...\")\n        }", "        val n = n.toInt\n        val m = m.toInt\n \
    \       if (n >= m) {\n            Left(-1)\n        } else {\n            val\
    \ sum = n.toLong + m.toLong\n            val avg = sum / 2\n            val bin\
    \ = Integer.toBinaryString(avg)\n            Right(bin)\n        }", "       \
    \ val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val binary\
    \ = avg.toBinaryString\n        val result = if (binary == binary.reverse) -1\
    \ else binary\n        Right(result)", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n > m) {\n            Left(s\"$n is greater than $m\"\
    )\n        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.padToLength(n\
    \ + m, 0))\n        }", "        val avg = ((n + m) / 2).round\n        val binary\
    \ = avg.toBinaryString\n        val result = if (n <= m) Right(binary) else Left(s\"\
    $n to $m is $binary\")\n        result", "        val nMinusM = (n - m).toInt\n\
    \        if(nMinusM < 0) Left(s\"$n is greater than $m\")\n        else Right((nMinusM.toString\
    \ + m.toString + nMinusM.toString.reverse).reverse.charAt(0))", "        val n\
    \ = n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = Integer.toBinaryString(avg)\n      \
    \      Right(binary.toLong)\n        }", "        val nToM = (n to m).toList\n\
    \        val nToMSum = nToM.foldLeft(0l){ (sum, item) => sum + item }\n      \
    \  val nToMCount = nToM.size\n        val nToMAvg = (nToMSum / nToMCount).toInt\n\
    \        val nToMBin = Integer.toBinaryString(nToMAvg)\n        val mToM = (m\
    \ to n).toList\n        val mToMSum = mToM.foldLeft(0l){ (sum, item) => sum +\
    \ item }\n        val mToMCount = mToM.size\n        val mToMAvg = (mToMSum /\
    \ mToMCount).toInt\n        val mToMBin = Integer.toBinaryString(mToMAvg)\n  \
    \      if (nToMCount > mToMCount) {\n            Left(s\"$nToMBin$mToMBin\")\n\
    \        } else {\n            Right(nToMAvg - mToMAvg)\n        }", "       \
    \ val avg = ((n + m) / 2l).toInt\n        if (avg > m) Left(s\"$avg exceeds $m\"\
    )\n        else if (avg < n) Right(avg)\n        else Left(s\"$avg exceeds $n\"\
    )", "        val nToM : Long = n - m\n        if (nToM < 0) Left(s\"$n is greater\
    \ than $m\")\n        else if (nToM == 0) Right(m)\n        else Right(math.round(nToM).toBinaryString).left",
  "        val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n      \
    \      Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        val sum = n.toLong + m.toLong\n        val avg =\
    \ sum / 2\n        val binary = binary(avg)\n        val n = n.toInt\n       \
    \ val m = m.toInt\n        if (n > m) {\n            Left(s\"$n > $m\")\n    \
    \    } else {\n            Right(binary)\n        }", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n       \
    \ } else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val bin = Integer.toBinaryString(avg)\n            Right(bin)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) Left(-1)\n        else Right((n to m by -1).sum.toString + n.toBinary()\
    \ + m.toBinary)", "        val nToM = (n to m).toList\n        val nToM2 = nToM.filter(_\
    \ > 0)\n        val nToM3 = nToM2.filter(_ > 1)\n        val nToM4 = nToM3.filter(_\
    \ > 2)\n        val nToM5 = nToM4.filter(_ > 3)\n        val nToM6 = nToM5.filter(_\
    \ > 4)\n        val nToM7 = nToM6.filter(_ > 5)\n        val nToM8 = nToM7.filter(_\
    \ > 6)\n        val nToM9 = nToM8.filter(_ > 7)\n        val nToM10 = nToM9.filter(_\
    \ > 8)\n        val nToM11 = nToM10.filter(_ > 9)\n        val nToM12 = nToM11.filter(_\
    \ > 10)\n        val nToM13 = nToM12.filter(_ > 11)\n        val nToM14 = nToM13.filter(_\
    \ > 12)\n        val nToM15 = nToM14.filter(_ > 13)\n        val nToM16 = nToM15.filter(_\
    \ > 14)\n        val nToM17 = nToM16.filter(_ > 15)\n        val nToM18 = nToM17.filter(_\
    \ > 16)\n        val nToM19 = nToM18.filter(_ > 17)\n        val nToM20 = nToM19.filter(_\
    \ > 18)\n        val nToM21 = nToM20.filter(_ > 19)\n        val nToM22 = nToM21.filter(_\
    \ > 20)\n        val nToM23 = nToM22.filter(_ > 21)\n        val nToM24 = nToM23.filter(_\
    \ > 22)\n        val nToM25 = nToM24.filter(_ > 23)\n        val nToM26 = nToM25.filter(_\
    \ > 24)\n        val nToM27 = nToM26.filter(_ > 25)\n        val nToM28 = nToM27.filter(_\
    \ > 26)\n        val nToM29 = nToM28.filter(_ > 27)\n        val nToM30 = nToM29.filter(_\
    \ > 28)\n        val nToM31 = nToM30.filter(_ > 29)\n        val nToM32 = nToM31.filter(_\
    \ > 30)\n        val nToM33 = nToM32.filter(_ > 31)\n        val nToM34 = nToM33.filter(_\
    \ > ", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n   \
    \     val binary = bin(avg)\n        val left = (binary.length / 2) - 1\n    \
    \    val right = (binary.length / 2)\n        val result = binary.substring(left,\
    \ right)\n        val result = Right(result)\n        result", "        val n\
    \ = math.abs(n)\n        val m = math.abs(m)\n        if (n <= m) Right(math.round(n))\n\
    \        else Left(s\"$n is greater than $m\")", "        val nMinusM = (n - m).toInt\n\
    \        val nPlusM = (n + m).toInt\n        val nMinusMPlusM = (nMinusM + m).toInt\n\
    \        val nMinusMMinusM = (nMinusM - m).toInt\n        val nMinusMMinusMPlusM\
    \ = (nMinusMMinusM + m).toInt\n        val nMinusMMinusMMinusM = (nMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusM + m).toInt\n\
    \        val nMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusM - m).toInt\n   \
    \     val nMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusM + m).toInt\n\
    \        val nMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusM - m).toInt\n\
    \        val nMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusM = (nMinusMMinusMMinusMMinusMMinusMMinusM\
    \ - m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusMPlusM = (nMinusMMinusMMinusMMinusMMinusMMinusMMinusM\
    \ + m).toInt\n        val nMinusMMinusMMinusMMinusMMinusMMinusMMinusMMinusM =\
    \ (nMinusMMin", "        val n = n.toInt\n        val m = m.toInt\n        if\
    \ (n > m) {\n            Left(s\"$n is greater than $m\")\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val bin = Integer.toBinaryString(avg)\n            Right(bin)\n   \
    \     }", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 >\
    \ m1) Left(-1)\n        else Right((n1 + m1)/2)", "        val n = n.toInt\n \
    \       val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        }\
    \ else {\n            val sum = n.toLong + m.toLong\n            val avg = sum\
    \ / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val nBits = n.toBinaryString\n        val mBits = m.toBinaryString\n\
    \        val nBitsLen = nBits.length\n        val mBitsLen = mBits.length\n  \
    \      val nBitsSum = n.toInt\n        val mBitsSum = m.toInt\n        val nBitsSumLen\
    \ = nBitsSum.toBinaryString.length\n        val mBitsSumLen = mBitsSum.toBinaryString.length\n\
    \        val nBitsSumBits = nBitsSum.toBinaryString\n        val mBitsSumBits\
    \ = mBitsSum.toBinaryString\n        val nBitsSumBitsLen = nBitsSumBits.length\n\
    \        val mBitsSumBitsLen = mBitsSumBits.length\n        val nBitsSumBitsSum\
    \ = n.toBinaryString\n        val mBitsSumBitsSum = m.toBinaryString\n       \
    \ val nBitsSumBitsSumLen = nBitsSumBitsSum.toBinaryString.length\n        val\
    \ mBitsSumBitsSumLen = mBitsSumBitsSum.toBinaryString.length\n        val nBitsSumBitsSumBits\
    \ = nBitsSumBitsSum.toBinaryString\n        val mBitsSumBitsSumBits = mBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsLen = nBitsSumBitsSumBits.length\n        val\
    \ mBitsSumBitsSumBitsLen = mBitsSumBitsSumBits.length\n        val nBitsSumBitsSumBitsSum\
    \ = n.toBinaryString\n        val mBitsSumBitsSumBitsSum = m.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumLen = nBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val mBitsSumBitsSumBitsSumLen = mBitsSumBitsSumBitsSum.toBinaryString.length\n\
    \        val nBitsSumBitsSumBitsSumBits = nBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val mBitsSumBitsSumBitsSumBits = mBitsSumBitsSumBitsSum.toBinaryString\n\
    \        val nBitsSumBitsSumBitsSumBitsLen = nBitsSumBitsSumBitsSumBits.length\n\
    \        val mBitsSumBitsSumBitsSumBitsLen = m", "        val n = n.toInt\n  \
    \      val m = m.toInt\n        if (n < m) Left(-1)\n        else Right(n.toBinaryString.padLeft(m.toBinaryString.length,\
    \ \"0\") + m.toBinaryString)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        if (n < m) Left(s\"$n is less than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Right(-1l)", "        val n = n.toInt\n        val m = m.toInt\n\
    \        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n        val\
    \ binary = avg.toBinaryString\n        if (n >= m) {\n            Left(s\"$n $m\"\
    )\n        } else {\n            Right(binary.substring(binary.length - m.toInt.toInt\
    \ - 1))\n        }", "        val avg = n.toDouble / (m.toDouble - n.toDouble)\n\
    \        val bin = Integer.toBinaryString(Math.round(avg))\n        val result\
    \ = if (bin == bin.substring(0, bin.length - 1)) Right(bin) else Left(s\"$bin\
    \ is not a valid binary number\")\n        result", "        val n1 = n.toInt\n\
    \        val m1 = m.toInt\n        if(n1 > m1) Left(-1)\n        else Right((n1\
    \ + m1)/2)", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ >= m) {\n            Left(-1)\n        } else {\n            val sum = n.toLong\
    \ + m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(round(n/m + n%m))", "        val ns = n.toString.toInt\n        val ms\
    \ = m.toString.toInt\n        if(ns > ms) Left(s\"$ns is greater than $ms\")\n\
    \        else Right(n.toString.toInt + m.toString.toInt/2).ceil.toString.toBinary",
  "        val nToM = (m to n).map(_ + 1).sum\n        if (nToM > 0) Right(nToM.toBinaryString)\
    \ else Left(s\"$n is greater than $m\")", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n        else if (n\
    \ > m) Left(-1)\n        else Right(n.toBinaryString + m.toBinaryString)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n = n.toInt\n        val m =\
    \ m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n    \
    \        val sum = n.toLong + m.toLong\n            val avg = sum / 2\n      \
    \      val binary = avg.toBinaryString\n            Right(binary.toLong)\n   \
    \     }", "        val nMinusM = (n - m).toInt\n        if (nMinusM < 0) Left(s\"\
    $n is greater than $m\")\n        else if (nMinusM == 0) Right(m)\n        else\
    \ Left(s\"$n is greater than $m, but $nMinusM <= 0\")", "        val nToM = (n\
    \ to m).map(_.toBinaryString).mkString\n        val nToMLen = nToM.length\n  \
    \      val nToMBin = n.toBinaryString\n        val mToMBin = m.toBinaryString\n\
    \        val nToMBinLen = nToMBin.length\n        val mToMBinLen = mToMBin.length\n\
    \        val nToMBinLenMinus1 = nToMBinLen - 1\n        val mToMBinLenMinus1 =\
    \ mToMBinLen - 1\n        val nToMBinLenMinus2 = nToMBinLen - 2\n        val mToMBinLenMinus2\
    \ = mToMBinLen - 2\n        val nToMBinLenMinus3 = nToMBinLen - 3\n        val\
    \ mToMBinLenMinus3 = mToMBinLen - 3\n        val nToMBinLenMinus4 = nToMBinLen\
    \ - 4\n        val mToMBinLenMinus4 = mToMBinLen - 4\n        val nToMBinLenMinus5\
    \ = nToMBinLen - 5\n        val mToMBinLenMinus5 = mToMBinLen - 5\n        val\
    \ nToMBinLenMinus6 = nToMBinLen - 6\n        val mToMBinLenMinus6 = mToMBinLen\
    \ - 6\n        val nToMBinLenMinus7 = nToMBinLen - 7\n        val mToMBinLenMinus7\
    \ = mToMBinLen - 7\n        val nToMBinLenMinus8 = nToMBinLen - 8\n        val\
    \ mToMBinLenMinus8 = mToMBinLen - 8\n        val nToMBinLenMinus9 = nToMBinLen\
    \ - 9\n        val mToMBinLenMinus9 = mToMBinLen - 9\n        val nToMBinLenMinus10\
    \ = nToMBinLen - 10\n        val mToMBinLenMinus10 = mToMBinLen - 10\n       \
    \ val nToMBinLenMinus11 = nToMBinLen - 11\n        val mToMBinLenMinus11 = mToMBinLen\
    \ - 11\n        val nToMBinLenMinus12 = nToMBinLen - 12\n        val mToMBinLenMinus12\
    \ = mToMBinLen - 12\n        val ", "        val sum = n.toLong + m.toLong\n \
    \       val avg = sum / 2\n        val binary = avg.toBinaryString\n        if\
    \ (binary.length < 8) {\n            Right(binary)\n        } else {\n       \
    \     Left(s\"$binary\")\n        }", "        val n = n.toInt\n        val m\
    \ = m.toInt\n        if (n <= m) Right(n.toBinaryString)\n        else Left(s\"\
    $n is greater than $m\")", "        val nMinusM = (n - m).toInt\n        val nPlusM\
    \ = (n + m).toInt\n        val nMinusMPlusM = nMinusM + nPlusM\n        val nMinusMPlusMMinusM\
    \ = nMinusM - nPlusM\n        val nMinusMPlusMMinusMPlusM = nMinusM - nPlusM -\
    \ m\n        val nMinusMPlusMMinusMPlusMMinusM = nMinusM - nPlusM - m - m\n  \
    \      val nMinusMPlusMMinusMPlusMMinusMPlusM = nMinusM - nPlusM - m - m - m\n\
    \        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusM = nMinusM - nPlusM - m -\
    \ m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM = nMinusM\
    \ - nPlusM - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - m - m\n        val nMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusMMinusMPlusM\
    \ = nMinusM - nPlusM - m - m - m - m - m - m - m - "]
stop_tokens:
- "\n    }\n"
