name: HumanEval_103_rounded_avg
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two positive integers n and m, and your task is to compute\
  \ the\n    // average of the integers from n through m (including n and m). \n \
  \   // Round the answer to the nearest integer and convert that to binary.\n   \
  \ // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l),\
  \ (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    //\
  \ >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l),\
  \ (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(roundedAvg((1l),\
  \ (5l)).equals(\"0b11\"));\n    assert(roundedAvg((7l), (13l)).equals(\"0b1010\"\
  ));\n    assert(roundedAvg((964l), (977l)).equals(\"0b1111001010\"));\n    assert(roundedAvg((996l),\
  \ (997l)).equals(\"0b1111100100\"));\n    assert(roundedAvg((560l), (851l)).equals(\"\
  0b1011000010\"));\n    assert(roundedAvg((185l), (546l)).equals(\"0b101101110\"\
  ));\n    assert(roundedAvg((362l), (496l)).equals(\"0b110101101\"));\n    assert(roundedAvg((350l),\
  \ (902l)).equals(\"0b1001110010\"));\n    assert(roundedAvg((197l), (233l)).equals(\"\
  0b11010111\"));\n    assert(roundedAvg((7l), (5l)).equals(-1l));\n    assert(roundedAvg((5l),\
  \ (1l)).equals(-1l));\n    assert(roundedAvg((5l), (5l)).equals(\"0b101\"));\n \
  \   }\n\n}\n"
completions: ["        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1 >\
    \ m1) Left(s\"$n is greater than $m\")\n        else Right(n.toBinaryString.padTo(n,\
    \ \"0\"))", "        val n = n.toInt\n        val m = m.toInt\n        if (n >=\
    \ m) Left(-1)\n        else {\n            val sum = n.toLong + m.toLong\n   \
    \         val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }", "        val n1 = n.toInt\n        val m1\
    \ = m.toInt\n        if(n1 > m1) Left(s\"$n is greater than $m\")\n        else\
    \ Right(round(n1.toDouble / (m1.toDouble - n1.toDouble)).toBinary)", "       \
    \ val n1 = n.toInt\n        val m1 = m.toInt\n        if (n1 > m1) Left(s\"$n\
    \ is greater than $m\")\n        else if (n1 < m1) Right(-1)\n        else Right((n1\
    \ + m1) / 2)", "        val n1 = n.toInt\n        val m1 = m.toInt\n        if(n1\
    \ > m1) Left(s\"$n is greater than $m\")\n        else Right(round(n1/m1))", " \
    \       val nMinusM = (n - m).toInt\n        val nPlusM = (n + m).toInt\n    \
    \    val nMinusMPlusM = (nMinusM + m).toInt\n        val nMinusMPlusMMinusM =\
    \ (nMinusM - m).toInt\n        val nMinusMMinusM = (n - m).toInt\n        val\
    \ nPlusMMinusM = (n + m - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM\
    \ - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM + m - m).toInt\n \
    \       val nPlusMMinusMPlusM = (nPlusM - m - m).toInt\n        val nMinusMMinusMPlusMPlusM\
    \ = (nMinusM - m + m - m).toInt\n        val nMinusMPlusMMinusMPlusM = (nMinusM\
    \ + m - m + m).toInt\n        val nPlusMMinusMMinusMPlusM = (nPlusM - m - m -\
    \ m).toInt\n        val nMinusMPlusMMinusMPlusMPlusM = (nMinusM + m - m + m -\
    \ m).toInt\n        val nPlusMMinusMPlusMMinusMPlusM = (nPlusM - m + m - m - m).toInt\n\
    \        val nMinusMMinusMPlusMPlusMPlusM = (nMinusM - m - m + m - m - m).toInt\n\
    \        val nPlusMMinusMMinusMPlusMPlusM = (nPlusM - m - m - m - m - m).toInt\n\
    \        val nMinusMPlusMMinusMPlusMPlusM = (nMinusM + m - m + m - m - m).toInt\n\
    \        val nPlusMMinusMPlusMMinusMPlusM = (nPlusM - m + m - m - m - m).toInt\n\
    \        val nMinusMMinusMPlusMPlusMPlusM = (nMinusM - m - m + m - m - m - m).toInt\n\
    \        val nPlusMMinusMMinusMPlusMPlusM = (nPlusM - m - m - m - m - m - m).toInt\n\
    \        val nMinusMPlusMMinusMPlusMPlusMPlusM = (nMinusM + m - m + m - m - m\
    \ - m - m).toInt\n        val nPlusMMinusMPlusMMinusMPlusMPlusM = (nPlusM", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n < m) Left(s\"\
    $n must be greater than $m\")\n        else if (n == m) Right(n.toBinaryString)\n\
    \        else Left(s\"$n must be less than $m\")", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n < m) Left(s\"$n is less than $m\")\n \
    \       else if (n == m) Right(n.toBinaryString)\n        else Right(-1l)", " \
    \       val n = n.toInt\n        val m = m.toInt\n        if (n > m) {\n     \
    \       Left(-1)\n        } else {\n            val sum = n.toLong + m.toLong\n\
    \            val avg = sum / 2\n            val binary = avg.toBinaryString\n\
    \            Right(binary.toLong)\n        }", "        val n = n.toInt\n    \
    \    val m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else\
    \ {\n            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n\
    \            val binary = Integer.toBinaryString(avg)\n            Right(binary)\n\
    \        }", "        val n = n.toInt\n        val m = m.toInt\n        if (n\
    \ > m) Left(-1)\n        else Right(math.ceil((n + m) / 2.0).toBinaryString)",
  "        val avg = ((n + m) / 2.0).toInt\n        val bin = Integer.toBinaryString(avg)\n\
    \        if (bin.length < 8) {\n            Right(bin)\n        } else {\n   \
    \         Left(s\"${bin.substring(0, 8)}...\")\n        }", "        val nMinusM\
    \ = (n - m).toInt\n        val nPlusM = (n + m).toInt\n        val nMinusMPlusM\
    \ = (nMinusM + m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m).toInt\n\
    \        val nMinusMMinusMPlusM = (nMinusM - m).toInt\n        val nMinusMMinusMMinusM\
    \ = (nMinusM - m).toInt\n        val nPlusMMinusM = (n + m - m).toInt\n      \
    \  val nMinusMMinusMPlusM = (nMinusM - m - m).toInt\n        val nMinusMPlusMMinusM\
    \ = (nMinusM - m + m).toInt\n        val nMinusMMinusMMinusM = (nMinusM - m -\
    \ m).toInt\n        val nPlusMMinusM = (n + m - m - m).toInt\n        val nMinusMPlusMMinusM\
    \ = (nMinusM - m + m - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM - m\
    \ - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m).toInt\n\
    \        val nPlusMMinusMPlusM = (n + m - m - m - m).toInt\n        val nMinusMMinusMMinusM\
    \ = (nMinusM - m - m - m - m).toInt\n        val nPlusMMinusMPlusM = (n + m -\
    \ m - m - m - m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m\
    \ - m).toInt\n        val nMinusMMinusMPlusM = (nMinusM - m - m - m + m).toInt\n\
    \        val nPlusMMinusMMinusM = (n + m - m - m - m - m).toInt\n        val nMinusMPlusMPlusM\
    \ = (nMinusM - m + m + m + m).toInt\n        val nMinusMMinusMMinusM = (nMinusM\
    \ - m - m - m - m).toInt\n        val nPlusMMinusMPlusM = (n + m - m - m - m -\
    \ m).toInt\n        val nMinusMPlusMMinusM = (nMinusM - m + m + m + m - m).toInt\n\
    \        val nMinusMMinusMPlusM = (nMin", "        val n = n.toInt\n        val\
    \ m = m.toInt\n        if (n > m) {\n            Left(-1)\n        } else {\n\
    \            val sum = n.toLong + m.toLong\n            val avg = sum / 2\n  \
    \          val binary = avg.toBinaryString\n            Right(binary.length)\n\
    \        }", "        val sum = n.toLong + m.toLong\n        val avg = sum / 2\n\
    \        val bin = Integer.toBinaryString(avg)\n        if (bin.length < 8) {\n\
    \            Left(s\"$bin is too short\")\n        } else if (bin.length > 8)\
    \ {\n            Right(bin)\n        } else {\n            Right(bin.substring(0,\
    \ 8))\n        }", "        val n = n.toInt\n        val m = m.toInt\n       \
    \ if (n > m) {\n            Left(-1)\n        } else {\n            val sum =\
    \ n.toLong + m.toLong\n            val avg = sum / 2\n            val binary =\
    \ binary(avg)\n            Right(binary.toLong)\n        }", "        val n =\
    \ n.toInt\n        val m = m.toInt\n        if (n > m) {\n            Left(-1)\n\
    \        } else {\n            val sum = n.toLong + m.toLong\n            val\
    \ avg = sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.toLong)\n\
    \        }", "        val nToM = (n to m).toList\n        val nToMSum = n.toLong\
    \ + m.toLong\n        val nToMCount = nToMSum.toLong\n        val nToMAvg = (nToMSum\
    \ / nToMCount).toLong\n        val nToMBin = n.toBinary() + m.toBinary()\n   \
    \     val nToMBinSum = nToMBin.sum\n        val nToMBinCount = nToMBinSum.toLong\n\
    \        val nToMBinAvg = (nToMBinSum / nToMBinCount).toLong\n        val nToMBinBin\
    \ = n.toBinary() + m.toBinary() + nToMBin.sum\n        val nToMBinBinSum = nToMBinBin.sum\n\
    \        val nToMBinBinCount = nToMBinBinSum.toLong\n        val nToMBinBinAvg\
    \ = (nToMBinBinSum / nToMBinBinCount).toLong\n        val nToMBinBinBin = n.toBinary()\
    \ + m.toBinary() + nToMBinBin.sum + nToMBinBin.count\n        val nToMBinBinBinSum\
    \ = nToMBinBinBin.sum\n        val nToMBinBinBinCount = nToMBinBinBinSum.toLong\n\
    \        val nToMBinBinBinAvg = (nToMBinBinBinSum / nToMBinBinBinCount).toLong\n\
    \        val nToMBinBinBinBin = n.toBinary() + m.toBinary() + nToMBinBinBin.sum\
    \ + nToMBinBinBin.count\n        val nToMBinBinBinBinSum = nToMBinBinBinBin.sum\n\
    \        val nToMBinBinBinBinCount = nToMBinBinBinBinSum.toLong\n        val nToMBinBinBinBinAvg\
    \ = (nToMBinBinBinBinSum / nToMBinBinBinBinCount).toLong\n        val nToMBinBinBinBinBin\
    \ = n.toBinary() + m.toBinary() + nToMBinBinBinBin.sum + nToMBinBinBinBin.count\n\
    \        val nToMBinBinBinBinBinSum = nToMBinBinBinBinBin.sum\n        val nToMBinBinBinBinBinCount\
    \ = nToMBinBinBinBinBinSum.toLong\n        val nToMBin", "        val n = n.toInt\n\
    \        val m = m.toInt\n        if (n >= m) {\n            Right(-1)\n     \
    \   } else {\n            val sum = n.toLong + m.toLong\n            val avg =\
    \ sum / 2\n            val binary = avg.toBinaryString\n            Right(binary.padToLength(n\
    \ + m, 0))\n        }", "        val n = n.toInt\n        val m = m.toInt\n  \
    \      if (n >= m) Left(-1)\n        else {\n            val sum = n.toLong +\
    \ m.toLong\n            val avg = sum / 2\n            val bin = Integer.toBinaryString(avg)\n\
    \            Right(bin)\n        }"]
stop_tokens:
- "\n    }\n"
