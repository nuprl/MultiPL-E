language: scala
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:95)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$SelectionProto.computeHash(ProtoTypes.scala:230)\n\
    \tat dotty.tools.dotc.core.Types$CachedProxyType.hash(Types.scala:1985)\n\tat\
    \ dotty.tools.dotc.core.Hashable.typeHash(Hashable.scala:51)\n\tat dotty.tools.dotc.core.Hashable.typeHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.typeHash(Types.scala:90)\n\tat dotty.tools.dotc.core.Hashable.finishHash(Hashable.scala:56)\n\
    \tat dotty.tools.dotc.core.Hashable.finishHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.finishHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:92)\n\tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto.computeHash(ProtoTypes.scala:137)\n\
    \tat dotty.tools.dotc.core.Types$CachedGroundType.hash(Types.scala:1971)\n\tat\
    \ dotty.tools.dotc.core.Uniques$.unique(Uniques.scala:33)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto$.apply(ProtoTypes.scala:151)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:896)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:6"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpk07pesmr.scala

    '
  timestamp: 1659792561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (elem > max) elem else max)\n        l.indexOf(maxElem)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdet73m89.scala:14)\n\tat Problem.main(tmpdet73m89.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (max < elem) elem else max)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){\n            (max,\
    \ elem) => if (elem > max) elem else max\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (max < elem) elem else max)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){ (max, elem) => if\
    \ (elem > max) elem else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0L) {\n            (max, el) =>\
    \ if (max < el) max else el\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplb_vedmq.scala:15)\n\tat Problem.main(tmplb_vedmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n    \
    \    maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) {\n         \
    \   (max, elem) => if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, elem) => if\
    \ (elem > max) elem else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:95)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$SelectionProto.computeHash(ProtoTypes.scala:230)\n\
    \tat dotty.tools.dotc.core.Types$CachedProxyType.hash(Types.scala:1985)\n\tat\
    \ dotty.tools.dotc.core.Hashable.typeHash(Hashable.scala:51)\n\tat dotty.tools.dotc.core.Hashable.typeHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.typeHash(Types.scala:90)\n\tat dotty.tools.dotc.core.Hashable.finishHash(Hashable.scala:56)\n\
    \tat dotty.tools.dotc.core.Hashable.finishHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.finishHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:92)\n\tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto.computeHash(ProtoTypes.scala:137)\n\
    \tat dotty.tools.dotc.core.Types$CachedGroundType.hash(Types.scala:1971)\n\tat\
    \ dotty.tools.dotc.core.Uniques$.unique(Uniques.scala:33)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto$.apply(ProtoTypes.scala:151)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:896)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:6"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpk07pesmr.scala

    '
  timestamp: 1659792561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp40mis_o.scala:14)\n\tat Problem.main(tmpp40mis_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n    \
    \    maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        l.indexOf(max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxfs7px83.scala:14)\n\tat Problem.main(tmpxfs7px83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)(_ > _) ? _ : _\n\
    \        l.foldLeft(0l)(_ > _) ? max : _\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpfcxk4ei4.scala:10:42 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                           \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1, _$2) =>\
    \ _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcxk4ei4.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Found:    Boolean\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfcxk4ei4.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l.foldLeft(\e[31m0l\e\
    [0m)(_ > _) ? max : _\n\e[31m\e[31m   |\e[0m                       ^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    Boolean\n\e[31m   |\e[0m     \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:95)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$SelectionProto.computeHash(ProtoTypes.scala:230)\n\
    \tat dotty.tools.dotc.core.Types$CachedProxyType.hash(Types.scala:1985)\n\tat\
    \ dotty.tools.dotc.core.Hashable.typeHash(Hashable.scala:51)\n\tat dotty.tools.dotc.core.Hashable.typeHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.typeHash(Types.scala:90)\n\tat dotty.tools.dotc.core.Hashable.finishHash(Hashable.scala:56)\n\
    \tat dotty.tools.dotc.core.Hashable.finishHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.finishHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:92)\n\tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto.computeHash(ProtoTypes.scala:137)\n\
    \tat dotty.tools.dotc.core.Types$CachedGroundType.hash(Types.scala:1971)\n\tat\
    \ dotty.tools.dotc.core.Uniques$.unique(Uniques.scala:33)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto$.apply(ProtoTypes.scala:151)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:896)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:6"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpk07pesmr.scala

    '
  timestamp: 1659792561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1shinz33.scala:14)\n\tat Problem.main(tmp1shinz33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp40mis_o.scala:14)\n\tat Problem.main(tmpp40mis_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, x) => if\
    \ (x > max) x else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        return maxElem\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L)(_ > _) ? _ : _\n\
    \        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmphf2dqb5j.scala:10:42 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                           \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1, _$2) =>\
    \ _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphf2dqb5j.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0L\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Found:    Boolean\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L)( (max, elem)\
    \ => if (max < elem) elem else max )\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76js2wyn.scala:15)\n\tat Problem.main(tmp76js2wyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){\n          \
    \  (max, elem) => if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfq594suo.scala:14)\n\tat Problem.main(tmpfq594suo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){ (max, e) => if (e\
    \ > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:95)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$SelectionProto.computeHash(ProtoTypes.scala:230)\n\
    \tat dotty.tools.dotc.core.Types$CachedProxyType.hash(Types.scala:1985)\n\tat\
    \ dotty.tools.dotc.core.Hashable.typeHash(Hashable.scala:51)\n\tat dotty.tools.dotc.core.Hashable.typeHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.typeHash(Types.scala:90)\n\tat dotty.tools.dotc.core.Hashable.finishHash(Hashable.scala:56)\n\
    \tat dotty.tools.dotc.core.Hashable.finishHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.finishHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:92)\n\tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto.computeHash(ProtoTypes.scala:137)\n\
    \tat dotty.tools.dotc.core.Types$CachedGroundType.hash(Types.scala:1971)\n\tat\
    \ dotty.tools.dotc.core.Uniques$.unique(Uniques.scala:33)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto$.apply(ProtoTypes.scala:151)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:896)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:6"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpk07pesmr.scala

    '
  timestamp: 1659792561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (maxElem, elem)\
    \ =>\n            if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, el) =>\n          \
    \  if (max > el) max else el\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfq594suo.scala:14)\n\tat Problem.main(tmpfq594suo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){ (max, e) => if (e\
    \ > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, x) => if\
    \ (x > max) x else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (maxElem, elem)\
    \ =>\n            if (elem > maxElem)\n                elem\n            else\n\
    \                maxElem\n        }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        l.indexOf(maxElem)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipl_fci7.scala:14)\n\tat Problem.main(tmpipl_fci7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83dac5w0.scala:14)\n\tat Problem.main(tmp83dac5w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)(_ > _) ? _ : _\n\
    \        l.foldLeft(max)(_ > _) ? _ : _\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpr4p8ht66.scala:10:42 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                           \
    \               ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of expanded\
    \ function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1, _$2) =>\
    \ _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr4p8ht66.scala:10:33\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Found:    Boolean\n\e[31m   |\e[0m                                 Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpr4p8ht66.scala:11:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l.foldLeft(max)(_\
    \ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$6 of expanded function:\n\e[31m\
    \   |\e[0m   _$6 => l.foldLeft(max)((_$4, _$5) => _$4 > _$5) ? _$6:.\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) {\n            (max,\
    \ x) => if (x > max) x else max\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        l.indexOf(maxElem)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipl_fci7.scala:14)\n\tat Problem.main(tmpipl_fci7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14jzfx9s.scala:14)\n\tat Problem.main(tmp14jzfx9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        l.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15vh9hs2.scala:15)\n\tat Problem.main(tmp15vh9hs2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76js2wyn.scala:15)\n\tat Problem.main(tmp76js2wyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L){ (max, x) => if (x\
    \ > max) x else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (max < e) e else max }\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt16ddje2.scala:14)\n\tat Problem.main(tmpt16ddje2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:95)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.typer.ProtoTypes$SelectionProto.computeHash(ProtoTypes.scala:230)\n\
    \tat dotty.tools.dotc.core.Types$CachedProxyType.hash(Types.scala:1985)\n\tat\
    \ dotty.tools.dotc.core.Hashable.typeHash(Hashable.scala:51)\n\tat dotty.tools.dotc.core.Hashable.typeHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.typeHash(Types.scala:90)\n\tat dotty.tools.dotc.core.Hashable.finishHash(Hashable.scala:56)\n\
    \tat dotty.tools.dotc.core.Hashable.finishHash$(Hashable.scala:42)\n\tat dotty.tools.dotc.core.Types$Type.finishHash(Types.scala:90)\n\
    \tat dotty.tools.dotc.core.Hashable.doHash(Hashable.scala:92)\n\tat dotty.tools.dotc.core.Hashable.doHash$(Hashable.scala:42)\n\
    \tat dotty.tools.dotc.core.Types$Type.doHash(Types.scala:90)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto.computeHash(ProtoTypes.scala:137)\n\
    \tat dotty.tools.dotc.core.Types$CachedGroundType.hash(Types.scala:1971)\n\tat\
    \ dotty.tools.dotc.core.Uniques$.unique(Uniques.scala:33)\n\tat dotty.tools.dotc.typer.ProtoTypes$IgnoredProto$.apply(ProtoTypes.scala:151)\n\
    \tat dotty.tools.dotc.typer.Applications.realApply$1(Applications.scala:896)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply(Applications.scala:1040)\n\
    \tat dotty.tools.dotc.typer.Applications.typedApply$(Applications.scala:327)\n\
    \tat dotty.tools.dotc.typer.Typer.typedApply(Typer.scala:117)\n\tat dotty.tools.dotc.typer.Typer.typedInfixOp(Typer.scala:2717)\n\
    \tat dotty.tools.dotc.typer.Typer.typedUnnamed$1(Typer.scala:2871)\n\tat dotty.tools.dotc.typer.Typer.typedUnadapted(Typer.scala:2895)\n\
    \tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2960)\n\tat dotty.tools.dotc.typer.Typer.typed(Typer.scala:2964)\n\
    \tat dotty.tools.dotc.typer.Typer.typedExpr(Typer.scala:3080)\n\tat dotty.tools.dotc.typer.Typer.typeSelectOnTerm$1(Typer.scala:645)\n\
    \tat dotty.tools.dotc.typer.Typer.typedSelect(Typer.scala:6"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpk07pesmr.scala

    '
  timestamp: 1659792561
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76js2wyn.scala:15)\n\tat Problem.main(tmp76js2wyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, elem) => if\
    \ (elem > max) elem else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp40mis_o.scala:14)\n\tat Problem.main(tmpp40mis_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (max < e) e else max }\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt16ddje2.scala:14)\n\tat Problem.main(tmpt16ddje2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (maxElem, e)\
    \ =>\n            if (e > maxElem) e else maxElem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (acc, x) =>\
    \ if (acc > x) acc else x )\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.indexOf(maxElem)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfq594suo.scala:14)\n\tat Problem.main(tmpfq594suo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhzcmukb.scala:14)\n\tat Problem.main(tmpvhzcmukb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\n\
    \            if (max < e) e\n            else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, elem) =>\n\
    \            if (elem > max) elem else max\n        }\n        max\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (max, elem)\
    \ => if (max < elem) elem else max )\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (maxElem, e)\
    \ =>\n            if (e > maxElem) e else maxElem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, x) => if\
    \ (x > max) x else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, element) => if (element\
    \ > max) element else max }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, e) => if\
    \ (e > max) e else max }\n        max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp48hcaka8.scala:11:1951 -------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max max max max max max\
    \ max max max max max max max max max max max max max max "
  stdout: ''
  timestamp: 1659978406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) =>\n                if (elem > maxElem) elem else maxElem\n\
    \        }\n        maxElem\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l){ (max, e) => if (e\
    \ > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhzcmukb.scala:14)\n\tat Problem.main(tmpvhzcmukb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L){ (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L){ (max, e) => if (e\
    \ > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max > elem) max else elem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong)((max,\
    \ elem) => if (max < elem) elem else max)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx7og6suh.scala:16)\n\tat Problem.main(tmpx7og6suh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, element) => if (element\
    \ > max) element else max }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (max > elem) max else elem)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkjn7qop0.scala:16)\n\tat Problem.main(tmpkjn7qop0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83dac5w0.scala:14)\n\tat Problem.main(tmp83dac5w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, x) => if\
    \ (x > max) x else max }\n        max.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (max, elem)\
    \ => if (max > elem) max else elem )\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, e) => if (e > max)\
    \ e else max }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l.toLong){\n   \
    \         (max, elem) => if (elem > max) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)(_ > _) ? _\
    \ : _\n        l.foldLeft(max)(_ > _) ? _ : _\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpwy1v5ur4.scala:10:49 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = l.foldLeft(\e\
    [31m0l\e[0m.toLong)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                    \
    \                             ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$3 of expanded function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m.toLong)((_$1,\
    \ _$2) => _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwy1v5ur4.scala:10:40\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmax\e\
    [0m = l.foldLeft(\e[31m0l\e[0m.toLong)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m \
    \                                       ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                              Found:    Boolean\n\e[31m   |\e[0m            \
    \                            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpwy1v5ur4.scala:11:33 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l.foldLeft(max)(_ > _) ? _ : _\n\e[31m\e[31m\
    \   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$6 of expanded function:\n\e[31m   |\e[0m   _$6 => l.foldLeft(max)((_$4, _$5)\
    \ => _$4 > _$5) ? _$6:.\n3 errors found\n"
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (maxElem, elem)\
    \ =>\n            if (elem > maxElem) elem else maxElem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792558
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L){\n          \
    \  (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n     \
    \   maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)(_ > _) ? _ :\
    \ _\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp96o8bnex.scala:10:46 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElem\e[0m = l.foldLeft(\e\
    [31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                           \
    \                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of\
    \ expanded function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1,\
    \ _$2) => _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96o8bnex.scala:10:37\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElem\e\
    [0m = l.foldLeft(\e[31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m        \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 Found:    Boolean\n\e[31m   |\e[0m                         \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max < elem) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, elem) =>\n        \
    \    if (max > elem) max else elem\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L)( (max, x) => if (x\
    \ > max) x else max )\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792574
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L){ (max, e) => if (e\
    \ > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, el) => if (max < el)\
    \ max else el }\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjvfzn60q.scala:13)\n\tat Problem.main(tmpjvfzn60q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)(_ > _) ? _ :\
    \ _\n        l.max\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp96o8bnex.scala:10:46 -----------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElem\e[0m = l.foldLeft(\e\
    [31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m                           \
    \                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of\
    \ expanded function:\n\e[31m   |\e[0m   _$3 => l.foldLeft(\e[31m0L\e[0m)((_$1,\
    \ _$2) => _$1 > _$2) ? _$3:.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp96o8bnex.scala:10:37\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mmaxElem\e\
    [0m = l.foldLeft(\e[31m0l\e[0m)(_ > _) ? _ : _\n\e[31m\e[31m   |\e[0m        \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                 Found:    Boolean\n\e[31m   |\e[0m                         \
    \            Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugyud6hp.scala:15)\n\tat Problem.main(tmpugyud6hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (max < elem) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        l.foldLeft(0l) { (max, element) => if (element\
    \ > max) element else max }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n\
    \    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong,\
    \ -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong, -10l.toLong)))\
    \ == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdeb4bm7a.scala:15)\n\tat Problem.main(tmpdeb4bm7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\n\
    \            if (max < e) max else e\n        }\n        maxElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4p7n3wou.scala:16)\n\tat Problem.main(tmp4p7n3wou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83dac5w0.scala:14)\n\tat Problem.main(tmp83dac5w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp83dac5w0.scala:14)\n\tat Problem.main(tmp83dac5w0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978391
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l.toLong)((max, x) =>\
    \ if (x > max) x else max)\n        l.indexOf(max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxfs7px83.scala:14)\n\tat Problem.main(tmpxfs7px83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max < elem) elem else max }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpewizihx0.scala:14)\n\tat Problem.main(tmpewizihx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (max > elem) max else elem }\n        l.indexOf(maxElem)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp40mis_o.scala:14)\n\tat Problem.main(tmpp40mis_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792569
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L) {\n         \
    \   (maxElem, elem) => if (elem > maxElem) elem else maxElem\n        }\n    \
    \    maxElem\n    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l)( (max, current) =>\
    \ if (current > max) current else max )\n        max \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){ (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76js2wyn.scala:15)\n\tat Problem.main(tmp76js2wyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, e) =>\
    \ if (e > max) e else max }\n        l.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpugyud6hp.scala:15)\n\tat Problem.main(tmpugyud6hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp76js2wyn.scala:15)\n\tat Problem.main(tmp76js2wyn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l){\n          \
    \  (max, elem) => if (elem > max) elem else max\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978415
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0L){ (max, e) => if (e\
    \ > max) e else max }\n        l.indexOf(max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpncrg8a5x.scala:14)\n\tat Problem.main(tmpncrg8a5x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)((max, elem) =>\
    \ if (elem > max) elem else max)\n        maxElem\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978412
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (max, elem)\
    \ => if (max < elem) elem else max )\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (maxElem, e)\
    \ => if (e > maxElem) e else maxElem }\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0L){ (max, e) =>\n\
    \            if (max > e) max else e\n        }\n        maxElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l)( (max, elem)\
    \ => if (elem > max) elem else max )\n        maxElem\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem }\n        maxElem\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) =>\n \
    \           if (e > max) e else max\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong,\
    \ -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong,\
    \ 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978402
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val maxElem = l.foldLeft(0l) { (max, elem)\
    \ =>\n            if (max > elem) max else elem\n        }\n        maxElem\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792563
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong,\
    \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
    \ 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l\
    \ : List[Long]) : Long = {\n        val max = l.foldLeft(0l) { (max, e) => if\
    \ (e > max) e else max }\n        max \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) ==\
    \ (3l));\n    assert(maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong,\
    \ 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 124l.toLong, 1l.toLong,\
    \ -10l.toLong))) == (124l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978401
