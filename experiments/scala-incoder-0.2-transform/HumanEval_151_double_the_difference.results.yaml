language: scala
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x)\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95xs5p6f.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val diff = evenSum - oddSum\n        sum + diff\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiu4p9jds.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        sum + diff\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Float\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum +=\
    \ x\n                oddSum += x\n            }\n        })\n        if (sum >\
    \ 0) {\n            oddSum\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x => sum +=\
    \ x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xw11f5r.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, elem)\
    \ =>\n            if (elem % 2 == 1) sum + elem\n            else sum\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9x46y02.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (elem\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + elem\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        Found:    Float\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.nonEmpty) {\n            val sum\
    \ = 0\n            val even = lst.filter(x => x % 2 == 0)\n            val odd\
    \ = lst.filter(x => x % 2 != 0)\n            val evenSum = even.map(x => x * x).sum\n\
    \            val oddSum = odd.map(x => x * x).sum\n            val sum = evenSum\
    \ + oddSum\n            sum\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8boivt.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = evenSum +\
    \ oddSum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, elem) => sum + elem * elem }\n        val oddSum = odd.foldLeft(0l)\
    \ { (sum, elem) => sum + elem * elem }\n        val result = evenSum - oddSum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94tatxhd.scala:19:57\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum\
    \ + elem * elem }\n\e[31m\e[31m   |\e[0m                                     \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                        Found:    Float\n\e[31m   |\e[0m    \
    \                                                     Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94tatxhd.scala:20:55 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem * elem }\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Float\n\e[31m   |\e[0m                                                  \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnkuoyvh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = lst(i + (lst.size % 2 ==\
    \ 0 ? 1 : 0))\n            if(x % 2 == 0 && y % 2 == 0) {\n                sum\
    \ += x * x\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefoay0k1.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = lst(i + (lst.size\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpefoay0k1.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += x * x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpes2s7txa.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, item)\
    \ => if (item % 2 == 1) sum + item * item else sum }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqk27eid.scala:16:74\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = lst.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36mitem\e[0m) => \e[33mif\e\
    [0m (item % \e[31m2\e[0m == \e[31m1\e[0m) sum + item * item \e[33melse\e[0m sum\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                           Found:    Float\n\e[31m   |\e[0m \
    \                                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80mqukya.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, num)\
    \ =>\n            if (num % 2 == 1) sum + num\n            else sum\n        }\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0bwy0sh4.scala:17:30\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (num\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + num\n\e[31m\e[31m   |\e[0m           \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \    Found:    Float\n\e[31m   |\e[0m                              Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1)\n     \
    \   val sum = nums.sum\n        val squares = nums.map(x => x * x)\n        val\
    \ result = squares.filter(_ % 2 == 1).sum\n        result + (sum - result)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppl74imsg.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result + (sum - result)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    Float\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6dov3uh4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dov3uh4.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6dov3uh4.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val even = lst.filter(_ % 2 == 0).toList\n\
    \        val odd = lst.filter(_ % 2 != 0).toList\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        evenSum + oddSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1e8_b_a.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        evenSum + oddSum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Float\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += Math.pow(x, 2))\n        sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4dgykc_g.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += Math.pow(x,\
    \ \e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcksfju5j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp23jjr8a4.scala:26)\n\tat Problem.main(tmp23jjr8a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddList = lst.filter(x\
    \ => x % 2 != 0).toList\n        val evenList = lst.filter(x => x % 2 == 0).toList\n\
    \        val evenSum = evenList.map(x => x * x).sum\n        val oddSum = oddList.map(x\
    \ => x * x).sum\n        val result = evenSum + oddSum\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp26w5086w.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6dov3uh4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dov3uh4.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6dov3uh4.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- 0 until lst.size) {\n            val f = lst(i)\n            if(f\
    \ < 0f || f % 1f != 0f) {\n                sum += f\n                oddSum +=\
    \ f\n            }\n        }\n        if(lst.size == 0) {\n            return\
    \ 0\n        }\n        sum * sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16wcitfy.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += f\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp16wcitfy.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                oddSum +=\
    \ f\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = mutable.ListBuffer.empty[Float]\n\
    \        for(i <- 0 until lst.size) {\n            val x = lst(i)\n          \
    \  if(x % 2 == 1) {\n                result += x\n            }\n        }\n \
    \       if(result.isEmpty) {\n            return 0\n        }\n        val sum\
    \ = result.sum\n        val squareSum = result.map(x => x * x).sum\n        return\
    \ sum - squareSum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkoy_swhd.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val f = lst(i)\n            if(f != 0l) {\n                val\
    \ x = math.abs(f)\n                if(x % 2 == 1) {\n                    sum +=\
    \ x\n                }\n            }\n        }\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn0n9g5kq.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    sum += x\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80mqukya.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        lst.foreach(x =>\
    \ if (x % 2 != 1) sum += x)\n        if (odds.isEmpty) 0\n        else sum * sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwe1fhck8.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwe1fhck8.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m != \e[31m1\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val n = lst(i)\n            if(n % 2 == 1) {\n              \
    \  sum += n\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcik658xy.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += n\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzj3ctdd_.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x*x else sum)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvhzdhhfu.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x*x \e[33melse\e[0m sum)\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                 value += is not a member of Long - did you mean sum.!=?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1flparzr.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnkuoyvh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- 0 until lst.size) {\n            val x = lst(i)\n            if(x\
    \ % 2 == 1) {\n                sum += x\n                oddSum += x\n       \
    \     }\n        }\n        if(sum > 0) {\n            return sum * sum\n    \
    \    }\n        if(oddSum > 0) {\n            return oddSum * oddSum\n       \
    \ }\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ibzl8nu.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ibzl8nu.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9w2y3mu.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1).toList\n\
    \        if (nums.isEmpty) 0\n        else nums.sum * nums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3mjalz0.scala:18:13\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m nums.sum\
    \ * nums.sum\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             Found:    Float\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- lst) {\n            if (i % 2 == 1) {\n                sum += i\n\
    \                oddSum += i\n            }\n        }\n        if (sum > 0) {\n\
    \            return sum * sum\n        } else {\n            return oddSum * oddSum\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp8_345q.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplp8_345q.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddSum +=\
    \ i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.nonEmpty) {\n            val sum\
    \ = 0\n            lst.foreach(x => if (x % 2 == 1) sum += x * x else 0)\n   \
    \         sum\n        } else {\n            0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfhrmndc6.scala:18:49 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m\
    \ (x % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        val result = odds.foldLeft(0l)\
    \ { (sum, v) => sum + v * v }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi415skoh.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val evenSum = 0\n  \
    \      val oddSum = 0\n        for(i <- lst) {\n            if (i % 2 == 0) {\n\
    \                evenSum += i\n            } else {\n                oddSum +=\
    \ i\n            }\n        }\n        val result = evenSum + oddSum\n       \
    \ if (result == 0) {\n            result\n        } else {\n            result.toLong\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjiqm_txb.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                evenSum += i\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value += is not\
    \ a member of Int - did you mean evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpjiqm_txb.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                oddSum += i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value += is not a member of Int - did you mean\
    \ oddSum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x*x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7fcvc50.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x*x \e[33melse\e[0m \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean sum.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- 0 until lst.size) {\n            val f = lst(i)\n            if(f\
    \ < 0f || f % 1f != 0f) {\n                sum += f\n            } else {\n  \
    \              oddSum += f\n            }\n        }\n        if(lst.size == 0)\
    \ {\n            return 0\n        }\n        sum + oddSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuprzooo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += f\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuprzooo.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                oddSum +=\
    \ f\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val evenSumSquareOdd = evenSumSquare\
    \ + oddSumSquare\n        val evenSumSquareOddSum = evenSumSquareOdd * evenSumSquareOdd\n\
    \        val evenSumSquareOddSumSquare = evenSumSquareOddSum * evenSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOdd = evenSumSquareOddSumSquare * evenSumSquareOddSumSquare\n\
    \        val evenSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOdd *\
    \ evenSumSquareOddSumSquareOdd\n        val evenSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSum\n      \
    \  val evenSumSquareOddSumSquareOddSumSquareOdd = evenSumSquareOddSumSquareOddSumSquare\
    \ * evenSumSquareOddSumSquareOddSumSquare\n        val evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquare = evenSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquare * evenSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n        val evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = evenSumSquareOddSumSquareOddSumSquareOddSumSquare\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi7014dhf.scala:30:58 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mevenSumSquareOddSumSquareOddSumSquareOddSum\e\
    [0m = evenSumSquareOddSumSquareOddSumSquareOddSum * evenSumSquareOddSumSquareOddSumSquareOdd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35mevenSumSquareOddSumSquareOddSumSquareOddSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpi7014dhf.scala:33:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\e[0m = evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * evenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\n\e[31m\e[31m   |\e\
    [0m                                                                      ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mevenSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7014dhf.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += x * x)\n        numsSumSquare\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij__s7xb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpij__s7xb.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        numsSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (numsSumSquare : Float)\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 != 0) odd.add(x) else sum += x)\n        if\
    \ (odd.isEmpty) 0 else sum * sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ja87g2a.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3ja87g2a.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m (x % \e[31m2\e[0m != \e[31m0\e[0m) odd.add(x) \e[33melse\e\
    [0m sum += x)\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odd += x)\n        lst.foreach(x =>\
    \ if (x % 2 == 0) sum += x)\n        if (odd.isEmpty) 0 else sum * sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppaixrwdv.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmppaixrwdv.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        val numsSumSquareOdd = numsSumSquare - numsSum\n        val\
    \ numsSumSquareOddSum = numsSumSquareOdd + numsSum\n        val numsSumSquareOddSumSquare\
    \ = numsSumSquareOddSum * numsSumSquareOdd\n        val numsSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquare - numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOdd + numsSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n        val\
    \ numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ - numsSumSquareOddSumSquareOddSum\n        val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd + numsSumSquareOddSumSquareOddSumSquare\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare - numsSumSquareOddSumSquareOddSumSquareOddSum\n\
    \        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSumSquareOddSumSquareOddSumSquare\n        val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOddSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgfbpfjm3.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val x = i.toLong\n            val y = if (x < 0) -x else x\n      \
    \      val z = y % 2\n            sum += z * z\n        }\n        sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp76a1ybck.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += z * z\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnkuoyvh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 != 0) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwyuvp0cs.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        lst.foreach(x =>\
    \ if (x % 2 != 1) sum += x)\n        odds match {\n            case Nil => 0\n\
    \            case x :: xs => sum * sum\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwpstonji.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpwpstonji.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m != \e[31m1\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val x = if (i.toLong % 2 == 1) i else 0\n            sum += x\n   \
    \     }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppmbno6gb.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = 0\n      \
    \  val even = 0\n        lst.foreach(x => {\n            if (x % 2 == 1) {\n \
    \               even += x\n            } else {\n                odd += x\n  \
    \          }\n        })\n        val result = even + odd\n        if (result\
    \ > 0) result else 0\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8r1f3st.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                even += x\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean even.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc8r1f3st.scala:23:20\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m                odd += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean odd.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val x = if (i % 2 == 0) i else 0\n            sum += x\n        }\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9td8eats.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += x\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- lst) {\n \
    \           if(i % 2 == 1) {\n                sum += i\n            }\n      \
    \  }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp5payfwl.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                odd.add(x)\n            }\n        })\n        if (odd.isEmpty)\
    \ 0\n        else sum * sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9ac004.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n9ac004.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = 0\n      \
    \  for(i <- 0 until lst.size) {\n            if(lst(i) % 2 != 0) {\n         \
    \       sum += lst(i)\n                odd += 1\n            }\n        }\n  \
    \      if(lst.size == 0) 0\n        else sum * sum / odd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbyywj224.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbyywj224.scala:21:20 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                odd += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Int - did you\
    \ mean odd.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val x = i.toLong\n            val y = if (x < 0) -x else x\n      \
    \      val z = if (y < 0) -y else y\n            sum += z\n        }\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa_b8q68f.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += z\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcksfju5j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6dov3uh4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dov3uh4.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6dov3uh4.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val even = lst.filter(_ % 2 == 0).toList\n\
    \        val odd = lst.filter(_ % 2 != 0).toList\n        val sum = even.sum +\
    \ odd.sum\n        val result = if (sum > 0) sum * sum else 0\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqgvuetu6.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x => sum +=\
    \ x * x)\n        numsSet.foreach(x => sum += x)\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_f6ql3k.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp7_f6ql3k.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        numsSet.foreach(\e[36mx\e[0m => sum += x)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                 value += is not a member of Int - did you mean sum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i).isInstanceOf[Float]) {\n                sum += lst(i).asInstanceOf[Float]\n\
    \            }\n            else if(lst(i).isInstanceOf[Long]) {\n           \
    \     sum += lst(i).asInstanceOf[Long]\n            }\n            else {\n  \
    \              sum += lst(i).asInstanceOf[Int]\n            }\n        }\n   \
    \     sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbyzvzkc1.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i).asInstanceOf[\e[35mFloat\e\
    [0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbyzvzkc1.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                sum += lst(i).asInstanceOf[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value += is not a member of Int - did you mean sum.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbyzvzkc1.scala:25:20 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                sum += lst(i).asInstanceOf[\e[35mInt\e\
    [0m]\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          value += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.isEmpty) 0\n        else lst.foldLeft(0l)\
    \ { (sum, num) =>\n            if (num % 2 == 1) sum + num * num\n           \
    \ else sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoam1e1rd.scala:18:30\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (num\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + num * num\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                Found:    Float\n\e[31m   |\e[0m                            \
    \  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9w2y3mu.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, element) => sum + element }\n        val oddSum = odd.foldLeft(0l) {\
    \ (sum, element) => sum + element }\n        val result = evenSum - oddSum\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm72wbl2v.scala:19:60\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36melement\e[0m) => sum\
    \ + element }\n\e[31m\e[31m   |\e[0m                                         \
    \                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                   Found:    Float\n\e[31m   |\e[0m         \
    \                                                Required: Long\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm72wbl2v.scala:20:58 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melement\e[0m) => sum + element }\n\e[31m\e\
    [31m   |\e[0m                                                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         Found:\
    \    Float\n\e[31m   |\e[0m                                                  \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009309
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x*x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo7fcvc50.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x*x \e[33melse\e[0m \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean sum.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1)\n     \
    \   if (nums.isEmpty) 0\n        else nums.sum * nums.sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugcz2g4q.scala:18:13\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m nums.sum\
    \ * nums.sum\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             Found:    Float\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odd.add(x) else sum += x)\n        odd.foreach(x\
    \ => sum += x)\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9uqzzc0b.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9uqzzc0b.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m1\e[0m) odd.add(x) \e[33melse\e\
    [0m sum += x)\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, element)\
    \ =>\n            if (element % 2 == 1) sum + element * element\n            else\
    \ sum\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzbfze75m.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (element\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + element * element\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    Float\n\e[31m   |\e[0m        \
    \                          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x * x)\n        sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbehyi5ia.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1)\n     \
    \   val sumOfSquares = nums.map(x => x * x).sum\n        sumOfSquares\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphfll3ohu.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        sumOfSquares\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (sumOfSquares\
    \ : Float)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val square = i * i\n            if(i % 2 == 1) {\n                sum\
    \ += square\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbudn4h2e.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += square\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9w2y3mu.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) if (i\
    \ % 2 == 1) sum += i\n        sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp02klmeq0.scala:17:42 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst) \e[33mif\e[0m (i % \e\
    [31m2\e[0m == \e[31m1\e[0m) sum += i\n\e[31m\e[31m   |\e[0m                  \
    \                    ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = lst.filter(x\
    \ => x % 2 == 1).map(x => x * x).sum\n        val even = lst.filter(x => x % 2\
    \ == 0).map(x => x * x).sum\n        odd + even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpophyyhfg.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        odd + even\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Float\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.isEmpty) 0\n        else {\n    \
    \        val sum = 0\n            val nums = lst.filter(_ % 2 == 1)\n        \
    \    val numsSum = nums.sum\n            val numsSumSquare = numsSum * numsSum\n\
    \            val numsSumSquareOdd = numsSumSquare - numsSum\n            val numsSumSquareOddSum\
    \ = numsSumSquareOdd + numsSum\n            val numsSumSquareOddSumSquare = numsSumSquareOddSum\
    \ * numsSumSquareOdd\n            val numsSumSquareOddSumSquareOdd = numsSumSquareOddSumSquare\
    \ * numsSumSquareOdd\n            val numsSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSum\n            val numsSumSquareOddSumSquareOddSumSquare\
    \ = numsSumSquareOddSumSquareOddSum * numsSumSquareOddSumSquareOdd\n         \
    \   val numsSumSquareOddSumSquareOddSumSquareOdd = numsSumSquareOddSumSquareOddSumSquare\
    \ * numsSumSquareOddSumSquareOdd\n            val numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOdd + numsSumSquareOddSumSquareOddSum\n\
    \            val numsSumSquareOddSumSquareOddSumSquareOddSumSquare = numsSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSumSquareOddSumSquareOdd\n            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquare * numsSumSquareOddSumSquareOddSumSquareOdd\n\
    \            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOdd\
    \ + numsSumSquareOddSumSquareOddSumSquareOddSum\n            val numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum * numsSumSquareOddSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9x_vp7m.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp9x_vp7m.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36mnumsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\e[0m = numsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\
    \ * numsSumSquareOddSum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum is\
    \ already defined as \e[33mvalue\e[0m \e[35mnumsSumSquareOddSumSquareOddSumSquareOddSumSquareOddSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpp9x_vp7m.scala:45:1 ---------------------\e[0m\e[0m\n\
    \e[31m45 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpp9x_vp7m.scala:35:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m35 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660009316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = evenSum * evenSum\n  \
    \      val oddSquare = oddSum * oddSum\n        val sum = evenSquare + oddSquare\n\
    \        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3nyplwan.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSquare +\
    \ oddSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val sum = evenSum + oddSum\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcksfju5j.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x else ())\n        if\
    \ (result.isEmpty) 0l else result.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5j7wrg3a.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1).toList\n\
    \        if (nums.isEmpty) 0\n        else nums.sum * nums.sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa3mjalz0.scala:18:13\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33melse\e[0m nums.sum\
    \ * nums.sum\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m             Found:    Float\n\e[31m   |\e[0m             Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgz1pzp_x.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.nonEmpty) {\n            lst.foldLeft(0l)\
    \ { (sum, item) => if (item % 2 == 1) sum + item else sum }\n        } else {\n\
    \            0l\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo2vz3k6n.scala:17:65\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            lst.foldLeft(\e[31m0l\e\
    [0m) { (\e[36msum\e[0m, \e[36mitem\e[0m) => \e[33mif\e[0m (item % \e[31m2\e[0m\
    \ == \e[31m1\e[0m) sum + item \e[33melse\e[0m sum }\n\e[31m\e[31m   |\e[0m   \
    \                                                              ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                         Found:\
    \    Float\n\e[31m   |\e[0m                                                  \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- lst) {\n \
    \           sum += i.toLong\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpq2qrxe1u.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.sum\n        val oddSum = odd.sum\n        val evenSumSquare = evenSum\
    \ * evenSum\n        val oddSumSquare = oddSum * oddSum\n        val result =\
    \ evenSumSquare + oddSumSquare\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjhb3ehsb.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnkuoyvh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val nums = lst.filter(_ % 2 == 1)\n     \
    \   val sumOfSquares = nums.map(x => x * x).sum\n        sumOfSquares\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphfll3ohu.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        sumOfSquares\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (sumOfSquares\
    \ : Float)\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk15r88op.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = lst.filter(x\
    \ => x % 2 == 1).map(x => x * x).sum\n        val even = lst.filter(x => x % 2\
    \ == 0).map(x => x * x).sum\n        odd + even\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpophyyhfg.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        odd + even\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Float\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        return sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvffm1qbf.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        lst.foreach(x =>\
    \ sum += x * x)\n        sum - odds.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpio2hcktm.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpio2hcktm.scala:19:29 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             value += is not a member of Int - did you mean sum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.map(x\
    \ => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n        val result\
    \ = evenSum - oddSum\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80mqukya.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum + oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1flparzr.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 != 0) odds += x)\n        val result = odds.foldLeft(0l)((x,\
    \ y) => x + y)\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2i7ztg4_.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009312
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = mutable.ListBuffer[Float]()\n\
    \        for(i <- lst) {\n            if(i % 2 == 1) {\n                result\
    \ += i\n            }\n        }\n        if(result.isEmpty) {\n            return\
    \ 0\n        }\n        result.sum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaocngeq1.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(x\
    \ => x % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x =>\
    \ sum += x * x)\n        numsSet.foreach(x => sum += x * x)\n        sum\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd61afq1e.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpd61afq1e.scala:20:33 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        numsSet.foreach(\e[36mx\e[0m => sum += x * x)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value += is not a member of Int - did you mean sum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009316
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- 0 until lst.size) {\n            if(lst(i) % 2 == 1) {\n      \
    \          sum += lst(i)\n                oddSum += lst(i)\n            }\n  \
    \      }\n        oddSum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcognifql.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpcognifql.scala:21:23 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                oddSum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value += is not a member of Int - did you mean\
    \ oddSum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009317
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x < 0) continue\n            if(x\
    \ % 2 == 1) sum += x\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu2788_xd.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e[0m(x < \e[31m0\e[0m) continue\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpu2788_xd.scala:20:31 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(x % \e[31m2\e[0m == \e[31m1\e[0m)\
    \ sum += x\n\e[31m\e[31m   |\e[0m                           ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  value += is not a member of Int - did you mean sum.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        val result = sum\
    \ * sum - square + square\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxd3l3hya.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxd3l3hya.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009322
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.nonEmpty) {\n            lst.foldLeft(0l)\
    \ { (sum, num) =>\n                if (num % 2 == 1) sum + num\n             \
    \   else sum\n            }\n        } else {\n            0l\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjccccle3.scala:18:34\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m\
    \ (num % \e[31m2\e[0m == \e[31m1\e[0m) sum + num\n\e[31m\e[31m   |\e[0m      \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                 Found:    Float\n\e[31m   |\e[0m                           \
    \       Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odd += x)\n        val even = lst.filterNot(x\
    \ => x % 2 == 1)\n        val sum = even.sum\n        val result = sum + odd.sum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8y_eyqay.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = even.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum is already\
    \ defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8y_eyqay.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009319
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i).toLong % 2 == 1) {\n                sum += lst(i).toLong\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbsk72vja.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i).toLong\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9w2y3mu.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum +=\
    \ x\n            } else {\n                oddSum += x\n            }\n      \
    \  })\n        if (sum > 0) {\n            return sum * sum\n        } else if\
    \ (sum < 0) {\n            return -sum * sum\n        } else {\n            return\
    \ oddSum * oddSum\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppef0x5o_.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppef0x5o_.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = lst.filter(x\
    \ => x % 2 != 0).toList\n        val even = lst.filter(x => x % 2 == 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val result = evenSum + oddSum\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4wxa7unz.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009324
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.isEmpty) 0\n        else {\n    \
    \        val sum = 0\n            val nums = lst.filter(_ % 2 == 1)\n        \
    \    val numsSum = nums.sum\n            val numsSumSquare = numsSum * numsSum\n\
    \            val numsSumSquareDiff = numsSumSquare - nums.sum\n            val\
    \ numsSumSquareDiffSquare = numsSumSquareDiff * numsSumSquareDiff\n          \
    \  val numsSumSquareDiffSquareDiff = numsSumSquareDiffSquare * numsSumSquareDiffSquare\n\
    \            val numsSumSquareDiffSquareDiffSquare = numsSumSquareDiffSquareDiff\
    \ * numsSumSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquare\n  \
    \          val numsSumSquareDiffSquareDiffSquareDiffSquare = numsSumSquareDiffSquareDiffSquareDiff\
    \ * numsSumSquareDiffSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquare\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiff * numsSumSquareDiffSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquareDiff\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\n\
    \            val numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiffSquare\
    \ = numsSumSquareDiffSquare\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppb6o39ga.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppb6o39ga.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mnumsSumSquareDiffSquareDiffSquareDiffSquareDiff\e[0m = numsSumSquareDiffSquareDiffSquareDiffSquare\
    \ * numsSumSquareDiffSquareDiffSquareDiffSquare\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSquareDiffSquareDiffSquareDiffSquareDiff is already\
    \ defined as \e[33mvalue\e[0m \e[35mnumsSumSquareDiffSquareDiffSquareDiffSquareDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppb6o39ga.scala:32:16 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m            \e[33mval\e[0m \e[36mnumsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\e\
    [0m = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\
    \ is already defined as \e[33mvalue\e[0m \e[35mnumsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppb6o39ga.scala:33:16 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m            \e[33mval\e[0m \e[36mnumsSumSquareDiffSquareDiffSquareDiffSquareDiffSquareDiff\e\
    [0m = numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare * numsSumSquareDiffSquareDiffSquareDiffSquareDiffSquare\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) if(i %\
    \ 2 == 1) sum += i\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzhlumyzp.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst) \e[33mif\e[0m(i % \e\
    [31m2\e[0m == \e[31m1\e[0m) sum += i\n\e[31m\e[31m   |\e[0m                  \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is\
    \ not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum\
    \ += x\n                odd.add(x)\n            }\n        })\n        if (odd.isEmpty)\
    \ 0\n        else sum * sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2n9ac004.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2n9ac004.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 0) sum += x)\n        lst.foreach(x =>\
    \ if (x % 2 != 0) odds.add(x))\n        if (odds.isEmpty) 0 else sum * sum\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohqxw7ay.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpohqxw7ay.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp23jjr8a4.scala:26)\n\tat Problem.main(tmp23jjr8a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) sum +=\
    \ i * i\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4664kvxz.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst) sum += i * i\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val evenSum = 0\n  \
    \      val oddSum = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i).isEven)\
    \ {\n                evenSum += lst(i)\n            }\n            else {\n  \
    \              oddSum += lst(i)\n            }\n        }\n        val result\
    \ = evenSum + oddSum\n        if(lst.size == 0) {\n            result\n      \
    \  }\n        else {\n            result\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_snveg0z.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m(lst(i).isEven) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \ value isEven is not a member of Float\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp_snveg0z.scala:21:24 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m                evenSum += lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              value += is not a member of Int - did you mean\
    \ evenSum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_snveg0z.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                oddSum +=\
    \ lst(i)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \               value += is not a member of Int - did you mean oddSum.!=?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val even = lst.filter(_ % 2 == 0)\n     \
    \   val odd = lst.filter(_ % 2 != 0)\n        val sumOdd = even.sum\n        val\
    \ sumEven = odd.sum\n        val sumOddAndEven = sumOdd + sumEven\n        val\
    \ sumOddAndEvenSquare = sumOddAndEven * sumOddAndEven\n        val sumOddAndEvenSquareRoot\
    \ = math.sqrt(sumOddAndEvenSquare)\n        sumOddAndEvenSquareRoot\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafyh16pk.scala:23:8\
    \ ---------------------\e[0m\e[0m\n\e[31m23 |\e[0m        sumOddAndEvenSquareRoot\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    (sumOddAndEvenSquareRoot : Double)\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, element)\
    \ => if (element % 2 == 1) sum + element else sum }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ji3tr71.scala:16:80\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = lst.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36melement\e[0m) => \e\
    [33mif\e[0m (element % \e[31m2\e[0m == \e[31m1\e[0m) sum + element \e[33melse\e\
    [0m sum }\n\e[31m\e[31m   |\e[0m                                             \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                   Found:    Float\n\e[31m  \
    \ |\e[0m                                                         Required: Long\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1l && lst(i) != 0l) {\n                sum +=\
    \ lst(i) * lst(i)\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkctq_f92.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i) * lst(i)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value +=\
    \ is not a member of Long - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        val oddsSum = odds.sum\n\
    \        val oddsSumSquare = oddsSum * oddsSum\n        lst.foreach(x => if (x\
    \ % 2 == 0) sum += x * x)\n        sum + oddsSumSquare\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa1u1dd0y.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpa1u1dd0y.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sum += x * x)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) sum +=\
    \ i * i\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4664kvxz.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst) sum += i * i\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val x = i.toLong\n            val y = x % 2\n            val z = x\
    \ + y\n            sum += z.toLong\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppfn_aot6.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            sum += z.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i\n            }\n      \
    \  }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxl3bpkrf.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = new mutable.HashSet[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odd.add(x) else sum += x)\n        odd.toList.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpir7qymsm.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpir7qymsm.scala:18:61\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        lst.foreach(\e[36mx\e\
    [0m => \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m1\e[0m) odd.add(x) \e[33melse\e\
    [0m sum += x)\n\e[31m\e[31m   |\e[0m                                         \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum - oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56opgrk8.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1tzbmmdi.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     for(i <- lst) {\n            if(i % 2 == 1) {\n                sum += i\n\
    \                oddSum += i\n            }\n        }\n        if(sum > 0) {\n\
    \            oddSum\n        } else {\n            0\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdvog682z.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdvog682z.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddSum +=\
    \ i\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        odds.foreach(x =>\
    \ sum += x * x)\n        sum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ec1o47e.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          val isOdd = i % 2 != 0\n            val isNegative = i < 0\n      \
    \      if(isOdd && !isNegative) {\n                sum += i\n            }\n \
    \       }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9d_er_er.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009331
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum +=\
    \ x\n                oddSum += x\n            }\n        })\n        if (sum >\
    \ 0) {\n            oddSum\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        val sum = evenSum\
    \ + oddSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6dov3uh4.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6dov3uh4.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6dov3uh4.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        val result = sum\
    \ * sum\n        square\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1mtaxs7i.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mtaxs7i.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        square\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (square : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        for(i <- nums) {\n            sum += i\n        }\n     \
    \   sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbyifsdnh.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sum += i\n\e[31m\e[31m   |\e[0m         \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int -\
    \ did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- lst) {\n \
    \           val x = i.toLong\n            val y = if (x < 0) -x else x\n     \
    \       sum += y * y\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0uyeuv3o.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += y * y\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp23jjr8a4.scala:26)\n\tat Problem.main(tmp23jjr8a4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val sum = evenSum +\
    \ oddSum\n        val square = evenSquare + oddSquare\n        val result = sum\
    \ * sum\n        square\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1mtaxs7i.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1mtaxs7i.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        square\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (square : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009332
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = if (x < 0) -x else x\n  \
    \          sum += y * y\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprxnfw4zb.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            sum += y * y\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => if (x % 2 == 1) odds += x)\n        lst.foreach(x =>\
    \ if (x % 2 == 0) sum += x)\n        if (odds.isEmpty) 0\n        else sum * sum\
    \ - odds.toSet.sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprns65l9b.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprns65l9b.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) sum += x)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0m                  value\
    \ += is not a member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) sum +=\
    \ i * i\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4664kvxz.scala:17:26 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- lst) sum += i * i\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \    value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val result = evenSum + oddSum\n       \
    \ if (evenSum == 0) 0 else result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50km2ze_.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (evenSum\
    \ == \e[31m0\e[0m) \e[31m0\e[0m \e[33melse\e[0m result\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                  Found:    (result : Float)\n\e[31m   |\e[0m               \
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzj3ctdd_.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if (i % 2 == 1) {\n                sum += i\n            }\n      \
    \  }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxl3bpkrf.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009327
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqykj1827.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value += is not a member of Long - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, element)\
    \ =>\n            if (element % 2 == 1) sum + element\n            else sum\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppgikgavs.scala:17:34\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (element\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + element\n\e[31m\e[31m   |\e[0m       \
    \                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Found:    Float\n\e[31m   |\e[0m                        \
    \          Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val sum = evenSum + oddSum\n        sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmgu663db.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSum + oddSum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msum\
    \ is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7b3xckux.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0l\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)(_\
    \ + _)\n        val oddSum = odd.foldLeft(0l)(_ + _)\n        sum = evenSum +\
    \ oddSum\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1q_lvkse.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1q_lvkse.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp1q_lvkse.scala:21:12 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        sum = evenSum + oddSum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment to val\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += x * x)\n        numsSumSquare\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpij__s7xb.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpij__s7xb.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        numsSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (numsSumSquare : Float)\n\e[31m   |\e[0m\
    \        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpes2s7txa.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0)\n        val odd = lst.filter(x => x % 2 != 0)\n        val evenSum\
    \ = even.map(x => x * x).sum\n        val oddSum = odd.map(x => x * x).sum\n \
    \       val result = evenSum - oddSum\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56opgrk8.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odds = mutable.Set[Float]()\n\
    \        lst.foreach(x => {\n            if (x % 2 != 0) odds += x\n        })\n\
    \        odds.foreach(x => sum += x * x)\n        sum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigqcb8d0.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mFloat\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          if(i % 2 == 1) {\n                sum += i\n            }\n       \
    \ }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yz6rven.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += i\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val result = evenSumSquare\
    \ + oddSumSquare\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzj3ctdd_.scala:24:8\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Float)\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ > 0).toList\n        val numsOdd = nums.filter(_ % 2 != 0).toList\n        val\
    \ numsEven = nums.filter(_ % 2 == 0).toList\n        val numsSum = numsOdd.size\
    \ + numsEven.size\n        val numsSumOdd = numsOdd.map(x => x * x).sum\n    \
    \    val numsSumEven = numsEven.map(x => x * x).sum\n        val numsSumOddEven\
    \ = numsSumOdd + numsSumEven\n        val numsSumOddEvenLong = numsSumOddEven.toLong\n\
    \        val numsSumOddEvenLongLong = numsSumOddEvenLong.toLong\n        val numsSumOddEvenLongLongLong\
    \ = numsSumOddEvenLongLong.toLong\n        val numsSumOddEvenLongLongLongLong\
    \ = numsSumOddEvenLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLongLongLongLong.toLong\n        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong\
    \ = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong.toLong\n      \
    \  val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong.toLong\n\
    \        val numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1dm_qvsy.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dm_qvsy.scala:34:73\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong\e[0m = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mnumsSumOddEvenLongLongLongLongLongLongLongLongLongLongLong\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1dm_qvsy.scala:35:81\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong\e[0m\
    \ = numsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mnumsSumOddEvenLongLongLongLongLongLongLongLongLongLongLongLongLong\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1dm_qvsy.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.isEmpty) 0\n        else lst.foldLeft(0l)\
    \ { (sum, elem) =>\n            if (elem % 2 == 1) sum + elem\n            else\
    \ sum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxoiw36uo.scala:18:31\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (elem\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + elem\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        Found:    Float\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val odd = lst.filter(_\
    \ % 2 != 0).toList\n        val even = lst.filter(_ % 2 == 0).toList\n       \
    \ val evenSum = even.foldLeft(0l)(_ + _)\n        val oddSum = odd.foldLeft(0l)(_\
    \ + _)\n        val result = evenSum - oddSum\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptvja2zu7.scala:19:40\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m)(_ + _)\n\e[31m\e[31m   |\e[0m             \
    \                           ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                  Found:    Float\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmptvja2zu7.scala:20:38 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e[31m0l\e[0m)(_\
    \ + _)\n\e[31m\e[31m   |\e[0m                                      ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    Float\n\e[31m \
    \  |\e[0m                                      Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSquare = even.map(x => x * x).sum\n\
    \        val oddSquare = odd.map(x => x * x).sum\n        val difference = evenSquare\
    \ - oddSquare\n        val sumOfSquares = evenSum * evenSum + oddSum * oddSum\n\
    \        sumOfSquares + difference\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdfystqy6.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        sumOfSquares + difference\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Found:    Float\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSum = nums.sum\n        val numsSumSquare = numsSum\
    \ * numsSum\n        nums.foreach(x => sum += x * x)\n        sum + numsSumSquare\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8_0juecp.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x * x)\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \              value += is not a member of Int - did you mean sum.!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp8_0juecp.scala:21:8 ---------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        sum + numsSumSquare\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Float\n\e[31m\
    \   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- lst) {\n  \
    \          sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx9w2y3mu.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            sum += i * i\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660009292
