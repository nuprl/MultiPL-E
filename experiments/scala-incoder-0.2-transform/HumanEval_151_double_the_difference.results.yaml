language: scala
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = mutable.ListBuffer.empty[Float]\n\
    \        lst.foreach(x => if (x % 2 == 1) result += x * x)\n        result.sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp95xs5p6f.scala:16:21 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mFloat\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(x\
    \ => x % 2 == 0).toList\n        val odd = lst.filter(x => x % 2 != 0).toList\n\
    \        val evenSum = even.map(x => x * x).sum\n        val oddSum = odd.map(x\
    \ => x * x).sum\n        val diff = evenSum - oddSum\n        sum + diff\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiu4p9jds.scala:22:8\
    \ ---------------------\e[0m\e[0m\n\e[31m22 |\e[0m        sum + diff\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Float\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val oddSum = 0\n   \
    \     lst.foreach(x => {\n            if (x % 2 == 1) {\n                sum +=\
    \ x\n                oddSum += x\n            }\n        })\n        if (sum >\
    \ 0) {\n            oddSum\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpurzt2hvm.scala:21:23\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                oddSum +=\
    \ x\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \           value += is not a member of Int - did you mean oddSum.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793304
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val nums = lst.filter(_\
    \ % 2 == 1)\n        val numsSet = nums.toSet\n        nums.foreach(x => sum +=\
    \ x)\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0xw11f5r.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        nums.foreach(\e[36mx\e[0m => sum += x)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        value += is not a member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, elem)\
    \ =>\n            if (elem % 2 == 1) sum + elem\n            else sum\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu9x46y02.scala:17:31\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (elem\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum + elem\n\e[31m\e[31m   |\e[0m          \
    \                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        Found:    Float\n\e[31m   |\e[0m                               Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        if (lst.nonEmpty) {\n            val sum\
    \ = 0\n            val even = lst.filter(x => x % 2 == 0)\n            val odd\
    \ = lst.filter(x => x % 2 != 0)\n            val evenSum = even.map(x => x * x).sum\n\
    \            val oddSum = odd.map(x => x * x).sum\n            val sum = evenSum\
    \ + oddSum\n            sum\n        } else {\n            0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8boivt.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36msum\e[0m = evenSum +\
    \ oddSum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.foldLeft(0l)\
    \ { (sum, elem) => sum + elem * elem }\n        val oddSum = odd.foldLeft(0l)\
    \ { (sum, elem) => sum + elem * elem }\n        val result = evenSum - oddSum\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94tatxhd.scala:19:57\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenSum\e\
    [0m = even.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum\
    \ + elem * elem }\n\e[31m\e[31m   |\e[0m                                     \
    \                    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                                        Found:    Float\n\e[31m   |\e[0m    \
    \                                                     Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp94tatxhd.scala:20:55 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddSum\e[0m = odd.foldLeft(\e\
    [31m0l\e[0m) { (\e[36msum\e[0m, \e[36melem\e[0m) => sum + elem * elem }\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Float\n\e[31m   |\e[0m                                                  \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            if(lst(i) % 2 == 1) {\n                sum += lst(i)\n      \
    \      }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnkuoyvh.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                sum += lst(i)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793301
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            val y = lst(i + (lst.size % 2 ==\
    \ 0 ? 1 : 0))\n            if(x % 2 == 0 && y % 2 == 0) {\n                sum\
    \ += x * x\n            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpefoay0k1.scala:19:47 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36my\e[0m = lst(i + (lst.size\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^\e[0m\n\e[31m   |\e\
    [0m                                          value ? is not a member of Int\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpefoay0k1.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                sum += x * x\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a\
    \ member of Int - did you mean sum.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659793467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        val even = lst.filter(_\
    \ % 2 == 0)\n        val odd = lst.filter(_ % 2 != 0)\n        val evenSum = even.sum\n\
    \        val oddSum = odd.sum\n        val evenSumSquare = evenSum * evenSum\n\
    \        val oddSumSquare = oddSum * oddSum\n        val sum = evenSumSquare +\
    \ oddSumSquare\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16b3ubqc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = evenSumSquare\
    \ + oddSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msum is already defined as \e[33mvalue\e[0m \e[35msum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1659793313
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpes2s7txa.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793310
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val result = lst.foldLeft(0l) { (sum, item)\
    \ => if (item % 2 == 1) sum + item * item else sum }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(doubleTheDifference((List[Float]()))\
    \ == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat)))\
    \ == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeqk27eid.scala:16:74\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = lst.foldLeft(\e[31m0l\e[0m) { (\e[36msum\e[0m, \e[36mitem\e[0m) => \e[33mif\e\
    [0m (item % \e[31m2\e[0m == \e[31m1\e[0m) sum + item * item \e[33melse\e[0m sum\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                       ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                           Found:    Float\n\e[31m   |\e[0m \
    \                                                        Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        lst.foreach(x => if\
    \ (x % 2 == 1) sum += x * x else 0)\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n    assert(doubleTheDifference((List[Float](5.0f.toFloat,\
    \ 4.0f.toFloat))) == (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat,\
    \ 0.2f.toFloat, 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9lzihf7y.scala:17:45 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.foreach(\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) sum += x * x \e[33melse\e[0m \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                  value += is not a member of Int - did you mean\
    \ sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
    \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    \    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong,\
    \ 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong,\
    \ -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong,\
    \ -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n\
    \    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst\
    \ : List[Float]) : Long = {\n        val sum = 0\n        for(i <- 0 until lst.size)\
    \ {\n            val x = lst(i)\n            if(x % 2 == 1) {\n              \
    \  sum += x\n            }\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(doubleTheDifference((List[Float]())) == (0l));\n\
    \    assert(doubleTheDifference((List[Float](5.0f.toFloat, 4.0f.toFloat))) ==\
    \ (25l));\n    assert(doubleTheDifference((List[Float](0.1f.toFloat, 0.2f.toFloat,\
    \ 0.3f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-10.0f.toFloat,\
    \ -20.0f.toFloat, -30.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](-1.0f.toFloat,\
    \ -2.0f.toFloat, 8.0f.toFloat))) == (0l));\n    assert(doubleTheDifference((List[Float](0.2f.toFloat,\
    \ 3.0f.toFloat, 5.0f.toFloat))) == (34l));\n    assert(doubleTheDifference((List[Float](-9.0f.toFloat,\
    \ -7.0f.toFloat, -5.0f.toFloat, -3.0f.toFloat, -1.0f.toFloat, 1.0f.toFloat, 3.0f.toFloat,\
    \ 5.0f.toFloat, 7.0f.toFloat, 9.0f.toFloat))) == (165l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptb34gn9f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                sum += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not a member\
    \ of Int - did you mean sum.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793300
