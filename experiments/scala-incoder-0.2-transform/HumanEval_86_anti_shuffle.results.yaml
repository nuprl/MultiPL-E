language: scala
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800453
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        val newString = newWords.mkString(\" \")\n        newString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val sortedCharsString = sortedChars.mkString(\"\")\n     \
    \       sortedCharsString\n        })\n        val newString = newWords.mkString(\"\
    \ \")\n        newString\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val sortedWords\
    \ = words.sortWith(_.compareTo(_) < 0)\n        val result = sortedWords.mkString(\"\
    \ \")\n        val blankSpaces = result.count(_ == \" \")\n        val blankSpaceCount\
    \ = result.count(_ == \" \")\n        if (blankSpaceCount > 0 && blankSpaces ==\
    \ blankSpaceCount) {\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blankSpaceIndex = result.lastIndexOf(' ')\n\
    \            val blankSpace = result.substring(blankSpaceIndex + 1, blankSpaceIndex\
    \ + blankSpaceCount)\n            val blank\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vepu1dz.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vepu1dz.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmp4vepu1dz.scala:20:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n\e[31m\e[31m-- Error: /tmp/tmp4vepu1dz.scala:21:43 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mblankSpaceCount\e[0m = result.count(_\
    \ == \e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4vepu1dz.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mblankSpaceIndex\e[0m = result.lastIndexOf(\e[31m' '\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mblankSpaceIndex is already defined as \e[33mvalue\e[0m \e[35mblankSpaceIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4vepu1dz.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mblankSpace\e[0m = result.substring(blankSpaceIndex\
    \ + \e[31m1\e[0m, blankSpaceIndex + blankSpaceCount)\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mblankSpace is already defined as \e[33mvalue\e[0m \e[35mblankSpace\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded met"
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(w => w.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase)\n        val newWordsSorted\
    \ = newWords.sortWith((a, b) => a.compareTo(b))\n        newWordsSorted.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxkx83xg.scala:19:68\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnewWordsSorted\e\
    [0m = newWords.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => a.compareTo(b))\n\e[31m\e\
    [31m   |\e[0m                                                         ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    Int\n\e[31m   |\e[0m                                                    \
    \   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toString.toInt)\n  \
    \          val newWord = sortedChars.mkString(\"\")\n            newWord\n   \
    \     })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"H\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$3(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.$anonfun$1(tmpy5ztthgu.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.antiShuffle(tmpy5ztthgu.scala:24)\n\
    \tat Problem$.main(tmpy5ztthgu.scala:28)\n\tat Problem.main(tmpy5ztthgu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val charsSorted = chars.sortWith(_\
    \ < _)\n            val charsSortedString = charsSorted.mkString(\"\")\n     \
    \       charsSortedString\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val sortedCharsString = sortedChars.mkString(\"\")\n     \
    \       sortedCharsString\n        })\n        newWords.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toLowerCase)\n        val newWords =\
    \ words.toList.sortWith((x, y) => x.compareTo(y) == 0)\n        val result = newWords.mkString(\"\
    \ \")\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzho7bdxk.scala:23)\n\tat Problem.main(tmpzho7bdxk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newChars = sortedChars.map(c => c.toInt)\n           \
    \ val newWord = String.fromChars(newChars)\n            newWord\n        })\n\
    \        val newString = newWords.mkString(\" \")\n        newString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\")).equals((\"\
    Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"\
    number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"\
    abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"Hello !!!Wdlor\"\
    )));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7twgen8b.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mnewWord\e[0m = String.fromChars(newChars)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        value fromChars is not a member of object String\n\
    \e[31m\e[31m-- Error: /tmp/tmp7twgen8b.scala:24:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659800449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val sortedWords\
    \ = words.sortWith((x, y) => x.toString.compareToIgnoreCase(y.toString))\n   \
    \     val result = sortedWords.mkString(\" \")\n        val blankSpaces = result.count(_\
    \ == \" \")\n        val blankSpaceIndex = result.lastIndexOf(' ')\n        val\
    \ blankSpaces = if (blankSpaceIndex == -1) 0 else blankSpaceIndex + 1\n      \
    \  val blankSpace = \" \" * blankSpaces\n        val newWord = blankSpace + result.substring(0,\
    \ blankSpaceIndex) + result.substring(blankSpaceIndex)\n        result + newWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"Hi\"\
    )).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\")));\n\
    \    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpox56eax1.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mblankSpaces\e[0m = \e[33mif\e\
    [0m (blankSpaceIndex == -\e[31m1\e[0m) \e[31m0\e[0m \e[33melse\e[0m blankSpaceIndex\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mblankSpaces is already defined as \e[33mvalue\e[0m \e[35mblankSpaces\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpox56eax1.scala:18:81 --------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        \e[33mval\e[0m \e[36msortedWords\e[0m = words.sortWith((\e\
    [36mx\e[0m, \e[36my\e[0m) => x.toString.compareToIgnoreCase(y.toString))\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Found:\
    \    Int\n\e[31m   |\e[0m                                                   Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpox56eax1.scala:20:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ \e[33mval\e[0m \e[36mblankSpaces\e[0m = result.count(_ == \e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        Values of types Char and String cannot be compared with ==\
    \ or !=\n3 errors found\n"
  stdout: ''
  timestamp: 1659800636
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            val newWord = sortedChars.mkString(\"\")\n            newWord\n\
    \        })\n        newWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(antiShuffle((\"Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"\
    hello\")).equals((\"ehllo\")));\n    assert(antiShuffle((\"number\")).equals((\"\
    bemnru\")));\n    assert(antiShuffle((\"abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"\
    Hello World!!!\")).equals((\"Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\"\
    )).equals((\"\")));\n    assert(antiShuffle((\"Hi. My name is Mister Robot. How\
    \ are you?\")).equals((\".Hi My aemn is Meirst .Rboot How aer ?ouy\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \").map(_.toUpperCase)\n        val newWords =\
    \ words.map(word => {\n            val chars = word.split(\"\").map(_.toUpperCase)\n\
    \            val charsSorted = chars.sortWith((a, b) => a.compareTo(b) < 0)\n\
    \            charsSorted.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe0n_jqvb.scala:26)\n\tat Problem.main(tmpe0n_jqvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a string and returns an ordered version\
    \ of it.\n    // Ordered version of string, is a string where all words (separated\
    \ by space)\n    // are replaced by a new word where all the characters arranged\
    \ in\n    // ascending order based on ascii value.\n    // Note: You should keep\
    \ the order of words and blank spaces in the sentence.\n    // For example:\n\
    \    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"\
    hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n\
    \    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n \
    \       val words = s.split(\" \")\n        val newWords = words.map(word => {\n\
    \            val chars = word.split(\"\")\n            val sortedChars = chars.sortWith(_\
    \ < _)\n            sortedChars.mkString(\"\")\n        })\n        newWords.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(antiShuffle((\"\
    Hi\")).equals((\"Hi\")));\n    assert(antiShuffle((\"hello\")).equals((\"ehllo\"\
    )));\n    assert(antiShuffle((\"number\")).equals((\"bemnru\")));\n    assert(antiShuffle((\"\
    abcd\")).equals((\"abcd\")));\n    assert(antiShuffle((\"Hello World!!!\")).equals((\"\
    Hello !!!Wdlor\")));\n    assert(antiShuffle((\"\")).equals((\"\")));\n    assert(antiShuffle((\"\
    Hi. My name is Mister Robot. How are you?\")).equals((\".Hi My aemn is Meirst\
    \ .Rboot How aer ?ouy\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800442
