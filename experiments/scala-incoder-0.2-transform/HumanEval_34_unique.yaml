name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
  \    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n\
  \    def unique(l : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        val uList = mutable.ListBuffer[Long]()\n        l.foreach {\
    \ x => if (!uList.contains(x)) uList += x }\n        uList.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (seen.add(x)) {\n                result += x\n            }\n\
    \        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen.toSet)\n        res.sortWith(_ < _)", "  \
    \      val seen = mutable.Set[Long]()\n        val unique = mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ unique.append(x)\n            } else {\n                seen.add(x)\n      \
    \      }\n        }\n        unique.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) \n              \
    \  seen.clear()\n            else\n                seen += x\n        }\n    \
    \    seen.toList", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen.toSet)\n        res.sortWith(_ < _)", "        val seen =\
    \ mutable.Set[Long]()\n        val result = new mutable.ListBuffer[Long]()\n \
    \       for (x <- l) {\n            if (seen.contains(x)) {\n                continue\n\
    \            }\n            seen.add(x)\n            result += x\n        }\n\
    \        result.toList", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        l.foreach(x => if (!seen.add(x)) result += x)\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n        \
    \    if (seen.contains(e)) {\n                seen.clear()\n            } else\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  seen.toList", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen(_))\n        res.toList", "        val seen = mutable.Set[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        l.foreach { e =>\n     \
    \       if (seen.contains(e)) {\n                result.add(e)\n            }\
    \ else {\n                seen += e\n            }\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) {\n             \
    \   result.add(x)\n            } else {\n                seen.add(x)\n       \
    \     }\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set += x }\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val res = l.filter(x => !seen.add(x))\n\
    \        res", "        val set = new mutable.HashSet[Long]\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.map(x =>\
    \ x.toLong)", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (seen.contains(i))\
    \ {\n                continue\n            }\n            seen.add(i)\n      \
    \      result += i\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sorted", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            } else {\n                seen += e\n          \
    \  }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if(!u.contains(x)) u += x)\n        u.toList", "        val seen = mutable.Set[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n \
    \           if (!seen.contains(x)) {\n                seen.add(x)\n          \
    \      result += x\n            }\n        }\n        result.toList", "      \
    \  val seen = mutable.HashSet[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        l.foreach { e =>\n            if (!seen.contains(e)) {\n            \
    \    seen.add(e)\n                result += e\n            }\n        }\n    \
    \    result.toList", "        val seen = mutable.HashSet[Long]()\n        val\
    \ res = l.filterNot(seen(_))\n        seen.addAll(l)\n        res", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val unique = mutable.HashSet[Long]()\n   \
    \     l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n       \
    \ for (x <- l) {\n            if (seen(x)) {\n                result.add(x)\n\
    \            } else {\n                seen += x\n            }\n        }\n \
    \       result.toList", "        val seen = mutable.HashSet[Long]()\n        val\
    \ res = new mutable.ListBuffer[Long]()\n        for (x <- l) {\n            if\
    \ (seen.contains(x)) {\n                continue\n            }\n            res\
    \ += x\n            seen += x\n        }\n        res.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.contains(x))\
    \ return\n            seen.add(x)\n        }\n        seen.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) set.toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n            if (!seen.contains(e))\
    \ {\n                seen.add(e)\n                e\n            }\n        }",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(s\"seen $x\")\n            }\n\
    \        }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n \
    \       val result = new mutable.ListBuffer[Long]()\n        for (x <- l) {\n\
    \            if (seen.add(x)) {\n                result += x\n            }\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach { x => set.add(x.toLong) }\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        set.foreach { x => result.add(x) }\n        result.toList", "       \
    \ val ulist = mutable.ListBuffer[Long]()\n        for (x <- l)\n            if\
    \ (ulist.contains(x))\n                ulist += x\n            else\n        \
    \        ulist += x\n        ulist.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (x <- l) {\n       \
    \     if (seen.contains(x)) {\n                continue\n            }\n     \
    \       seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.contains(x)) return\n            seen += x\n  \
    \      }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        for (x <- l) {\n\
    \            if (seen.contains(x)) {\n                continue\n            }\n\
    \            seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x.toLong)", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            }\n            else {\n                seen += e\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) x }\n        l.toList", "        val\
    \ set = new mutable.HashSet[Long]\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x) else ())\n        set.iterator.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  l ++ List(0l.toLong)", "        val unique = mutable.LinkedHashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen += _)\n        res", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen(_))\n        seen ++= res\n        res", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.map(x => x.toLong)", "        val\
    \ unique = mutable.HashSet[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        l.foreach { e =>\n     \
    \       if (!seen.contains(e)) {\n                seen.add(e)\n              \
    \  result += e\n            }\n        }\n        result.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n  \
    \      set.sort", "        val seen = mutable.Set[Long]()\n        val result\
    \ = new mutable.ListBuffer[Long]()\n        for (x <- l) {\n            if (seen.contains(x))\
    \ {\n                continue\n            }\n            seen.add(x)\n      \
    \      result += x\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set.add(x))\
    \ set.toList", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x))\n        set.sort", "        val seen =\
    \ mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n     \
    \   for (i <- l) {\n            if (seen.contains(i)) {\n                continue\n\
    \            }\n            seen.add(i)\n            result += i\n        }\n\
    \        result.toList", "        val seen = mutable.HashSet[Long]()\n       \
    \ l.foreach { e =>\n            if (seen.contains(e)) {\n                seen.clear()\n\
    \            }\n            else {\n                seen += e\n            }\n\
    \        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.Set[Long]()\n        l.foldLeft(List[Long]())((acc, x)\
    \ => {\n            if (seen.contains(x)) acc\n            else seen.updated(x)\n\
    \        })", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sort", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort", " \
    \       val seen = mutable.HashSet[Long]()\n        val res = mutable.ArrayBuffer.empty[Long]\n\
    \        l.foreach { x =>\n            if (seen(x)) return\n            seen +=\
    \ x\n            res += x\n        }\n        res", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.iterator.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   result += e\n            } else {\n                seen += e\n           \
    \ }\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val unique = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => if (!unique.contains(x)) unique.add(x) }\n        unique.toList", " \
    \       val seen = mutable.Set[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.add(x)) {\n                seen.clear()\n            }\n        }\n\
    \        seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                println(\"seen \" +\
    \ x)\n            }\n        }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        for (x <- l) {\n   \
    \         if (seen(x)) {\n                continue\n            }\n          \
    \  seen += x\n            result += x\n        }\n        result.toList", "  \
    \      val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (seen.contains(x))\
    \ l.filter(_ != x).reverse else seen += x }\n        seen.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val uniques = mutable.HashSet[Long]()\n\
    \        l.foreach(x => uniques += x)\n        uniques.toList", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.iterator.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.contains(x)) return\n            seen += x\n  \
    \      }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val res = l.filterNot(x =>\
    \ seen.add(x))\n        res", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.add(x))\
    \ set.delete(x))\n        set.map(x => x).toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        l.foreach(x => if (seen.contains(x))\
    \ result.add(x) else seen.add(x))\n        result.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.contains(x))\
    \ return\n            seen.add(x)\n        }\n        l ++ seen.toList", "   \
    \     val unique = mutable.HashSet[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.toList", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort", "  \
    \      val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  l ++ seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                x :: seen.toList\n \
    \           } else {\n                seen += x\n            }\n        }", " \
    \       val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n       \
    \     if (seen.add(x)) {\n                seen.remove(x)\n            } else {\n\
    \                seen.add(x)\n            }\n        }\n        seen.toList",
  "        val set = new mutable.HashSet[Long]\n        l.foreach(x => set.add(x))\n\
    \        set.sortWith(_ < _)", "        val seen = mutable.Set[Long]()\n     \
    \   val result = new ListBuffer[Long]()\n        l.foreach { e =>\n          \
    \  if (seen.contains(e)) {\n                result.add(e)\n            } else\
    \ {\n                seen += e\n            }\n        }\n        result.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sortWith(_ < _)", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { x => if (seen.contains(x)) l.filterNot(x\
    \ => x == x) else seen.add(x) }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x.toLong)", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                seen.clear()\n            }\n       \
    \ }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n     \
    \   l.foreach { x =>\n            if (seen.contains(x)) return\n            seen.add(x)\n\
    \        }\n        l ++ seen.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        for (x <- l) {\n   \
    \         if (seen.contains(x)) {\n                continue\n            }\n \
    \           seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (seen.contains(i)) {\n               \
    \ continue\n            }\n            seen.add(i)\n            result.add(i)\n\
    \        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (x <- l) {\n       \
    \     if (seen.contains(x)) {\n                continue\n            }\n     \
    \       seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen(x)) {\n                continue\n\
    \            }\n            seen += x\n            result += x\n        }\n  \
    \      result.toList", "        val set = new mutable.HashSet[Long]()\n      \
    \  l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (seen.contains(i)) {\n               \
    \ continue\n            }\n            seen.add(i)\n            result.add(i)\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            } else {\n                seen += e\n          \
    \  }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen(_))\n        seen.addAll(l)\n        res",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (i <- l) {\n            if (seen.contains(i)) {\n               \
    \ continue\n            }\n            seen.add(i)\n            result += i\n\
    \        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        l.foreach { e =>\n \
    \           if (!seen.contains(e)) {\n                seen.add(e)\n          \
    \      result += e\n            }\n        }\n        result.toList", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.toList", "        val uniques =\
    \ mutable.HashSet[Long]()\n        l.foreach { x => uniques += x }\n        uniques.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) {\n             \
    \   result.add(x)\n            } else {\n                seen += x\n         \
    \   }\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if(!u.contains(x)) u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { e => set.add(e) }\n        set.sortWith(_ < _)", "      \
    \  val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.Set[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (seen(x)) return\n            seen +=\
    \ x\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (seen.add(x)) {\n                result += x\n            }\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) set.toList", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.add(x)) {\n                println(\"seen \" + x)\n            }\n   \
    \     }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n \
    \       l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n \
    \       set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.map(x =>\
    \ x.toLong)", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = new ListBuffer[Long]()\n        l.foreach { e =>\n            if (!seen.contains(e))\
    \ {\n                seen.add(e)\n                result += e\n            }\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => { if (!seen.add(x)) println(s\"$x\"); })\n        l.toList", "        val\
    \ unique = mutable.HashSet[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen(_))\n        val sorted = res.sorted\n   \
    \     val unique = sorted.distinct\n        unique", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach { x => set.add(x.toLong) }\n        set.sort", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result += x\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.toList", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n  \
    \      set.sorted", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = new ListBuffer[Long]()\n        for (x <- l) {\n            if (!seen(x))\
    \ {\n                seen.add(x)\n                result += x\n            }\n\
    \        }\n        result.toList", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => if (!seen.add(x)) println(\"\
    dup: \" + x); seen.add(x))\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val unique = mutable.HashSet[Long]()\n   \
    \     l.foreach { x => unique.add(x) }\n        unique.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   result.add(e)\n            } else {\n                seen.add(e)\n       \
    \     }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!seen.contains(x)) seen.add(x)) l", "        val seen\
    \ = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) {\n             \
    \   result.add(x)\n            } else {\n                seen.add(x)\n       \
    \     }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(x => seen.contains(x))\n        seen.clear()\n\
    \        res", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.contains(x)) return\n            seen.add(x)\n\
    \        }\n        seen.toList", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x)) \n        unique.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sorted", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val seen = mutable.HashSet[Long]()\n        l.foreach(x => if (seen.add(x))\
    \ x else seen.add(x))\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        for (x <- l) {\n\
    \            if (!seen(x)) {\n                seen.add(x)\n                result\
    \ += x\n            }\n        }\n        result.toList", "        val seen =\
    \ mutable.Set[Long]()\n        val result = mutable.ListBuffer[Long]()\n     \
    \   for (x <- l) {\n            if (!seen.contains(x)) {\n                seen\
    \ += x\n                result += x\n            }\n        }\n        result.toList",
  "        val seen = mutable.Set[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n            }\
    \ else {\n                seen.add(e)\n                result += e\n         \
    \   }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen.add)\n        res", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (elem <- l) {\n            if (!seen.contains(elem)) {\n        \
    \        seen.add(elem)\n                result += elem\n            }\n     \
    \   }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n \
    \       val result = new ListBuffer[Long]()\n        for (i <- l) {\n        \
    \    if (!seen.contains(i)) {\n                seen.add(i)\n                result\
    \ += i\n            }\n        }\n        result.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        val result = mutable.ListBuffer[Long]()\n \
    \       l.foreach(x => if (seen.contains(x)) return\n            seen.update(x)\n\
    \            result += x)\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.add(x)) println(s\"$x was already in set\"))\n\
    \        set.map(x => x).toList", "        val unique = mutable.Set[Long]()\n\
    \        l.foreach(x => if (!unique.contains(x)) unique.add(x))\n        unique.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen(x)) {\n                continue\n\
    \            }\n            seen += x\n            result += x\n        }\n  \
    \      result.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen -= x\n        \
    \    }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.add(x)) {\n                seen -= x\n            }\n        }\n  \
    \      seen.toList", "        val unique = mutable.Set[Long]()\n        l.foreach(x\
    \ => if (!unique.contains(x)) unique.add(x) )\n        unique.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.contains(x)) return\n            seen.add(x)\n        }\n        l\
    \ ++ seen.toList", "        val seen = mutable.Set[Long]()\n        val result\
    \ = new ListBuffer[Long]()\n        for (x <- l) {\n            if (seen(x)) continue\n\
    \            seen.add(x)\n            result.add(x)\n        }\n        result.toList",
  "        val unique = mutable.LinkedHashSet[Long]()\n        l.foreach(x => unique.add(x))\n\
    \        unique.toList", "        val seen = mutable.Set[Long]()\n        val\
    \ result = mutable.ListBuffer[Long]()\n        l.foreach { e =>\n            if\
    \ (!seen.contains(e)) {\n                seen.add(e)\n                result +=\
    \ e\n            }\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sort", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList"]
stop_tokens:
- "\n    }\n"
