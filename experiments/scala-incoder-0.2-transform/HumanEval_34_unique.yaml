name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n\
  \    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n\
  \    def unique(l : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        val uList = mutable.ListBuffer[Long]()\n        l.foreach {\
    \ x => if (!uList.contains(x)) uList += x }\n        uList.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ListBuffer[Long]()\n        l.foreach { x =>\n\
    \            if (seen.add(x)) {\n                result += x\n            }\n\
    \        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = l.filterNot(seen.toSet)\n        res.sortWith(_ < _)", "  \
    \      val seen = mutable.Set[Long]()\n        val unique = mutable.ListBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ unique.append(x)\n            } else {\n                seen.add(x)\n      \
    \      }\n        }\n        unique.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) \n              \
    \  seen.clear()\n            else\n                seen += x\n        }\n    \
    \    seen.toList", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen.toSet)\n        res.sortWith(_ < _)", "        val seen =\
    \ mutable.Set[Long]()\n        val result = new mutable.ListBuffer[Long]()\n \
    \       for (x <- l) {\n            if (seen.contains(x)) {\n                continue\n\
    \            }\n            seen.add(x)\n            result += x\n        }\n\
    \        result.toList", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        l.foreach(x => if (!seen.add(x)) result += x)\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n        \
    \    if (seen.contains(e)) {\n                seen.clear()\n            } else\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  seen.toList", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen(_))\n        res.toList", "        val seen = mutable.Set[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        l.foreach { e =>\n     \
    \       if (seen.contains(e)) {\n                result.add(e)\n            }\
    \ else {\n                seen += e\n            }\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        val result = new ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) {\n             \
    \   result.add(x)\n            } else {\n                seen.add(x)\n       \
    \     }\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set += x }\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val res = l.filter(x => !seen.add(x))\n\
    \        res", "        val set = new mutable.HashSet[Long]\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.map(x =>\
    \ x.toLong)", "        val seen = mutable.HashSet[Long]()\n        val result\
    \ = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (seen.contains(i))\
    \ {\n                continue\n            }\n            seen.add(i)\n      \
    \      result += i\n        }\n        result.toList", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.sorted"]
stop_tokens:
- "\n    }\n"
