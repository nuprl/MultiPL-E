{
  "language": "scala",
  "name": "HumanEval_41_car_race_collision",
  "results": [
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659793179
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothBothRight\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpyixsp37n.scala:41:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyixsp37n.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyixsp37n.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyixsp37n.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpyixsp37n.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwju61g4a.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwju61g4a.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwju61g4a.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwju61g4a.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.tail\n        val carsRight = cars.init\n        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisionsLeft = collisions.toSet\n        val collisionsRight = collisions.toSet\n        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpvm1vduc3.scala:62:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m62 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvm1vduc3.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = collisions.toSet\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvm1vduc3.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = collisions.toSet\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvm1vduc3.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = collisions.toSet\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvm1vduc3.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = collisions.toSet\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpvm1",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.foldLeft(0)((acc, car) => acc + (carsRight.contains(car) ? 1 : 0))\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplxp2jmrd.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmplxp2jmrd.scala:16:91 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = carsLeft.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36macc\u001b[0m, \u001b[36mcar\u001b[0m) => acc + (carsRight.contains(car) ? \u001b[31m1\u001b[0m : \u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value ? is not a member of Boolean\n4 errors found\n",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach { car =>\n                cars.foreach { car2 =>\n                    if (car.head == car2.head && car.tail.head == car2.tail.head) {\n                        collisions += car.head + car2.head * car.tail.tail.head * car2.tail.tail.head\n                    }\n                }\n            }\n        }\n        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkapmuusn.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkapmuusn.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1659793452
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n        val speedsDiff = mutable.ListBuffer[Double]()\n        val speedsDiffs = mutable.ListBuffer[Double]()\n        val speedsDiffsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ListBuffer[Double]()\n        val speedsDiffsSumsSumsSumsSumsSum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphvbziisa.scala:37:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmphvbziisa.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSum\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvbziisa.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvbziisa.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvbziisa.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphvbziisa.scala:16:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m       ",
      "stdout": "",
      "timestamp": 1659793455
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659793350
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1659793193
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2), Vector.zero))\n        val collided = mutable.Set[Car]()\n        val collided2 = mutable.Set[Car]()\n        val collided3 = mutable.Set[Car]()\n        val collided4 = mutable.Set[Car]()\n        val collided5 = mutable.Set[Car]()\n        val collided6 = mutable.Set[Car]()\n        val collided7 = mutable.Set[Car]()\n        val collided8 = mutable.Set[Car]()\n        val collided9 = mutable.Set[Car]()\n        val collided10 = mutable.Set[Car]()\n        val collided11 = mutable.Set[Car]()\n        val collided12 = mutable.Set[Car]()\n        val collided13 = mutable.Set[Car]()\n        val collided14 = mutable.Set[Car]()\n        val collided15 = mutable.Set[Car]()\n        val collided16 = mutable.Set[Car]()\n        val collided17 = mutable.Set[Car]()\n        val collided18 = mutable.Set[Car]()\n        val collided19 = mutable.Set[Car]()\n        val collided20 = mutable.Set[Car]()\n        val collided21 = mutable.Set[Car]()\n        val collided22 = mutable.Set[Car]()\n        val collided23 = mutable.Set[Car]()\n        val collided24 = mutable.Set[Car]()\n        val collided25 = mutable.Set[Car]()\n        val collided26 = mutable.Set[Car]()\n        val collided27 = mutable.Set[Car]()\n        val collided28 = mutable.Set[Car]()\n        val collided29 = mutable.Set[Car]()\n        val collided30 = mutable.Set[Car]()\n        val collided31 = mutable.Set[Car]()\n        val collided32 = mutable.Set[Car]()\n        val collided33 = mutable.Set[Car]()\n        val collided34 = mutable.Set[Car]()\n        val collided35 = mutable.Set[Car]()\n        val collided36\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpy7uu19cc.scala:50:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m50 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7uu19cc.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.zero))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy7uu19cc.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.zero))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy7uu19cc.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.zero))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy7uu19cc.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.zero))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a m",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => new Car(i))\n        val cars2 = mutable.ListBuffer(1 to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisions2 = mutable.ListBuffer[Long]()\n        val collisions3 = mutable.ListBuffer[Long]()\n        val collisions4 = mutable.ListBuffer[Long]()\n        val collisions5 = mutable.ListBuffer[Long]()\n        val collisions6 = mutable.ListBuffer[Long]()\n        val collisions7 = mutable.ListBuffer[Long]()\n        val collisions8 = mutable.ListBuffer[Long]()\n        val collisions9 = mutable.ListBuffer[Long]()\n        val collisions10 = mutable.ListBuffer[Long]()\n        val collisions11 = mutable.ListBuffer[Long]()\n        val collisions12 = mutable.ListBuffer[Long]()\n        val collisions13 = mutable.ListBuffer[Long]()\n        val collisions14 = mutable.ListBuffer[Long]()\n        val collisions15 = mutable.ListBuffer[Long]()\n        val collisions16 = mutable.ListBuffer[Long]()\n        val collisions17 = mutable.ListBuffer[Long]()\n        val collisions18 = mutable.ListBuffer[Long]()\n        val collisions19 = mutable.ListBuffer[Long]()\n        val collisions20 = mutable.ListBuffer[Long]()\n        val collisions21 = mutable.ListBuffer[Long]()\n        val collisions22 = mutable.ListBuffer[Long]()\n        val collisions23 = mutable.ListBuffer[Long]()\n        val collisions24 = mutable.ListBuffer[Long]()\n        val collisions25 = mutable.ListBuffer[Long]()\n        val collisions26 = mutable.ListBuffer[Long]()\n        val collisions27 = mutable.ListBuffer[Long]()\n        val collisions28 = mutable.ListBuffer[Long]()\n        val collisions29 = mutable.ListBuffer[Long]()\n        val collisions30 = mutable.ListBuffer[Long]()\n        val collisions31 = mutable.ListBuffer[Long]()\n        val collisions32 = mutable.ListBuffer[Long]()\n        val collisions33 = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(i))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars2\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(i))\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:15:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:16:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions2\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplqcodgxl.scala:17:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions3\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not ",
      "stdout": "",
      "timestamp": 1659793455
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var collisionsCount = 0\n        var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        var carsCount = cars.length\n        var carsMoved = Vector.tabulate(n)(i => 0)\n        var carsMovedCount = carsMoved.length\n        var carsMovedSum = carsMoved.sum\n        var carsMovedSumCount = carsMovedSum.count\n        var carsMovedSumCount2 = carsMovedSumCount.count\n        var carsMovedSumCount3 = carsMovedSumCount2.count\n        var carsMovedSumCount4 = carsMovedSumCount3.count\n        var carsMovedSumCount5 = carsMovedSumCount4.count\n        var carsMovedSumCount6 = carsMovedSumCount5.count\n        var carsMovedSumCount7 = carsMovedSumCount6.count\n        var carsMovedSumCount8 = carsMovedSumCount7.count\n        var carsMovedSumCount9 = carsMovedSumCount8.count\n        var carsMovedSumCount10 = carsMovedSumCount9.count\n        var carsMovedSumCount11 = carsMovedSumCount10.count\n        var carsMovedSumCount12 = carsMovedSumCount11.count\n        var carsMovedSumCount13 = carsMovedSumCount12.count\n        var carsMovedSumCount14 = carsMovedSumCount13.count\n        var carsMovedSumCount15 = carsMovedSumCount14.count\n        var carsMovedSumCount16 = carsMovedSumCount15.count\n        var carsMovedSumCount17 = carsMovedSumCount16.count\n        var carsMovedSumCount18 = carsMovedSumCount17.count\n        var carsMovedSumCount19 = carsMovedSumCount18.count\n        var carsMovedSumCount20 = carsMovedSumCount19.count\n        var carsMovedSumCount21 = carsMovedSumCount20.count\n        var carsMovedSumCount22 = carsMovedSumCount21.count\n        var carsMovedSumCount23 = carsMovedSumCount22.count\n        var carsMovedSumCount24 = carsMovedSumCount23.count\n        var carsMovedSumCount25 = cars\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:15:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsMoved\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqsollnyw.scala:20:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsMovedSumCount\u001b[0m = carsMovedSum.count\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value count is not a member of Int - did you mean Int.toInt?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqsollnyw.scala:45:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m",
      "stdout": "",
      "timestamp": 1659793152
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n        val speeds2 = mutable.ListBuffer[Double]()\n        val speeds3 = mutable.ListBuffer[Double]()\n        val speeds4 = mutable.ListBuffer[Double]()\n        val speeds5 = mutable.ListBuffer[Double]()\n        val speeds6 = mutable.ListBuffer[Double]()\n        val speeds7 = mutable.ListBuffer[Double]()\n        val speeds8 = mutable.ListBuffer[Double]()\n        val speeds9 = mutable.ListBuffer[Double]()\n        val speeds10 = mutable.ListBuffer[Double]()\n        val speeds11 = mutable.ListBuffer[Double]()\n        val speeds12 = mutable.ListBuffer[Double]()\n        val speeds13 = mutable.ListBuffer[Double]()\n        val speeds14 = mutable.ListBuffer[Double]()\n        val speeds15 = mutable.ListBuffer[Double]()\n        val speeds16 = mutable.ListBuffer[Double]()\n        val speeds17 = mutable.ListBuffer[Double]()\n        val speeds18 = mutable.ListBuffer[Double]()\n        val speeds19 = mutable.ListBuffer[Double]()\n        val speeds20 = mutable.ListBuffer[Double]()\n        val speeds21 = mutable.ListBuffer[Double]()\n        val speeds22 = mutable.ListBuffer[Double]()\n        val speeds23 = mutable.ListBuffer[Double]()\n        val speeds24 = mutable.ListBuffer[Double]()\n        val speeds25 = mutable.ListBuffer[Double]()\n        val speeds26 = mutable.ListBuffer[Double]()\n        val speeds27 = mutable.ListBuffer[Double]()\n        val speeds28 = mutable.ListBuffer[Double]()\n        val speeds29 = mutable.ListBuffer[Double]()\n        val speeds30 = mutable.ListBuffer[Double]()\n        val speeds31 = mutable.ListBuffer[Double]()\n        val speeds32 = mutable.ListBuffer[Double]()\n        val speeds33 = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:16:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeeds\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeeds2\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqlsxlplx.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspe",
      "stdout": "",
      "timestamp": 1659793455
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp3e9122c_.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3e9122c_.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3e9122c_.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3e9122c_.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3e9122c_.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topl",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector(i, j)))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqrzbwaqh.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b",
      "stdout": "",
      "timestamp": 1659793139
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = carsLeft.tail\n        var carsRight = carsRight.tail\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5a72fkjc.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.init\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.init\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsCollisions = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.ListBuffer[Int]()\n        val carsCollisionsLeft = mutable.ListBuffer[Int]()\n        val carsCollisionsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpklyiwgny.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpklyiwgny.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsC",
      "stdout": "",
      "timestamp": 1659793332
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659793179
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collisionsCount = mutable.HashSet[Car]()\n        val collisionsCount2 = mutable.HashSet[Car]()\n        val collisionsCount3 = mutable.HashSet[Car]()\n        val collisionsCount4 = mutable.HashSet[Car]()\n        val collisionsCount5 = mutable.HashSet[Car]()\n        val collisionsCount6 = mutable.HashSet[Car]()\n        val collisionsCount7 = mutable.HashSet[Car]()\n        val collisionsCount8 = mutable.HashSet[Car]()\n        val collisionsCount9 = mutable.HashSet[Car]()\n        val collisionsCount10 = mutable.HashSet[Car]()\n        val collisionsCount11 = mutable.HashSet[Car]()\n        val collisionsCount12 = mutable.HashSet[Car]()\n        val collisionsCount13 = mutable.HashSet[Car]()\n        val collisionsCount14 = mutable.HashSet[Car]()\n        val collisionsCount15 = mutable.HashSet[Car]()\n        val collisionsCount16 = mutable.HashSet[Car]()\n        val collisionsCount17 = mutable.HashSet[Car]()\n        val collisionsCount18 = mutable.HashSet[Car]()\n        val collisionsCount19 = mutable.HashSet[Car]()\n        val collisionsCount20 = mutable.HashSet[Car]()\n        val collisionsCount21 = mutable.HashSet[Car]()\n        val collisionsCount22 = mutable.HashSet[Car]()\n        val collisionsCount23 = mutable.HashSet[Car]()\n        val collisionsCount24 = mutable.HashSet[Car]()\n        val collisionsCount25 = mutable.HashSet[Car]()\n        val collisionsCount26 = mutable.HashSet[Car]()\n        val collisionsCount27 = mutable.HashSet[Car]()\n        val collisionsCount28 = mutable.HashSet[Car]()\n        val collisionsCount29 = mutable.HashSet[Car]()\n        val collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdhd5l0bq.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdhd5l0bq.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdhd5l0bq.scala:13:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdhd5l0bq.scala:14:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.HashSet[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdhd5l0bq.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.HashSet[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- ",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n        val collisionsCount33 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpnu31d00p.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount33\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnu31d00p.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnu31d00p.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu31d00p.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnu31d00p.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, Long]()\n        val collisionsCounts = mutable.Map[Car, \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnpcmg6r2.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnpcmg6r2.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mCar\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnpcmg6r2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mCar\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnpcmg6r2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mCar\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpnpcmg6r2.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mCar\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCoun",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsCount = 0\n        val collisionsCountLimit = 1000000\n        val collisionsCountLimit2 = 1000000\n        val collisionsCountLimit3 = 1000000\n        val collisionsCountLimit4 = 1000000\n        val collisionsCountLimit5 = 1000000\n        val collisionsCountLimit6 = 1000000\n        val collisionsCountLimit7 = 1000000\n        val collisionsCountLimit8 = 1000000\n        val collisionsCountLimit9 = 1000000\n        val collisionsCountLimit10 = 1000000\n        val collisionsCountLimit11 = 1000000\n        val collisionsCountLimit12 = 1000000\n        val collisionsCountLimit13 = 1000000\n        val collisionsCountLimit14 = 1000000\n        val collisionsCountLimit15 = 1000000\n        val collisionsCountLimit16 = 1000000\n        val collisionsCountLimit17 = 1000000\n        val collisionsCountLimit18 = 1000000\n        val collisionsCountLimit19 = 1000000\n        val collisionsCountLimit20 = 1000000\n        val collisionsCountLimit21 = 1000000\n        val collisionsCountLimit22 = 1000000\n        val collisionsCountLimit23 = 1000000\n        val collisionsCountLimit24 = 1000000\n        val collisionsCountLimit25 = 1000000\n        val collisionsCountLimit26 = 1000000\n        val collisionsCountLimit27 = 1000000\n        val collisionsCountLimit28 = 1000000\n        val collisionsCountLimit29 = 1000000\n        val collisionsCountLimit30 = 1000000\n        val collisionsCountLimit31 = 1000000\n        val collisionsCountLimit32 = 1000000\n        val collisionsCountLimit33 = 1000000\n        val collisionsCountLimit34 = 1000000\n        val collisionsCountLimit35 = 1000000\n        val collisionsCountLimit36 = 1000000\n        val collisionsCountLimit37 = 1000000\n        val collisionsCountLimit38 = 1000000\n        val collisionsCountLimit39 = 1000000\n        val collisionsCountLimit40 = 1000000\n        val collisionsCountLimit41 = 1000000\n        val collisionsCountLimit42 = 1000000\n        val collisionsCountLimit43 = 1000000\n        val collisionsCountLimit44 = 1000000\n        val collisionsCountLimit45 = 1000000\n        val collisionsCountLimit46 = 1000000\n        val collisionsCountLimit47 = 1000000\n        val collisionsCountLimit48 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpasf30_ir.scala:63:36 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m63 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountLimit48\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpasf30_ir.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mj\u001b[0m => i))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpasf30_ir.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpasf30_ir.scala:64:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m64 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:21:12 -------------",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var count = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = carsLeft.reverse\n        var carsRight = carsRight.reverse\n        var carsLeft = carsLeft.tail\n        var carsRight = carsRight.tail\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa9u1pdga.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa9u1pdga.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa9u1pdga.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa9u1pdga.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa9u1pdga.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.init\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   ",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk9ik94fa.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m ",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var currentCar = 0\n        var previousCar = 0\n        var currentCollision = 0\n        var previousCollision = 0\n        var currentCollisionDistance = 0\n        var previousCollisionDistance = 0\n        var currentCollisionDistanceSquare = 0\n        var previousCollisionDistanceSquare = 0\n        var currentCollisionDistanceSquareRoot = 0\n        var previousCollisionDistanceSquareRoot = 0\n        var currentCollisionDistanceSquareRoot2 = 0\n        var previousCollisionDistanceSquareRoot2 = 0\n        var currentCollisionDistanceSquareRoot3 = 0\n        var previousCollisionDistanceSquareRoot3 = 0\n        var currentCollisionDistanceSquareRoot4 = 0\n        var previousCollisionDistanceSquareRoot4 = 0\n        var currentCollisionDistanceSquareRoot5 = 0\n        var previousCollisionDistanceSquareRoot5 = 0\n        var currentCollisionDistanceSquareRoot6 = 0\n        var previousCollisionDistanceSquareRoot6 = 0\n        var currentCollisionDistanceSquareRoot7 = 0\n        var previousCollisionDistanceSquareRoot7 = 0\n        var currentCollisionDistanceSquareRoot8 = 0\n        var previousCollisionDistanceSquareRoot8 = 0\n        var currentCollisionDistanceSquareRoot9 = 0\n        var previousCollisionDistanceSquareRoot9 = 0\n        var currentCollisionDistanceSquareRoot10 = 0\n        var previousCollisionDistanceSquareRoot10 = 0\n        var currentCollisionDistanceSquareRoot11 = 0\n        var previousCollisionDistanceSquareRoot11 = 0\n        var currentCollisionDistanceSquareRoot12 = 0\n        var previousCollisionDistanceSquareRoot12 = 0\n        var currentCollisionDistanceSquareRoot13 = 0\n        var previousCollisionDistanceSquareRoot13 = 0\n        var currentCollisionDistanceSquareRoot14 = 0\n        var previousCollisionDistanceSquareRoot14 = 0\n        var currentCollisionDistanceSquareRoot15 = 0\n        var previousCollisionDistanceSquareRoot15 = 0\n        var currentCollisionDistanceSquareRoot16 = 0\n        var previousCollisionDistanceSquareRoot16 = 0\n        var currentCollisionDistanceSquareRoot17 = 0\n        var previousCollisionDistanceSquareRoot17 = 0\n        var currentCollisionDistanceSquareRoot18 = 0\n        var previousCollisionDistanceSquareRoot18 = 0\n        var currentCollisionDistanceSquareRoot19 = 0\n        var previousCollisionDistanceSquareRoot19 = 0\n        var currentCollisionDistanceSquareRoot20 = 0\n        var previousCollisionDistanceSquareRoot20 = 0\n        var currentCollisionDistanceSquareRoot21 = 0\n        var previousCollisionDistanceSquareRoot21 = 0\n        var currentCollisionDistanceSquareRoot22 = 0\n        var previousCollisionDistanceSquareRoot22 = 0\n        var currentCollisionDistanceSquareRoot23 = 0\n        var previousCollisionDistanceSquareRoot23 = 0\n        var currentCollisionDistanceSquareRoot24 = 0\n        var previousCollisionDistanceSquareRoot24 = 0\n        var currentCollisionDistanceSquareRoot25 = 0\n        var previousCollisionDistanceSquareRoot25 = 0\n        var currentCollisionDistanceSquareRoot26 = 0\n        var previousCollisionDistanceSquare\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmpklovuh.scala:74:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmpklovuh.scala:74:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m74 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu3qwyn3v.scala:49:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffe",
      "stdout": "",
      "timestamp": 1660012945
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val left = mutable.ListBuffer[Long]()\n        val right = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptqxfnyez.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptqxfnyez.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptqxfnyez.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptqxfnyez.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmptqxfnyez.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n / 2)(None)\n        val collided = mutable.ArrayBuffer.fill(n / 2)(false)\n        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mutable.ArrayBuffer.fill(n / 2)(true)\n        val carsRight = mutable.ArrayBuffer.fill(n / 2)(false)\n        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw0hescr4.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31mtrue\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw0hescr4.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31mfalse\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw0hescr4.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31mtrue\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw0hescr4.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31mfalse\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpw0hescr4.scala:22:12 -------------------------",
      "stdout": "",
      "timestamp": 1660012945
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill(n)(0)\n        val speedsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val speedsRight = mutable.ArrayBuffer.fill\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3_ncjor4.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m",
      "stdout": "",
      "timestamp": 1659793152
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n        val speeds = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[Int]()\n        val speedsLeft = mutable.ListBuffer[Int]()\n        val speedsRight = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcja_1hwq.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcja_1hwq.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcja_1hwq.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcja_1hwq.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpcja_1hwq.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpedhku8p3.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpedhku8p3.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpedhku8p3.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpedhku8p3.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded method",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val left = mutable.ArrayBuffer.fill(n)(0)\n        val right = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val lefts = mutable.ArrayBuffer.fill(n)(0)\n        val rights = mutable.ArrayBuffer.fill(n)(0)\n        val speeds2 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts2 = mutable.ArrayBuffer.fill(n)(0)\n        val rights2 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds3 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts3 = mutable.ArrayBuffer.fill(n)(0)\n        val rights3 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds4 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts4 = mutable.ArrayBuffer.fill(n)(0)\n        val rights4 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds5 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts5 = mutable.ArrayBuffer.fill(n)(0)\n        val rights5 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds6 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts6 = mutable.ArrayBuffer.fill(n)(0)\n        val rights6 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds7 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts7 = mutable.ArrayBuffer.fill(n)(0)\n        val rights7 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds8 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts8 = mutable.ArrayBuffer.fill(n)(0)\n        val rights8 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds9 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts9 = mutable.ArrayBuffer.fill(n)(0)\n        val rights9 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds10 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts10 = mutable.ArrayBuffer.fill(n)(0)\n        val rights10 = mutable.ArrayBuffer.fill(n)(0)\n        val speeds11 = mutable.ArrayBuffer.fill(n)(0)\n        val lefts11 = mutable.ArrayBuffer.fill(n)(0)\n        val rights11 = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpv2bpfng9.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2bpfng9.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2bpfng9.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2bpfng9.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2bpfng9.scala:16:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mleft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2bpfng9.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mright\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgc9dl8zp.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(10), Vector.random(10)))\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n        val collisionsCount33\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0p1nrzgs.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0p1nrzgs.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0p1nrzgs.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0p1nrzgs.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0p1nrzgs.scala:13:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                  ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n        val collides = mutable.HashSet[Car]()\n        val collisions = 0\n        cars.foreach { car =>\n            car.move()\n            car.collide(cars.takeRight(1)).foreach(collides.add)\n        }\n        collides.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfig0akq.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphfig0akq.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphfig0akq.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphfig0akq.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphfig0akq.scala:14:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.Has",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Long]()\n        var carsRight = scala.collection.mutable.ListBuffer[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpg76wjyk5.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpg76wjyk5.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpg76wjyk5.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpg76wjyk5.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpg76wjyk5.scala:21:12 -----",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = 0\n        val collisionsCountMax = 10000\n        val collisionsCountMin = 1000\n        val collisionsCountMinMax = 1000\n        val collisionsCountMaxMin = 1000\n        val collisionsCountMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp6aly9tsb.scala:42:86 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6aly9tsb.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6aly9tsb.scala:28:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMaxMinMaxMinMaxMinMaxMinMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6aly9tsb.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMaxMinMaxMinMaxMinMaxMinMaxMin\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMaxMinMaxMinMaxMinMaxMinMaxMin is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMaxMinMaxMinMaxMinMaxMinMaxMin\u001b[0m",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659793179
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(0.0, 100.0), Vector.random(0.0, 100.0)))\n        val collided = mutable.Set.empty[Car]\n        val colliding = mutable.Set.empty[Car]\n        val collidingCars = mutable.Set.empty[Car]\n        val collidingCarsCount = mutable.Set.empty[Car]\n        val collidingCarsCount2 = mutable.Set.empty[Car]\n        val collidingCarsCount3 = mutable.Set.empty[Car]\n        val collidingCarsCount4 = mutable.Set.empty[Car]\n        val collidingCarsCount5 = mutable.Set.empty[Car]\n        val collidingCarsCount6 = mutable.Set.empty[Car]\n        val collidingCarsCount7 = mutable.Set.empty[Car]\n        val collidingCarsCount8 = mutable.Set.empty[Car]\n        val collidingCarsCount9 = mutable.Set.empty[Car]\n        val collidingCarsCount10 = mutable.Set.empty[Car]\n        val collidingCarsCount11 = mutable.Set.empty[Car]\n        val collidingCarsCount12 = mutable.Set.empty[Car]\n        val collidingCarsCount13 = mutable.Set.empty[Car]\n        val collidingCarsCount14 = mutable.Set.empty[Car]\n        val collidingCarsCount15 = mutable.Set.empty[Car]\n        val collidingCarsCount16 = mutable.Set.empty[Car]\n        val collidingCarsCount17 = mutable.Set.empty[Car]\n        val collidingCarsCount18 = mutable.Set.empty[Car]\n        val collidingCarsCount19 = mutable.Set.empty[Car]\n        val collidingCarsCount20 = mutable.Set.empty[Car]\n        val collidingCarsCount21 = mutable.Set.empty[Car]\n        val collidingCarsCount22 = mutable.Set.empty[Car]\n        val collidingCarsCount23 = mutable.Set.empty[Car]\n        val collidingCarsCount24 = mutable.Set.empty[Car]\n        val collidingCarsCount25 = mutable.Set.empty[Car]\n        val collidingCarsCount26 = mutable.Set.empty[Car]\n        val collidingCarsCount27 = mutable.Set.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1izyqbce.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1izyqbce.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1izyqbce.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1izyqbce.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1izyqbce.scala:13:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                 ",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer.empty[Long]\n        val cars = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.ListBuffer.empty[Long]\n        val carsLeft = mutable.ListBuffer.empty[Long]\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpehzekv2f.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpehzekv2f.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpehzekv2f.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpehzekv2f.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpehzekv2f.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topl",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2 = mutable.Set[Long]()\n        val collisionsSoFar3 = mutable.Set[Long]()\n        val collisionsSoFar4 = mutable.Set[Long]()\n        val collisionsSoFar5 = mutable.Set[Long]()\n        val collisionsSoFar6 = mutable.Set[Long]()\n        val collisionsSoFar7 = mutable.Set[Long]()\n        val collisionsSoFar8 = mutable.Set[Long]()\n        val collisionsSoFar9 = mutable.Set[Long]()\n        val collisionsSoFar10 = mutable.Set[Long]()\n        val collisionsSoFar11 = mutable.Set[Long]()\n        val collisionsSoFar12 = mutable.Set[Long]()\n        val collisionsSoFar13 = mutable.Set[Long]()\n        val collisionsSoFar14 = mutable.Set[Long]()\n        val collisionsSoFar15 = mutable.Set[Long]()\n        val collisionsSoFar16 = mutable.Set[Long]()\n        val collisionsSoFar17 = mutable.Set[Long]()\n        val collisionsSoFar18 = mutable.Set[Long]()\n        val collisionsSoFar19 = mutable.Set[Long]()\n        val collisionsSoFar20 = mutable.Set[Long]()\n        val collisionsSoFar21 = mutable.Set[Long]()\n        val collisionsSoFar22 = mutable.Set[Long]()\n        val collisionsSoFar23 = mutable.Set[Long]()\n        val collisionsSoFar24 = mutable.Set[Long]()\n        val collisionsSoFar25 = mutable.Set[Long]()\n        val collisionsSoFar26 = mutable.Set[Long]()\n        val collisionsSoFar27 = mutable.Set[Long]()\n        val collisionsSoFar28 = mutable.Set[Long]()\n        val collisionsSoFar29 = mutable.Set[Long]()\n        val collisionsSoFar30 = mutable.Set[Long]()\n        val collisionsSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpo61hcp_a.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo61hcp_a.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo61hcp_a.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo61hcp_a.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo61hcp_a.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [",
      "stdout": "",
      "timestamp": 1660012959
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw8mln64.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw8mln64.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfw8mln64.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfw8mln64.scala:16:62 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisions\u001b[0m = carsLeft.zip(carsRight).filter(_._1 == _._2).length\n\u001b[31m\u001b[31m   |\u001b[0m                                                            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value _1 is not a member of Int\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpy8gwklc_.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount32\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8gwklc_.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8gwklc_.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy8gwklc_.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy8gwklc_.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), V",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxy7bew_8.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount33\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxy7bew_8.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxy7bew_8.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxy7bew_8.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxy7bew_8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m    ",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n        val collisions = 0\n        cars.foreach { car =>\n            val otherCar = cars.find(_ != car).head\n            val collide = otherCar.collide(car)\n            if (collide) {\n                collides += otherCar\n            }\n        }\n        collides.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgmjjjbo3.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgmjjjbo3.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgmjjjbo3.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgmjjjbo3.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgmjjjbo3.scala:14:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdlu2o1v1.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdlu2o1v1.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdlu2o1v1.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdlu2o1v1.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1659793193
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = mutable.ListBuffer(1 to n).reverse\n        var cars2 = mutable.ListBuffer(1 to n).reverse\n        while(true) {\n            val car1 = cars.head\n            val car2 = cars2.head\n            val collision = car1.distance(car2)\n            if(collision > 0) {\n                collisions += 1\n                cars = cars.tail\n                cars2 = cars2.tail\n            } else {\n                cars = cars.tail\n                cars2 = cars2.tail\n            }\n            if(collisions == n) break\n        }\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfazzsmx.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfazzsmx.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars2\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfazzsmx.scala:28:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            \u001b[33mif\u001b[0m(collisions == n) break\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660012954
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = cars.takeWhile(_ => cars.forall(_.nonEmpty))\n        val carsRight = cars.dropWhile(_ => cars.forall(_.nonEmpty))\n        carsLeft.foreach(c => carsRight.foreach(r => collisions += carRaceCollision(c, r)))\n        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyz4odtcg.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyz4odtcg.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660012953
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer.empty[Car]\n        for(i <- 1 to n){\n            cars += new Car(math.random)\n        }\n        cars.foreach(c => c.move())\n        cars.foreach(c => c.collide(cars.last))\n        cars.foreach(c => collisions += c.collisions)\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1g33_0vl.scala:14:61 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = scala.collection.mutable.ListBuffer.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                     Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1g33_0vl.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m1\u001b[0m to n){\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1g33_0vl.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            cars += \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(math.random)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = 0\n        val collisionsLeft = mutable.Set[Car]()\n        val collisionsLeftCount = 0\n        val collisionsRight = mutable.Set[Car]()\n        val collisionsRightCount = 0\n        val collisionsLeft = cars.foldLeft(collisionsLeft)((collisionsLeft, car) => collisionsLeft.add(car))\n        val collisionsRight = cars.foldRight(collisionsRight)((collisionsRight, car) => collisionsRight.add(car))\n        collisionsLeft.foreach(collisionsLeft => collisionsRight.foreach(collisionsRight => {\n            if (collisionsLeft.x == collisionsRight.x && collisionsLeft.y == collisionsRight.y) {\n                collisionsCount += 1\n                collisionsLeft.x += 1\n                collisionsLeft.y += 1\n                collisionsRight.x -= 1\n                collisionsRight.y -= 1\n            }\n        }))\n        collisionsRight.foreach(collisionsRight => collisionsLeft.foreach(collisionsLeft => {\n            if (collisionsLeft.x == collisionsRight.x && collisionsLeft.y == collisionsRight.y) {\n                collisionsCount += 1\n                collisionsLeft.x -= 1\n                collisionsLeft.y -= 1\n                collisionsRight.x += 1\n                collisionsRight.y += 1\n            }\n        }))\n        collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp637irm6k.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = cars.foldLeft(collisionsLeft)((\u001b[36mcollisionsLeft\u001b[0m, \u001b[36mcar\u001b[0m) => collisionsLeft.add(car))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp637irm6k.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = cars.foldRight(collisionsRight)((\u001b[36mcollisionsRight\u001b[0m, \u001b[36mcar\u001b[0m) => collisionsRight.add(car))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp637irm6k.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp637irm6k.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660012961
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp9arawmbe.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount32\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9arawmbe.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9arawmbe.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9arawmbe.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9arawmbe.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), V",
      "stdout": "",
      "timestamp": 1660012962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarIter = collisionsSoFar.iterator\n        val collisionsSoFarIterIter = collisionsSoFarIter.iterator\n        val collisionsSoFarIterIterIter = collisionsSoFarIterIter.iterator\n        val collisionsSoFarIterIterIterIter = collisionsSoFarIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIter = collisionsSoFarIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n        val collisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter = collisionsSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpghd5o0jq.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarIterIterIterIterIterIterIterIterIter\u001b[0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIter.iterator\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarIterIterIterIterIterIterIterIterIter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarIterIterIterIterIterIterIterIterIter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpghd5o0jq.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\u001b[0m = collisionsSoFarIterIterIterIterIterIterIterIterIterIterIter.iterator\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpghd5o0jq.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\u001b[0m = collisionsSoFar\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarIterIterIterIterIterIterIterIterIterIterIterIterIter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same gro",
      "stdout": "",
      "timestamp": 1660012962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn0csmdzl.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn0csmdzl.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn0csmdzl.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn0csmdzl.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpn0csmdzl.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable",
      "stdout": "",
      "timestamp": 1660012962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659793179
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val xs = mutable.ListBuffer[Double]()\n        val ys = mutable.ListBuffer[Double]()\n        val xs1 = mutable.ListBuffer[Double]()\n        val ys1 = mutable.ListBuffer[Double]()\n        val xs2 = mutable.ListBuffer[Double]()\n        val ys2 = mutable.ListBuffer[Double]()\n        val xs3 = mutable.ListBuffer[Double]()\n        val ys3 = mutable.ListBuffer[Double]()\n        val xs4 = mutable.ListBuffer[Double]()\n        val ys4 = mutable.ListBuffer[Double]()\n        val xs5 = mutable.ListBuffer[Double]()\n        val ys5 = mutable.ListBuffer[Double]()\n        val xs6 = mutable.ListBuffer[Double]()\n        val ys6 = mutable.ListBuffer[Double]()\n        val xs7 = mutable.ListBuffer[Double]()\n        val ys7 = mutable.ListBuffer[Double]()\n        val xs8 = mutable.ListBuffer[Double]()\n        val ys8 = mutable.ListBuffer[Double]()\n        val xs9 = mutable.ListBuffer[Double]()\n        val ys9 = mutable.ListBuffer[Double]()\n        val xs10 = mutable.ListBuffer[Double]()\n        val ys10 = mutable.ListBuffer[Double]()\n        val xs11 = mutable.ListBuffer[Double]()\n        val ys11 = mutable.ListBuffer[Double]()\n        val xs12 = mutable.ListBuffer[Double]()\n        val ys12 = mutable.ListBuffer[Double]()\n        val xs13 = mutable.ListBuffer[Double]()\n        val ys13 = mutable.ListBuffer[Double]()\n        val xs14 = mutable.ListBuffer[Double]()\n        val ys14 = mutable.ListBuffer[Double]()\n        val xs15 = mutable.ListBuffer[Double]()\n        val ys15 = mutable.ListBuffer[Double]()\n        val xs16 = mutable.ListBuffer[Double]()\n        val ys16 = mutable.ListBuffer[Double]()\n        val xs17 = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:16:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:17:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs1\u001b[0m = mutable.ListBuffer[\u001b",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n        val collided = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n        val collisionsCount = mutable.Set.empty[Car]\n        val collisionsCount2 = mutable.Set.empty[Car]\n        val collisionsCount3 = mutable.Set.empty[Car]\n        val collisionsCount4 = mutable.Set.empty[Car]\n        val collisionsCount5 = mutable.Set.empty[Car]\n        val collisionsCount6 = mutable.Set.empty[Car]\n        val collisionsCount7 = mutable.Set.empty[Car]\n        val collisionsCount8 = mutable.Set.empty[Car]\n        val collisionsCount9 = mutable.Set.empty[Car]\n        val collisionsCount10 = mutable.Set.empty[Car]\n        val collisionsCount11 = mutable.Set.empty[Car]\n        val collisionsCount12 = mutable.Set.empty[Car]\n        val collisionsCount13 = mutable.Set.empty[Car]\n        val collisionsCount14 = mutable.Set.empty[Car]\n        val collisionsCount15 = mutable.Set.empty[Car]\n        val collisionsCount16 = mutable.Set.empty[Car]\n        val collisionsCount17 = mutable.Set.empty[Car]\n        val collisionsCount18 = mutable.Set.empty[Car]\n        val collisionsCount19 = mutable.Set.empty[Car]\n        val collisionsCount20 = mutable.Set.empty[Car]\n        val collisionsCount21 = mutable.Set.empty[Car]\n        val collisionsCount22 = mutable.Set.empty[Car]\n        val collisionsCount23 = mutable.Set.empty[Car]\n        val collisionsCount24 = mutable.Set.empty[Car]\n        val collisionsCount25 = mutable.Set.empty[Car]\n        val collisionsCount26 = mutable.Set.empty[Car]\n        val collisionsCount27 = mutable.Set.empty[Car]\n        val collisionsCount28 = mutable.Set.empty[Car]\n        val collisionsCount29 = mutable.Set.empty[Car]\n        val collisionsCount30 = mutable.Set.empty[Car]\n        val collisionsCount31 = mutable.Set.empty[Car]\n        val collisionsCount32 = mutable.Set.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp15smn5zu.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15smn5zu.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp15smn5zu.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp15smn5zu.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp15smn5zu.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable",
      "stdout": "",
      "timestamp": 1660012962
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxdw6txet.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdw6txet.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxdw6txet.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxdw6txet.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxdw6txet.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(10), Vector.random(10)))\n        val collides = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount2 = mutable.ListBuffer.empty[Long]\n        val collisionsCount3 = mutable.ListBuffer.empty[Long]\n        val collisionsCount4 = mutable.ListBuffer.empty[Long]\n        val collisionsCount5 = mutable.ListBuffer.empty[Long]\n        val collisionsCount6 = mutable.ListBuffer.empty[Long]\n        val collisionsCount7 = mutable.ListBuffer.empty[Long]\n        val collisionsCount8 = mutable.ListBuffer.empty[Long]\n        val collisionsCount9 = mutable.ListBuffer.empty[Long]\n        val collisionsCount10 = mutable.ListBuffer.empty[Long]\n        val collisionsCount11 = mutable.ListBuffer.empty[Long]\n        val collisionsCount12 = mutable.ListBuffer.empty[Long]\n        val collisionsCount13 = mutable.ListBuffer.empty[Long]\n        val collisionsCount14 = mutable.ListBuffer.empty[Long]\n        val collisionsCount15 = mutable.ListBuffer.empty[Long]\n        val collisionsCount16 = mutable.ListBuffer.empty[Long]\n        val collisionsCount17 = mutable.ListBuffer.empty[Long]\n        val collisionsCount18 = mutable.ListBuffer.empty[Long]\n        val collisionsCount19 = mutable.ListBuffer.empty[Long]\n        val collisionsCount20 = mutable.ListBuffer.empty[Long]\n        val collisionsCount21 = mutable.ListBuffer.empty[Long]\n        val collisionsCount22 = mutable.ListBuffer.empty[Long]\n        val collisionsCount23 = mutable.ListBuffer.empty[Long]\n        val collisionsCount24 = mutable.ListBuffer.empty[Long]\n        val collisionsCount25 = mutable.ListBuffer.empty[Long]\n        val collisionsCount26 = mutable.ListBuffer.empty[Long]\n        val collisionsCount27 = mutable.ListBuffer.empty[Long]\n        val collisionsCount28 = mutable.ListBuffer.empty[Long]\n        val collisionsCount29 = mutable.ListBuffer.empty[Long]\n        val collisionsCount30 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpayqykxfj.scala:45:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount30\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpayqykxfj.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpayqykxfj.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpayqykxfj.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.random(\u001b[31m10\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpayqykxfj.scala:13:73 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m10\u001b[0m), Vector.r",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashMap.empty[Car, Car]\n        cars.foreach(c => collides(c) = c)\n        val collisions = mutable.HashMap.empty[Car, Long]\n        cars.foreach(c => {\n            val otherCar = collides(c)\n            val otherCollisions = otherCar match {\n                case None => collisions(c) = 0\n                case Some(otherCar) => collisions(c) = collisions(otherCar) + 1\n            }\n            collisions(c) = otherCollisions\n        })\n        collisions.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfo9ug796.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfo9ug796.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfo9ug796.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfo9ug796.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfo9ug796.scala:14:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides",
      "stdout": "",
      "timestamp": 1660012961
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n / 2)(mutable.Queue[Int]())\n        val collisions = mutable.ListBuffer[Long]()\n        val startTime = System.currentTimeMillis()\n        var collision = 0\n        var i = 0\n        while (i < n) {\n            val car = cars(i / 2)\n            car.enqueue(i)\n            val car2 = cars((n - 1 - i) / 2)\n            car2.enqueue(n - 1 - i)\n            val car3 = cars((n - 1 - i) / 2 + 1)\n            car3.enqueue(n - 1 - i)\n            val car4 = cars(i / 2 + 1)\n            car4.enqueue(i)\n            val car5 = cars((n - 1 - i) / 2 + 1)\n            car5.enqueue(n - 1 - i)\n            val car6 = cars((n - 1 - i) / 2)\n            car6.enqueue(n - 1 - i)\n            val car7 = cars(i / 2)\n            car7.enqueue(i)\n            val car8 = cars((n - 1 - i) / 2)\n            car8.enqueue(n - 1 - i)\n            val car9 = cars((n - 1 - i) / 2 + 1)\n            car9.enqueue(n - 1 - i)\n            val car10 = cars(i / 2 + 1)\n            car10.enqueue(i)\n            val car11 = cars((n - 1 - i) / 2 + 1)\n            car11.enqueue(n - 1 - i)\n            val car12 = cars((n - 1 - i) / 2)\n            car12.enqueue(n - 1 - i)\n            val car13 = cars(i / 2)\n            car13.enqueue(i)\n            val car14 = cars((n - 1 - i) / 2)\n            car14.enqueue(n - 1 - i)\n            val car15 = cars((n - 1 - i) / 2 + 1)\n            car15.enqueue(n - 1 - i)\n            val car16 = cars(i / 2 + 1)\n            car16.enqueue(i)\n            val car17 = cars((n - 1 - i) / 2 + 1)\n            car17.enqueue(n - 1 - i)\n            val car18 = cars((n - 1 - i) / 2)\n            car18.enqueue(n - 1 - i)\n            val car19 = cars(i / 2)\n            car19.enqueue(i)\n            val car20 = cars((n - 1 - i) / 2)\n            car20.enqueue(n - 1 - i)\n            val car21 = cars((n - 1 - i) / 2 + 1)\n            car21.enqueue(n - 1 - i)\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxhpinr8w.scala:72:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m72 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhpinr8w.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxhpinr8w.scala:13:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpxhpinr8w.scala:13:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for T\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    T is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxhpinr8w.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxhpinr8w.scala:71:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m71 |",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft = carsLeft.foldLeft(0)(_ + carsLeft.forall(_.collidesWith(_)))\n        val collisionsRight = carsRight.foldLeft(0)(_ + carsRight.forall(_.collidesWith(_)))\n        collisions += collisionsLeft + collisionsRight\n        collisions.toSet.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rp2cbil.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9rp2cbil.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9rp2cbil.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9rp2cbil.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rp2cbil.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1.collidesWith(_._2)).length\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpztlbqir7.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpztlbqir7.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpztlbqir7.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpztlbqir7.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpztlbqir7.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgl50pq_z.scala:14:1362 -------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh\u001b[0m => Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh\u001b[0m => Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => \n\u001b[31m\u001b[31m   |\u001b[0m                                ",
      "stdout": "",
      "timestamp": 1660012965
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp15kvh3mw.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp15kvh3mw.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp15kvh3mw.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp15kvh3mw.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp15kvh3mw.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.",
      "stdout": "",
      "timestamp": 1660012963
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val collisions = mutable.ListBuffer[Int]()\n        val speed = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfljf1tuk.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfljf1tuk.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfljf1tuk.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfljf1tuk.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfljf1tuk.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660012968
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount = 0\n        val collisionsCountPerCar = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount2 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount3 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount4 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount5 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount6 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount7 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount8 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount9 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount10 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount11 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount12 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount13 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount14 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount15 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount16 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount17 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount18 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount19 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount20 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount21 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount22 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount23 = mutable.Map[Long, Long]()\n        val collisionsCountPerCarCount24 = mutable.Map[Long, Long]()\n        val collisionsCountPerCar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnt8p17b1.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnt8p17b1.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnt8p17b1.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnt8p17b1.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnt8p17b1.scala:16:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountPerCar\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compili",
      "stdout": "",
      "timestamp": 1660012970
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppamjkv77.scala:14:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppamjkv77.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh\u001b[0m => Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh",
      "stdout": "",
      "timestamp": 1660012976
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsCollision = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight = mutable.ListBuffer[Int]()\n        val carsCollisionLeft = mutable.ListBuffer[Int]()\n        val carsCollisionRight\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp2y0wyhwf.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2y0wyhwf.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2y0wyhwf.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2y0wyhwf.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp2y0wyhwf.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionRight\u001b[0m\n\u001b[31m  ",
      "stdout": "",
      "timestamp": 1660012973
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpribyem1q.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpribyem1q.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpribyem1q.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpribyem1q.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660012973
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0es__gmx.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0es__gmx.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0es__gmx.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0es__gmx.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0es__gmx.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1660012972
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(math.random))\n        val collisions = mutable.Set[Car]()\n        val collisionCount = 0\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        carsLeft.foreach(c => collisions += c)\n        carsRight.foreach(c => collisions += c)\n        collisions.foreach(c => collisionCount += 1)\n        collisionCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjmxnck_.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(math.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfjmxnck_.scala:13:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(math.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfjmxnck_.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfjmxnck_.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfjmxnck_.scala:16:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n :",
      "stdout": "",
      "timestamp": 1660012974
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4w3idouj.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4w3idouj.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4w3idouj.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4w3idouj.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4w3idouj.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^",
      "stdout": "",
      "timestamp": 1660012973
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsLeft = List[Car\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk9ik94fa.scala:68:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m68 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk9ik94fa.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m ",
      "stdout": "",
      "timestamp": 1660012948
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collided = carsLeft.foldLeft(0)(_ & _)\n        carsRight.foldLeft(0)(_ & _)\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7quftzqn.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7quftzqn.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7quftzqn.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7quftzqn.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7quftzqn.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012974
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(2*n)(0)\n        val collisions = mutable.ListBuffer[Long]()\n        val speed = Array.fill(2*n)(0)\n        val speeds = Array.fill(2*n)(0)\n        val speedsDiff = Array.fill(2*n)(0)\n        val speedsDiffs = Array.fill(2*n)(0)\n        val speedsDiffsSum = Array.fill(2*n)(0)\n        val speedsDiffsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSums = Array.fill(2*n)(0)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum = Array.fill(\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpa6cvh4il.scala:37:72 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum\u001b[0m = Array.fill(\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa6cvh4il.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(\u001b[31m2\u001b[0m*n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa6cvh4il.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa6cvh4il.scala:15:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = Array.fill(\u001b[31m2\u001b[0m*n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa6cvh4il.scala:16:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeeds\u001b[0m = Array.fill(\u001b[31m2\u001b[0m*n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      ",
      "stdout": "",
      "timestamp": 1660012979
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        cars.foreach { cars =>\n            cars.foreach { car =>\n                cars.foreach { car2 =>\n                    if (car.head == car2.head && car.tail.head == car2.tail.head) {\n                        collisions += car.head * car2.head * car.tail.tail.head * car2.tail.tail.head * car.tail.tail.tail.tail.head * car2.tail.tail.tail.tail.tail.head * car.tail.tail.tail.tail.tail.tail.tail.head * car2.tail.tail.tail.tail.tail.tail.tail.tail.tail.head * car.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8yko2kxm.scala:20:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8yko2kxm.scala:30:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8yko2kxm.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8yko2kxm.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp8yko2kxm.scala:21:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m21 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660012968
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = List[Car]()\n        for(i <- 1 to n){\n            cars = cars.reverse.:::List(new Car(Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkjnbbyd8.scala:17:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpkjnbbyd8.scala:27:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkjnbbyd8.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkjnbbyd8.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m1\u001b[0m to n){\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkjnbbyd8.scala:16:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            cars = cars.reverse.:::List(\u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), Random.nextInt(n), ",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n        val collisionsCount2 = mutable.Set[Long]()\n        val collisionsCount3 = mutable.Set[Long]()\n        val collisionsCount4 = mutable.Set[Long]()\n        val collisionsCount5 = mutable.Set[Long]()\n        val collisionsCount6 = mutable.Set[Long]()\n        val collisionsCount7 = mutable.Set[Long]()\n        val collisionsCount8 = mutable.Set[Long]()\n        val collisionsCount9 = mutable.Set[Long]()\n        val collisionsCount10 = mutable.Set[Long]()\n        val collisionsCount11 = mutable.Set[Long]()\n        val collisionsCount12 = mutable.Set[Long]()\n        val collisionsCount13 = mutable.Set[Long]()\n        val collisionsCount14 = mutable.Set[Long]()\n        val collisionsCount15 = mutable.Set[Long]()\n        val collisionsCount16 = mutable.Set[Long]()\n        val collisionsCount17 = mutable.Set[Long]()\n        val collisionsCount18 = mutable.Set[Long]()\n        val collisionsCount19 = mutable.Set[Long]()\n        val collisionsCount20 = mutable.Set[Long]()\n        val collisionsCount21 = mutable.Set[Long]()\n        val collisionsCount22 = mutable.Set[Long]()\n        val collisionsCount23 = mutable.Set[Long]()\n        val collisionsCount24 = mutable.Set[Long]()\n        val collisionsCount25 = mutable.Set[Long]()\n        val collisionsCount26 = mutable.Set[Long]()\n        val collisionsCount27 = mutable.Set[Long]()\n        val collisionsCount28 = mutable.Set[Long]()\n        val collisionsCount29 = mutable.Set[Long]()\n        val collisionsCount30 = mutable.Set[Long]()\n        val collisionsCount31 = mutable.Set[Long]()\n        val collisionsCount32 = mutable.Set[Long]()\n        val collisionsCount33 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxy7bew_8.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount33\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxy7bew_8.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxy7bew_8.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxy7bew_8.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxy7bew_8.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m    ",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothBoth = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpxlephqjt.scala:41:56 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothBothBoth\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxlephqjt.scala:31:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothRight\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxlephqjt.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothLeft\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxlephqjt.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBoth\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBoth is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBoth\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1._1 == _._1._2).length\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydh7ldvo.scala:16:58 --",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2), Vector.random(2)))\n        val collisions = mutable.Set[Car]()\n        val collisionCount = 0\n        val collisionsLeft = mutable.Set[Car]()\n        val collisionsRight = mutable.Set[Car]()\n        val collisionsLeft = cars.filter(_.p1.x < _.p2.x)\n        val collisionsRight = cars.filter(_.p1.x > _.p2.x)\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsRight.foreach(c => {\n            collisions += c\n            collisionCount += 1\n        })\n        collisionsLeft.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp41rd9tg2.scala:93:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m93 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp41rd9tg2.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = cars.filter(_.p1.x < _.p2.x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp41rd9tg2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = cars.filter(_.p1.x > _.p2.x)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41rd9tg2.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41rd9tg2.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b",
      "stdout": "",
      "timestamp": 1660012976
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk49t_0zm.scala:15:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk49t_0zm.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh\u001b[0m => Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh",
      "stdout": "",
      "timestamp": 1660012978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.filter(_.px < (cars.last.px + cars.last.dx))\n        val carsRight = cars.filter(_.px > (cars.last.px + cars.last.dx))\n        val carsCollisions = carsLeft.filter(_.px > (carsRight.last.px + carsRight.last.dx)).size\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrg6x2g0.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxrg6x2g0.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxrg6x2g0.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxrg6x2g0.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxrg6x2g0.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32 = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpy8gwklc_.scala:47:31 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount32\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy8gwklc_.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8gwklc_.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy8gwklc_.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy8gwklc_.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), V",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n        val collisions = mutable.HashSet[Car]()\n        val collisionsCount = mutable.HashSet[Car]()\n        val collisionsCount2 = mutable.HashSet[Car]()\n        val collisionsCount3 = mutable.HashSet[Car]()\n        val collisionsCount4 = mutable.HashSet[Car]()\n        val collisionsCount5 = mutable.HashSet[Car]()\n        val collisionsCount6 = mutable.HashSet[Car]()\n        val collisionsCount7 = mutable.HashSet[Car]()\n        val collisionsCount8 = mutable.HashSet[Car]()\n        val collisionsCount9 = mutable.HashSet[Car]()\n        val collisionsCount10 = mutable.HashSet[Car]()\n        val collisionsCount11 = mutable.HashSet[Car]()\n        val collisionsCount12 = mutable.HashSet[Car]()\n        val collisionsCount13 = mutable.HashSet[Car]()\n        val collisionsCount14 = mutable.HashSet[Car]()\n        val collisionsCount15 = mutable.HashSet[Car]()\n        val collisionsCount16 = mutable.HashSet[Car]()\n        val collisionsCount17 = mutable.HashSet[Car]()\n        val collisionsCount18 = mutable.HashSet[Car]()\n        val collisionsCount19 = mutable.HashSet[Car]()\n        val collisionsCount20 = mutable.HashSet[Car]()\n        val collisionsCount21 = mutable.HashSet[Car]()\n        val collisionsCount22 = mutable.HashSet[Car]()\n        val collisionsCount23 = mutable.HashSet[Car]()\n        val collisionsCount24 = mutable.HashSet[Car]()\n        val collisionsCount25 = mutable.HashSet[Car]()\n        val collisionsCount26 = mutable.HashSet[Car]()\n        val collisionsCount27 = mutable.HashSet[Car]()\n        val collisionsCount28 = mutable.HashSet[Car]()\n        val collisionsCount29 = mutable.HashSet[Car]()\n        val collisionsCount30\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr6nky867.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr6nky867.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr6nky867.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr6nky867.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr6nky867.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = mutable.ListBuffer(1 to n).reverse\n        while (cars.nonEmpty) {\n            val car1 = cars.head\n            val car2 = cars.last\n            val collision = car1.speed * car2.speed < 0\n            if (collision) {\n                collisions += 1\n                cars = cars.dropRight(1)\n            } else {\n                cars = cars.dropRight(1)\n            }\n        }\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx852x98r.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "stdout": "",
      "timestamp": 1660012972
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        carsLeft.foreach(c => collisions += carsRight.count(_.intersects(c)))\n        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpupgt2nih.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupgt2nih.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupgt2nih.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpupgt2nih.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpupgt2nih.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisio",
      "stdout": "",
      "timestamp": 1660012978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwuh_1485.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwuh_1485.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwuh_1485.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpwuh_1485.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft = carsLeft.foldLeft(0)((acc, car) => acc + (car.collide(carsRight)))\n        val collisionsRight = carsRight.foldLeft(0)((acc, car) => acc + (car.collide(carsLeft)))\n        collisions += collisionsLeft + collisionsRight\n        collisions.toSet.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfroo2asz.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfroo2asz.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfroo2asz.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfroo2asz.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfroo2asz.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012978
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisionsLeft = carsLeft.foldLeft(0) { (acc, car) => acc + (if (car.collidesWith(carsLeft)) 1 else 0) }\n        val collisionsRight = carsRight.foldLeft(0) { (acc, car) => acc + (if (car.collidesWith(carsRight)) 1 else 0) }\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions ++= carsLeft.filter(car => car.collidesWith(carsRight))\n        collisions ++= carsRight.filter(car => car.collidesWith(carsLeft))\n        collisions \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1gnss7sp.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gnss7sp.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1gnss7sp.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1gnss7sp.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1gnss7sp.scala:14:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisio",
      "stdout": "",
      "timestamp": 1660012981
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1 to n)\n        val collides = mutable.ArrayBuffer(0 to n)\n        val collisions = 0\n        val speed = mutable.ArrayBuffer(1 to n)\n        val speeds = mutable.ArrayBuffer(1 to n)\n        val speedsDiff = mutable.ArrayBuffer(1 to n)\n        val speedsDiffs = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSum = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSumsSums = mutable.ArrayBuffer(1 to n)\n        val speedsDiffsSumsSumsSumsSumsSumsSumsSumsSums\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgj93l58k.scala:39:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj93l58k.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj93l58k.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.ArrayBuffer(\u001b[31m0\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj93l58k.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj93l58k.scala:17:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeeds\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj93l58k.scala:18:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsDiff\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer e",
      "stdout": "",
      "timestamp": 1660012980
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Long]()\n        val collisions = mutable.HashSet[Long]()\n        val collisionsCount = mutable.HashMap[Long, Long]()\n        val collisionsCounts = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        val collisionsCounts_ = mutable.HashMap[Long, Long]()\n        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd85w62j5.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts_\u001b[0m = mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd85w62j5.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts_\u001b[0m = mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd85w62j5.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts_\u001b[0m = mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpd85w62j5.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts_\u001b[0m = mutable.HashMap[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts_ is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts_\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] ",
      "stdout": "",
      "timestamp": 1660012983
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.HashSet[Car]()\n        val collisions = 0\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        carsLeft.foreach(c => {\n            carsRight.foreach(otherCar => {\n                if (c.collidesWith(otherCar)) {\n                    collides += c\n                    collisions += 1\n                }\n            })\n        })\n        collides.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5lvpc898.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5lvpc898.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5lvpc898.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5lvpc898.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5lvpc898.scala:14:39 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides",
      "stdout": "",
      "timestamp": 1660012985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(new Car)\n        val collided = mutable.ArrayBuffer.fill(n)(0)\n        val collidedCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCount = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsCounts = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp0u926d2g.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u926d2g.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u926d2g.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u926d2g.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp0u926d2g.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mco",
      "stdout": "",
      "timestamp": 1660012985
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(\n            carsRight.zipWithIndex.filter(_._2 % 2 == 0).map(_._1)\n        ).count(_._1.isDefined && _._2.isDefined)\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57you2f9.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57you2f9.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57you2f9.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57you2f9.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp57you2f9.scala:18:18 --",
      "stdout": "",
      "timestamp": 1660012988
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpybu8bhb2.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topl",
      "stdout": "",
      "timestamp": 1660012986
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]()\n        var carsLeft = scala.collection.mutable.ListBuffer[Int]()\n        var carsRight = scala.collection.mutable.ListBuffer[Int]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = scala.collection.mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpkmjp5xs3.scala:21:12 -------------",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = mutable.ListBuffer(1 to n).reverse\n        var cars2 = mutable.ListBuffer(1 to n).reverse\n        var speed = mutable.ListBuffer(1 to n).reverse\n        var speed2 = mutable.ListBuffer(1 to n).reverse\n        var speed3 = mutable.ListBuffer(1 to n).reverse\n        var speed4 = mutable.ListBuffer(1 to n).reverse\n        var speed5 = mutable.ListBuffer(1 to n).reverse\n        var speed6 = mutable.ListBuffer(1 to n).reverse\n        var speed7 = mutable.ListBuffer(1 to n).reverse\n        var speed8 = mutable.ListBuffer(1 to n).reverse\n        var speed9 = mutable.ListBuffer(1 to n).reverse\n        var speed10 = mutable.ListBuffer(1 to n).reverse\n        var speed11 = mutable.ListBuffer(1 to n).reverse\n        var speed12 = mutable.ListBuffer(1 to n).reverse\n        var speed13 = mutable.ListBuffer(1 to n).reverse\n        var speed14 = mutable.ListBuffer(1 to n).reverse\n        var speed15 = mutable.ListBuffer(1 to n).reverse\n        var speed16 = mutable.ListBuffer(1 to n).reverse\n        var speed17 = mutable.ListBuffer(1 to n).reverse\n        var speed18 = mutable.ListBuffer(1 to n).reverse\n        var speed19 = mutable.ListBuffer(1 to n).reverse\n        var speed20 = mutable.ListBuffer(1 to n).reverse\n        var speed21 = mutable.ListBuffer(1 to n).reverse\n        var speed22 = mutable.ListBuffer(1 to n).reverse\n        var speed23 = mutable.ListBuffer(1 to n).reverse\n        var speed24 = mutable.ListBuffer(1 to n).reverse\n        var speed25 = mutable.ListBuffer(1 to n).reverse\n        var speed26 = mutable.ListBuffer(1 to n).reverse\n        var speed27 = mutable.ListBuffer(1 to n).reverse\n        var speed28 = mutable.ListBuffer(1 to n).reverse\n        var speed29 = mutable.ListBuffer(1 to n).reverse\n        var speed30 = mutable.ListBuffer(1 to n).reverse\n        var speed31 = mutable.ListBuffer(1 to n).reverse\n        var speed32 = mutable.ListBuffer(1 to n).reverse\n        var speed33 = mutable.ListBuffer(1 to n).reverse\n        var speed34 = mutable.ListBuffer(1 to n).reverse\n        var speed35 = mutable.ListBuffer(1 to n).reverse\n        var speed36 = mutable.ListBuffer(1 to n).reverse\n        var speed37 = mutable.ListBuffer(1 to n).reverse\n        var speed38 = mutable.ListBuffer(1 to n).reverse\n        var speed\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpapjiddvl.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapjiddvl.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapjiddvl.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars2\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapjiddvl.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapjiddvl.scala:17:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mspeed2\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpapjiddvl.scala:18:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mspeed3\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).reverse\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   ",
      "stdout": "",
      "timestamp": 1660012987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(_ == _)\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vljko_e.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vljko_e.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3vljko_e.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660012987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val xs = mutable.ArrayBuffer.fill(n)(0)\n        val ys = mutable.ArrayBuffer.fill(n)(0)\n        val xs2 = mutable.ArrayBuffer.fill(n)(0)\n        val ys2 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mutable.ArrayBuffer.fill(n)(0)\n        val ys1 = mutable.ArrayBuffer.fill(n)(0)\n        val xs1 = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppu0na24h.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs1\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs1 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs1\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppu0na24h.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys1\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys1 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys1\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppu0na24h.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs1\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mxs1 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mxs1\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppu0na24h.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys1\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mys1 is already defined as \u001b[33mvalue\u001b[0m \u001b[35mys1\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppu0na24h.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs1\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m",
      "stdout": "",
      "timestamp": 1660012987
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n        val speed = mutable.Set[Double]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppiwq231z.scala:35:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppiwq231z.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppiwq231z.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppiwq231z.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmppiwq231z.scala:27:12 ----",
      "stdout": "",
      "timestamp": 1660012988
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659793350
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mutable.ListBuffer[Int]()\n        val carsRight = mutable.ListBuffer[Int]()\n        val carsLeft = mut\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:16:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp9q50m10f.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1659793350
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ArrayBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ArrayBuffer(0)\n        val collisionsSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer(0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc58tb5ml.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc58tb5ml.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc58tb5ml.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpc58tb5ml.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarS",
      "stdout": "",
      "timestamp": 1660012989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsCollisions = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_8ar_4l_.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[",
      "stdout": "",
      "timestamp": 1660012989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsLeft = mutable.ListBuffer.empty[Long]\n        val collisionsRight = mutable.ListBuffer.empty[Long]\n        val collisionsBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer.empty[Long]\n        val collisionsBothBothBothBothBothBothBothRight = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoaxfnid0.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothRight\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoaxfnid0.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothBoth\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothBoth is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothBoth\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoaxfnid0.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothBothLeft\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothBothLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothBothLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoaxfnid0.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m             ",
      "stdout": "",
      "timestamp": 1660012991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n / 2).map(_ => new Car(Random.nextInt(n)))\n        val collisions = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map(_ => 0)\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ArrayBuffer.fill(n / 2).map\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt7a1s817.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m).map(_ => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt7a1s817.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m).map(_ => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt7a1s817.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m).map(_ => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt7a1s817.scala:27:12 ------------------------",
      "stdout": "",
      "timestamp": 1660012990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = 0\n        val collisionsCountMax = 1000\n        val collisionsCountMin = 1000\n        val collisionsCountMinMax = 1000\n        val collisionsCountMaxMin = 1000\n        val collisionsCountMinMaxMin = 1000\n        val collisionsCountMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n        val collisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax = 1000\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpru7mxwi8.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMinMaxMinMaxMinMaxMinMaxMin\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMinMaxMinMaxMinMaxMinMaxMin is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMinMaxMinMaxMinMaxMinMaxMin\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpru7mxwi8.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMin\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpru7mxwi8.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpru7mxwi8.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMax\u001b[0m = \u001b[31m1000\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountMinMaxM",
      "stdout": "",
      "timestamp": 1660012990
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight1 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight2 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft1 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft2 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight3 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight4 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft3 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft4 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight5 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight6 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft5 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft6 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight7 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight8 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft7 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft8 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight9 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight10 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft9 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft10 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight11 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight12 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft11 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft12 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight13 = Vector.fill(n / 2)(Vector.zero)\n        var carsRight14 = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft13 = Vector.fill(n / 2)(Vector.zero\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpetpl7ksd.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetpl7ksd.scala:14:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpetpl7ksd.scala:14:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue zero is not a member of object scala.collection.immutable.Vector - did you mean Vector.from?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetpl7ksd.scala:15:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpetpl7ksd.scala:15:50 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue zero is not a member of object scala.collection.immutable.Vector - did you mean Vector.from?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetpl7ksd.scala:16:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = Vector.fill(n / \u001b[",
      "stdout": "",
      "timestamp": 1660012997
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(i))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsLeft = carsLeft.takeRight(n)\n        val carsRight = carsRight.dropRight(n)\n        val carsLeft = carsLeft.takeRight(n)\n        val carsRight = carsRight.dropRight(n)\n        carsLeft.foreach(c => collisions += c.collide(carsRight))\n        carsRight.foreach(c => collisions += c.collide(carsLeft))\n        collisions.sum\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfoe5f0wx.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfoe5f0wx.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfoe5f0wx.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpfoe5f0wx.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfoe5f0wx.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(i))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m    ",
      "stdout": "",
      "timestamp": 1660012992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(10), Vector.random(10)))\n        val collides = mutable.Set.empty[Car]\n        val collide = mutable.Map.empty[Car, Car]\n        val collisions = mutable.Set.empty[Car]\n        val collision = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collisionCount = mutable.Map.empty[Car, Car]\n        val collisionCount = mutable.Set.empty[Car]\n        val collision\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpxgbmruth.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgbmruth.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionCount\u001b[0m = mutable.Map.empty[\u001b[35mCar\u001b[0m, \u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgbmruth.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionCount\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgbmruth.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionCount\u001b[0m = mutable.Map.empty[\u001b[35mCar\u001b[0m, \u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpxgbmruth.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionCount\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded m",
      "stdout": "",
      "timestamp": 1660012991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val speeds = mutable.ListBuffer[Double]()\n        val speedLimit = mutable.ListBuffer[Double]()\n        val speedLimits = mutable.ListBuffer[Double]()\n        val speedLimit2 = mutable.ListBuffer[Double]()\n        val speedLimit2s = mutable.ListBuffer[Double]()\n        val speedLimit3 = mutable.ListBuffer[Double]()\n        val speedLimit3s = mutable.ListBuffer[Double]()\n        val speedLimit4 = mutable.ListBuffer[Double]()\n        val speedLimit4s = mutable.ListBuffer[Double]()\n        val speedLimit5 = mutable.ListBuffer[Double]()\n        val speedLimit5s = mutable.ListBuffer[Double]()\n        val speedLimit6 = mutable.ListBuffer[Double]()\n        val speedLimit6s = mutable.ListBuffer[Double]()\n        val speedLimit7 = mutable.ListBuffer[Double]()\n        val speedLimit7s = mutable.ListBuffer[Double]()\n        val speedLimit8 = mutable.ListBuffer[Double]()\n        val speedLimit8s = mutable.ListBuffer[Double]()\n        val speedLimit9 = mutable.ListBuffer[Double]()\n        val speedLimit9s = mutable.ListBuffer[Double]()\n        val speedLimit10 = mutable.ListBuffer[Double]()\n        val speedLimit10s = mutable.ListBuffer[Double]()\n        val speedLimit11 = mutable.ListBuffer[Double]()\n        val speedLimit11s = mutable.ListBuffer[Double]()\n        val speedLimit12 = mutable.ListBuffer[Double]()\n        val speedLimit12s = mutable.ListBuffer[Double]()\n        val speedLimit13 = mutable.ListBuffer[Double]()\n        val speedLimit13s = mutable.ListBuffer[Double]()\n        val speedLimit14 = mutable.ListBuffer[Double]()\n        val speedLimit14s = mutable.ListBuffer[Double]()\n        val speedLimit15 = mutable.ListBuffer[Double]()\n        val speedLimit15s = mutable.ListBuffer[Double]()\n        val speedLimit16 = mutable.ListBuffer[Double]()\n        val speedLimit16s = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmprfbb6t5o.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprfbb6t5o.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprfbb6t5o.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprfbb6t5o.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprfbb6t5o.scala:16:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeeds\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprfbb6t5o.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimit\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m",
      "stdout": "",
      "timestamp": 1660012991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdcig26x2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcig26x2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcig26x2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpdcig26x2.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660012992
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val collisions = mutable.ListBuffer[Long]()\n        val carsPerLine = n / 2\n        val carsPerLine2 = carsPerLine / 2\n        val carsPerLine3 = carsPerLine / 3\n        val carsPerLine4 = carsPerLine / 4\n        val carsPerLine5 = carsPerLine / 5\n        val carsPerLine6 = carsPerLine / 6\n        val carsPerLine7 = carsPerLine / 7\n        val carsPerLine8 = carsPerLine / 8\n        val carsPerLine9 = carsPerLine / 9\n        val carsPerLine10 = carsPerLine / 10\n        val carsPerLine11 = carsPerLine / 11\n        val carsPerLine12 = carsPerLine / 12\n        val carsPerLine13 = carsPerLine / 13\n        val carsPerLine14 = carsPerLine / 14\n        val carsPerLine15 = carsPerLine / 15\n        val carsPerLine16 = carsPerLine / 16\n        val carsPerLine17 = carsPerLine / 17\n        val carsPerLine18 = carsPerLine / 18\n        val carsPerLine19 = carsPerLine / 19\n        val carsPerLine20 = carsPerLine / 20\n        val carsPerLine21 = carsPerLine / 21\n        val carsPerLine22 = carsPerLine / 22\n        val carsPerLine23 = carsPerLine / 23\n        val carsPerLine24 = carsPerLine / 24\n        val carsPerLine25 = carsPerLine / 25\n        val carsPerLine26 = carsPerLine / 26\n        val carsPerLine27 = carsPerLine / 27\n        val carsPerLine28 = carsPerLine / 28\n        val carsPerLine29 = carsPerLine / 29\n        val carsPerLine30 = carsPerLine / 30\n        val carsPerLine31 = carsPerLine / 31\n        val carsPerLine32 = carsPerLine / 32\n        val carsPerLine33 = carsPerLine / 33\n        val carsPerLine34 = carsPerLine / 34\n        val carsPerLine35 = carsPerLine / 35\n        val carsPerLine36 = carsPerLine / 36\n        val carsPerLine37 = carsPerLine / 37\n        val carsPerLine38 = carsPerLine / 38\n        val carsPerLine39\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps04pd48i.scala:54:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps04pd48i.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps04pd48i.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps04pd48i.scala:54:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660012991
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set.empty[Long]\n        for (i <- 0 until n) {\n            val carLeft = carsLeft.head\n            val carRight = carsRight.head\n            val collision = carLeft.collidesWith(carRight)\n            if (collision) {\n                collisions += i\n            }\n        }\n        collisions.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d021dy6.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3d021dy6.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3d021dy6.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3d021dy6.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3d021dy6.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660012993
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsCount = mutable.ListBuffer[Long]()\n        val collisionsCount2 = mutable.ListBuffer[Long]()\n        val collisionsCount3 = mutable.ListBuffer[Long]()\n        val collisionsCount4 = mutable.ListBuffer[Long]()\n        val collisionsCount5 = mutable.ListBuffer[Long]()\n        val collisionsCount6 = mutable.ListBuffer[Long]()\n        val collisionsCount7 = mutable.ListBuffer[Long]()\n        val collisionsCount8 = mutable.ListBuffer[Long]()\n        val collisionsCount9 = mutable.ListBuffer[Long]()\n        val collisionsCount10 = mutable.ListBuffer[Long]()\n        val collisionsCount11 = mutable.ListBuffer[Long]()\n        val collisionsCount12 = mutable.ListBuffer[Long]()\n        val collisionsCount13 = mutable.ListBuffer[Long]()\n        val collisionsCount14 = mutable.ListBuffer[Long]()\n        val collisionsCount15 = mutable.ListBuffer[Long]()\n        val collisionsCount16 = mutable.ListBuffer[Long]()\n        val collisionsCount17 = mutable.ListBuffer[Long]()\n        val collisionsCount18 = mutable.ListBuffer[Long]()\n        val collisionsCount19 = mutable.ListBuffer[Long]()\n        val collisionsCount20 = mutable.ListBuffer[Long]()\n        val collisionsCount21 = mutable.ListBuffer[Long]()\n        val collisionsCount22 = mutable.ListBuffer[Long]()\n        val collisionsCount23 = mutable.ListBuffer[Long]()\n        val collisionsCount24 = mutable.ListBuffer[Long]()\n        val collisionsCount25 = mutable.ListBuffer[Long]()\n        val collisionsCount26 = mutable.ListBuffer[Long]()\n        val collisionsCount27 = mutable.ListBuffer[Long]()\n        val collisionsCount28 = mutable.ListBuffer[Long]()\n        val collisionsCount29 = mutable.ListBuffer[Long]()\n        val collisionsCount30 = mutable.ListBuffer[Long]()\n        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptx7jgr68.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptx7jgr68.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => mutable.ListBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptx7jgr68.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptx7jgr68.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptx7jgr68.scala:16:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount2\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptx7jgr68.scala:17:31 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount3\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b",
      "stdout": "",
      "timestamp": 1660012994
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set[Long]()\n        val collisions = mutable.Set[Long]()\n        val collisionsCount = mutable.Set[Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, Long]()\n        val collisionsCounts = mutable.Map[Long, \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoizm_q4t.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoizm_q4t.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoizm_q4t.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoizm_q4t.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpoizm_q4t.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollis",
      "stdout": "",
      "timestamp": 1660012996
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var currentCar = 0\n        var previousCar = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var currentDirection = 0\n        var previousDirection = 0\n        var currentCollision = 0\n        var previousCollision = 0\n        var currentCollisionCount = 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2 = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3 = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4 = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5 = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6 = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7 = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8 = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9 = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10 = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11 = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12 = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13 = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14 = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15 = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16 = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17 = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18 = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19 = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20 = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21 = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22 = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23 = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24 = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25 = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26 = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27 = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28 = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29 = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30 = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31 = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32 = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33 = 0\n        var previousCollisionCount33 = 0\n        var currentCollisionCount34 = 0\n        var \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpa4htcyqx.scala:89:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m        \u001b[33mvar\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4htcyqx.scala:90:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660012997
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n        val collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_d8qs4qd.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_d8qs4qd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660013000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n        val collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_d8qs4qd.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_d8qs4qd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660013000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_(0) < 0)\n        val carsRight = cars.filter(_(0) >= 0)\n        val carsCollisions = carsLeft.filter(_(0) != _(0) && _(0) != carsRight.head(0))\n        carsCollisions.length\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqo3zidj.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqo3zidj.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpsqo3zidj.scala:16:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisions\u001b[0m = carsLeft.filter(_(\u001b[31m0\u001b[0m) != _(\u001b[31m0\u001b[0m) && _(\u001b[31m0\u001b[0m) != carsRight.head(\u001b[31m0\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n3 errors found\n",
      "stdout": "",
      "timestamp": 1660013000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1659793193
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = List[Car]()\n        var carsLeft = List[Car]()\n        var carsRight = List[Car]()\n        var carsCollision = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n        var carsCollisionRight = List[Car]()\n        var carsCollisionLeft = List[Car]()\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqiulgc2r.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsCollisionLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsCollisionLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqiulgc2r.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsCollisionRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsCollisionRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqiulgc2r.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsCollisionLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsCollisionLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqiulgc2r.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsCollisionRight\u001b[0m = List[\u001b[35mCar\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsCollisionRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpqiulgc2r.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsCollisionLeft\u001b[0m = List[\u001b[35mCar\u001b[0m]",
      "stdout": "",
      "timestamp": 1660013001
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(0.0, 100.0), Vector.random(0.0, 100.0)))\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCount2 = mutable.Set.empty[Long]\n        val collisionsCount3 = mutable.Set.empty[Long]\n        val collisionsCount4 = mutable.Set.empty[Long]\n        val collisionsCount5 = mutable.Set.empty[Long]\n        val collisionsCount6 = mutable.Set.empty[Long]\n        val collisionsCount7 = mutable.Set.empty[Long]\n        val collisionsCount8 = mutable.Set.empty[Long]\n        val collisionsCount9 = mutable.Set.empty[Long]\n        val collisionsCount10 = mutable.Set.empty[Long]\n        val collisionsCount11 = mutable.Set.empty[Long]\n        val collisionsCount12 = mutable.Set.empty[Long]\n        val collisionsCount13 = mutable.Set.empty[Long]\n        val collisionsCount14 = mutable.Set.empty[Long]\n        val collisionsCount15 = mutable.Set.empty[Long]\n        val collisionsCount16 = mutable.Set.empty[Long]\n        val collisionsCount17 = mutable.Set.empty[Long]\n        val collisionsCount18 = mutable.Set.empty[Long]\n        val collisionsCount19 = mutable.Set.empty[Long]\n        val collisionsCount20 = mutable.Set.empty[Long]\n        val collisionsCount21 = mutable.Set.empty[Long]\n        val collisionsCount22 = mutable.Set.empty[Long]\n        val collisionsCount23 = mutable.Set.empty[Long]\n        val collisionsCount24 = mutable.Set.empty[Long]\n        val collisionsCount25 = mutable.Set.empty[Long]\n        val collisionsCount26 = mutable.Set.empty[Long]\n        val collisionsCount27 = mutable.Set.empty[Long]\n        val collisionsCount28 = mutable.Set.empty[Long]\n        val collisionsCount29 = mutable.Set.empty[Long]\n        val collisionsCount30 = mutable.Set.empty[Long]\n        val collisionsCount31 = mutable.Set.empty[Long]\n        val collisionsCount32 = mutable.Set.empty[Long]\n        val collision\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpwdk5_x3_.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdk5_x3_.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwdk5_x3_.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwdk5_x3_.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwdk5_x3_.scala:13:81 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m), Vector.random(\u001b[31m0.0\u001b[0m, \u001b[31m100.0\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                           ",
      "stdout": "",
      "timestamp": 1660013002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).count(_._1 == _._2)\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpot704yav.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpot704yav.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpot704yav.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpot704yav.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpot704yav.scala:16:57 --",
      "stdout": "",
      "timestamp": 1660013003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6ime8vez.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFa",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set[Long]()\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpovzziy13.scala:33:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpovzziy13.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in",
      "stdout": "",
      "timestamp": 1659793179
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(i))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpt5ws6byu.scala:32:69 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                                                                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt5ws6byu.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt5ws6byu.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpt5ws6byu.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "stdout": "",
      "timestamp": 1660013002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer(1 to n).map(i => mutable.ListBuffer[Int]())\n        val collisions = mutable.ListBuffer[Long]()\n        val speed = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speeds = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBefore = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfterAfter = mutable.ArrayBuffer(1 to n).map(i => 0)\n        val speedsBeforeAfterAfterAfterAfterAfterAfter\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpusgf_rkk.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpusgf_rkk.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpusgf_rkk.scala:29:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpusgf_rkk.scala:30:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter\u001b[0m = mutable.ArrayBuffer(\u001b[31m1\u001b[0m to n).map(\u001b[36mi\u001b[0m => \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedsBeforeAfterAfterAfterAfterAfterAfterAfterAfterAfter is already defined as \u001b[33mvalu",
      "stdout": "",
      "timestamp": 1660013002
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n        val collides = mutable.Set[Car]()\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = 0\n        val collisionsCountPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar = mutable.Set[Long]()\n        val collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpk3e3j9hk.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpk3e3j9hk.scala:27:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar is already defined as \u001b[33mvalue\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  collisionsCountPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCarPerCar\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk3e3j9hk.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3e3j9hk.scala:13:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk3e3j9hk.scala:14:35 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m",
      "stdout": "",
      "timestamp": 1660013003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6lfk4rq5.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6lfk4rq5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6lfk4rq5.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp6lfk4rq5.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[",
      "stdout": "",
      "timestamp": 1660013003
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4uqxjsij.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4uqxjsij.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4uqxjsij.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4uqxjsij.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.emp",
      "stdout": "",
      "timestamp": 1660013005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpybu8bhb2.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpybu8bhb2.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topl",
      "stdout": "",
      "timestamp": 1660012986
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.Set.empty[Long]\n        val collisionsSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp8w7orzg3.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8w7orzg3.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8w7orzg3.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8w7orzg3.scala:26:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.Set.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp8",
      "stdout": "",
      "timestamp": 1660013005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val collisions = mutable.Set[Long]()\n        val collisionsLeft = mutable.Set[Long]()\n        val collisionsRight = mutable.Set[Long]()\n        val collisionsBoth = mutable.Set[Long]()\n        val collisionsBothLeft = mutable.Set[Long]()\n        val collisionsBothRight = mutable.Set[Long]()\n        val collisionsBothBoth = mutable.Set[Long]()\n        val collisionsBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBoth = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBothLeft = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBothRight = mutable.Set[Long]()\n        val collisionsBothBothBothBothBothBothBothBothBoth = mutable.Set[Long\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpnrfopnmv.scala:42:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnrfopnmv.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnrfopnmv.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrfopnmv.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrfopnmv.scala:15:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                             ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E00",
      "stdout": "",
      "timestamp": 1660013004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var currentCar = 0\n        var previousCar = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var currentDistance = 0\n        var previousDistance = 0\n        var currentDistanceTravelled = 0\n        var previousDistanceTravelled = 0\n        var currentDistanceTravelledPerCollision = 0\n        var previousDistanceTravelledPerCollision = 0\n        var currentSpeedPerCollision = 0\n        var previousSpeedPerCollision = 0\n        var currentSpeedPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision = 0\n        var current\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp1ddhpsld.scala:57:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m57 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1ddhpsld.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcurrentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcurrentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision is already defined as \u001b[33mvariable\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  currentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1ddhpsld.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mpreviousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mpreviousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision is already defined as \u001b[33mvariable\u001b[0m \u001b[35m\n\u001b[31m   |\u001b[0m  previousSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision\n\u001b[31m   |\u001b[0m\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp1ddhpsld.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcurrentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision\u001b[0m = \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcurrentSpeedPerCollisionPerCollisionPerCollisionPerCollisionPerCollision is already defined as \u001b[33mvariable\u001b[0",
      "stdout": "",
      "timestamp": 1660013005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val speedSoFar = mutable.ListBuffer[Double]()\n        val carsSoFar = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpo7rnbdv5.scala:48:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = \n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo7rnbdv5.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo7rnbdv5.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo7rnbdv5.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpo7rnbdv5.scala:24:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as",
      "stdout": "",
      "timestamp": 1660013006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsLeft = mutable.ListBuffer[Long]()\n        val collisionsRight = mutable.ListBuffer[Long]()\n        val collisionsBoth = mutable.ListBuffer[Long]()\n        val collisionsBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothRight = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBoth = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothLeft = mutable.ListBuffer[Long]()\n        val collisionsBothBothBothBothBothBothBothRight = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpylbjlcta.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpylbjlcta.scala:38:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothBoth\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothBoth is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothBoth\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpylbjlcta.scala:39:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsBothBothBothBothBothBothBothLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsBothBothBothBothBothBothBothLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsBothBothBothBothBothBothBothLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpylbjlcta.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b",
      "stdout": "",
      "timestamp": 1660013006
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = 0L\n        val cars = mutable.ListBuffer(1 to n).map(x => mutable.ListBuffer(1 to n).map(y => mutable.ListBuffer(x, y)))\n        val carsLeft = mutable.ListBuffer(1 to n).map(x => mutable.ListBuffer(1 to n).map(y => mutable.ListBuffer(x, y)))\n        val carsRight = mutable.ListBuffer(1 to n).map(x => mutable.ListBuffer(1 to n).map(y => mutable.ListBuffer(x, y)))\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val carsRight = carsRight.reverse\n        val carsLeft = carsLeft.reverse\n        val car\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa6i0mc2l.scala:55:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6i0mc2l.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6i0mc2l.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6i0mc2l.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6i0mc2l.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.reverse\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa6i0mc2l.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36",
      "stdout": "",
      "timestamp": 1660013004
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n / 2)(mutable.Queue[Int]())\n        val collisions = mutable.Queue[Int]()\n        val collisionsCount = mutable.Queue[Int]()\n        val collisionsCount2 = mutable.Queue[Int]()\n        val collisionsCount3 = mutable.Queue[Int]()\n        val collisionsCount4 = mutable.Queue[Int]()\n        val collisionsCount5 = mutable.Queue[Int]()\n        val collisionsCount6 = mutable.Queue[Int]()\n        val collisionsCount7 = mutable.Queue[Int]()\n        val collisionsCount8 = mutable.Queue[Int]()\n        val collisionsCount9 = mutable.Queue[Int]()\n        val collisionsCount10 = mutable.Queue[Int]()\n        val collisionsCount11 = mutable.Queue[Int]()\n        val collisionsCount12 = mutable.Queue[Int]()\n        val collisionsCount13 = mutable.Queue[Int]()\n        val collisionsCount14 = mutable.Queue[Int]()\n        val collisionsCount15 = mutable.Queue[Int]()\n        val collisionsCount16 = mutable.Queue[Int]()\n        val collisionsCount17 = mutable.Queue[Int]()\n        val collisionsCount18 = mutable.Queue[Int]()\n        val collisionsCount19 = mutable.Queue[Int]()\n        val collisionsCount20 = mutable.Queue[Int]()\n        val collisionsCount21 = mutable.Queue[Int]()\n        val collisionsCount22 = mutable.Queue[Int]()\n        val collisionsCount23 = mutable.Queue[Int]()\n        val collisionsCount24 = mutable.Queue[Int]()\n        val collisionsCount25 = mutable.Queue[Int]()\n        val collisionsCount26 = mutable.Queue[Int]()\n        val collisionsCount27 = mutable.Queue[Int]()\n        val collisionsCount28 = mutable.Queue[Int]()\n        val collisionsCount29 = mutable.Queue[Int]()\n        val collisionsCount30 = mutable.Queue[Int]()\n        val collisionsCount31 = mutable.Queue[Int]()\n        val collisionsCount32 = mutable.Queue[Int]()\n        val collisionsCount33 = mutable.Queue[Int]()\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgs94wud0.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs94wud0.scala:13:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgs94wud0.scala:13:58 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Array.fill(n / \u001b[31m2\u001b[0m)(mutable.Queue[\u001b[35mInt\u001b[0m]())\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                                          No ClassTag available for T\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m                                          where:    T is a type variable\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs94wud0.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Queue[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgs94wud0.scala:15:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.Queue[\u001b[35mInt\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                             ",
      "stdout": "",
      "timestamp": 1660013005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar2 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar3 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar4 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar5 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar6 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar7 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar8 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar9 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar10 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar11 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar12 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar13 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar14 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar15 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar16 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar17 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar18 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar19 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar20 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar21 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar22 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar23 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar24 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar25 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar26 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar27 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar28 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar29 = mutable.ArrayBuffer.fill(n)(0)\n        val speedSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpiu8n4nax.scala:47:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiu8n4nax.scala:13:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiu8n4nax.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiu8n4nax.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiu8n4nax.scala:16:30 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFar\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiu8n4nax.scala:17:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedSoFar\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not fou",
      "stdout": "",
      "timestamp": 1660013005
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsCollisions = carsLeft.zip(carsRight).filter(_._1._ == _._2._).length\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqmci_hna.scala:16:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisions\u001b[0m = carsLeft.zip(carsRight).filter(_._1._ == _._2._).length\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   an identifier expected, but '_' found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqmci_hna.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqmci_hna.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqmci_hna.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqmc",
      "stdout": "",
      "timestamp": 1660013008
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_(0) < 0)\n        val carsRight = cars.filter(_(0) >= 0)\n        val carsCollisions = carsLeft.filter(_(0) != _(0) && _(1) != _(1))\n        val carsCollisionsLeft = carsLeft.filter(_(0) != _(0) && _(1) != _(1))\n        val carsCollisionsRight = carsRight.filter(_(0) != _(0) && _(1) != _(1))\n        val carsCollisionsBoth = carsCollisions.filter(_(0) != _(0) && _(1) != _(1))\n        carsCollisionsBoth.length\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgvch05yh.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgvch05yh.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpgvch05yh.scala:16:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisions\u001b[0m = carsLeft.filter(_(\u001b[31m0\u001b[0m) != _(\u001b[31m0\u001b[0m) && _(\u001b[31m1\u001b[0m) != _(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpgvch05yh.scala:17:49 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = carsLeft.filter(_(\u001b[31m0\u001b[0m) != _(\u001b[31m0\u001b[0m) && _(\u001b[31m1\u001b[0m) != _(\u001b[31m1\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpgvch05yh.scala:18:51 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b",
      "stdout": "",
      "timestamp": 1660013009
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu3qwyn3v.scala:49:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffe",
      "stdout": "",
      "timestamp": 1660012945
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n / 2)(mutable.Queue[Int]())\n        val carsLeft = Array.fill(n / 2)(mutable.Queue[Int]())\n        val carsRight = Array.fill(n / 2)(mutable.Queue[Int]())\n        val collisions = mutable.ArrayBuffer.empty[Long]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.ArrayBuffer.empty[Int]\n        val carsRight = mutable.ArrayBuffer.empty[Int]\n        val carsLeft = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp4oyd0a74.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4oyd0a74.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.empty[\u001b[35mInt\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4oyd0a74.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.empty[\u001b[35mInt\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4oyd0a74.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.empty[\u001b[35mInt\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp4oyd0a74.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.empty[\u001b[35mInt\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of topl",
      "stdout": "",
      "timestamp": 1660013012
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => i)\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = mutable.Set.empty[Long]\n        val collisionsLeft = collisions.updated(0)\n        val collisionsRight = collisions.updated(0)\n        val collisionsLeft = carsLeft.foldLeft(0)((acc, i) => acc + (carsLeft.indexOf(i) * carsLeft.indexOf(i)))\n        val collisionsRight = carsRight.foldLeft(0)((acc, i) => acc + (carsRight.indexOf(i) * carsRight.indexOf(i)))\n        val collisionsLeft = collisionsLeft.foldLeft(0)((acc, i) => acc + (carsLeft.indexOf(i) * carsLeft.indexOf(i)))\n        val collisionsRight = collisionsRight.foldLeft(0)((acc, i) => acc + (carsRight.indexOf(i) * carsRight.indexOf(i)))\n        collisionsLeft + collisionsRight\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpome3c8xz.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = carsLeft.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36macc\u001b[0m, \u001b[36mi\u001b[0m) => acc + (carsLeft.indexOf(i) * carsLeft.indexOf(i)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpome3c8xz.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = carsRight.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36macc\u001b[0m, \u001b[36mi\u001b[0m) => acc + (carsRight.indexOf(i) * carsRight.indexOf(i)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpome3c8xz.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = collisionsLeft.foldLeft(\u001b[31m0\u001b[0m)((\u001b[36macc\u001b[0m, \u001b[36mi\u001b[0m) => acc + (carsLeft.indexOf(i) * carsLeft.indexOf(i)))\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpome3c8xz.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = collisionsRight.foldLeft(\u001b[31m",
      "stdout": "",
      "timestamp": 1660013012
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[Long]\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer.empty[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp74vtsojb.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp74vtsojb.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel def",
      "stdout": "",
      "timestamp": 1660012947
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val speed = mutable.ArrayBuffer.fill(n)(0)\n        val speeds = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimit = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(0)\n        val speedLimits = mutable.ArrayBuffer.fill(n)(\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpu3qwyn3v.scala:49:54 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\n\u001b[31m\u001b[31m   |\u001b[0m                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mspeedLimits is already defined as \u001b[33mvalue\u001b[0m \u001b[35mspeedLimits\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpu3qwyn3v.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeedLimits\u001b[0m = mutable.ArrayBuffe",
      "stdout": "",
      "timestamp": 1660012945
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n / 2)(math.random)\n        val collisions = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsSoFar = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n / 2)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n / 2)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzy7kcsoo.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzy7kcsoo.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzy7kcsoo.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzy7kcsoo.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsRight\u001b[0m = mutable.ArrayBuffer.fill(n / \u001b[31m2\u001b[0m)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] ",
      "stdout": "",
      "timestamp": 1660013010
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        cars(0) = Vector(1.0, 0.0)\n        cars(1) = Vector(-1.0, 0.0)\n        var i = 0\n        while (i < n) {\n            val car1 = cars(i)\n            val car2 = cars(i + 1)\n            val collision = car1.cross(car2)\n            if (collision.mag2 > 0.0) {\n                collisions += 1\n                cars(i + 1) = car1.add(collision)\n                cars(i) = car2.subtract(collision)\n            }\n            i += 1\n        }\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpawm8pi7v.scala:14:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawm8pi7v.scala:14:45 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcars\u001b[0m = Vector.fill(n / \u001b[31m2\u001b[0m)(Vector.zero)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue zero is not a member of object scala.collection.immutable.Vector - did you mean Vector.from?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawm8pi7v.scala:15:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        cars(\u001b[31m0\u001b[0m) = Vector(\u001b[31m1.0\u001b[0m, \u001b[31m0.0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of Vector[Nothing] - did you mean Vector[Nothing].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawm8pi7v.scala:16:8 -------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        cars(\u001b[31m1\u001b[0m) = Vector(-\u001b[31m1.0\u001b[0m, \u001b[31m0.0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of Vector[Nothing] - did you mean Vector[Nothing].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawm8pi7v.scala:21:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mcollision\u001b[0m = car1.cross(car2)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            value cross is not a member of Nothing\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpawm8pi7v.scala:24:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                cars(i + \u001b[31m1\u001b[0m) = car1.add(collision)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of Vector[Nothing] - did yo",
      "stdout": "",
      "timestamp": 1660013015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabulate(n)(m => Vector.tabulate(n)(n => Vector.tabulate(n)(o => Vector.tabulate(n)(p => Vector.tabulate(n)(q => Vector.tabulate(n)(r => Vector.tabulate(n)(s => Vector.tabulate(n)(t => Vector.tabulate(n)(u => Vector.tabulate(n)(v => Vector.tabulate(n)(w => Vector.tabulate(n)(x => Vector.tabulate(n)(y => Vector.tabulate(n)(z => Vector.tabulate(n)(a => Vector.tabulate(n)(b => Vector.tabulate(n)(c => Vector.tabulate(n)(d => Vector.tabulate(n)(e => Vector.tabulate(n)(f => Vector.tabulate(n)(g => Vector.tabulate(n)(h => Vector.tabulate(n)(i => Vector.tabulate(n)(j => Vector.tabulate(n)(k => Vector.tabulate(n)(l => Vector.tabul\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmppamjkv77.scala:14:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppamjkv77.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh\u001b[0m => Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => Vector.tabulate(n)(\u001b[36mk\u001b[0m => Vector.tabulate(n)(\u001b[36ml\u001b[0m => Vector.tabulate(n)(\u001b[36mm\u001b[0m => Vector.tabulate(n)(\u001b[36mn\u001b[0m => Vector.tabulate(n)(\u001b[36mo\u001b[0m => Vector.tabulate(n)(\u001b[36mp\u001b[0m => Vector.tabulate(n)(\u001b[36mq\u001b[0m => Vector.tabulate(n)(\u001b[36mr\u001b[0m => Vector.tabulate(n)(\u001b[36ms\u001b[0m => Vector.tabulate(n)(\u001b[36mt\u001b[0m => Vector.tabulate(n)(\u001b[36mu\u001b[0m => Vector.tabulate(n)(\u001b[36mv\u001b[0m => Vector.tabulate(n)(\u001b[36mw\u001b[0m => Vector.tabulate(n)(\u001b[36mx\u001b[0m => Vector.tabulate(n)(\u001b[36my\u001b[0m => Vector.tabulate(n)(\u001b[36mz\u001b[0m => Vector.tabulate(n)(\u001b[36ma\u001b[0m => Vector.tabulate(n)(\u001b[36mb\u001b[0m => Vector.tabulate(n)(\u001b[36mc\u001b[0m => Vector.tabulate(n)(\u001b[36md\u001b[0m => Vector.tabulate(n)(\u001b[36me\u001b[0m => Vector.tabulate(n)(\u001b[36mf\u001b[0m => Vector.tabulate(n)(\u001b[36mg\u001b[0m => Vector.tabulate(n)(\u001b[36mh",
      "stdout": "",
      "timestamp": 1660012976
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n        val collide = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collision = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3znel1_o.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisions is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3znel1_o.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollision\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollision is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollision\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3znel1_o.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisions is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3znel1_o.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollision\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollision is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollision\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp3znel1_o.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListB",
      "stdout": "",
      "timestamp": 1660013014
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpui9_iap0.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpui9_iap0.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpui9_iap0.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpui9_iap0.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660013015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n        val collisionCount = 0\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsLeft = carsLeft.zip(carsRight)\n        carsLeft.foreach { case (carLeft, carRight) =>\n            val collide = carLeft.collide(carRight)\n            if (collide) {\n                collides += carLeft\n                collides += carRight\n                collisions += carLeft\n                collisions += carRight\n                collisionCount += 1\n            }\n        }\n        collisionCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpf36uq09_.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.zip(carsRight)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf36uq09_.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf36uq09_.scala:13:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf36uq09_.scala:14:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf36uq09_.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mco",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1._1 == _._1._2).length\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydh7ldvo.scala:15:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpydh7ldvo.scala:16:58 --",
      "stdout": "",
      "timestamp": 1660012977
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.filter(_(0) < 0)\n        val carsRight = cars.filter(_(0) >= 0)\n        val carsCollisions = carsLeft.filter(_(0) != _(1)).size +\n                               carsRight.filter(_(0) != _(1)).size\n        carsCollisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid_xxlwd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid_xxlwd.scala:13:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpid_xxlwd.scala:16:45 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisions\u001b[0m = carsLeft.filter(_(\u001b[31m0\u001b[0m) != _(\u001b[31m1\u001b[0m)).size +\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpid_xxlwd.scala:17:48 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                               carsRight.filter(_(\u001b[31m0\u001b[0m) != _(\u001b[31m1\u001b[0m)).size\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Wrong number of parameters, expected: 1\n4 errors found\n",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.Set.empty[Long]\n        val collisions = mutable.Set.empty[Long]\n        val collisionsCount = mutable.Set.empty[Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long]\n        val collisionsCounts = mutable.Map.empty[Long, Long\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5o_gforo.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ']' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5o_gforo.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map.empty[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5o_gforo.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map.empty[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5o_gforo.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map.empty[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCounts\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5o_gforo.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCounts\u001b[0m = mutable.Map.empty[\u001b[35mLong\u001b[0m, \u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCounts is already defined as \u001b[33",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        val cars = Vector.tabulate(n)(i => Vector.tabulate(n)(j => i + j))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val carsRightToLeft = carsRight.zip(carsLeft)\n        val carsRightToLeftCollisions = carsRightToLeft.filter(_._1 == _._2).length\n        val carsRightToLeftCollisionsTotal = carsRightToLeftCollisions.toDouble * carsLeft.length\n        val carsRightToLeftCollisionsAverage = carsRightToLeftCollisionsTotal / carsLeft.length\n        val carsRightToLeftCollisionsAverageInt = carsRightToLeftCollisionsAverage.toInt\n        val carsRightToLeftCollisionsAverageFraction = carsRightToLeftCollisionsAverageInt / carsLeft.length\n        val carsRightToLeftCollisionsAverageFractionInt = carsRightToLeftCollisionsAverageFraction.toInt\n        val carsRightToLeftCollisionsAverageFractionFraction = carsRightToLeftCollisionsAverageFractionInt / carsLeft.length\n        val carsRightToLeftCollisionsAverageFractionFractionInt = carsRightToLeftCollisionsAverageFractionFraction.toInt\n        val carsRightToLeftCollisionsAverageFractionFractionFraction = carsRightToLeftCollisionsAverageFractionFractionInt / carsLeft.length\n        val carsRightToLeftCollisionsAverageFractionFractionFractionInt = carsRightToLeftCollisionsAverageFractionFractionFraction.toInt\n        val carsRightToLeftCollisionsAverageFractionFractionFractionFraction = carsRightToLeftCollisionsAverageFractionFractionFractionInt / carsLeft.length\n        val carsRightToLeftCollisionsAverageFractionFractionFractionFractionInt = carsRightToLeftCollisionsAverageFractionFractionFractionFraction.toInt\n        val carsRightToLeftCollisionsAverageFractionFractionFractionFractionFraction = carsRightToLeftCollisionsAverageFractionFractionFractionFractionInt / carsLeft.length\n        val carsRightToLeftCollisionsAverageFractionFractionFractionFractionFractionInt = carsRightToLeftCollisionsAverageFractionFractionFractionFractionFraction.toInt\n        val carsRightToLeftCollisionsAverageFractionFractionFractionFractionFractionFraction = carsRightToLeftCollisionsAverageFractionFractionFractionFractionFractionInt / carsLeft.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp16f69clg.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16f69clg.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16f69clg.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Vector.tabulate(n)(\u001b[36mj\u001b[0m => i + j))\n\u001b[31m\u001b[31m   |\u001b[0m                                                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                                                    Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16f69clg.scala:15:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = cars.takeRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp16f69clg.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = cars.dropRight(n)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (n : Long)\n\u001b[31m   |\u001b[0m        ",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val carsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val carsRight = mutable.ArrayBuffer.fill(n)(0)\n        val collisions = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsLeft = mutable.ArrayBuffer.fill(n)(0)\n        val collisionsRight = mutable.ArrayBuffer.fill(n)(0)\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmpgnfeivo6.scala:49:11 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m        \u001b[33mval\u001b[0m \n\u001b[31m\u001b[31m   |\u001b[0m           ^\u001b[0m\n\u001b[31m   |\u001b[0m           pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgnfeivo6.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgnfeivo6.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgnfeivo6.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisions is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisions\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgnfeivo6.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsLeft\u001b[0m = mutable.ArrayBuffer.fill(n)(\u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsLeft is already defined as \u001b[33mvalue\u001b[0m ",
      "stdout": "",
      "timestamp": 1660013015
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsCollisions = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.ListBuffer[Long]()\n        val carsCollisionsLeft = mutable.ListBuffer[Long]()\n        val carsCollisionsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_8ar_4l_.scala:45:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsCollisionsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp_8ar_4l_.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsCollisionsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsCollisionsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[",
      "stdout": "",
      "timestamp": 1660012989
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var currentCar = 0\n        var previousCar = 0\n        var currentSpeed = 0\n        var previousSpeed = 0\n        var currentDistance = 0\n        var previousDistance = 0\n        var currentDirection = 0\n        var previousDirection = 0\n        var currentCollision = 0\n        var previousCollision = 0\n        var currentCollisionCount = 0\n        var previousCollisionCount = 0\n        var currentCollisionCount2 = 0\n        var previousCollisionCount2 = 0\n        var currentCollisionCount3 = 0\n        var previousCollisionCount3 = 0\n        var currentCollisionCount4 = 0\n        var previousCollisionCount4 = 0\n        var currentCollisionCount5 = 0\n        var previousCollisionCount5 = 0\n        var currentCollisionCount6 = 0\n        var previousCollisionCount6 = 0\n        var currentCollisionCount7 = 0\n        var previousCollisionCount7 = 0\n        var currentCollisionCount8 = 0\n        var previousCollisionCount8 = 0\n        var currentCollisionCount9 = 0\n        var previousCollisionCount9 = 0\n        var currentCollisionCount10 = 0\n        var previousCollisionCount10 = 0\n        var currentCollisionCount11 = 0\n        var previousCollisionCount11 = 0\n        var currentCollisionCount12 = 0\n        var previousCollisionCount12 = 0\n        var currentCollisionCount13 = 0\n        var previousCollisionCount13 = 0\n        var currentCollisionCount14 = 0\n        var previousCollisionCount14 = 0\n        var currentCollisionCount15 = 0\n        var previousCollisionCount15 = 0\n        var currentCollisionCount16 = 0\n        var previousCollisionCount16 = 0\n        var currentCollisionCount17 = 0\n        var previousCollisionCount17 = 0\n        var currentCollisionCount18 = 0\n        var previousCollisionCount18 = 0\n        var currentCollisionCount19 = 0\n        var previousCollisionCount19 = 0\n        var currentCollisionCount20 = 0\n        var previousCollisionCount20 = 0\n        var currentCollisionCount21 = 0\n        var previousCollisionCount21 = 0\n        var currentCollisionCount22 = 0\n        var previousCollisionCount22 = 0\n        var currentCollisionCount23 = 0\n        var previousCollisionCount23 = 0\n        var currentCollisionCount24 = 0\n        var previousCollisionCount24 = 0\n        var currentCollisionCount25 = 0\n        var previousCollisionCount25 = 0\n        var currentCollisionCount26 = 0\n        var previousCollisionCount26 = 0\n        var currentCollisionCount27 = 0\n        var previousCollisionCount27 = 0\n        var currentCollisionCount28 = 0\n        var previousCollisionCount28 = 0\n        var currentCollisionCount29 = 0\n        var previousCollisionCount29 = 0\n        var currentCollisionCount30 = 0\n        var previousCollisionCount30 = 0\n        var currentCollisionCount31 = 0\n        var previousCollisionCount31 = 0\n        var currentCollisionCount32 = 0\n        var previousCollisionCount32 = 0\n        var currentCollisionCount33 = 0\n        var previousCollisionCount33\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphck5dd63.scala:90:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphck5dd63.scala:90:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "stdout": "",
      "timestamp": 1660013016
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.ListBuffer[Long]()\n        val carsLeft = mutable.ListBuffer[Long]()\n        val carsRight = mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmh0rogsr.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpmh0rogsr.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1659793138
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n        val collisions = mutable.Set.empty[Long]\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        carsLeft.foreach(c => carsRight.foreach(otherCar => {\n            if (c.collidesWith(otherCar)) {\n                collisions += otherCar.index\n            }\n        }))\n        collisions.size\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp987r7qym.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp987r7qym.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp987r7qym.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp987r7qym.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp987r7qym.scala:14:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.S",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.Set[Long]()\n        val cars = mutable.Set[Long]()\n        val speed = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val carsRight = mutable.Set[Long]()\n        val carsLeft = mutable.Set[Long]()\n        val cars\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpzj6_mkk0.scala:52:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m52 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzj6_mkk0.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzj6_mkk0.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzj6_mkk0.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzj6_mkk0.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsRight\u001b[0m = mutable.Set[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpzj6_mkk0.scala:22:12 ------------------",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Long]()\n        val collisionsSoFar = mutable.Set[Long]()\n        val collisionsSoFar2 = mutable.Set[Long]()\n        val collisionsSoFar3 = mutable.Set[Long]()\n        val collisionsSoFar4 = mutable.Set[Long]()\n        val collisionsSoFar5 = mutable.Set[Long]()\n        val collisionsSoFar6 = mutable.Set[Long]()\n        val collisionsSoFar7 = mutable.Set[Long]()\n        val collisionsSoFar8 = mutable.Set[Long]()\n        val collisionsSoFar9 = mutable.Set[Long]()\n        val collisionsSoFar10 = mutable.Set[Long]()\n        val collisionsSoFar11 = mutable.Set[Long]()\n        val collisionsSoFar12 = mutable.Set[Long]()\n        val collisionsSoFar13 = mutable.Set[Long]()\n        val collisionsSoFar14 = mutable.Set[Long]()\n        val collisionsSoFar15 = mutable.Set[Long]()\n        val collisionsSoFar16 = mutable.Set[Long]()\n        val collisionsSoFar17 = mutable.Set[Long]()\n        val collisionsSoFar18 = mutable.Set[Long]()\n        val collisionsSoFar19 = mutable.Set[Long]()\n        val collisionsSoFar20 = mutable.Set[Long]()\n        val collisionsSoFar21 = mutable.Set[Long]()\n        val collisionsSoFar22 = mutable.Set[Long]()\n        val collisionsSoFar23 = mutable.Set[Long]()\n        val collisionsSoFar24 = mutable.Set[Long]()\n        val collisionsSoFar25 = mutable.Set[Long]()\n        val collisionsSoFar26 = mutable.Set[Long]()\n        val collisionsSoFar27 = mutable.Set[Long]()\n        val collisionsSoFar28 = mutable.Set[Long]()\n        val collisionsSoFar29 = mutable.Set[Long]()\n        val collisionsSoFar30 = mutable.Set[Long]()\n        val collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm24dik4m.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm24dik4m.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm24dik4m.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm24dik4m.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm24dik4m.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        var collisions = 0\n        var cars = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = Vector.fill(n / 2)(Vector.zero)\n        var carsRight = Vector.fill(n / 2)(Vector.zero)\n        var carsLeft = carsLeft.tail\n        var carsRight = carsRight.tail\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.init\n        var carsLeft = carsLeft.init\n        var carsRight = carsRight.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5a72fkjc.scala:61:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.tail\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsLeft\u001b[0m = carsLeft.init\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsLeft is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsLeft\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mcarsRight\u001b[0m = carsRight.init\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcarsRight is already defined as \u001b[33mvariable\u001b[0m \u001b[35mcarsRight\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmp5a72fkjc.scala:21:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mc",
      "stdout": "",
      "timestamp": 1659793456
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collisions = mutable.Set[Car]()\n        val collisionsCount = mutable.Set[Car]()\n        val collisionsCount2 = mutable.Set[Car]()\n        val collisionsCount3 = mutable.Set[Car]()\n        val collisionsCount4 = mutable.Set[Car]()\n        val collisionsCount5 = mutable.Set[Car]()\n        val collisionsCount6 = mutable.Set[Car]()\n        val collisionsCount7 = mutable.Set[Car]()\n        val collisionsCount8 = mutable.Set[Car]()\n        val collisionsCount9 = mutable.Set[Car]()\n        val collisionsCount10 = mutable.Set[Car]()\n        val collisionsCount11 = mutable.Set[Car]()\n        val collisionsCount12 = mutable.Set[Car]()\n        val collisionsCount13 = mutable.Set[Car]()\n        val collisionsCount14 = mutable.Set[Car]()\n        val collisionsCount15 = mutable.Set[Car]()\n        val collisionsCount16 = mutable.Set[Car]()\n        val collisionsCount17 = mutable.Set[Car]()\n        val collisionsCount18 = mutable.Set[Car]()\n        val collisionsCount19 = mutable.Set[Car]()\n        val collisionsCount20 = mutable.Set[Car]()\n        val collisionsCount21 = mutable.Set[Car]()\n        val collisionsCount22 = mutable.Set[Car]()\n        val collisionsCount23 = mutable.Set[Car]()\n        val collisionsCount24 = mutable.Set[Car]()\n        val collisionsCount25 = mutable.Set[Car]()\n        val collisionsCount26 = mutable.Set[Car]()\n        val collisionsCount27 = mutable.Set[Car]()\n        val collisionsCount28 = mutable.Set[Car]()\n        val collisionsCount29 = mutable.Set[Car]()\n        val collisionsCount30 = mutable.Set[Car]()\n        val collisionsCount31 = mutable.Set[Car]()\n        val collisionsCount32 = mutable.Set[Car]()\n        val collisionsCount\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_d8qs4qd.scala:48:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_d8qs4qd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_d8qs4qd.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.i",
      "stdout": "",
      "timestamp": 1660013000
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val collisions = mutable.ListBuffer[Long]()\n        val cars = mutable.ListBuffer[Long]()\n        val speed = mutable.ListBuffer[Double]()\n        val xs = mutable.ListBuffer[Double]()\n        val ys = mutable.ListBuffer[Double]()\n        val xs1 = mutable.ListBuffer[Double]()\n        val ys1 = mutable.ListBuffer[Double]()\n        val xs2 = mutable.ListBuffer[Double]()\n        val ys2 = mutable.ListBuffer[Double]()\n        val xs3 = mutable.ListBuffer[Double]()\n        val ys3 = mutable.ListBuffer[Double]()\n        val xs4 = mutable.ListBuffer[Double]()\n        val ys4 = mutable.ListBuffer[Double]()\n        val xs5 = mutable.ListBuffer[Double]()\n        val ys5 = mutable.ListBuffer[Double]()\n        val xs6 = mutable.ListBuffer[Double]()\n        val ys6 = mutable.ListBuffer[Double]()\n        val xs7 = mutable.ListBuffer[Double]()\n        val ys7 = mutable.ListBuffer[Double]()\n        val xs8 = mutable.ListBuffer[Double]()\n        val ys8 = mutable.ListBuffer[Double]()\n        val xs9 = mutable.ListBuffer[Double]()\n        val ys9 = mutable.ListBuffer[Double]()\n        val xs10 = mutable.ListBuffer[Double]()\n        val ys10 = mutable.ListBuffer[Double]()\n        val xs11 = mutable.ListBuffer[Double]()\n        val ys11 = mutable.ListBuffer[Double]()\n        val xs12 = mutable.ListBuffer[Double]()\n        val ys12 = mutable.ListBuffer[Double]()\n        val xs13 = mutable.ListBuffer[Double]()\n        val ys13 = mutable.ListBuffer[Double]()\n        val xs14 = mutable.ListBuffer[Double]()\n        val ys14 = mutable.ListBuffer[Double]()\n        val xs15 = mutable.ListBuffer[Double]()\n        val ys15 = mutable.ListBuffer[Double]()\n        val xs16 = mutable.ListBuffer[Double]()\n        val ys16 = mutable.ListBuffer[Double]()\n        val xs17 = mutable.List\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:13:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:14:19 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mspeed\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:16:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:17:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mys\u001b[0m = mutable.ListBuffer[\u001b[35mDouble\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpilqxqp9u.scala:18:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mxs1\u001b[0m = mutable.ListBuffer[\u001b",
      "stdout": "",
      "timestamp": 1660012960
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => i + j))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpr78u3mc2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpr78u3mc2.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1659793193
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(2), Vector.random(2)))\n        val collisions = mutable.Set.empty[Long]\n        val carsLeft = cars.takeWhile(_.getX < 0).reverse\n        val carsRight = cars.takeWhile(_.getX > 0).reverse\n        val carsRightToLeft = carsRight.takeWhile(_.getX < carsLeft.head.getX).reverse\n        val carsLeftToRight = carsLeft.takeWhile(_.getX > carsRight.head.getX).reverse\n        val carsRightToLeftToRight = carsRightToLeft.takeWhile(_.getX < carsRightToLeft.head.getX).reverse\n        val carsRightToLeftToRightToLeft = carsRightToLeftToRight.takeWhile(_.getX < carsRightToLeftToRight.head.getX).reverse\n        val carsRightToLeftToRightToLeftToRight = carsRightToLeftToRightToLeft.takeWhile(_.getX < carsRightToLeftToRightToLeftToRight.head.getX).reverse\n        val carsRightToLeftToRightToLeftToRightToLeft = carsRightToLeftToRightToLeftToRightToLeft.takeWhile(_.getX < carsRightToLeftToRightToLeftToRightToLeftToRight.head.getX).reverse\n        val carsRightToLeftToRightToLeftToRightToLeftToRight = carsRightToLeftToRightToLeftToRightToLeftToRightToLeft.takeWhile(_.getX < carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight.head.getX).reverse\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight = carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight.takeWhile(_.getX < carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRight.head.getX).reverse\n        val carsRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightToLeftToRightTo\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpsgkrz0pd.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgkrz0pd.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgkrz0pd.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsgkrz0pd.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsgkrz0pd.scala:13:72 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m2\u001b[0m), Vector.random(\u001b[31m2\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - ",
      "stdout": "",
      "timestamp": 1660013018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => mutable.ListBuffer(1 to n).map(j => Car(i, j)))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpa_bu7mbu.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa_bu7mbu.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa_bu7mbu.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpa_bu7mbu.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E",
      "stdout": "",
      "timestamp": 1660013017
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val carsLeft = cars.takeRight(n)\n        val carsRight = cars.dropRight(n)\n        val collisions = carsLeft.zip(carsRight).filter(_._1.speed == _._1.speed).length\n        collisions\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9f94a56.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe9f94a56.scala:13:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Not found: Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe9f94a56.scala:13:54 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe9f94a56.scala:13:74 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => Car(Vector.random(\u001b[31m100\u001b[0m), Vector.random(\u001b[31m100\u001b[0m)))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue random is not a member of object scala.collection.immutable.Vector - did you mean Vector.range?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe9f94a56.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcarsLeft",
      "stdout": "",
      "timestamp": 1660013018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = mutable.ListBuffer(1 to n).map(i => new Car(i))\n        val collisions = mutable.ListBuffer[Long]()\n        val collisionsSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar = mutable.ListBuffer[Long]()\n        val collisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgc9dl8zp.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:22:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:23:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmpgc9dl8zp.scala:25:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m = mutable.ListBuffer[\u001b[35mLong\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsSoFarSoFarSoFarSoFarSoFarSoFarSoFarSoFar\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Namin",
      "stdout": "",
      "timestamp": 1660012946
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => new Car(math.random))\n        val collides = mutable.Set.empty[Car]\n        val collisions = mutable.Set.empty[Car]\n        val collisionsCount = mutable.Set.empty[Car]\n        val collisionsCount2 = mutable.Set.empty[Car]\n        val collisionsCount3 = mutable.Set.empty[Car]\n        val collisionsCount4 = mutable.Set.empty[Car]\n        val collisionsCount5 = mutable.Set.empty[Car]\n        val collisionsCount6 = mutable.Set.empty[Car]\n        val collisionsCount7 = mutable.Set.empty[Car]\n        val collisionsCount8 = mutable.Set.empty[Car]\n        val collisionsCount9 = mutable.Set.empty[Car]\n        val collisionsCount10 = mutable.Set.empty[Car]\n        val collisionsCount11 = mutable.Set.empty[Car]\n        val collisionsCount12 = mutable.Set.empty[Car]\n        val collisionsCount13 = mutable.Set.empty[Car]\n        val collisionsCount14 = mutable.Set.empty[Car]\n        val collisionsCount15 = mutable.Set.empty[Car]\n        val collisionsCount16 = mutable.Set.empty[Car]\n        val collisionsCount17 = mutable.Set.empty[Car]\n        val collisionsCount18 = mutable.Set.empty[Car]\n        val collisionsCount19 = mutable.Set.empty[Car]\n        val collisionsCount20 = mutable.Set.empty[Car]\n        val collisionsCount21 = mutable.Set.empty[Car]\n        val collisionsCount22 = mutable.Set.empty[Car]\n        val collisionsCount23 = mutable.Set.empty[Car]\n        val collisionsCount24 = mutable.Set.empty[Car]\n        val collisionsCount25 = mutable.Set.empty[Car]\n        val collisionsCount26 = mutable.Set.empty[Car]\n        val collisionsCount27 = mutable.Set.empty[Car]\n        val collisionsCount28 = mutable.Set.empty[Car]\n        val collisionsCount29 = mutable.Set.empty[Car]\n        val collisionsCount30 = mutable.Set.empty[Car]\n        val collisionsCount31 = mutable.Set.empty[Car]\n        val collisionsCount32 = mutable.Set.empty[Car]\n\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqvyi8szp.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(math.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (n : Long)\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvyi8szp.scala:13:47 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcars\u001b[0m = Vector.tabulate(n)(\u001b[36mi\u001b[0m => \u001b[33mnew\u001b[0m \u001b[35mCar\u001b[0m(math.random))\n\u001b[31m\u001b[31m   |\u001b[0m                                               ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvyi8szp.scala:14:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Not found: type Car\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvyi8szp.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollides\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: mutable\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqvyi8szp.scala:15:43 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisions\u001b[0m = mutable.Set.empty[\u001b[35mCar\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     ",
      "stdout": "",
      "timestamp": 1660013018
    },
    {
      "exit_code": 1,
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Vector.tabulate(n)(i => Car(Vector.random(100), Vector.random(100)))\n        val collides = mutable.ListBuffer.empty[Long]\n        val collisions = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.empty[Long]\n        val collisionsCount = mutable.ListBuffer.\n    }\n    def main(args: Array[String]) = {\n    assert(carRaceCollision((2l)) == (4l));\n    assert(carRaceCollision((3l)) == (9l));\n    assert(carRaceCollision((4l)) == (16l));\n    assert(carRaceCollision((8l)) == (64l));\n    assert(carRaceCollision((10l)) == (100l));\n    }\n\n}\n",
      "status": "SyntaxError",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplzehhbsz.scala:49:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplzehhbsz.scala:17:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplzehhbsz.scala:18:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplzehhbsz.scala:19:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCount\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmplzehhbsz.scala:20:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mcollisionsCount\u001b[0m = mutable.ListBuffer.empty[\u001b[35mLong\u001b[0m]\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mcollisionsCount is already defined as \u001b[33mvalue\u001b[0m \u001b[35mcollisionsCount\u001b[",
      "stdout": "",
      "timestamp": 1660013018
    }
  ]
}