name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operand.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val operandLenMinusTwo\
    \ = operandLen - 2\n        val operandLenMinusThree = operandLen - 3\n      \
    \  val operandLenMinusFour = operandLen - 4\n        val operandLenMinusFive =\
    \ operandLen - 5\n        val operandLenMinusSix = operandLen - 6\n        val\
    \ operandLenMinusSeven = operandLen - 7\n        val operandLenMinusEight = operandLen\
    \ - 8\n        val operandLenMinusNine = operandLen - 9\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val operandLenMinusEleven = operandLen - 11\n   \
    \     val operandLenMinusTwelve = operandLen - 12\n        val operandLenMinusThirteen\
    \ = operandLen - 13\n        val operandLenMinusFourteen = operandLen - 14\n \
    \       val operandLenMinusFifteen = operandLen - 15\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val operandLenMinusSeventeen = operandLen - 17\n\
    \        val operandLenMinusEighteen = operandLen - 18\n        val operandLenMinusNineteen\
    \ = operandLen - 19\n        val operandLenMinusTwenty = operandLen - 20\n   \
    \     val operandLenMinusThirty = operandLen - 30\n        val operandLenMinusFourty\
    \ = operandLen - 40\n        val operandLenMinusFifty = operandLen - 50\n    \
    \    val operandLenMinusSixty = operandLen - 60\n        val operandLenMinusSeventy\
    \ = operandLen - 70\n        val operandLenMinusEighty = operandLen - 80\n   \
    \     val operandLenMinusNinety = operandLen - 90\n        val operandLenMinusEleventy\
    \ = operandLen - 100\n        val operandLenMinusTwelvety = operandLen - 110\n\
    \        val operandLenMinusThirtyty = operandLen - 120\n        val operandLenMinusFourtyty\
    \ = operandLen - 130\n        val operandLenMinusFiftyty = operandLen - 140\n\
    \        val operandLenMinusSixtyty = operandLen - 150\n", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opLen = ops.size\n        val opArray = ops.toArray\n\
    \        val operandArray = operand.toArray\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48", "        val ops = op.map(x => x.toLowerCase)\n\
    \        val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n\
    \        val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n\
    \        val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n\
    \        ", "        val opList = op.mkString(\"+\")\n        val opList = opList.split(\"\
    \\\\+\").map(_.trim).toList\n        val opList = opList.filter(_.nonEmpty)\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandList =\
    \ operandList.split(\"\\\\+\").map(_.trim).toList\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operand", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val operatorList\
    \ = opList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"+\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operand", "        val ops\
    \ = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"*\")\n        val opIndex2 = ops.indexOf(\"/\"\
    )\n        val opIndex3 = ops.indexOf(\"**\")\n        val opIndex4 = ops.indexOf(\"\
    //\")\n        val opIndex5 = ops.indexOf(\"+\")\n        val opIndex6 = ops.indexOf(\"\
    -\")\n        val opIndex7 = ops.indexOf(\"**\")\n        val opIndex8 = ops.indexOf(\"\
    //\")\n        val opIndex9 = ops.indexOf(\"*\")\n        val opIndex10 = ops.indexOf(\"\
    /\")\n        val opIndex11 = ops.indexOf(\"+\")\n        val opIndex12 = ops.indexOf(\"\
    -\")\n        val opIndex13 = ops.indexOf(\"*\")\n        val opIndex14 = ops.indexOf(\"\
    /\")\n        val opIndex15 = ops.indexOf(\"**\")\n        val opIndex16 = ops.indexOf(\"\
    //\")\n        val opIndex17 = ops.indexOf(\"*\")\n        val opIndex18 = ops.indexOf(\"\
    /\")\n        val opIndex19 = ops.indexOf(\"**\")\n        val opIndex20 = ops.indexOf(\"\
    //\")\n        val opIndex21 = ops.indexOf(\"*\")\n        val opIndex22 = ops.indexOf(\"\
    /\")\n        val opIndex23 = ops.indexOf(\"**\")\n        val opIndex24 = ops.indexOf(\"\
    //\")\n        val opIndex25 = ops.indexOf(\"*\")\n        val opIndex26 = ops.indexOf(\"\
    /\")\n        val opIndex27 = ops.indexOf(\"**\")\n        val opIndex28 = ops.indexOf(\"\
    //\")\n        val opIndex29 = ops.indexOf(\"*\")\n        val opIndex30 = ops.indexOf(\"\
    /\")\n        val opIndex31 = ops.indexOf(\"**\")\n        val opIndex32 = ops.indexOf(\"\
    //\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    /\")\n        val opIndex35 = ops.indexOf(\"**\")\n        val opIndex36 = ops.indexOf(\"\
    //\")\n        val opIndex37 = ops.indexOf(\"*\")\n        val opIndex38 = ops.indexOf(\"\
    /\")\n        val opIndex39 = ops.indexOf(\"**\")\n        val opIndex40 = ops.indexOf(\"\
    //\")\n        val opIndex41 = ops.indexOf(\"*\")\n        val opIndex42 = ops.indexOf(\"\
    /\")\n        val opIndex4", "        val ops = op.map(x => x.toChar)\n      \
    \  val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n    \
    \    val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n  \
    \      val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n",
  "        val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val ops = op.mkString(\"+\")\n        val opList = ops.split(\"\\\\+\"\
    )\n        val operands = operand.mkString(\"+\")\n        val operandList = operands.split(\"\
    \\\\+\")\n        val opListLength = opList.length\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operand", "        val ops\
    \ = op.map(_.toUpperCase)\n        val opSet = ops.toSet\n        val opLen =\
    \ ops.length\n        val opSetLen = opSet.size\n        val operandLen = operand.length\n\
    \        val operandSetLen = operandSet.size\n        val opSetLenMinusOne = opSetLen\
    \ - 1\n        val operandSetLenMinusOne = operandSetLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opSetLenMinusOne\
    \ = opSetLen - 1\n        val operandSetLenMinusOne = operandSetLen - 1\n    \
    \    val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n", "        val\
    \ opList = op.map(x => x.toChar)\n        val operandList = operand.map(x => x.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operand", "        val ops = op.map(_.toUpperCase)\n  \
    \      val opList = ops.toList\n        val opLen = opList.size\n        val operandList\
    \ = operand.toList\n        val operandLen = operandList.size\n        val op1\
    \ = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n    \
    \    val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op51 = opList(", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLen = operandList.size\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne =\
    \ operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operand",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(operandList.head) { (acc, x)\
    \ =>\n            val op = opList.head\n            val operand = operandList.tail\n\
    \            val opIndex = opList.indexOf(op)\n            val operandIndex =\
    \ operandList.indexOf(x)\n            val opLength = opList.length\n         \
    \   val operandLength = operandList.length - 1\n            val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                val operand = operandList.drop(operandIndex)\n\
    \                val opLength = opList.length\n                val operandLength\
    \ = operandList.length - 1\n                val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                    val operand = operandList.drop(operandIndex)\n\
    \                    val opLength = opList.length\n                    val operandLength\
    \ = operandList.length - 1\n                    val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                        val operand = operandList.drop(operandIndex)\n\
    \                        val opLength = opList.length\n                      \
    \  val operandLength = operandList.length - 1\n                        val opResult\
    \ = opList.drop(opIndex).foldLeft(acc) { (acc, op) =>\n                      \
    \      val operand = operandList.drop(operandIndex)\n                        \
    \    val opLength = opList.length\n                            val operandLength\
    \ = operandList.length - 1\n                            val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                val operand = operandList.drop(operandIndex)\n\
    \                                val opLength = opList.length\n              \
    \                  val operandLength = operandList.length - 1\n              \
    \                  val opResult = opList.drop(opIndex).foldLeft(acc) { (acc, op)\
    \ =>\n                                    val operand = operandList.drop(operandIndex)\n\
    \                                    val opLength = opList.length\n          \
    \                          val operandLength = operandList.length - 1\n      \
    \                              val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                        val operand = operandList.drop(operandIndex)\n\
    \                                        val opLength = opList.length\n      \
    \                                  val operandLength = operandList.length - 1\n\
    \                                        val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                            val operand = operandList.drop(operandIndex)\n\
    \                                            val opLength = opList.length\n  \
    \                                          val operandLength = ", "        val\
    \ opList = op.map(x => x.toChar).toList\n        val operandList = operand.map(x\
    \ => x.toLong).toList\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length - 1\n        val opArray = Array.ofDim[Char](opLength)\n\
    \        val operandArray = Array.ofDim[Long](operandLength)\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var result = 0\n        while(i\
    \ < opLength) {\n            opArray(i) = opList(i)\n            i += 1\n    \
    \    }\n        while(j < operandLength) {\n            operandArray(j) = operandList(j)\n\
    \            j += 1\n        }\n        while(i < opLength) {\n            while(j\
    \ < operandLength) {\n                while(k <= j) {\n                    if(opArray(i)\
    \ == operandArray(k)) {\n                        result += (operandArray(k) *\
    \ operandArray(j))\n                        k += 1\n                    }\n  \
    \                  k += 1\n                }\n                j += 1\n       \
    \     }\n            i += 1\n        }\n        result", "        val opList =\
    \ op.map(_.toLowerCase)\n        val opLen = opList.length\n        val operandList\
    \ = operand.map(_.toLong)\n        val operandLen = operandList.length\n     \
    \   val opMap = new mutable.HashMap[String, Long]()\n        val operandMap =\
    \ new mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]", "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOne", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opLength = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        ", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val opLength = ops.size\n\
    \        val operandLength = operands.size\n        val result = operands.head\n\
    \        val op1 = operands.tail.head\n        val op2 = operands.tail.tail.head\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = ops.indexOf(\"+\")\n        val op2Index = ops.indexOf(\"-\")\n \
    \       val op1Index2 = ops.indexOf(\"*\")\n        val op2Index2 = ops.indexOf(\"\
    /\")\n        val op1Index3 = ops.indexOf(\"//\")\n        val op2Index3 = ops.indexOf(\"\
    **\")\n        val op1Index4 = ops.indexOf(\"%\")\n        val op2Index4 = ops.indexOf(\"\
    %%\")\n        val op1Index5 = ops.indexOf(\"&\")\n        val op2Index5 = ops.indexOf(\"\
    |\")\n        val op1Index6 = ops.indexOf(\"^\")\n        val op2Index6 = ops.indexOf(\"\
    <<\")\n        val op1Index7 = ops.indexOf(\">>\")\n        val op2Index7 = ops.indexOf(\"\
    >>>\")\n        val op1Index8 = ops.indexOf(\"==\")\n        val op2Index8 = ops.indexOf(\"\
    !=\")\n        val op1Index9 = ops.indexOf(\"<\")\n        val op2Index9 = ops.indexOf(\"\
    >\")\n        val op1Index10 = ops.indexOf(\"<=\")\n        val op2Index10 = ops.indexOf(\"\
    >=\")\n        val op1Index11 = ops.indexOf(\"!<\")\n        val op2Index11 =\
    \ ops.indexOf(\"!>\")\n        val op1Index12 = ops.indexOf(\"!<=\")\n       \
    \ val op2Index12 = ops.indexOf(\"!>\")\n        val op1Index13 = ops.indexOf(\"\
    &&\")\n        val op2Index13 = ops.indexOf(\"||\")\n        val op1Index14 =\
    \ ops.indexOf(\"??\")\n        val op2Index14 = ops.indexOf(\"???\")\n       \
    \ val op1Index15 = ops.indexOf(\"????\")\n        val op2Index15 = ops.indexOf(\"\
    ?????\")\n        val op1Index16 = ops.indexOf(\"??????\")\n        val op2Index16\
    \ = ops.indexOf(\"???????\")\n        val op1Index17 = ops.indexOf(\"????????\"\
    )\n        val op2Index17 = ops.indexOf(\"?????????\")\n        val op1Index",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opArray = opList.map(_.toChar)\n        val operandArray =\
    \ operandList.map(_.toLong)\n        val opArrayLength = opArray.length\n    \
    \    val operandArrayLength = operandArray.length\n        val opArrayLength =\
    \ opArrayLength\n        val operandArrayLength = operandArrayLength\n       \
    \ val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = ",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMapKeys = opList.map(x\
    \ => x.toUpperCase)\n        val operandMapKeys = operandList.map(x => x.toUpperCase)\n\
    \        val opMapValues = opList.map(x => x.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(x => x.toLong)\n        val opMapKeySet = opMapKeys.toSet\n\
    \        val operandMapKeySet = operandMapKeys.toSet\n        val opMapValueSet\
    \ = opMapValues.toSet\n        val operandMapValueSet = operandMapValues.toSet\n\
    \        val opMapKeysLength = opMapKeySet.size\n        val operandMapKeysLength\
    \ = operandMapKeySet.size\n        val opMapValuesLength = opMapValueSet.size\n\
    \        val operandMapValuesLength = operandMapValueSet.size\n        val opMapKeysSet\
    \ = opMapKeySet.toSet\n        val operandMapKeysSet = operandMapKeySet.toSet\n\
    \        val opMapValuesSet = opMapValueSet.toSet\n        val operandMapValuesSet\
    \ = operandMapValueSet.toSet\n        val opMapKeysLength = opMapKeysSet.size\n\
    \        val operandMapKeysLength = operandMapKeysSet.size\n        val opMapValuesLength\
    \ = opMapValuesSet.size\n        val operandMapValuesLength = operandMapValuesSet.size\n\
    \        val opMapKeysSet = opMapKeysSet.toSet\n        val operandMapKeysSet\
    \ = operandMapKeysSet.toSet\n        val opMapValuesSet = opMapValuesSet.toSet\n\
    \        val operandMapValuesSet = operandMapValuesSet.toSet\n        val opMapKeysLength\
    \ = opMapKeysSet.size\n        val operandMapKeysLength = operandMapKeysSet.size\n\
    \        val opMapValuesLength = opMapValuesSet.size\n        val operandMapValuesLength\
    \ = operandMapValuesSet.size\n        val opMapKeysSet = opMapKeysSet.toSet\n\
    \        val operandMapKeysSet = operandMapKeysSet.toSet\n        val opMapValuesSet\
    \ = opMapValuesSet.toSet\n        val operandMapValuesSet = operand", "      \
    \  val ops = op.map(x => x.toChar).mkString\n        val opList = ops.split(\"\
    \\\\+\")\n        val opListLength = opList.length\n        val operandLength\
    \ = operand.length - 1\n        val operandList = operand.map(x => x.toLong)\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength\n        val operandListLength = operandListLength\n        val\
    \ opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandListLength\n\
    \        val opListLength = opListLength\n        val operandListLength = operandList",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opArray = opList.map(_.toInt)\n        val operandArray = operandList.map(_.toInt)\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArrayLength\n        val\
    \ operandArrayLength = operandArrayLength\n        val opArrayLength = opArrayLength\n\
    \        val operandArrayLength = operandArrayLength\n        val opArrayLength\
    \ = opArrayLength\n        val operandArrayLength = operandArrayLength\n     \
    \   val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = ",
  "        val opList = op.asInstanceOf[List[String]]\n        val operandList = operand.asInstanceOf[List[Long]]\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneInt = opLenMinusOne.toInt\n        val operandLenMinusOneInt\
    \ = operandLenMinusOne.toInt\n        val opLenMinusOneLong = opLenMinusOne.toLong\n\
    \        val operandLenMinusOneLong = operandLenMinusOne.toLong\n        val opLenMinusOneDouble\
    \ = opLenMinusOne.toDouble\n        val operandLenMinusOneDouble = operandLenMinusOne.toDouble\n\
    \        val opLenMinusOneFloat = opLenMinusOne.toFloat\n        val operandLenMinusOneFloat\
    \ = operandLenMinusOne.toFloat\n        val opLenMinusOneInt = opLenMinusOne.toInt\n\
    \        val operandLenMinusOneInt = operandLenMinusOne.toInt\n        val opLenMinusOneLong\
    \ = opLenMinusOne.toLong\n        val operandLenMinusOneLong = operandLenMinusOne.toLong\n\
    \        val opLenMinusOneDouble = opLenMinusOne.toDouble\n        val operandLenMinusOneDouble\
    \ = operandLenMinusOne.toDouble\n        val opLenMinusOneFloat = opLenMinusOne.toFloat\n\
    \        val operandLenMinusOneFloat = operandLenMinusOne.toFloat\n        val\
    \ opLenMinusOneInt = opLenMinusOne.toInt\n        val operandLenMinusOneInt =\
    \ operandLenMinusOne.toInt\n        val opLenMinusOneLong = opLenMinusOne.toLong\n\
    \        val operandLenMinusOneLong = operandLenMinusOne.toLong\n        val opLenMinusOneDouble\
    \ = opLenMinusOne.toDouble\n        val operandLenMinusOneDouble = operandLenMinusOne.toDouble\n\
    \        val opLenMinusOneFloat = opLenMinusOne.toFloat\n        val operandLenMinusOneFloat\
    \ = operandLenMinusOne.toFloat\n        val opLenMinusOneInt = opLenMinusOne.toInt\n\
    \        val operandLenMinusOneInt = operandLenMinusOne.toInt\n        ", "  \
    \      val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val opListArray = opList.split(\"\\\\+\").map(_.toLong)\n      \
    \  val operandListArray = operandList.split(\"\\\\+\").map(_.toLong)\n       \
    \ val opListLength = opListArray.length\n        val operandListLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandListArray.length\n        val opListArrayLength\
    \ = opListArray.length\n        val operandListArrayLength = operandListArray.length\n\
    \        val opListArrayLength = opListArray.length\n        val operandListArrayLength\
    \ = operandListArray.length\n        val opListArrayLength = opListArray.length\n\
    \        val operandListArrayLength = operandList", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opIndex = 0\n\
    \        val operandIndex = 0\n        while(opIndex < opLength && operandIndex\
    \ < operandLength) {\n            val op = opList(opIndex)\n            val operand\
    \ = operandList(operandIndex)\n            val opValue = opMap.get(op)\n     \
    \       val operandValue = operandMap.get(op)\n            if(opValue == null)\
    \ {\n                opMap.put(op, operandValue)\n            } else {\n     \
    \           operandMap.put(op, operandValue)\n            }\n            val operandNext\
    \ = operandList(operandIndex + 1)\n            val opNext = opList(opIndex + 1)\n\
    \            val opResult = opValue + operandValue\n            val operandNextResult\
    \ = operandNext + opValue\n            val operandNextNext = operandNext + operandNext\n\
    \            val operandNextNextResult = operandNextNext + opValue\n         \
    \   val opResultResult = opValue + operandNextResult\n            val operandNextNextResult\
    \ = operandNextNext + operandNextResult\n            val operandNextNextNext =\
    \ operandNextNext + operandNextNext\n            val operandNextNextNextResult\
    \ = operandNextNextNext + opValue\n            val opResultResultResult = opValue\
    \ + operandNextNextResult\n            val operandNextNextNextResult = operandNextNextNext\
    \ + operandNextNextResult\n            val operandNextNextNextNext = operandNextNextNext\
    \ + operandNextNextNext\n            val operandNextNextNextNextResult = operandNextNextNextNext\
    \ + opValue\n            val opResultResultResult = opValue + operandNextNextNextResult\n\
    \            val operandNextNextNextNextResult = operandNextNextNextNext + operandNextNextNextResult\n\
    \            val operandNextNextNextNextNext = operandNextNextNextNext + operandNextNextNextNextResult\n\
    \            val operandNextNextNextNextNextResult = operandNextNextNextNextNext\
    \ + opValue\n            val opResultResultResultResult = opValue + operandNextNextNextNextResult\n\
    \            val operandNextNextNextNextNextResult = operandNextNextNextNextNext\
    \ + operandNextNextNextNextResult\n            val operandNextNextNextNextNextNext\
    \ = operandNextNextNextNextNextNext + operandNextNextNextNext", "        val opList\
    \ = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList.head\n\
    \        val op1 = opList[opIndex]\n        val op2 = opList[opIndex + 1]\n  \
    \      val op3 = opList[opIndex + 2]\n        val op4 = opList[opIndex + 3]\n\
    \        val op5 = opList[opIndex + 4]\n        val op6 = opList[opIndex + 5]\n\
    \        val op7 = opList[opIndex + 6]\n        val op8 = opList[opIndex + 7]\n\
    \        val op9 = opList[opIndex + 8]\n        val op10 = opList[opIndex + 9]\n\
    \        val op11 = opList[opIndex + 10]\n        val op12 = opList[opIndex +\
    \ 11]\n        val op13 = opList[opIndex + 12]\n        val op14 = opList[opIndex\
    \ + 13]\n        val op15 = opList[opIndex + 14]\n        val op16 = opList[opIndex\
    \ + 15]\n        val op17 = opList[opIndex + 16]\n        val op18 = opList[opIndex\
    \ + 17]\n        val op19 = opList[opIndex + 18]\n        val op20 = opList[opIndex\
    \ + 19]\n        val op21 = opList[opIndex + 20]\n        val op22 = opList[opIndex\
    \ + 21]\n        val op23 = opList[opIndex + 22]\n        val op24 = opList[opIndex\
    \ + 23]\n        val op25 = opList[opIndex + 24]\n        val op26 = opList[opIndex\
    \ + 25]\n        val op27 = opList[opIndex + 26]\n        val op28 = opList[opIndex\
    \ + 27]\n        val op29 = opList[opIndex + 28]\n        val op30 = opList[opIndex\
    \ + 29]\n        val op31 = opList[opIndex + 30]\n        val op32 = opList[opIndex\
    \ + 31]\n        val op33 = opList[opIndex + 32]\n        val op34 = opList[opIndex\
    \ + 33]\n        val op35 = opList[opIndex + 34]\n        val op36 = opList[opIndex\
    \ + 35]\n        val op37 = opList[opIndex + 36", "        val opList = op.mkString(\"\
    +\")\n        val opListLen = opList.size\n        val operandList = operand.mkString(\"\
    +\")\n        val operandListLen = operandList.size\n        val ops = opList.split(\"\
    \\\\+\")\n        val opLen = ops.size\n        val operands = operandList.split(\"\
    \\\\+\")\n        val operandLen = operands.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val result2 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Long]()\n        val result3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val result4 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val result5 = new mutable.HashMap[String, Long]()\n        val opMap6 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val result6 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Long]()\n        val result7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val result8 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val result9 = new mutable.HashMap[String, Long]()\n        val opMap10 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val result10 = new mutable.HashMap[String, Long]()\n", "  \
    \      val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"*\")\n        val opIndex2 = ops.indexOf(\"//\"\
    )\n        val opIndex3 = ops.indexOf(\"**\")\n        val opIndex4 = ops.indexOf(\"\
    +\")\n        val opIndex5 = ops.indexOf(\"-\")\n        val opIndex6 = ops.indexOf(\"\
    /\")\n        val opIndex7 = ops.indexOf(\"**\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"+\")\n        val opIndex10 = ops.indexOf(\"\
    -\")\n        val opIndex11 = ops.indexOf(\"/\")\n        val opIndex12 = ops.indexOf(\"\
    **\")\n        val opIndex13 = ops.indexOf(\"*\")\n        val opIndex14 = ops.indexOf(\"\
    +\")\n        val opIndex15 = ops.indexOf(\"-\")\n        val opIndex16 = ops.indexOf(\"\
    /\")\n        val opIndex17 = ops.indexOf(\"**\")\n        val opIndex18 = ops.indexOf(\"\
    *\")\n        val opIndex19 = ops.indexOf(\"+\")\n        val opIndex20 = ops.indexOf(\"\
    -\")\n        val opIndex21 = ops.indexOf(\"/\")\n        val opIndex22 = ops.indexOf(\"\
    **\")\n        val opIndex23 = ops.indexOf(\"*\")\n        val opIndex24 = ops.indexOf(\"\
    +\")\n        val opIndex25 = ops.indexOf(\"-\")\n        val opIndex26 = ops.indexOf(\"\
    /\")\n        val opIndex27 = ops.indexOf(\"**\")\n        val opIndex28 = ops.indexOf(\"\
    *\")\n        val opIndex29 = ops.indexOf(\"+\")\n        val opIndex30 = ops.indexOf(\"\
    -\")\n        val opIndex31 = ops.indexOf(\"/\")\n        val opIndex32 = ops.indexOf(\"\
    **\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    +\")\n        val opIndex35 = ops.indexOf(\"-\")\n        val opIndex36 = ops.indexOf(\"\
    /\")\n        val opIndex37 = ops.indexOf(\"**\")\n        val opIndex38 = ops.indexOf(\"\
    *\")\n        val opIndex39 = ops.indexOf(\"+\")\n        val opIndex40 = ops.indexOf(\"\
    -\")\n        val opIndex41 = ops.indexOf(\"/\")\n        val opIndex42 = ops.indexOf(\"\
    **\")\n        val opIndex43 = ops.indexOf(\"*\")\n        val ", "        val\
    \ opList = op.map(_.toLowerCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(0L) { (acc, i) => \n        \
    \    val opIndex = opList.indexOf(i)\n            val opVal = opIndex.toLong\n\
    \            val opVal2 = opIndex.toLong + 1\n            val opVal3 = opIndex.toLong\
    \ + 2\n            val opVal4 = opIndex.toLong + 3\n            val opVal5 = opIndex.toLong\
    \ + 4\n            val opVal6 = opIndex.toLong + 5\n            val opVal7 = opIndex.toLong\
    \ + 6\n            val opVal8 = opIndex.toLong + 7\n            val opVal9 = opIndex.toLong\
    \ + 8\n            val opVal10 = opIndex.toLong + 9\n            val opVal11 =\
    \ opIndex.toLong + 10\n            val opVal12 = opIndex.toLong + 11\n       \
    \     val opVal13 = opIndex.toLong + 12\n            val opVal14 = opIndex.toLong\
    \ + 13\n            val opVal15 = opIndex.toLong + 14\n            val opVal16\
    \ = opIndex.toLong + 15\n            val opVal17 = opIndex.toLong + 16\n     \
    \       val opVal18 = opIndex.toLong + 17\n            val opVal19 = opIndex.toLong\
    \ + 18\n            val opVal20 = opIndex.toLong + 19\n            val opVal21\
    \ = opIndex.toLong + 20\n            val opVal22 = opIndex.toLong + 21\n     \
    \       val opVal23 = opIndex.toLong + 22\n            val opVal24 = opIndex.toLong\
    \ + 23\n            val opVal25 = opIndex.toLong + 24\n            val opVal26\
    \ = opIndex.toLong + 25\n            val opVal27 = opIndex.toLong + 26\n     \
    \       val opVal28 = opIndex.toLong + 27\n            val opVal29 = opIndex.toLong\
    \ + 28\n            val opVal30 = opIndex.toLong + 29\n            val opVal31\
    \ = opIndex.toLong + 30\n            val opVal32 = opIndex.toLong + 31\n     \
    \       val opVal33 = opIndex.toLong + 32\n            val opVal34 = opIndex.toLong\
    \ + 33\n            val opVal35 = opIndex.toLong + 34\n            val opVal36\
    \ = op", "        val ops = op.map(x => x.toChar)\n        val op1 = ops.head\n\
    \        val op2 = ops.last\n        val operand1 = operand.head\n        val\
    \ operand2 = operand.last\n        val op1Int = op1.toInt\n        val op2Int\
    \ = op2.toInt\n        val operand1Int = operand1.toInt\n        val operand2Int\
    \ = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n\
    \        val operand1Int = operand1.toInt\n        val operand2Int = operand2.toInt\n\
    \        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int\
    \ = operand1.toInt\n        val operand2Int = operand2.toInt\n        val op1Int\
    \ = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n\
    \        val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n  \
    \      val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n    \
    \    val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n      \
    \  val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n        val\
    \ operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int\
    \ = op2.toInt\n        val operand1Int = operand1.toInt\n        val operand2Int\
    \ = operand2.toInt\n        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n\
    \        val operand1Int = operand1.toInt\n        val operand2Int = operand2.toInt\n\
    \        val op1Int = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int\
    \ = operand1.toInt\n        val operand2Int = operand2.toInt\n        val op1Int\
    \ = op1.toInt\n        val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n\
    \        val operand2Int = operand2.toInt\n        val op1Int = op1.toInt\n  \
    \      val op2Int = op2.toInt\n        val operand1Int = operand", "        val\
    \ ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val result = operandArray(0)\n        val op1 = opArray(0)\n        val op2\
    \ = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n \
    \       val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48",
  "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n    \
    \    val operands = operand.toList\n        val operandsLength = operands.length\n\
    \        val opListLength = opList.length\n        val opLength = opListLength\
    \ - 1\n        val operandsLength = operandsLength - 1\n        val result = operands.foldLeft(0)((acc,\
    \ i) => {\n            val opIndex = ops.indexOf(i.head)\n            val opValue\
    \ = ops(opIndex)\n            val operandIndex = operands.indexOf(i)\n       \
    \     val operandValue = operands(operandIndex)\n            val opValueInt =\
    \ opValue.toInt\n            val operandValueInt = operandValue.toInt\n      \
    \      val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val ", "        val opList = op.map(x => x.toLowerCase)\n\
    \        val operandList = operand.map(x => x.toLong)\n        val opLength =\
    \ opList.length\n        val operandLength = operandList.length - 1\n        val\
    \ opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new mutable.HashMap[Long,\
    \ Long]()\n        val result = new mutable.HashMap[String, Long]()\n        val\
    \ opIndex = 0\n        val operandIndex = 0\n        val opValue = 0\n       \
    \ val operandValue = 0\n        while (operandIndex < operandLength) {\n     \
    \       opValue = opList(opIndex)\n            operandValue = operandList(operandIndex)\n\
    \            if (opMap.contains(opValue)) {\n                opMap(opValue) =\
    \ opMap(opValue) + operandValue\n            } else {\n                opMap.put(opValue,\
    \ operandValue)\n            }\n            operandIndex += 1\n        }\n   \
    \     operandIndex = 0\n        while (operandIndex < operandLength) {\n     \
    \       operandValue = operandList(operandIndex)\n            if (operandMap.contains(operandValue))\
    \ {\n                operandMap(operandValue) = operandMap(operandValue) + opMap(opValue)\n\
    \            } else {\n                operandMap.put(operandValue, opMap(opValue))\n\
    \            }\n            operandIndex += 1\n        }\n        operandIndex\
    \ = 0\n        while (operandIndex < operandLength) {\n            operandValue\
    \ = operandList(operandIndex)\n            if (operandMap.contains(operandValue))\
    \ {\n                operandMap(operandValue) = operandMap(operandValue) + opMap(opValue)\n\
    \            } else {\n                operandMap.put(operandValue, opMap(opValue))\n\
    \            }\n            operandIndex += 1\n        }\n        operandIndex\
    \ = 0\n        while (operandIndex < operandLength) {\n            operandValue\
    \ = operandList(operandIndex)\n            if (operandMap.contains(operandValue))\
    \ {\n                operandMap(operandValue) = operandMap(operandValue) + opMap(opValue)\n\
    \            } else {\n                operandMap.put(operandValue, opMap(opValue))\n\
    \            }\n            operandIndex += 1\n        }\n        operandIndex\
    \ = 0\n        while (operandIndex < operandLength) {\n            operandValue\
    \ = operandList(operandIndex)\n            if (operandMap.contains(operandValue))\
    \ {\n                operandMap(operandValue) = operandMap(operandValue) + opMap(opValue)\n\
    \            } else {\n                operandMap.put(operandValue, opMap(opValue))\n\
    \            }\n            operandIndex += 1\n        }\n        operandIndex\
    \ = 0\n        while (operandIndex < operandLength) {\n            operandValue\
    \ = operandList(operandIndex)\n            if (operandMap.contains(operandValue))\
    \ {\n                operandMap(operandValue) = operandMap(operandValue) + opMap(opValue)\n\
    \            } else {\n                operandMap.put(operandValue, opMap(opValue))\n\
    \            }\n            operandIndex += 1\n", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLength\
    \ = opList.size\n        val operandLength = operandList.size\n        val opMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap = new mutable.HashMap[String,\
    \ Long]()\n        val result = new mutable.HashMap[String, Long]()\n        val\
    \ opMapKeys = opMap.keySet\n        val operandMapKeys = operandMap.keySet\n \
    \       val opMapValues = opMapKeys.map(_.toLong)\n        val operandMapValues\
    \ = operandMapKeys.map(_.toLong)\n        val opMapKeysLength = opMapKeys.size\n\
    \        val operandMapKeysLength = operandMapKeys.size\n        val opMapValuesLength\
    \ = opMapValues.size\n        val operandMapValuesLength = operandMapValues.size\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValuesLength = opMapValuesLength\n\
    \        val operandMapValuesLength = operandMapValuesLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValuesLength = opMapValuesLength\n        val operandMapValuesLength\
    \ = operandMapValuesLength\n        val opMapKeysLength = opMapKeysLength\n  \
    \      val operandMapKeysLength = operandMapKeysLength\n        val opMapValuesLength\
    \ = opMapValuesLength\n        val operandMapValuesLength = operandMapValuesLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValuesLength = opMapValuesLength\n\
    \        val operandMapValuesLength = operandMapValuesLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValuesLength = opMapValuesLength\n        val operandMapValuesLength\
    \ = operandMapValuesLength\n        val opMapKeysLength = opMapKeysLength\n  \
    \      val operandMapKeysLength = operandMapKeysLength\n        val opMapValuesLength\
    \ = opMapValuesLength\n        val operandMapValuesLength = operandMapValuesLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValuesLength = opMapValuesLength\n\
    \        val operandMapValuesLength = operandMap", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne = opLenMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operand(0)\n\
    \        val op1 = opList(opIndex)\n        val op2 = opList(opIndex + 1)\n  \
    \      val op3 = opList(opIndex + 2)\n        val op4 = opList(opIndex + 3)\n\
    \        val op5 = opList(opIndex + 4)\n        val op6 = opList(opIndex + 5)\n\
    \        val op7 = opList(opIndex + 6)\n        val op8 = opList(opIndex + 7)\n\
    \        val op9 = opList(opIndex + 8)\n        val op10 = opList(opIndex + 9)\n\
    \        val op11 = opList(opIndex + 10)\n        val op12 = opList(opIndex +\
    \ 11)\n        val op13 = opList(opIndex + 12)\n        val op14 = opList(opIndex\
    \ + 13)\n        val op15 = opList(opIndex + 14)\n        val op16 = opList(opIndex\
    \ + 15)\n        val op17 = opList(opIndex + 16)\n        val op18 = opList(opIndex\
    \ + 17)\n        val op19 = opList(opIndex + 18)\n        val op20 = opList(opIndex\
    \ + 19)\n        val op21 = opList(opIndex + 20)\n        val op22 = opList(opIndex\
    \ + 21)\n        val op23 = opList(opIndex + 22)\n        val op24 = opList(opIndex\
    \ + 23)\n        val op25 = opList(opIndex + 24)\n        val op26 = opList(opIndex\
    \ + 25)\n        val op27 = opList(opIndex + 26)\n        val op28 = opList(opIndex\
    \ + 27)\n        val op29 = opList(opIndex + 28)\n        val op30 = opList(opIndex\
    \ + 29)\n        val op31 = opList(opIndex + 30)\n        val op32 = opList(opIndex\
    \ + 31)\n        val op33 = opList(opIndex + 32)\n        val op34 = opList(opIndex\
    \ + 33)\n        val op35 = opList(opIndex + 34)\n        val op36 = opList(opIndex\
    \ + 35)\n        val op37 = opList(opIndex + 36)\n        val op38 = opList(opIndex\
    \ + 37)\n        ", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length\n        val opArray = opList.map(_.toChar)\n        val\
    \ operandArray = operandList.map(_.toChar)\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        val opArrayPos = opArray.length\
    \ - operandArrayLen + 1\n        val operandArrayPos = operandArray.length - opArrayLen\
    \ + 1\n        val opArrayPos = opArray.length - 1\n        val operandArrayPos\
    \ = operandArray.length - 1\n        val opArrayPos = opArray.length - 1\n   \
    \     val operandArrayPos = operandArray.length - 1\n        val opArrayPos =\
    \ opArray.length - 1\n        val operandArrayPos = operandArray.length - 1\n\
    \        val opArrayPos = opArray.length - 1\n        val operandArrayPos = operandArray.length\
    \ - 1\n        val opArrayPos = opArray.length - 1\n        val operandArrayPos\
    \ = operandArray.length - 1\n        val opArrayPos = opArray.length - 1\n   \
    \     val operandArrayPos = operandArray.length - 1\n        val opArrayPos =\
    \ opArray.length - 1\n        val operandArrayPos = operandArray.length - 1\n\
    \        val opArrayPos = opArray.length - 1\n        val operandArrayPos = operandArray.length\
    \ - 1\n        val opArrayPos = opArray.length - 1\n        val operandArrayPos\
    \ = operandArray.length - 1\n        val opArrayPos = opArray.length - 1\n   \
    \     val operandArrayPos = operandArray.length - 1\n        val opArrayPos =\
    \ opArray.length - 1\n        val operandArrayPos = operandArray.length - 1\n\
    \        val opArrayPos = opArray.length - 1\n        val operandArrayPos = operandArray.length\
    \ - 1\n        val opArrayPos = opArray.length - 1\n        val operandArrayPos\
    \ = operandArray.length - 1\n        val opArrayPos = opArray.length - 1\n   \
    \     val operandArrayPos = operandArray.length - 1\n        val opArrayPos =\
    \ opArray.length - 1\n        val operandArrayPos = operandArray.length - 1\n\
    \        val opArrayPos = opArray.length - 1\n        val operandArrayPos = operandArray.length\
    \ - 1\n        val opArrayPos = opArray.length - 1\n        val operandArrayPos\
    \ = operandArray.length - 1\n        val opArrayPos = opArray.length - 1\n   \
    \     val operandArrayPos = operandArray.length - 1\n        val opArrayPos =\
    \ opArray.length - 1\n        val operandArrayPos = operandArray.length - 1\n\
    \        val opArrayPos = opArray.length - 1\n        val operandArrayPos = operandArray.length\
    \ - 1", "        val ops = op.map(x => x.toUpperCase)\n        val opLen = ops.size\n\
    \        val operandLen = operand.size\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        val opArrayIndex =\
    \ Array.range(0, opArrayLen)\n        val operandArrayIndex = Array.range(0, operandArrayLen)\n\
    \        val operandArrayIndexLen = operandArrayIndex.length\n        val operandArrayIndexIndex\
    \ = 0\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val operandArrayIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length\n        val operandArrayIndexIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexIndex = 0\n        val operandArrayIndexIndexIndexLen\
    \ = operandArrayIndexIndexIndex.length", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val operators = ops.toSet\n\
    \        val length = operands.length\n        val stack = mutable.Stack[Long]()\n\
    \        val result = operands.head\n        val operator = ops.head\n       \
    \ operands.tail.foreach(x => {\n            val newStack = mutable.Stack[Long]()\n\
    \            stack.foreach(y => newStack.push(y))\n            val newResult =\
    \ operators.contains(operator) ? operator(result, x) : operator(stack.pop(), x)\n\
    \            stack.push(newResult)\n        })\n        stack.pop", "        val\
    \ ops = op.map(x => x.toUpperCase)\n        val opArray = ops.toArray\n      \
    \  val operandArray = operand.toArray\n        val opLength = opArray.length\n\
    \        val operandLength = operandArray.length\n        val opArrayLength =\
    \ opArray.length\n        val operandArrayLength = operandArray.length\n     \
    \   val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operand", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMapKeys = opList.map(_.toUpperCase)\n        val operandMapKeys\
    \ = operandList.map(_.toLong)\n        val opMapValues = opList.map(_.toLong)\n\
    \        val operandMapValues = operandList.map(_.toLong)\n        val opMapKeysLength\
    \ = opMapKeys.length\n        val operandMapKeysLength = operandMapKeys.length\
    \ - 1\n        val opMapValuesLength = opMapValues.length\n        val operandMapValuesLength\
    \ = operandMapValues.length - 1\n        val opMapKeysLength = opMapKeysLength\n\
    \        val operandMapKeysLength = operandMapKeysLength\n        val opMapValuesLength\
    \ = opMapValuesLength\n        val operandMapValuesLength = operandMapValuesLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValuesLength = opMapValuesLength\n\
    \        val operandMapValuesLength = operandMapValuesLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValuesLength = opMapValuesLength\n        val operandMapValuesLength\
    \ = operandMapValuesLength\n        val opMapKeysLength = opMapKeysLength\n  \
    \      val operandMapKeysLength = operandMapKeysLength\n        val opMapValuesLength\
    \ = opMapValuesLength\n        val operandMapValuesLength = operandMapValuesLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValuesLength = opMapValuesLength\n\
    \        val operandMapValuesLength = operandMapValuesLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValuesLength = opMapValuesLength\n        val operandMapValuesLength\
    \ = operandMapValuesLength\n        val opMapKeysLength = opMapKeysLength\n  \
    \      val operandMapKeysLength = operandMapKeysLength\n        val opMapValuesLength\
    \ = opMapValuesLength\n", "        val opList = op.map(x => x.toChar)\n      \
    \  val operandList = operand.map(x => x.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opArray = Array.ofDim[String](opLength)\n\
    \        val operandArray = Array.ofDim[Long](operandLength)\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var result = 0\n        while\
    \ (i < opLength) {\n            opArray(i) = opList(i)\n            i += 1\n \
    \       }\n        while (j < operandLength) {\n            operandArray(j) =\
    \ operandList(j)\n            j += 1\n        }\n        while (j < operandLength)\
    \ {\n            operandArray(j) = operandList(j)\n            j += 1\n      \
    \  }\n        val opArrayLength = opArray.length\n        val operandArrayLength\
    \ = operandArray.length\n        val opArrayLength = opArrayLength - 1\n     \
    \   val operandArrayLength = operandArrayLength - 1\n        val opArrayLength\
    \ = opArrayLength\n        val operandArrayLength = operandArrayLength\n     \
    \   val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n",
  "        val ops = op.map(x => x.toChar)\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val length = opArray.length\n\
    \        val length = operandArray.length - 1\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49)", "        val\
    \ ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n        val operands\
    \ = operand.map(_.toLong)\n        val operandLen = operands.size\n        val\
    \ opMap = {\n            val opMap = new mutable.HashMap[String, Long]()\n   \
    \         ops.foreach(op => {\n                opMap += op -> (opMap.getOrElse(op,\
    \ 0L) + 1)\n            })\n            opMap\n        }\n        val operandMap\
    \ = {\n            val operandMap = new mutable.HashMap[String, Long]()\n    \
    \        operands.foreach(op => {\n                operandMap += op -> (operandMap.getOrElse(op,\
    \ 0L) + 1)\n            })\n            operandMap\n        }\n        val opKeys\
    \ = opMap.keys\n        val operandKeys = operandMap.keys\n        val opKeySet\
    \ = opKeys.toSet\n        val operandKeySet = operandKeys.toSet\n        val opKeysLen\
    \ = opKeySet.size\n        val operandKeysLen = operandKeySet.size\n        val\
    \ opKeysSet = opKeySet.subsetOf(opKeysLen)\n        val operandKeysSet = operandKeySet.subsetOf(operandKeysLen)\n\
    \        val opKeysSetLen = opKeysSet.size\n        val operandKeysSetLen = operandKeysSet.size\n\
    \        val opKeysSetSub = opKeysSet.subsetOf(opKeysSetLen)\n        val operandKeysSetSub\
    \ = operandKeysSet.subsetOf(operandKeysSetLen)\n        val opKeysSetSubLen =\
    \ opKeysSetSub.size\n        val operandKeysSetSubLen = operandKeysSetSub.size\n\
    \        val opKeysSetSubSub = opKeysSetSub.subsetOf(opKeysSetSubLen)\n      \
    \  val operandKeysSetSubSub = operandKeysSetSub.subsetOf(operandKeysSetSubLen)\n\
    \        val opKeysSetSubSubLen = opKeysSetSubSub.size\n        val operandKeysSetSubSubLen\
    \ = operandKeysSetSubSub.size\n        val opKeysSetSubSubSub = opKeysSetSubSub.subsetOf(opKeysSetSubSubLen)\n\
    \        val operandKeysSetSubSubSub = operandKeysSetSubSub.subsetOf(operandKeysSetSubSubLen)\n\
    \        val opKeysSetSubSubSubLen = opKeysSetSubSubSub.size\n        val operandKey",
  "        val ops = op.map(_.toLowerCase)\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n        val op", "  \
    \      val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n       \
    \ val operandLen = operand.size\n        val opList = ops.toList\n        val\
    \ operandList = operand.toList\n        val opLenMinusOne = opLen - 1\n      \
    \  val operandLenMinusOne = operandLen - 1\n        val opListLen = opList.size\n\
    \        val operandListLen = operandList.size\n        val opListLenMinusOne\
    \ = opListLen - 1\n        val operandListLenMinusOne = operandListLen - 1\n \
    \       val opListLenMinusOneOpLen = opListLen - opLenMinusOne\n        val operandListLenMinusOneOpLen\
    \ = operandListLen - operandLenMinusOne\n        val opListLenMinusOneOpLenMinusOne\
    \ = opListLen - opLenMinusOne - opLenMinusOne\n        val operandListLenMinusOneOpLenMinusOne\
    \ = operandListLen - operandLenMinusOne - operandLenMinusOne\n        val opListLenMinusOneOpLenMinusOneOpLen\
    \ = opListLen - opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen\n        val\
    \ operandListLenMinusOneOpLenMinusOneOpLen = operandListLen - operandLenMinusOne\
    \ - operandLenMinusOne - operandLenMinusOneOpLen\n        val opListLenMinusOneOpLenMinusOneOpLenMinusOne\
    \ = opListLen - opLenMinusOne - opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen\
    \ - opLenMinusOneOpLenMinusOne\n        val operandListLenMinusOneOpLenMinusOneOpLenMinusOne\
    \ = operandListLen - operandLenMinusOne - operandLenMinusOne - operandLenMinusOneOpLen\
    \ - operandLenMinusOneOpLenMinusOne\n        val opListLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ = opListLen - opLenMinusOne - opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen\
    \ - opLenMinusOneOpLenMinusOneOpLen\n        val operandListLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ = operandListLen - operandLenMinusOne - operandLenMinusOne - operand", "   \
    \     val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = 0\n\
    \        while (operandIndex < operandLength) {\n            val opValue = opList(opIndex)\n\
    \            val operandValue = operandList(operandIndex)\n            val opValueInt\
    \ = opValue match {\n                case \"+\" => operandValue + operandValue\n\
    \                case \"-\" => operandValue - operandValue\n                case\
    \ \"*\" => operandValue * operandValue\n                case \"/\" => operandValue\
    \ / operandValue\n                case \"//\" => operandValue / operandValue\n\
    \                case \"**\" => operandValue ** operandValue\n            }\n\
    \            result += opValueInt\n            operandIndex += 1\n        }\n\
    \        result", "        val opList = op.map(_.toUpperCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val operatorList = opList.dropRight(1)\n  \
    \      val operandList = operandList.drop(1)\n        val operator = operatorList.mkString\n\
    \        val operand = operandList.mkString\n        val expression = s\"$operator\
    \ $operand\"\n        val result = scala.math.eval(expression)\n        result",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toChar)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayIndex = 0\n        val operandArrayIndex = 0\n        val\
    \ opArrayIndex2 = opArrayIndex + opArrayLen\n        val operandArrayIndex2 =\
    \ operandArrayIndex + operandArrayLen\n        val opArrayIndex3 = opArrayIndex2\
    \ + opArrayLen\n        val operandArrayIndex3 = operandArrayIndex2 + operandArrayLen\n\
    \        val opArrayIndex4 = opArrayIndex3 + opArrayLen\n        val operandArrayIndex4\
    \ = operandArrayIndex3 + operandArrayLen\n        val opArrayIndex5 = opArrayIndex4\
    \ + opArrayLen\n        val operandArrayIndex5 = operandArrayIndex4 + operandArrayLen\n\
    \        val opArrayIndex6 = opArrayIndex5 + opArrayLen\n        val operandArrayIndex6\
    \ = operandArrayIndex5 + operandArrayLen\n        val opArrayIndex7 = opArrayIndex6\
    \ + opArrayLen\n        val operandArrayIndex7 = operandArrayIndex6 + operandArrayLen\n\
    \        val opArrayIndex8 = opArrayIndex7 + opArrayLen\n        val operandArrayIndex8\
    \ = operandArrayIndex7 + operandArrayLen\n        val opArrayIndex9 = opArrayIndex8\
    \ + opArrayLen\n        val operandArrayIndex9 = operandArrayIndex8 + operandArrayLen\n\
    \        val opArrayIndex10 = opArrayIndex9 + opArrayLen\n        val operandArrayIndex10\
    \ = operandArrayIndex9 + operandArrayLen\n        val opArrayIndex11 = opArrayIndex10\
    \ + opArrayLen\n        val operandArrayIndex11 = operandArrayIndex10 + operandArrayLen\n\
    \        val opArrayIndex12 = opArrayIndex11 + opArrayLen\n        val operandArrayIndex12\
    \ = operandArrayIndex11 + operandArrayLen\n        val opArrayIndex13 = opArrayIndex12\
    \ + opArrayLen\n        val operandArrayIndex13 = operandArrayIndex12 + operandArrayLen\n\
    \        val opArrayIndex14 = opArrayIndex13 + opArrayLen\n        val operandArrayIndex14\
    \ = operandArrayIndex13 + operandArrayLen\n        val opArrayIndex15 = opArrayIndex14\
    \ + opArrayLen\n        val operandArrayIndex15 = operandArray", "        val\
    \ opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"+\"\
    )\n        val ops = opList.split(\"\\\\+\")\n        val operands = operandList.split(\"\
    \\\\+\")\n        val opLen = ops.size\n        val opLen2 = operands.size - 1\n\
    \        val opLen3 = opLen - opLen2\n        val opLen4 = opLen - opLen2\n  \
    \      val opLen5 = opLen - opLen2\n        val opLen6 = opLen - opLen2\n    \
    \    val opLen7 = opLen - opLen2\n        val opLen8 = opLen - opLen2\n      \
    \  val opLen9 = opLen - opLen2\n        val opLen10 = opLen - opLen2\n       \
    \ val opLen11 = opLen - opLen2\n        val opLen12 = opLen - opLen2\n       \
    \ val opLen13 = opLen - opLen2\n        val opLen14 = opLen - opLen2\n       \
    \ val opLen15 = opLen - opLen2\n        val opLen16 = opLen - opLen2\n       \
    \ val opLen17 = opLen - opLen2\n        val opLen18 = opLen - opLen2\n       \
    \ val opLen19 = opLen - opLen2\n        val opLen20 = opLen - opLen2\n       \
    \ val opLen21 = opLen - opLen2\n        val opLen22 = opLen - opLen2\n       \
    \ val opLen23 = opLen - opLen2\n        val opLen24 = opLen - opLen2\n       \
    \ val opLen25 = opLen - opLen2\n        val opLen26 = opLen - opLen2\n       \
    \ val opLen27 = opLen - opLen2\n        val opLen28 = opLen - opLen2\n       \
    \ val opLen29 = opLen - opLen2\n        val opLen30 = opLen - opLen2\n       \
    \ val opLen31 = opLen - opLen2\n        val opLen32 = opLen - opLen2\n       \
    \ val opLen33 = opLen - opLen2\n        val opLen34 = opLen - opLen2\n       \
    \ val opLen35 = opLen - opLen2\n        val opLen36 = opLen - opLen2\n       \
    \ val opLen37 = opLen - opLen2\n        val opLen38 = opLen - op", "        val\
    \ opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        var result = 0L\n\
    \        while(opIndex < opLength && operandIndex < operandLength) {\n       \
    \     val op = opList(opIndex)\n            val operand = operandList(operandIndex)\n\
    \            val opResult = opIndex(operand)\n            val operandResult =\
    \ operandIndex(op)\n            result += opResult\n            result += operandResult\n\
    \            opIndex += 1\n            operandIndex += 1\n        }\n        result",
  "        val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n\
    \        val operandList = operand.map(_.toLong)\n        val operandLen = operandList.length\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        var result = 0L\n        for(\
    \ i <- 0 until operandLen ) {\n            val op = opList(i)\n            val\
    \ operand = operandList(i)\n            val operandStr = operand.toString\n  \
    \          val opStr = op.toString\n            opMap.put(opStr, operand)\n  \
    \          operandMap.put(operandStr, operand)\n        }\n        for( i <- 0\
    \ until opLen ) {\n            val op = opList(i)\n            val operand = operandMap.get(opStr)\n\
    \            val operandStr = operand.toString\n            val opStr = op.toString\n\
    \            result += opMap.get(opStr) * operand\n        }\n        result",
  "        val ops = op.map(x => x.toChar)\n        val operands = operand.map(x =>\
    \ x.toLong)\n        val opLen = ops.size\n        val operandLen = operands.size\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val op1 = ops(opIndex - 1)\n\
    \        val op2 = ops(opIndex + 1)\n        val op3 = ops(opIndex + 2)\n    \
    \    val op4 = ops(opIndex + 3)\n        val op5 = ops(opIndex + 4)\n        val\
    \ op6 = ops(opIndex + 5)\n        val op7 = ops(opIndex + 6)\n        val op8\
    \ = ops(opIndex + 7)\n        val op9 = ops(opIndex + 8)\n        val op10 = ops(opIndex\
    \ + 9)\n        val op11 = ops(opIndex + 10)\n        val op12 = ops(opIndex +\
    \ 11)\n        val op13 = ops(opIndex + 12)\n        val op14 = ops(opIndex +\
    \ 13)\n        val op15 = ops(opIndex + 14)\n        val op16 = ops(opIndex +\
    \ 15)\n        val op17 = ops(opIndex + 16)\n        val op18 = ops(opIndex +\
    \ 17)\n        val op19 = ops(opIndex + 18)\n        val op20 = ops(opIndex +\
    \ 19)\n        val op21 = ops(opIndex + 20)\n        val op22 = ops(opIndex +\
    \ 21)\n        val op23 = ops(opIndex + 22)\n        val op24 = ops(opIndex +\
    \ 23)\n        val op25 = ops(opIndex + 24)\n        val op26 = ops(opIndex +\
    \ 25)\n        val op27 = ops(opIndex + 26)\n        val op28 = ops(opIndex +\
    \ 27)\n        val op29 = ops(opIndex + 28)\n        val op30 = ops(opIndex +\
    \ 29)\n        val op31 = ops(opIndex + 30)\n        val op32 = ops(opIndex +\
    \ 31)\n        val op33 = ops(opIndex + 32)\n        val op34 = ops(opIndex +\
    \ 33)\n        val op35 = ops(opIndex + 34)\n        val op36 = ops(opIndex +\
    \ 35)\n        val op37 = ops(opIndex + 36)\n        val op38 = ops(opIndex +\
    \ 37)\n        val op39 = op", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val operatorList\
    \ = opList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"+\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operand", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLen = operandList.size\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOnePlusOne = opLen - 1 + 1\n        val operandLenMinusOnePlusOne\
    \ = operandLen - 1 + 1\n        val opLenMinusOnePlusOnePlusOne = opLen - 1 +\
    \ 1 + 1\n        val operandLenMinusOnePlusOnePlusOne = operandLen - 1 + 1 + 1\n\
    \        val opLenMinusOnePlusOnePlusOnePlusOne = opLen - 1 + 1 + 1 + 1\n    \
    \    val operandLenMinusOnePlusOnePlusOnePlusOne = operandLen - 1 + 1 + 1 + 1\n\
    \        val opLenMinusOnePlusOnePlusOnePlusOnePlusOne = opLen - 1 + 1 + 1 + 1\
    \ + 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOne = operandLen\
    \ - 1 + 1 + 1 + 1 + 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        val\
    \ operandLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = operandLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\
    \ + 1\n        val opLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne\
    \ = opLen - 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\
    \ + 1 + 1\n        val operandLenMinusOnePlusOne", "        val ops = op.mkString(\"\
    +\")\n        val opArray = ops.split(\"\\\\+\").map(_.toLong)\n        val operandArray\
    \ = operand.map(_.toLong)\n        val opLength = opArray.length\n        val\
    \ operandLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length\n\
    \        val operandArrayLength = operandArray.length\n        val opArrayLength\
    \ = opArray.length\n        val operandArrayLength = operandArray.length\n   \
    \     val opArrayLength = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val opArrayLength = opArray.length\n        val operandArrayLength =\
    \ operandArray.length\n        val opArrayLength = opArray.length\n        val\
    \ operandArrayLength = operandArray.length\n        val opArrayLength = opArray.length",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opStack = new mutable.Stack[String]()\n        val operandStack = new mutable.Stack[Long]()\n\
    \        val opStackLen = 0\n        val operandStackLen = 0\n        val opStackLenMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenMap = new\
    \ mutable.HashMap[String, Long]()\n        val opStackLenStack = new mutable.Stack[Long]()\n\
    \        val operandStackLenStack = new mutable.Stack[Long]()\n        val opStackLenStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackMap =\
    \ new mutable.HashMap[String, Long]()\n        val opStackLenStackStack = new\
    \ mutable.Stack[Long]()\n        val operandStackLenStackStack = new mutable.Stack[Long]()\n\
    \        val opStackLenStackStackMap = new mutable.HashMap[String, Long]()\n \
    \       val operandStackLenStackStackMap = new mutable.HashMap[String, Long]()\n\
    \        val opStackLenStackStackStack = new mutable.Stack[Long]()\n        val\
    \ operandStackLenStackStackStack = new mutable.Stack[Long]()\n        val opStackLenStackStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val opStackLenStackStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val opStackLenStackStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val opStackLenStackStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val opStackLenStackStackStackMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandStackLenStackStackMap\
    \ = new mutable.Hash", "        val opList = op.map(_.toLowerCase).toList\n  \
    \      val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val opIndex2 = opList.indexOf(\"*\")\n        val opIndex3 = opList.indexOf(\"\
    /\")\n        val opIndex4 = opList.indexOf(\"**\")\n        val opIndex5 = opList.indexOf(\"\
    //\")\n        val opIndex6 = opList.indexOf(\"%\")\n        val opIndex7 = opList.indexOf(\"\
    *\")\n        val opIndex8 = opList.indexOf(\"+\")\n        val opIndex9 = opList.indexOf(\"\
    -\")\n        val opIndex10 = opList.indexOf(\"//\")\n        val opIndex11 =\
    \ opList.indexOf(\"%\")\n        val opIndex12 = opList.indexOf(\"**\")\n    \
    \    val opIndex13 = opList.indexOf(\"*\")\n        val opIndex14 = opList.indexOf(\"\
    +\")\n        val opIndex15 = opList.indexOf(\"-\")\n        val opIndex16 = opList.indexOf(\"\
    //\")\n        val opIndex17 = opList.indexOf(\"%\")\n        val opIndex18 =\
    \ opList.indexOf(\"**\")\n        val opIndex19 = opList.indexOf(\"*\")\n    \
    \    val opIndex20 = opList.indexOf(\"+\")\n        val opIndex21 = opList.indexOf(\"\
    -\")\n        val opIndex22 = opList.indexOf(\"//\")\n        val opIndex23 =\
    \ opList.indexOf(\"%\")\n        val opIndex24 = opList.indexOf(\"**\")\n    \
    \    val opIndex25 = opList.indexOf(\"*\")\n        val opIndex26 = opList.indexOf(\"\
    +\")\n        val opIndex27 = opList.indexOf(\"-\")\n        val opIndex28 = opList.indexOf(\"\
    //\")\n        val opIndex29 = opList.indexOf(\"%\")\n        val opIndex30 =\
    \ opList.indexOf(\"**\")\n        val opIndex31 = opList.indexOf(\"*\")\n    \
    \    val opIndex32 = opList.indexOf(\"+\")\n        val opIndex33 = opList.indexOf(\"\
    -\")\n        val opIndex34 = opList.indexOf(\"//\")\n        val opIndex35 =\
    \ opList.indexOf(\"%\")\n        val opIndex36 = opList.indexOf(\"**\")\n    \
    \    val opIndex37 = opList.indexOf(\"*\")\n        val opIndex38 = opList.indexOf(\"\
    +\")\n        val opIndex39 = opList.indexOf", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val opLen = ops.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operands.size\
    \ - 1\n        val opLenMinusOneMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne = opLenMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    -\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    %\")\n        val opIndex7 = ops.indexOf(\"&\")\n        val opIndex8 = ops.indexOf(\"\
    |\")\n        val opIndex9 = ops.indexOf(\"^\")\n        val opIndex10 = ops.indexOf(\"\
    ~\")\n        val opIndex11 = ops.indexOf(\"<<\")\n        val opIndex12 = ops.indexOf(\"\
    >>\")\n        val opIndex13 = ops.indexOf(\"==\")\n        val opIndex14 = ops.indexOf(\"\
    !=\")\n        val opIndex15 = ops.indexOf(\"<\")\n        val opIndex16 = ops.indexOf(\"\
    >\")\n        val opIndex17 = ops.indexOf(\"<=\")\n        val opIndex18 = ops.indexOf(\"\
    >=\")\n        val opIndex19 = ops.indexOf(\"~=\")\n        val opIndex20 = ops.indexOf(\"\
    &&\")\n        val opIndex21 = ops.indexOf(\"||\")\n        val opIndex22 = ops.indexOf(\"\
    ??\")\n        val opIndex23 = ops.indexOf(\"??=\")\n        val opIndex24 = ops.indexOf(\"\
    ???\")\n        val opIndex25 = ops.indexOf(\"????\")\n        val opIndex26 =\
    \ ops.indexOf(\"????=\")\n        val opIndex27 = ops.indexOf(\"?????\")\n   \
    \     val opIndex28 = ops.indexOf(\"??????\")\n        val opIndex29 = ops.indexOf(\"\
    ??????=\")\n        val opIndex30 = ops.indexOf(\"???????\")\n        val opIndex31\
    \ = ops.indexOf(\"????????\")\n        val opIndex32 = ops.indexOf(\"????????=\"\
    )\n        val opIndex33 = ops.indexOf(\"?????????\")\n        val opIndex34 =\
    \ ops.indexOf(\"??????????\")\n        val opIndex35 = ops.indexOf(\"??????????=\"\
    )\n        val opIndex36 = ops.indexOf(\"???????????\")\n        val opIndex37\
    \ = ops.indexOf(\"????????????\")\n        val opIndex38 = ops.indexOf(\"????????????=\"\
    )", "        val ops = op.map(x => x.toUpperCase)\n        val op1 = ops.head\n\
    \        val op2 = ops.last\n        val op1Len = ops.length\n        val op2Len\
    \ = operand.length - 1\n        val op1Len = ops.length\n        val op2Len =\
    \ operand.length - 1\n        val op1Len = ops.length\n        val op2Len = operand.length\
    \ - 1\n        val op1Len = ops.length\n        val op2Len = operand.length -\
    \ 1\n        val op1Len = ops.length\n        val op2Len = operand.length - 1\n\
    \        val op1Len = ops.length\n        val op2Len = operand.length - 1\n  \
    \      val op1Len = ops.length\n        val op2Len = operand.length - 1\n    \
    \    val op1Len = ops.length\n        val op2Len = operand.length - 1\n      \
    \  val op1Len = ops.length\n        val op2Len = operand.length - 1\n        val\
    \ op1Len = ops.length\n        val op2Len = operand.length - 1\n        val op1Len\
    \ = ops.length\n        val op2Len = operand.length - 1\n        val op1Len =\
    \ ops.length\n        val op2Len = operand.length - 1\n        val op1Len = ops.length\n\
    \        val op2Len = operand.length - 1\n        val op1Len = ops.length\n  \
    \      val op2Len = operand.length - 1\n        val op1Len = ops.length\n    \
    \    val op2Len = operand.length - 1\n        val op1Len = ops.length\n      \
    \  val op2Len = operand.length - 1\n        val op1Len = ops.length\n        val\
    \ op2Len = operand.length - 1\n        val op1Len = ops.length\n        val op2Len\
    \ = operand.length - 1\n        val op1Len = ops.length\n        val op2Len =\
    \ operand.length - 1\n        val op1Len = ops.length\n        val op2Len = operand.length\
    \ - 1\n        val op1Len = ops.length\n        val op2Len = operand.length -\
    \ 1\n        val op1Len = ops.length\n        val op2Len = operand.length - 1\n\
    \        val op1Len = ops.length\n        val op2Len = operand.length - 1\n  \
    \      val op1Len = ops.length\n        val op2Len = operand.length - 1\n    \
    \    val op1Len = ops.length\n        val op2Len = operand.length - 1\n      \
    \  val op1Len = ops.length\n        ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opIndex = 0\n  \
    \      val operandIndex = 0\n        val result = operandList[operandIndex] *\
    \ operandList[operandIndex + 1]\n        val op1 = opList[opIndex]\n        val\
    \ op2 = opList[opIndex + 1]\n        val op3 = opList[opIndex + 2]\n        val\
    \ op4 = opList[opIndex + 3]\n        val op5 = opList[opIndex + 4]\n        val\
    \ op6 = opList[opIndex + 5]\n        val op7 = opList[opIndex + 6]\n        val\
    \ op8 = opList[opIndex + 7]\n        val op9 = opList[opIndex + 8]\n        val\
    \ op10 = opList[opIndex + 9]\n        val op11 = opList[opIndex + 10]\n      \
    \  val op12 = opList[opIndex + 11]\n        val op13 = opList[opIndex + 12]\n\
    \        val op14 = opList[opIndex + 13]\n        val op15 = opList[opIndex +\
    \ 14]\n        val op16 = opList[opIndex + 15]\n        val op17 = opList[opIndex\
    \ + 16]\n        val op18 = opList[opIndex + 17]\n        val op19 = opList[opIndex\
    \ + 18]\n        val op20 = opList[opIndex + 19]\n        val op21 = opList[opIndex\
    \ + 20]\n        val op22 = opList[opIndex + 21]\n        val op23 = opList[opIndex\
    \ + 22]\n        val op24 = opList[opIndex + 23]\n        val op25 = opList[opIndex\
    \ + 24]\n        val op26 = opList[opIndex + 25]\n        val op27 = opList[opIndex\
    \ + 26]\n        val op28 = opList[opIndex + 27]\n        val op29 = opList[opIndex\
    \ + 28]\n        val op30 = opList[opIndex + 29]\n        val op31 = opList[opIndex\
    \ + 30]\n        val op32 = opList[opIndex + 31]\n        val op33 = opList[opIndex\
    \ + 32]\n        val op34 = opList[opIndex + 33]\n        val op35 = ", "    \
    \    val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toChar)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayArray = opArray.map(_.toCharArray)\n        val operandArrayArray\
    \ = operandArray.map(_.toCharArray)\n        val opArrayArrayLen = opArrayArray.length\n\
    \        val operandArrayArrayLen = operandArrayArray.length\n        val opArrayArrayArray\
    \ = opArrayArray.map(_.toCharArray)\n        val operandArrayArrayArray = operandArrayArray.map(_.toCharArray)\n\
    \        val opArrayArrayArrayLen = opArrayArrayArray.length\n        val operandArrayArrayArrayLen\
    \ = operandArrayArrayArray.length\n        val opArrayArrayArrayArray = opArrayArrayArray.map(_.toCharArray)\n\
    \        val operandArrayArrayArrayArray = operandArrayArrayArray.map(_.toCharArray)\n\
    \        val opArrayArrayArrayArrayLen = opArrayArrayArrayArray.length\n     \
    \   val operandArrayArrayArrayArrayLen = operandArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArray = opArrayArrayArrayArray.map(_.toCharArray)\n\
    \        val operandArrayArrayArrayArrayArray = operandArrayArrayArrayArray.map(_.toCharArray)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArray.map(_.toCharArray)\n\
    \        val operandArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArray.map(_.toCharArray)\n\
    \        val opArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayArrayArrayLen", "        val\
    \ opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toChar)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayArray = opArray.map(_.toChar)\n        val operandArrayArray\
    \ = operandArray.map(_.toChar)\n        val opArrayArrayLen = opArrayArray.length\n\
    \        val operandArrayArrayLen = operandArrayArray.length\n        val opArrayArrayArray\
    \ = opArrayArray.map(_.toChar)\n        val operandArrayArrayArray = operandArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayLen = opArrayArrayArray.length\n        val operandArrayArrayArrayLen\
    \ = operandArrayArrayArray.length\n        val opArrayArrayArrayArray = opArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArray = operandArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayLen = opArrayArrayArrayArray.length\n     \
    \   val operandArrayArrayArrayArrayLen = operandArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArray = opArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArray = operandArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayArrayLen = ", "        val ops\
    \ = op.map(_.toUpperCase)\n        val opArray = ops.toArray\n        val operandArray\
    \ = operand.toArray\n        val opLen = opArray.length\n        val operandLen\
    \ = operandArray.length\n        val result = operandArray(0)\n        val op1\
    \ = opArray(0)\n        val op2 = opArray(1)\n        val op3 = opArray(2)\n \
    \       val op4 = opArray(3)\n        val op5 = opArray(4)\n        val op6 =\
    \ opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n   \
    \     val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11 =\
    \ opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49", "        val\
    \ ops = op.map(x => x.toChar)\n        val opLen = ops.size\n        val operands\
    \ = operand.map(x => x.toLong)\n        val operandLen = operands.size\n     \
    \   val opArray = ops.toArray\n        val operandArray = operands.toArray\n \
    \       val result = new mutable.ArrayList[Long]()\n        val stack = new mutable.Stack[Long]()\n\
    \        val stackLen = stack.size\n        val opStack = new mutable.Stack[String]()\n\
    \        val opStackLen = opStack.size\n        val operandStack = new mutable.Stack[Long]()\n\
    \        val operandStackLen = operandStack.size\n        val opStackArray = opStack.toArray\n\
    \        val operandStackArray = operandStack.toArray\n        val opStackIndex\
    \ = 0\n        val operandStackIndex = 0\n        val opStackIndexLen = opStackIndex.size\n\
    \        val operandStackIndexLen = operandStackIndex.size\n        val opStackIndexArray\
    \ = opStackIndex.toArray\n        val operandStackIndexArray = operandStackIndex.toArray\n\
    \        val opStackIndexLen = opStackIndex.size\n        val operandStackIndexLen\
    \ = operandStackIndex.size\n        val opStackIndexArray = opStackIndex.toArray\n\
    \        val operandStackIndexArray = operandStackIndex.toArray\n        val opStackIndexLen\
    \ = opStackIndex.size\n        val operandStackIndexLen = operandStackIndex.size\n\
    \        val opStackIndexArray = opStackIndex.toArray\n        val operandStackIndexArray\
    \ = operandStackIndex.toArray\n        val opStackIndexLen = opStackIndex.size\n\
    \        val operandStackIndexLen = operandStackIndex.size\n        val opStackIndexArray\
    \ = opStackIndex.toArray\n        val operandStackIndexArray = operandStackIndex.toArray\n\
    \        val opStackIndexLen = opStackIndex.size\n        val operandStackIndexLen\
    \ = operandStackIndex.size\n        val opStackIndexArray = opStackIndex.toArray\n\
    \        val operandStackIndexArray = operandStackIndex.toArray\n        val opStackIndexLen\
    \ = opStackIndex.size\n        val operandStackIndexLen = operandStackIndex.size\n\
    \        val opStackIndexArray = opStackIndex.toArray\n        val operandStackIndexArray\
    \ = operandStackIndex.toArray\n        val opStackIndexLen = opStackIndex.size\n\
    \        val operandStackIndexLen = operandStackIndex.size\n        val opStackIndexArray\
    \ = opStackIndex.toArray", "        val ops = op.map(_.toUpperCase)\n        val\
    \ opList = ops.toList\n        val operandList = operand.toList\n        val opLen\
    \ = opList.size\n        val operandLen = operandList.size\n        val opArray\
    \ = opList.map(_.toInt)\n        val operandArray = operandList.map(_.toInt)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArraySum = opArray.reduce((a, b) => a + b)\n        val operandArraySum\
    \ = operandArray.reduce((a, b) => a + b)\n        val opArrayDiff = opArray.length\
    \ - opArraySum\n        val operandArrayDiff = operandArray.length - operandArraySum\n\
    \        val opArrayMul = opArray.reduce((a, b) => a * b)\n        val operandArrayMul\
    \ = operandArray.reduce((a, b) => a * b)\n        val opArrayDiv = (opArrayLen\
    \ - opArraySum) / opArrayLen\n        val operandArrayDiv = (operandArrayLen -\
    \ operandArraySum) / operandArrayLen\n        val opArrayExp = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArrayExp = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArrayPower = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArrayPower = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArrayExpPower = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArrayExpPower = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArraySumPower = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArraySumPower = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArrayDiffPower = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArrayDiffPower = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArrayMulPower = opArray.reduce((a,\
    \ b) => a * Math.pow(b, opArrayLen))\n        val operandArrayMulPower = operandArray.reduce((a,\
    \ b) => a * Math.pow(b, operandArrayLen))\n        val opArrayDivPower = (opArray",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"&\")\n        val opIndex8 = opList.indexOf(\"\
    |\")\n        val opIndex9 = opList.indexOf(\"^\")\n        val opIndex10 = opList.indexOf(\"\
    ~\")\n        val opIndex11 = opList.indexOf(\"<<\")\n        val opIndex12 =\
    \ opList.indexOf(\">>\")\n        val opIndex13 = opList.indexOf(\"==\")\n   \
    \     val opIndex14 = opList.indexOf(\"!=\")\n        val opIndex15 = opList.indexOf(\"\
    <\")\n        val opIndex16 = opList.indexOf(\">\")\n        val opIndex17 = opList.indexOf(\"\
    <=\")\n        val opIndex18 = opList.indexOf(\">=\")\n        val opIndex19 =\
    \ opList.indexOf(\"!=\")\n        val opIndex20 = opList.indexOf(\"==\")\n   \
    \     val opIndex21 = opList.indexOf(\"!=\")\n        val opIndex22 = opList.indexOf(\"\
    &\")\n        val opIndex23 = opList.indexOf(\"|\")\n        val opIndex24 = opList.indexOf(\"\
    ^\")\n        val opIndex25 = opList.indexOf(\"~\")\n        val opIndex26 = opList.indexOf(\"\
    <<\")\n        val opIndex27 = opList.indexOf(\">>\")\n        val opIndex28 =\
    \ opList.indexOf(\"==\")\n        val opIndex29 = opList.indexOf(\"!=\")\n   \
    \     val opIndex30 = opList.indexOf(\"<\")\n        val opIndex31 = opList.indexOf(\"\
    >\")\n        val opIndex32 = opList.indexOf(\"<<\")\n        val opIndex33 =\
    \ opList.indexOf(\">>\")\n        val opIndex34 = opList.indexOf(\"==\")\n   \
    \     val opIndex35 = opList.indexOf(\"!=\")\n        val opIndex36 = opList.indexOf(\"\
    <\")\n        val opIndex37 = opList.indexOf(\">\")\n        val opIndex38 = opList.indexOf(\"\
    <<\")\n        val ", "        val ops = op.map(_.toUpperCase)\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val length\
    \ = opArray.length\n        val result = operandArray(0)\n        val op1 = opArray(0)\n\
    \        val op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 =\
    \ opArray(3)\n        val op5 = opArray(4)\n        val op6 = opArray(5)\n   \
    \     val op7 = opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n\
    \        val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val op51 = opArray(50)\n", "        val\
    \ opList = op.map(_.toLowerCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        var result = 0L\n        var\
    \ i = 0\n        while (i < opLen) {\n            opMap.put(opList(i), 0L)\n \
    \           operandMap.put(opList(i), operandList(i))\n            i += 1\n  \
    \      }\n        val opKeys = opMap.keys\n        val opValues = opMap.values.toList\n\
    \        val operandKeys = operandMap.keys\n        val operandValues = operandMap.values.toList\n\
    \        val opValueLen = opValues.size\n        val operandValueLen = operandValues.size\n\
    \        val opValueMap = new mutable.HashMap[String, Long]()\n        val operandValueMap\
    \ = new mutable.HashMap[String, Long]()\n        var j = 0\n        while (j <\
    \ opValueLen) {\n            opValueMap.put(opValues(j), 0L)\n            operandValueMap.put(opValues(j),\
    \ operandValues(j))\n            j += 1\n        }\n        val opValueKeys =\
    \ opValueMap.keys\n        val opValueValues = opValueMap.values.toList\n    \
    \    val operandValueKeys = operandValueMap.keys\n        val operandValueValues\
    \ = operandValueMap.values.toList\n        val opValueValueLen = opValueValues.size\n\
    \        val operandValueValueLen = operandValueValues.size\n        val opValueValueMap\
    \ = new mutable.HashMap[String, Long]()\n        val operandValueValueMap = new\
    \ mutable.HashMap[String, Long]()\n        var k = 0\n        while (k <= opValueValueLen)\
    \ {\n            opValueValueMap.put(opValueValues(k), 0L)\n            operandValueValueMap.put(opValueValues(k),\
    \ operandValueValues(k))\n            k += 1\n        }\n        val opValueValueKeys\
    \ = opValueValueMap.keys\n        val opValueValueValues = opValueValueMap.values.toList\n\
    \        val operandValueValueKeys = operandValueValueMap.keys\n        val operandValueValueValues\
    \ = operandValueValueMap.values.toList\n        val opValueValueValueLen = opValueValueValues.size\n\
    \        val operandValueValueValueLen = operandValueValueValues.size\n      \
    \  val opValueValueValueMap = new mutable.HashMap[String, Long]()\n        val\
    \ operandValueValueValueMap = new mutable.Hash", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val operatorList\
    \ = opList.drop(1)\n        val operatorListLength = operatorList.length\n   \
    \     val result = 0L\n        val opIndex = 0\n        val opIndex2 = 0\n   \
    \     val operandIndex = 0\n        val operandIndex2 = 0\n        while (operandIndex\
    \ < operandListLength) {\n            val operandValue = operandList(operandIndex)\n\
    \            val operator = operatorList(opIndex)\n            val operand2 =\
    \ operandList(operandIndex2)\n            val operator2 = operatorList(opIndex2)\n\
    \            val result = operandValue match {\n                case 0 => 0L\n\
    \                case 1 => operandValue\n                case 2 => operandValue\
    \ + operand2\n                case 3 => operandValue - operand2\n            \
    \    case 4 => operandValue * operand2\n                case 5 => operandValue\
    \ / operand2\n                case 6 => operandValue % operand2\n            \
    \    case 7 => operandValue ** operand2\n                case 8 => operandValue\
    \ & operand2\n                case 9 => operandValue | operand2\n            \
    \    case 10 => operandValue ^ operand2\n                case 11 => operandValue\
    \ << operand2\n                case 12 => operandValue >> operand2\n         \
    \       case 13 => operandValue & operand2\n                case 14 => operandValue\
    \ | operand2\n                case 15 => operandValue ^ operand2\n           \
    \     case 16 => operandValue << operand2\n                case 17 => operandValue\
    \ >> operand2\n                case 18 => operandValue & operand2\n          \
    \      case 19 => operandValue | operand2\n                case 20 => operandValue\
    \ ^ operand2\n                case 21 => operandValue << operand2\n          \
    \      case 22 => operandValue >> operand2\n                case 23 => operandValue\
    \ & operand2\n                case 24 => operandValue | operand2\n           \
    \     case 25 => operandValue ^ operand2\n                case 26 => operandValue\
    \ << operand2\n                case 27 => operandValue >> operand2\n         \
    \       case 28 => operandValue & operand2\n                case 29 => operandValue\
    \ | operand2\n                case 30 => operandValue ^ operand2\n           \
    \     case 31 => operandValue << operand2\n                case 32 => operandValue\
    \ >> operand2\n                case 33 => operandValue & operand2\n          \
    \      case 34 => operandValue | operand2\n                case 35 => operandValue\
    \ ^ operand2\n                case 36 => operandValue << operand2\n          \
    \      case 37 => operandValue >> operand2\n                case 38 => operandValue\
    \ & operand2\n                case 39 => operandValue | operand2\n           \
    \     case 40 => operandValue ^ operand2\n", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = {\n    \
    \        val opMap = new mutable.HashMap[String, Long]\n            opList.foreach(op\
    \ => {\n                opMap.put(op, 0L)\n            })\n            opMap\n\
    \        }\n        val operandMap = {\n            val operandMap = new mutable.HashMap[String,\
    \ Long]\n            operandList.foreach(op => {\n                operandMap.put(op,\
    \ 0L)\n            })\n            operandMap\n        }\n        val opMapLen\
    \ = opMap.length\n        val operandMapLen = operandMap.length\n        val opMapKeys\
    \ = opMap.keys.toList\n        val operandMapKeys = operandMap.keys.toList\n \
    \       val opMapValues = opMap.values.toList\n        val operandMapValues =\
    \ operandMap.values.toList\n        val opMapKeysLen = opMapKeys.length\n    \
    \    val operandMapKeysLen = operandMapKeys.length\n        val opMapValuesLen\
    \ = opMapValues.length\n        val operandMapValuesLen = operandMapValues.length\n\
    \        val opMapKeysSet = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n\
    \        val opMapValuesSet = opMapValues.toSet\n        val operandMapValuesSet\
    \ = operandMapValues.toSet\n        val opMapKeysSetLen = opMapKeysSet.length\n\
    \        val operandMapKeysSetLen = operandMapKeysSet.length\n        val opMapValuesSetLen\
    \ = opMapValuesSet.length\n        val operandMapValuesSetLen = operandMapValuesSet.length\n\
    \        val opMapKeysSetSet = opMapKeysSet.toSet\n        val operandMapKeysSetSet\
    \ = operandMapKeysSet.toSet\n        val opMapValuesSetSet = opMapValuesSet.toSet\n\
    \        val operandMapValuesSetSet = operandMapValuesSet.toSet\n        val opMapKeysSetSetLen\
    \ = opMapKeysSetSet.length\n        val operandMapKeysSetSetLen = operandMapKeysSetSet.length\n\
    \        val opMapValuesSetSetLen = opMapValuesSetSet.length\n        val operandMapValuesSetSetLen\
    \ = operandMapValuesSetSet.length\n        val opMapKeysSetSetSet = opMapKeysSetSet.to",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList(0)\n\
    \        while(operandIndex < operandLength) {\n            val op1 = opList(opIndex)\n\
    \            val op2 = opList(opIndex + 1)\n            val op3 = opList(opIndex\
    \ + 2)\n            val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex\
    \ + 4)\n            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37 = opList(opIndex\
    \ + 36)\n            val op38", "        val opList = op.mkString(\"+\")\n   \
    \     val opList2 = op.mkString(\"-\")\n        val opList3 = op.mkString(\"/\"\
    )\n        val opList4 = op.mkString(\"*\")\n        val opList5 = op.mkString(\"\
    **\")\n        val opList6 = op.mkString(\"//\")\n        val opList7 = op.mkString(\"\
    %\")\n        val opList8 = op.mkString(\"&\")\n        val opList9 = op.mkString(\"\
    |\")\n        val opList10 = op.mkString(\"^\")\n        val opList11 = op.mkString(\"\
    ~\")\n        val opList12 = op.mkString(\"==\")\n        val opList13 = op.mkString(\"\
    !=\")\n        val opList14 = op.mkString(\"<\")\n        val opList15 = op.mkString(\"\
    >\")\n        val opList16 = op.mkString(\"<=\")\n        val opList17 = op.mkString(\"\
    >=\")\n        val opList18 = op.mkString(\"!~\")\n        val opList19 = op.mkString(\"\
    &&\")\n        val opList20 = op.mkString(\"||\")\n        val opList21 = op.mkString(\"\
    ==\")\n        val opList22 = op.mkString(\"!=\")\n        val opList23 = op.mkString(\"\
    <\")\n        val opList24 = op.mkString(\">\")\n        val opList25 = op.mkString(\"\
    <=\")\n        val opList26 = op.mkString(\">=\")\n        val opList27 = op.mkString(\"\
    !~\")\n        val opList28 = op.mkString(\"&&\")\n        val opList29 = op.mkString(\"\
    ||\")\n        val opList30 = op.mkString(\"==\")\n        val opList31 = op.mkString(\"\
    !=\")\n        val opList32 = op.mkString(\"<\")\n        val opList33 = op.mkString(\"\
    >\")\n        val opList34 = op.mkString(\"<=\")\n        val opList35 = op.mkString(\"\
    >=\")\n        val opList36 = op.mkString(\"!~\")\n        val opList37 = op.mkString(\"\
    &&\")\n        val opList38 = op.mkString(\"||\")\n        val opList39 = op.mkString(\"\
    ==\")\n        val opList40 = op.mkString(\"!=\")\n        val opList41 = op.mkString(\"\
    <\")\n        val opList42 = op.mkString(\">\")\n        val opList43 = op.mkString(\"\
    <=\")\n        val opList44 = op.mk", "        val opList = op.map(_.toLowerCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.size\n\
    \        val operandLength = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val opIndex2 = opList.indexOf(\"*\")\n        val opIndex3 = opList.indexOf(\"\
    /\")\n        val opIndex4 = opList.indexOf(\"//\")\n        val opIndex5 = opList.indexOf(\"\
    **\")\n        val opIndex6 = opList.indexOf(\"%\")\n        val opIndex7 = opList.indexOf(\"\
    &\")\n        val opIndex8 = opList.indexOf(\"|\")\n        val opIndex9 = opList.indexOf(\"\
    ^\")\n        val opIndex10 = opList.indexOf(\"~\")\n        val opIndex11 = opList.indexOf(\"\
    <<\")\n        val opIndex12 = opList.indexOf(\">>\")\n        val opIndex13 =\
    \ opList.indexOf(\"==\")\n        val opIndex14 = opList.indexOf(\"!=\")\n   \
    \     val opIndex15 = opList.indexOf(\"<\")\n        val opIndex16 = opList.indexOf(\"\
    >\")\n        val opIndex17 = opList.indexOf(\"<=\")\n        val opIndex18 =\
    \ opList.indexOf(\">=\")\n        val opIndex19 = opList.indexOf(\"!=\")\n   \
    \     val opIndex20 = opList.indexOf(\"==\")\n        val opIndex21 = opList.indexOf(\"\
    !=\")\n        val opIndex22 = opList.indexOf(\"&&\")\n        val opIndex23 =\
    \ opList.indexOf(\"||\")\n        val opIndex24 = opList.indexOf(\"??\")\n   \
    \     val opIndex25 = opList.indexOf(\"??=\")\n        val opIndex26 = opList.indexOf(\"\
    ???\")\n        val opIndex27 = opList.indexOf(\"????\")\n        val opIndex28\
    \ = opList.indexOf(\"????=\")\n        val opIndex29 = opList.indexOf(\"?????\"\
    )\n        val opIndex30 = opList.indexOf(\"??????\")\n        val opIndex31 =\
    \ opList.indexOf(\"??????=\")\n        val opIndex32 = opList.indexOf(\"???????\"\
    )\n        val opIndex33 = opList.indexOf(\"????????\")\n        val opIndex34\
    \ = opList.indexOf(\"????????=\")\n        val opIndex35 = opList.indexOf(\"?????????\"\
    )\n        val opIndex36 = opList.indexOf(\"??????????\")\n        val opIndex",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = opList.zip(operandList).map(x => (x._1, x._2)).toMap\n\
    \        val opMapLen = opMap.length\n        val opMapKeys = opMap.keys\n   \
    \     val opMapValues = opMap.values.toList\n        val opMapKeysLen = opMapKeys.length\n\
    \        val opMapValuesLen = opMapValues.length\n        val opMapKeysValues\
    \ = opMapKeys.zip(opMapValues).toMap\n        val opMapKeysValuesLen = opMapKeysValues.length\n\
    \        val opMapKeysValuesValues = opMapKeysValues.map(x => (x._1, x._2)).toMap\n\
    \        val opMapKeysValuesValuesLen = opMapKeysValuesValues.length\n       \
    \ val opMapKeysValuesValuesValues = opMapKeysValuesValues.map(x => (x._1, x._2)).toMap\n\
    \        val opMapKeysValuesValuesValuesLen = opMapKeysValuesValuesValues.length\n\
    \        val opMapKeysValuesValuesValuesValues = opMapKeysValuesValuesValues.map(x\
    \ => (x._1, x._2)).toMap\n        val opMapKeysValuesValuesValuesValuesLen = opMapKeysValuesValuesValuesValues.length\n\
    \        val opMapKeysValuesValuesValuesValuesValues = opMapKeysValuesValuesValuesValues.map(x\
    \ => (x._1, x._2)).toMap\n        val opMapKeysValuesValuesValuesValuesValuesLen\
    \ = opMapKeysValuesValuesValuesValuesValues.length\n        val opMapKeysValuesValuesValuesValuesValuesValues\
    \ = opMapKeysValuesValuesValuesValuesValues.map(x => (x._1, x._2)).toMap\n   \
    \     val opMapKeysValuesValuesValuesValuesValuesValuesLen = opMapKeysValuesValuesValuesValuesValuesValues.length\n\
    \        val opMapKeysValuesValuesValuesValuesValuesValuesValues = opMapKeysValuesValuesValuesValuesValuesValuesValues.map(x\
    \ => (x._1, x._2)).toMap\n        val opMapKeysValuesValuesValuesValuesValuesValuesValuesLen\
    \ = opMapKeysValuesValuesValuesValuesValuesValuesValues.length\n        val opMapKeysValuesValuesValuesValuesValuesValuesValuesValuesValues\
    \ = opMapKeysValuesValuesValuesValues", "        val ops = op.mkString(\"+\")\n\
    \        val ops = ops.split(\"\\\\+\").map(_.trim).filter(_.nonEmpty)\n     \
    \   val operands = operand.mkString(\"+\")\n        val operands = operands.split(\"\
    \\\\+\").map(_.trim).filter(_.nonEmpty)\n        val ops = ops.toList\n      \
    \  val operands = operands.toList\n        val ops = ops.map(_.toInt)\n      \
    \  val operands = operands.map(_.toInt)\n        val ops = ops.zipWithIndex.map(x\
    \ => x._1 + x._2)\n        val operands = operands.zipWithIndex.map(x => x._1\
    \ + x._2)\n        val ops = ops.zipWithIndex.map(x => x._1 * x._2)\n        val\
    \ operands = operands.zipWithIndex.map(x => x._1 * x._2)\n        val ops = ops.zipWithIndex.map(x\
    \ => x._1 / x._2)\n        val operands = operands.zipWithIndex.map(x => x._1\
    \ / x._2)\n        val ops = ops.zipWithIndex.map(x => x._1 ^ x._2)\n        val\
    \ operands = operands.zipWithIndex.map(x => x._1 ^ x._2)\n        val ops = ops.zipWithIndex.map(x\
    \ => x._1 & x._2)\n        val operands = operands.zipWithIndex.map(x => x._1\
    \ & x._2)\n        val ops = ops.zipWithIndex.map(x => x._1 | x._2)\n        val\
    \ operands = operands.zipWithIndex.map(x => x._1 | x._2)\n        val ops = ops.zipWithIndex.map(x\
    \ => x._1 >> x._2)\n        val operands = operands.zipWithIndex.map(x => x._1\
    \ >> x._2)\n        val ops = ops.zipWithIndex.map(x => x._1 & x._2)\n       \
    \ val operands = operands.zipWithIndex.map(x => x._1 & x._2)\n        val ops\
    \ = ops.zipWithIndex.map(x => x._1 ^ x._2)\n        val operands = operands.zipWithIndex.map(x\
    \ => x._1 ^ x._2)\n        val ops = ops.zipWithIndex.map(x => x._1 >> x._2)\n\
    \        val operands = operands.zipWithIndex.map(x => x._1 >> x._2)\n       \
    \ val ops = ops.zipWithIndex.map(", "        val opList = op.map(_.toLowerCase)\n\
    \        val opLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandLen = operandList.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[Long, Long]()\n      \
    \  val result = new mutable.HashMap[String, Long]()\n        val opMapKeys = opList.map(x\
    \ => x.toLong)\n        val operandMapKeys = operandList.map(x => x.toLong)\n\
    \        val opMapValues = opList.map(x => opMap.getOrElse(x, 0L))\n        val\
    \ operandMapValues = operandList.map(x => operandMap.getOrElse(x, 0L))\n     \
    \   val opMapKeysSet = opMapKeys.toSet\n        val operandMapKeysSet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeysNotInSet = opMapKeysSet.diff(opMapKeysSet)\n\
    \        val operandMapKeysNotInSet = operandMapKeysSet.diff(operandMapKeysSet)\n\
    \        val opMapValueNotInSet = opMapValueSet.diff(opMapValueSet)\n        val\
    \ operandMapValueNotInSet = operandMapValueSet.diff(operandMapValueSet)\n    \
    \    val opMapKeysNotInSetNotInSet = opMapKeysNotInSet.diff(opMapKeysNotInSet)\n\
    \        val operandMapKeysNotInSetNotInSet = operandMapKeysNotInSet.diff(operandMapKeysNotInSet)\n\
    \        val opMapValueNotInSetNotInSet = opMapValueNotInSet.diff(opMapValueNotInSet)\n\
    \        val operandMapValueNotInSetNotInSet = operandMapValueNotInSet.diff(operandMapValueNotInSet)\n\
    \        val opMapKeysNotInSetNotInSetNotInSet = opMapKeysNotInSetNotInSet.diff(opMapKeysNotInSetNotInSet)\n\
    \        val operandMapKeysNotInSetNotInSetNotInSet = operandMapKeysNotInSetNotInSet.diff(operandMapKeysNotInSetNotInSet)\n\
    \        val opMapValueNotInSetNotInSetNotInSet = opMapValueNotInSetNotInSet.",
  "        val ops = op.map(x => x.toChar)\n        val operands = operand.map(x =>\
    \ x.toLong)\n        val opLen = ops.size\n        val operandLen = operands.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operands(operandIndex)\
    \ * operands(operandIndex) + operands(operandIndex) * operands(operandIndex +\
    \ 1)\n        while(opIndex < opLen && operandIndex < operandLen - 1) {\n    \
    \        val op = ops(opIndex)\n            val operand = operands(operandIndex)\n\
    \            val nextOp = ops(opIndex + 1)\n            val nextOperand = operands(operandIndex\
    \ + 1)\n            val nextOpIndex = opIndex + 2\n            val nextOperandIndex\
    \ = operandIndex + 2\n            val nextResult = operands(nextOperandIndex)\
    \ * operands(nextOperandIndex) + operands(nextOperandIndex) * operands(nextOperandIndex\
    \ + 1)\n            val nextOpResult = nextOp * nextOperand + nextOp * nextOperand\
    \ + 1\n            val nextOpResult2 = nextOp * nextOperand + nextOp * nextOperand\
    \ + nextOp * nextOperand + 1\n            val nextOpResult3 = nextOp * nextOperand\
    \ + nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand + 1\n \
    \           val nextOpResult4 = nextOp * nextOperand + nextOp * nextOperand +\
    \ nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand + 1\n   \
    \         val nextOpResult5 = nextOp * nextOperand + nextOp * nextOperand + nextOp\
    \ * nextOperand + nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand\
    \ + 1\n            val nextOpResult6 = nextOp * nextOperand + nextOp * nextOperand\
    \ + nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand + nextOp\
    \ * nextOperand + nextOp * nextOperand + 1\n            val nextOpResult7 = nextOp\
    \ * nextOperand + nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand\
    \ + nextOp * nextOperand + nextOp * nextOperand + nextOp * nextOperand + nextOp\
    \ * nextOperand + 1\n            val nextOpResult8 = nextOp * nextOperand + nextOp\
    \ * nextOperand + nextOp * nextOperand + next", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val result2 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Long]()\n        val result3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val result4 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val result5 = new mutable.HashMap[String, Long]()\n        val opMap6 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val result6 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Long]()\n        val result7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val result8 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val result9 = new mutable.HashMap[String, Long]()\n        val opMap10 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val result10 = new mutable.HashMap[String, Long]()\n      \
    \  val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val ", "        val opList =\
    \ op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(operandList.head) {\n       \
    \     (acc, x) => acc match {\n                case op(x) => acc match {\n   \
    \                 case op(x) => acc\n                    case op(x) => acc match\
    \ {\n                        case op(x) => acc\n                        case op(x)\
    \ => acc match {\n                            case op(x) => acc\n            \
    \                case op(x) => acc match {\n                                case\
    \ op(x) => acc\n                                case op(x) => acc match {\n  \
    \                                  case op(x) => acc\n                       \
    \             case op(x) => acc match {\n                                    \
    \    case op(x) => acc\n                                        case op(x) =>\
    \ acc match {\n                                            case op(x) => acc\n\
    \                                            case op(x) => acc match {\n     \
    \                                           case op(x) => acc\n              \
    \                                  case op(x) => acc match {\n               \
    \                                     case op(x) => acc\n                    \
    \                                case op(x) => acc match {\n                 \
    \                                       case op(x) => acc\n                  \
    \                                      case op(x) => acc match {\n           \
    \                                                 case op(x) => acc\n        \
    \                                                    case op(x) => acc match {\n\
    \                                                                case op(x) =>\
    \ acc\n                                                                case op(x)\
    \ => acc match {\n                                                           \
    \         case op(x) => acc\n                                                \
    \                    case op(x) => acc match {\n                             \
    \                                           case op(x) => acc\n              \
    \                                                          case op(x) => acc match\
    \ {\n                                                                        \
    \    case op(x) => acc\n                                                     \
    \                       case op(x) => acc match {\n                          \
    \                                                      case op(x) => acc\n   \
    \                                                                            \
    \ case op(x) => acc match {\n                                                \
    \                                    case op(x) => acc\n                     \
    \                                                               case op(x) =>\
    \ acc match {\n                                                              \
    \                          case op(x) => acc\n                               \
    \                                                         case op(x) => acc match\
    \ {\n                                                                        \
    \                    case op(x) => acc\n                                     \
    \                                                       case op(x) => acc match\
    \ {\n                                                                        \
    \                        case op(x) => acc\n                                 \
    \                                                               case op(x) =>\
    \ acc match {\n                                                              \
    \                                      case op(x) => acc\n                   \
    \                                                                            \
    \     case op(x) => acc match {\n                                            \
    \                                                            case op(x) => acc\n\
    \                                                                            \
    \                            case op(x) => acc match {\n                     \
    \                                                                            \
    \           case op(x) => acc\n                                              \
    \                                                              case op(x) => acc\
    \ match {\n                                                                  \
    \                                              case op(x) => acc\n           \
    \                                                                            \
    \                         case op(x) => acc match {\n                        \
    \                                                                            \
    \                case op(x) => acc\n                                         \
    \                                                                           case\
    \ op(x) => acc match {\n                                                     \
    \                                                                   case op(x)\
    \ => acc\n                                                                   \
    \                                                     case op(x) => acc match\
    \ {\n                                                                        \
    \                                                    case ", "        val opList\
    \ = op.map(x => x.toChar)\n        val operandList = operand.map(x => x.toLong)\n\
    \        val operatorList = opList.take(opList.size - 1).map(x => x.toChar)\n\
    \        val operandList = operandList.take(operandList.size - 1).map(x => x.toLong)\n\
    \        val operator = operatorList.mkString\n        val operand = operandList.mkString\n\
    \        val expression = s\"$operator $operand\"\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").map(_.trim).mkString(\" \")\n        val expression = expression.split(\"\
    \\\\s+\").", "        val ops = op.map(x => x.toChar)\n        val op1 = ops.head\n\
    \        val op2 = ops.last\n        val op1Int = operand(0)\n        val op2Int\
    \ = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)\n\
    \        val op1Int = operand(0)\n        val op2Int = operand(1)\n        val\
    \ op1Int = operand(0)\n        val op2Int = operand(1)\n        val op1Int = operand(0)\n\
    \        val op2Int = operand(1)\n        val op1Int = operand(0)\n        val\
    \ op2Int = operand(1)\n        val op1Int = operand(0)\n        val op2Int = operand(1)",
  "        val ops = op.map(_.toLowerCase)\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val opLength = opArray.length\n\
    \        val operandLength = operandArray.length\n        val opIndex = 0\n  \
    \      val operandIndex = 0\n        val opLength = opArray.length\n        val\
    \ operandLength = operandArray.length\n        val result = operandArray(0)\n\
    \        while(operandIndex < operandLength) {\n            val opValue = opArray(opIndex)\n\
    \            val operandValue = operandArray(operandIndex)\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt\n           \
    \ val operandValueInt = operandValue.toInt\n            val opValueInt = opValue.toInt\n\
    \            val operandValueInt = operandValue.toInt\n            val opValueInt\
    \ = opValue.toInt\n            val operandValueInt = operandValue.toInt\n    \
    \        val opValueInt = opValue.toInt\n            val operandValueInt = operandValue.toInt\n\
    \            val opValueInt = opValue.toInt\n            val operandValueInt =\
    \ operandValue.toInt\n            val opValueInt = opValue.toInt", "        val\
    \ opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(0L) { (acc, i) =>\n         \
    \   val opIndex = opList.indexOf(i)\n            val opVal = opIndex.toLong\n\
    \            val operandVal = operandList(i)\n            val opVal2 = opIndex.toLong\n\
    \            val operandVal2 = operandList(i + 1)\n            val opVal3 = opIndex.toLong\n\
    \            val operandVal3 = operandList(i + 2)\n            val opVal4 = opIndex.toLong\n\
    \            val operandVal4 = operandList(i + 3)\n            val opVal5 = opIndex.toLong\n\
    \            val operandVal5 = operandList(i + 4)\n            val opVal6 = opIndex.toLong\n\
    \            val operandVal6 = operandList(i + 5)\n            val opVal7 = opIndex.toLong\n\
    \            val operandVal7 = operandList(i + 6)\n            val opVal8 = opIndex.toLong\n\
    \            val operandVal8 = operandList(i + 7)\n            val opVal9 = opIndex.toLong\n\
    \            val operandVal9 = operandList(i + 8)\n            val opVal10 = opIndex.toLong\n\
    \            val operandVal10 = operandList(i + 9)\n            val opVal11 =\
    \ opIndex.toLong\n            val operandVal11 = operandList(i + 10)\n       \
    \     val opVal12 = opIndex.toLong\n            val operandVal12 = operandList(i\
    \ + 11)\n            val opVal13 = opIndex.toLong\n            val operandVal13\
    \ = operandList(i + 12)\n            val opVal14 = opIndex.toLong\n          \
    \  val operandVal14 = operandList(i + 13)\n            val opVal15 = opIndex.toLong\n\
    \            val operandVal15 = operandList(i + 14)\n            val opVal16 =\
    \ opIndex.toLong\n            val operandVal16 = operandList(i + 15)\n       \
    \     val opVal17 = opIndex.toLong\n            val operandVal17 = operandList(i\
    \ + 16)\n            val opVal18 = opIndex.toLong\n            val operandVal18\
    \ = operandList(i + 17)\n            val opVal19 = opIndex.toLong\n          \
    \  val operandVal19 = operandList(i + 18)\n            val opVal20 = opIndex.toLong\n\
    \            val operandVal20 = operandList(i + 19)\n            val opVal21 =\
    \ opIndex.toLong\n            ", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val ops = op.map(x => x.toChar)\n        val opArray =\
    \ ops.toArray\n        val operandArray = operand.toArray\n        val length\
    \ = opArray.length\n        val operandLength = operandArray.length\n        val\
    \ result = operandArray(0)\n        val op1 = operandArray(1)\n        val op2\
    \ = operandArray(2)\n        val op3 = operandArray(3)\n        val op4 = operandArray(4)\n\
    \        val op5 = operandArray(5)\n        val op6 = operandArray(6)\n      \
    \  val op7 = operandArray(7)\n        val op8 = operandArray(8)\n        val op9\
    \ = operandArray(9)\n        val op10 = operandArray(10)\n        val op11 = operandArray(11)\n\
    \        val op12 = operandArray(12)\n        val op13 = operandArray(13)\n  \
    \      val op14 = operandArray(14)\n        val op15 = operandArray(15)\n    \
    \    val op16 = operandArray(16)\n        val op17 = operandArray(17)\n      \
    \  val op18 = operandArray(18)\n        val op19 = operandArray(19)\n        val\
    \ op20 = operandArray(20)\n        val op21 = operandArray(21)\n        val op22\
    \ = operandArray(22)\n        val op23 = operandArray(23)\n        val op24 =\
    \ operandArray(24)\n        val op25 = operandArray(25)\n        val op26 = operandArray(26)\n\
    \        val op27 = operandArray(27)\n        val op28 = operandArray(28)\n  \
    \      val op29 = operandArray(29)\n        val op30 = operandArray(30)\n    \
    \    val op31 = operandArray(31)\n        val op32 = operandArray(32)\n      \
    \  val op33 = operandArray(33)\n        val op34 = operandArray(34)\n        val\
    \ op35 = operandArray(35)\n        val op36 = operandArray(36)\n        val op37\
    \ = operandArray(37)\n        val op38 = operandArray(38)\n        val op39 =\
    \ operandArray(39)\n        val op40 = operandArray(40)\n        val op41 = operandArray(41)\n\
    \        val op42 = operandArray(42)\n        val op43 = operandArray(43)\n  \
    \      val op44 = operandArray(44)\n        val op45 = operandArray(45)\n    \
    \    val op46 = operandArray(46)\n        val op47 = operandArray(47)\n      \
    \  val op48 = operandArray(48)\n        val op49 = operandArray(49)\n        val\
    \ op50 = operandArray(50)", "        val ops = op.mkString(\"+\")\n        val\
    \ opList = ops.split(\"\\\\+\").map(_.toLong)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operandList(0)\n\
    \        while (operandIndex < operandLen) {\n            val op1 = opList(opIndex)\n\
    \            val op2 = opList(opIndex + 1)\n            val op3 = opList(opIndex\
    \ + 2)\n            val op4 = opList(opIndex + 3)\n            val op5 = opList(opIndex\
    \ + 4)\n            val op6 = opList(opIndex + 5)\n            val op7 = opList(opIndex\
    \ + 6)\n            val op8 = opList(opIndex + 7)\n            val op9 = opList(opIndex\
    \ + 8)\n            val op10 = opList(opIndex + 9)\n            val op11 = opList(opIndex\
    \ + 10)\n            val op12 = opList(opIndex + 11)\n            val op13 = opList(opIndex\
    \ + 12)\n            val op14 = opList(opIndex + 13)\n            val op15 = opList(opIndex\
    \ + 14)\n            val op16 = opList(opIndex + 15)\n            val op17 = opList(opIndex\
    \ + 16)\n            val op18 = opList(opIndex + 17)\n            val op19 = opList(opIndex\
    \ + 18)\n            val op20 = opList(opIndex + 19)\n            val op21 = opList(opIndex\
    \ + 20)\n            val op22 = opList(opIndex + 21)\n            val op23 = opList(opIndex\
    \ + 22)\n            val op24 = opList(opIndex + 23)\n            val op25 = opList(opIndex\
    \ + 24)\n            val op26 = opList(opIndex + 25)\n            val op27 = opList(opIndex\
    \ + 26)\n            val op28 = opList(opIndex + 27)\n            val op29 = opList(opIndex\
    \ + 28)\n            val op30 = opList(opIndex + 29)\n            val op31 = opList(opIndex\
    \ + 30)\n            val op32 = opList(opIndex + 31)\n            val op33 = opList(opIndex\
    \ + 32)\n            val op34 = opList(opIndex + 33)\n            val op35 = opList(opIndex\
    \ + 34)\n            val op36 = opList(opIndex + 35)\n            val op37", " \
    \       val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n   \
    \     val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandList = operand.toList\n        val operandLen = operandList.size\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opIndex = 0\n  \
    \      val opIndexMinusOne = opIndex - 1\n        val operandIndex = 0\n     \
    \   val operandIndexMinusOne = operandIndex - 1\n        val opLenMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLenMinusOne - 1\n        val opLenMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLenMinusOne - 1\n\
    \        val opLenMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLenMinusOne - 1\n        val opLenMinusOne = opLenMinusOne - 1\n  \
    \      val operandLenMinusOne = operandLenMinusOne - 1\n        val opLenMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLenMinusOne - 1\n\
    \        val opLenMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLenMinusOne - 1\n        val opLenMinusOne = opLenMinusOne - 1\n  \
    \      val operandLenMinusOne = operandLenMinusOne - 1\n        val opLenMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLenMinusOne - 1\n\
    \        val opLenMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLenMinusOne - 1\n        val opLenMinusOne = opLenMinusOne - 1\n  \
    \      val operandLenMinusOne = operandLenMinusOne - 1\n        val opLenMinusOne\
    \ = opLenMinusOne - 1\n        val operandLenMinusOne = operandLenMinusOne - 1\n\
    \        val opLenMinusOne = opLenMinusOne - 1\n        val operandLenMinusOne\
    \ = operandLenMinusOne - 1\n        val opLenMinusOne = opLenMinusOne - 1\n  \
    \      val operandLenMinusOne = operandLenMinusOne - 1\n        val opLenMinusOne\
    \ = opLenMinusOne - 1\n        val ", "        val ops = op.map(_.toLowerCase)\n\
    \        val op1 = ops.head\n        val op2 = ops.last\n        val operand1\
    \ = operand.head\n        val operand2 = operand.last\n        val op1Int = op1.toInt\n\
    \        val op2Int = op2.toInt\n        val operand1Int = operand1.toInt\n  \
    \      val operand2Int = operand2.toInt\n        val op1Int = op1Int.max(0)\n\
    \        val op2Int = op2Int.max(0)\n        val operand1Int = operand1Int.max(0)\n\
    \        val operand2Int = operand2Int.max(0)\n        val op1Int = op1Int.min(9)\n\
    \        val op2Int = op2Int.min(9)\n        val operand1Int = operand1Int.min(9)\n\
    \        val operand2Int = operand2Int.min(9)\n        val op1Int = op1Int.max(9)\n\
    \        val op2Int = op2Int.max(9)\n        val operand1Int = operand1Int.max(9)\n\
    \        val operand2Int = operand2Int.max(9)\n        val op1Int = op1Int.min(9)\n\
    \        val op2Int = op2Int.min(9)\n        val operand1Int = operand1Int.min(9)\n\
    \        val operand2Int = operand2Int.min(9)\n        val op1Int = op1Int.max(9)\n\
    \        val op2Int = op2Int.max(9)\n        val operand1Int = operand1Int.max(9)\n\
    \        val operand2Int = operand2Int.max(9)\n        val op1Int = op1Int.min(9)\n\
    \        val op2Int = op2Int.min(9)\n        val operand1Int = operand1Int.min(9)\n\
    \        val operand2Int = operand2Int.min(9)\n        val op1Int = op1Int.max(9)\n\
    \        val op2Int = op2Int.max(9)\n        val operand1Int = operand1Int.max(9)\n\
    \        val operand2Int = operand2Int.max(9)\n        val op1Int = op1Int.min(9)\n\
    \        val op2Int = op2Int.min(9)\n        val operand1Int = operand1Int.min(9)\n\
    \        val operand2Int = operand2Int.min(9)\n        val op1Int = op1Int.max(9)",
  "        val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n       \
    \ val operands = operand.map(_.toLong)\n        val operandLen = operands.size\n\
    \        val result = operands.foldLeft(0L) { (sum, operand) =>\n            val\
    \ op = ops.head\n            val opVal = operand.asInstanceOf[Int]\n         \
    \   val opVal2 = operand.asInstanceOf[Int]\n            val opVal3 = operand.asInstanceOf[Int]\n\
    \            val opVal4 = operand.asInstanceOf[Int]\n            val opVal5 =\
    \ operand.asInstanceOf[Int]\n            val opVal6 = operand.asInstanceOf[Int]\n\
    \            val opVal7 = operand.asInstanceOf[Int]\n            val opVal8 =\
    \ operand.asInstanceOf[Int]\n            val opVal9 = operand.asInstanceOf[Int]\n\
    \            val opVal10 = operand.asInstanceOf[Int]\n            val opVal11\
    \ = operand.asInstanceOf[Int]\n            val opVal12 = operand.asInstanceOf[Int]\n\
    \            val opVal13 = operand.asInstanceOf[Int]\n            val opVal14\
    \ = operand.asInstanceOf[Int]\n            val opVal15 = operand.asInstanceOf[Int]\n\
    \            val opVal16 = operand.asInstanceOf[Int]\n            val opVal17\
    \ = operand.asInstanceOf[Int]\n            val opVal18 = operand.asInstanceOf[Int]\n\
    \            val opVal19 = operand.asInstanceOf[Int]\n            val opVal20\
    \ = operand.asInstanceOf[Int]\n            val opVal21 = operand.asInstanceOf[Int]\n\
    \            val opVal22 = operand.asInstanceOf[Int]\n            val opVal23\
    \ = operand.asInstanceOf[Int]\n            val opVal24 = operand.asInstanceOf[Int]\n\
    \            val opVal25 = operand.asInstanceOf[Int]\n            val opVal26\
    \ = operand.asInstanceOf[Int]\n            val opVal27 = operand.asInstanceOf[Int]\n\
    \            val opVal28 = operand.asInstanceOf[Int]\n            val opVal29\
    \ = operand.asInstanceOf[Int]\n            val opVal30 = operand.asInstanceOf[Int]\n\
    \            val opVal31 = operand.asInstanceOf", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opArray = Array.ofDim[String](opLen)\n\
    \        val operandArray = Array.ofDim[Long](operandLen)\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayIndex = Array.ofDim[Int](opLen)\n        val operandArrayIndex =\
    \ Array.ofDim[Int](operandLen)\n        val opArrayIndexLen = opArrayIndex.length\n\
    \        val operandArrayIndexLen = operandArrayIndex.length\n        val opArrayIndexIndex\
    \ = Array.ofDim[Int](opLen)\n        val operandArrayIndexIndex = Array.ofDim[Int](operandLen)\n\
    \        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen\
    \ = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex = Array.ofDim[Int](opLen)\n\
    \        val operandArrayIndexIndexIndex = Array.ofDim[Int](operandLen)\n    \
    \    val opArrayIndexIndexIndexLen = opArrayIndexIndexIndex.length\n        val\
    \ operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n      \
    \  val opArrayIndexIndexIndex = Array.ofDim[Int](opLen)\n        val operandArrayIndexIndexIndex\
    \ = Array.ofDim[Int](operandLen)\n        val opArrayIndexIndexIndexLen = opArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = Array.ofDim[Int](opLen)\n        val operandArrayIndexIndexIndex\
    \ = Array.ofDim[Int](operandLen)\n        val opArrayIndexIndexIndexLen = opArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = Array.ofDim[Int](opLen)\n        val operandArrayIndexIndexIndex\
    \ = Array.ofDim[Int](operandLen)\n        val opArrayIndexIndexIndexLen = opArrayIndexIndexIndex.length\n\
    \        val operandArrayIndexIndexIndexLen = operandArrayIndexIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = Array.ofDim[Int](opLen)\n        val operandArrayIndexIndexIndex\
    \ = Array.ofDim[Int](operandLen)\n        val opArrayIndexIndexIndexLen = ", " \
    \       val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n   \
    \     val opLen = opList.length\n        val operandList = operand.toList\n  \
    \      val operandLen = operandList.length\n        val result = operandList.foldLeft(0L)\
    \ {\n            (acc, x) => acc + (opList.zip(operandList).map {\n          \
    \      case (op, x) => if (op == \"+\") {\n                    x + x\n       \
    \         } else if (op == \"-\") {\n                    x - x\n             \
    \   } else if (op == \"*\") {\n                    x * x\n                } else\
    \ if (op == \"//\") {\n                    x // x\n                } else if (op\
    \ == \"**\") {\n                    x ** x\n                } else {\n       \
    \             throw new RuntimeException(\"Invalid operator: \" + op)\n      \
    \          }\n            }.sum)\n        }\n        result", "        val ops\
    \ = op.map(x => x.toUpperCase)\n        val op1 = ops(0)\n        val op2 = ops(1)\n\
    \        val op3 = ops(2)\n        val op4 = ops(3)\n        val op5 = ops(4)\n\
    \        val op6 = ops(5)\n        val op7 = ops(6)\n        val op8 = ops(7)\n\
    \        val op9 = ops(8)\n        val op10 = ops(9)\n        val op11 = ops(10)\n\
    \        val op12 = ops(11)\n        val op13 = ops(12)\n        val op14 = ops(13)\n\
    \        val op15 = ops(14)\n        val op16 = ops(15)\n        val op17 = ops(16)\n\
    \        val op18 = ops(17)\n        val op19 = ops(18)\n        val op20 = ops(19)\n\
    \        val op21 = ops(20)\n        val op22 = ops(21)\n        val op23 = ops(22)\n\
    \        val op24 = ops(23)\n        val op25 = ops(24)\n        val op26 = ops(25)\n\
    \        val op27 = ops(26)\n        val op28 = ops(27)\n        val op29 = ops(28)\n\
    \        val op30 = ops(29)\n        val op31 = ops(30)\n        val op32 = ops(31)\n\
    \        val op33 = ops(32)\n        val op34 = ops(33)\n        val op35 = ops(34)\n\
    \        val op36 = ops(35)\n        val op37 = ops(36)\n        val op38 = ops(37)\n\
    \        val op39 = ops(38)\n        val op40 = ops(39)\n        val op41 = ops(40)\n\
    \        val op42 = ops(41)\n        val op43 = ops(42)\n        val op44 = ops(43)\n\
    \        val op45 = ops(44)\n        val op46 = ops(45)\n        val op47 = ops(46)\n\
    \        val op48 = ops(47)\n        val op49 = ops(48)\n        val op50 = ops(49)\n\
    \        val op51 = ops(50)\n        val op52 = ops(51)\n        val op53 = ops(52)\n\
    \        val op54 = ops(53)\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLength = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        ", "        val opList = op.map(_.toLowerCase)\n        val operandList\
    \ = operand.map(_.toLong)\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length - 1\n        val opMap = new mutable.HashMap[String, Long]()\n\
    \        val operandMap = new mutable.HashMap[String, Long]()\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        val opMapKeys = opMap.keySet\n\
    \        val operandMapKeys = operandMap.keySet\n        val opMapValues = opMapKeys.map(_.toLong)\n\
    \        val operandMapValues = operandMapKeys.map(_.toLong)\n        val opMapKeysLength\
    \ = opMapKeys.length\n        val operandMapKeysLength = operandMapKeys.length\
    \ - 1\n        val opMapValueLength = opMapValues.length\n        val operandMapValueLength\
    \ = operandMapValues.length - 1\n        val opMapKeysLength = opMapKeysLength\n\
    \        val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operandMapValueLength\n\
    \        val opMapKeysLength = opMapKeysLength\n        val operandMapKeysLength\
    \ = operandMapKeysLength\n        val opMapValueLength = opMapValueLength\n  \
    \      val operandMapValueLength = operandMapValueLength\n        val opMapKeysLength\
    \ = opMapKeysLength\n        val operandMapKeysLength = operandMapKeysLength\n\
    \        val opMapValueLength = opMapValueLength\n        val operandMapValueLength\
    \ = operandMapValueLength\n        val opMapKeysLength = opMapKeysLength\n   \
    \     val operandMapKeysLength = operandMapKeysLength\n        val opMapValueLength\
    \ = opMapValueLength\n        val operandMapValueLength = operand", "        val\
    \ opList = op.mkString(\"+\")\n        val opListLength = opList.length\n    \
    \    val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opList = opList.split(\"\
    \\\\+\")\n        val operandList = operandList.split(\"\\\\+\")\n        val\
    \ opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opList = opList.map(_.toLong)\n        val\
    \ operandList = operandList.map(_.toLong)\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opList = opList.map(_.toLong)\n        val operandList = operandList.map(_.toLong)\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opList = opList.map(_.toLong)\n        val\
    \ operandList = operandList.map(_.toLong)\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opList = opList.map(_.toLong)\n        val operandList = operandList.map(_.toLong)\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opList = opList.map(_.toLong)\n        val\
    \ operandList = operandList.map(_.toLong)\n        val opListLength = opList.length\n\
    \        val operandListLength = operandList.length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opList = opList.map(_.toLong)\n        val operandList = operandList.map(_.toLong)\n\
    \        val opListLength = opList.length\n        val operandListLength = operandList.length\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opList = opList.map(_.toLong)\n        val\
    \ operandList = operandList.map(_.toLong)\n        ", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val operatorList\
    \ = opList.filterNot(_.equals(\"*\")).filterNot(_.equals(\"/\"))\n        val\
    \ operator = operatorList.head\n        val operand1 = operandList.head\n    \
    \    val operand2 = operandList.tail.head\n        val result = operand1 match\
    \ {\n            case x if x == 0 => operand2\n            case x if x > 0 =>\
    \ operand2 * operand1\n            case x if x < 0 => operand2 / operand1\n  \
    \          case _ => operand1\n        }\n        val operator1 = operatorList.tail.head\n\
    \        val operator2 = operatorList.tail.tail.head\n        val operator3 =\
    \ operatorList.tail.tail.tail.head\n        val operator4 = operatorList.tail.tail.tail.tail.head\n\
    \        val operator5 = operatorList.tail.tail.tail.tail.tail.head\n        val\
    \ operator6 = operatorList.tail.tail.tail.tail.tail.tail.head\n        val operator7\
    \ = operatorList.tail.tail.tail.tail.tail.tail.tail.head\n        val operator8\
    \ = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val operator9\
    \ = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val\
    \ operator10 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator11 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator12 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator13 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator14 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator15 = operatorList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val operator16 = operator", "        val ops = op.map(_.toLowerCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = ops.length\n\
    \        val stack = mutable.Stack[Long]()\n        val result = operands.head\n\
    \        val op1 = ops.head\n        val op2 = ops.last\n        val op1Index\
    \ = ops.indexOf(op1)\n        val op2Index = ops.indexOf(op2)\n        val op1Length\
    \ = ops.length\n        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)\n        val op1Length = ops.length\n\
    \        val op2Length = ops.length\n        val op1Index = ops.indexOf(op1)\n\
    \        val op2Index = ops.indexOf(op2)", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operandList.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMapKeys = opList.map(_.toUpperCase)\n        val operandMapKeys = operandList.map(_.toLong)\n\
    \        val opMapValues = opList.map(_.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(_.toLong)\n        val opMapKeysSet = opMapKeys.toSet\n  \
    \      val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValuesSet\
    \ = opMapValues.toSet\n        val operandMapValuesSet = operandMapValues.toSet\n\
    \        val opMapKeysNotInSet = opMapKeysSet.diff(opMapKeysNotInSet)\n      \
    \  val operandMapKeysNotInSet = operandMapKeysSet.diff(operandMapKeysNotInSet)\n\
    \        val opMapValuesNotInSet = opMapValuesSet.diff(opMapValuesNotInSet)\n\
    \        val operandMapValuesNotInSet = operandMapValuesSet.diff(operandMapValuesNotInSet)\n\
    \        val opMapKeysNotInSetNotInSet = opMapKeysNotInSet.diff(opMapKeysNotInSetNotInSet)\n\
    \        val operandMapKeysNotInSetNotInSet = operandMapKeysNotInSet.diff(operandMapKeysNotInSetNotInSet)\n\
    \        val opMapValuesNotInSetNotInSet = opMapValuesNotInSet.diff(opMapValuesNotInSetNotInSet)\n\
    \        val operandMapValuesNotInSetNotInSet = operandMapValuesNotInSet.diff(operandMapValuesNotInSetNotInSet)\n\
    \        val opMapKeysNotInSetNotInSetNotInSet = opMapKeysNotInSetNotInSet.diff(opMapKeysNotInSetNotInSetNotInSet)\n\
    \        val operandMapKeysNotInSetNotInSetNotInSet = operandMapKeysNotInSetNotInSet.diff(operandMapKeysNotInSetNotInSetNotInSet)\n\
    \        val op", "        val opList = op.map(_.toLowerCase).toList\n       \
    \ val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opIndex = opList.indexOf(\"\
    +\")\n        val opIndex2 = opList.indexOf(\"*\")\n        val opIndex3 = opList.indexOf(\"\
    /\")\n        val opIndex4 = opList.indexOf(\"**\")\n        val opIndex5 = opList.indexOf(\"\
    //\")\n        val opIndex6 = opList.indexOf(\"%\")\n        val opIndex7 = opList.indexOf(\"\
    *\")\n        val opIndex8 = opList.indexOf(\"+\")\n        val opIndex9 = opList.indexOf(\"\
    -\")\n        val opIndex10 = opList.indexOf(\"**\")\n        val opIndex11 =\
    \ opList.indexOf(\"//\")\n        val opIndex12 = opList.indexOf(\"%\")\n    \
    \    val opIndex13 = opList.indexOf(\"*\")\n        val opIndex14 = opList.indexOf(\"\
    +\")\n        val opIndex15 = opList.indexOf(\"-\")\n        val opIndex16 = opList.indexOf(\"\
    **\")\n        val opIndex17 = opList.indexOf(\"//\")\n        val opIndex18 =\
    \ opList.indexOf(\"%\")\n        val opIndex19 = opList.indexOf(\"*\")\n     \
    \   val opIndex20 = opList.indexOf(\"+\")\n        val opIndex21 = opList.indexOf(\"\
    -\")\n        val opIndex22 = opList.indexOf(\"**\")\n        val opIndex23 =\
    \ opList.indexOf(\"//\")\n        val opIndex24 = opList.indexOf(\"%\")\n    \
    \    val opIndex25 = opList.indexOf(\"*\")\n        val opIndex26 = opList.indexOf(\"\
    +\")\n        val opIndex27 = opList.indexOf(\"-\")\n        val opIndex28 = opList.indexOf(\"\
    **\")\n        val opIndex29 = opList.indexOf(\"//\")\n        val opIndex30 =\
    \ opList.indexOf(\"%\")\n        val opIndex31 = opList.indexOf(\"*\")\n     \
    \   val opIndex32 = opList.indexOf(\"+\")\n        val opIndex33 = opList.indexOf(\"\
    -\")\n        val opIndex34 = opList.indexOf(\"**\")\n        val opIndex35 =\
    \ opList.indexOf(\"//\")\n        val opIndex36 = opList.indexOf(\"%\")\n    \
    \    val opIndex37 = opList.indexOf(\"*\")\n        val opIndex38 = opList.indexOf(\"\
    +\")\n        val opIndex39 = opList.indexOf", "        val ops = op.map(_.toLowerCase)\n\
    \        val opMap = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap2\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap3 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap4 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap5 = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap6\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap7 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap8 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap9 = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap10\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap11 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap12 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap13 = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap14\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap15 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap16 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap17 = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap18\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap19 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap20 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap21 = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap22\
    \ = ops.zip(operand).map(x => x._1 -> x._2)\n        val opMap23 = ops.zip(operand).map(x\
    \ => x._1 -> x._2)\n        val opMap24 = ops.zip(operand).map(x => x._1 -> x._2)\n\
    \        val opMap25 = ops.zip(operand).map(", "        val opList = op.map(x\
    \ => x.toChar).map(x => x.toInt).toList\n        val operandList = operand.map(x\
    \ => x.toLong).toList\n        val operatorList = opList.dropRight(1)\n      \
    \  val operandList = operandList.dropRight(1)\n        val operator = operatorList.mkString\n\
    \        val operand = operandList.mkString\n        val expression = operator\
    \ + operand\n        val result = scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scala.util.Try(new scala.util.Try(new scala.util.Try(new scala.util.Try(new\
    \ scal", "        val ops = op.map(_.toLowerCase)\n        val opArray = ops.toArray\n\
    \        val operandArray = operand.toArray\n        val opLen = opArray.length\n\
    \        val operandLen = operandArray.length\n        val opArrayLen = opLen\
    \ - 1\n        val operandArrayLen = operandLen - 1\n        val opArrayLen2 =\
    \ opArrayLen / 2\n        val operandArrayLen2 = operandArrayLen / 2\n       \
    \ val opArrayLen3 = opArrayLen / 3\n        val operandArrayLen3 = operandArrayLen\
    \ / 3\n        val opArrayLen4 = opArrayLen / 4\n        val operandArrayLen4\
    \ = operandArrayLen / 4\n        val opArrayLen5 = opArrayLen / 5\n        val\
    \ operandArrayLen5 = operandArrayLen / 5\n        val opArrayLen6 = opArrayLen\
    \ / 6\n        val operandArrayLen6 = operandArrayLen / 6\n        val opArrayLen7\
    \ = opArrayLen / 7\n        val operandArrayLen7 = operandArrayLen / 7\n     \
    \   val opArrayLen8 = opArrayLen / 8\n        val operandArrayLen8 = operandArrayLen\
    \ / 8\n        val opArrayLen9 = opArrayLen / 9\n        val operandArrayLen9\
    \ = operandArrayLen / 9\n        val opArrayLen10 = opArrayLen / 10\n        val\
    \ operandArrayLen10 = operandArrayLen / 10\n        val opArrayLen11 = opArrayLen\
    \ / 11\n        val operandArrayLen11 = operandArrayLen / 11\n        val opArrayLen12\
    \ = opArrayLen / 12\n        val operandArrayLen12 = operandArrayLen / 12\n  \
    \      val opArrayLen13 = opArrayLen / 13\n        val operandArrayLen13 = operandArrayLen\
    \ / 13\n        val opArrayLen14 = opArrayLen / 14\n        val operandArrayLen14\
    \ = operandArrayLen / 14\n        val opArrayLen15 = opArrayLen / 15\n       \
    \ val operandArrayLen15 = operandArrayLen / 15\n        val opArrayLen16 = opArrayLen\
    \ / 16\n        val operandArrayLen16 = operandArrayLen / 16\n        val opArrayLen17\
    \ = opArrayLen / 17\n        val operandArrayLen17 = operandArrayLen / 17\n  \
    \      val opArrayLen18 = opArrayLen / 18\n        val operandArrayLen18 = operandArrayLen\
    \ / 18\n        val opArrayLen19 = opArrayLen / 19\n        val operandArrayLen19\
    \ = operandArrayLen / 19\n", "        val ops = op.map(_.toUpperCase)\n      \
    \  val opArray = ops.toArray\n        val operandArray = operand.toArray\n   \
    \     val length = opArray.length\n        val operandArrayLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val opSet = opList.map(_.toChar)\n        val opSetSize = opSet.length\n\
    \        val operandSize = operand.length\n        val opSetSize = opSetSize -\
    \ 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSetSize = opSetSize\
    \ - 1\n        val operandSize = operandSize - 1\n        val opSet", "      \
    \  val opList = op.map(_.toUpperCase)\n        val opLen = opList.length\n   \
    \     val opListLen = opList.length - 1\n        val operandLen = operand.length\n\
    \        val operandListLen = operandLen - 1\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val opListLen = opListLen\n\
    \        val operandListLen = operandListLen\n        val op", "        val ops\
    \ = op.map(_.toLowerCase).toList\n        val opLen = ops.size\n        val operands\
    \ = operand.map(_.toLong).toList\n        val operandLen = operands.size\n   \
    \     val result = operands.foldLeft(0L) { (sum, operand) =>\n            val\
    \ op = ops.head\n            val operand1 = operands.head\n            val operand2\
    \ = operands.tail.head\n            val operand3 = operands.tail.tail.head\n \
    \           val operand4 = operands.tail.tail.tail.head\n            val operand5\
    \ = operands.tail.tail.tail.tail.head\n            val operand6 = operands.tail.tail.tail.tail.tail.head\n\
    \            val operand7 = operands.tail.tail.tail.tail.tail.tail.head\n    \
    \        val operand8 = operands.tail.tail.tail.tail.tail.tail.tail.head\n   \
    \         val operand9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand12 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand13 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand14 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand15 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand16 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand17 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \            val operand18 = operands.tail.tail.tail.tail", "        val opList\
    \ = op.map(x => x.toChar)\n        val opLen = opList.length\n        val operandList\
    \ = operand.map(x => x.toLong)\n        val operandLen = operandList.length\n\
    \        val result = operandList.foldLeft(0L) { (acc, x) => acc + (opList.zip(operandList).map(x\
    \ => x._1 * x._2).sum) }\n        result", "        val ops = op.map(x => x.toChar)\n\
    \        val opLen = ops.length\n        val operands = operand.map(x => x.toLong)\n\
    \        val operandLen = operands.length\n        val op1 = ops.head\n      \
    \  val op2 = ops.last\n        val operand1 = operands.head\n        val operand2\
    \ = operands.last\n        val op1Len = op1.length\n        val op2Len = op2.length\n\
    \        val operand1Len = operand1.length\n        val operand2Len = operand2.length\n\
    \        val op1Val = op1.toLong\n        val op2Val = op2.toLong\n        val\
    \ operand1Val = operand1.toLong\n        val operand2Val = operand2.toLong\n \
    \       val op1Val2 = op1Val + op2Val\n        val op2Val2 = op2Val + op1Val\n\
    \        val operand1Val2 = operand1Val + operand2Val\n        val operand2Val2\
    \ = operand2Val + operand1Val\n        val op1Val3 = op1Val + op2Val2\n      \
    \  val op2Val3 = op2Val + op1Val2\n        val operand1Val3 = operand1Val + operand2Val2\n\
    \        val operand2Val3 = operand2Val + operand1Val3\n        val op1Val4 =\
    \ op1Val + op2Val3\n        val op2Val4 = op2Val + op1Val3\n        val operand1Val4\
    \ = operand1Val + operand2Val3\n        val operand2Val4 = operand2Val + operand1Val4\n\
    \        val op1Val5 = op1Val + op2Val4\n        val op2Val5 = op2Val + op1Val4\n\
    \        val operand1Val5 = operand1Val + operand2Val4\n        val operand2Val5\
    \ = operand2Val + operand1Val5\n        val op1Val6 = op1Val + op2Val5\n     \
    \   val op2Val6 = op2Val + op1Val5\n        val operand1Val6 = operand1Val + operand2Val5\n\
    \        val operand2Val6 = operand2Val + operand1Val6\n        val op1Val7 =\
    \ op1Val + op2Val6\n        val op2Val7 = op2Val + op1Val6\n        val operand1Val7\
    \ = operand1Val + operand2Val6\n        val operand2Val7 = operand2Val + operand1Val7",
  "        val ops = op.map(x => x.toChar)\n        val opArray = ops.toArray\n  \
    \      val operandArray = operand.toArray\n        val length = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        val op51 = opArray(", "        var result\
    \ = operand(0)\n        for( i <- 1 to operand.size ) {\n            val op =\
    \ op(i)\n            val operand = operand(i)\n            if( op == \"+\" ) {\n\
    \                result += operand\n            }\n            else if( op ==\
    \ \"-\" ) {\n                result -= operand\n            }\n            else\
    \ if( op == \"*\" ) {\n                result *= operand\n            }\n    \
    \        else if( op == \"//\" ) {\n                result /= operand\n      \
    \      }\n            else if( op == \"**\" ) {\n                result **= operand\n\
    \            }\n        }\n        result", "        val ops = op.map(_.toUpperCase)\n\
    \        val opLen = ops.length\n        val operandLen = operand.length\n   \
    \     val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayLenMinusOne = opArrayLen - 1\n        val operandArrayLenMinusOne\
    \ = operandArrayLen - 1\n        val opArrayLenMinusOneMinusOne = opArrayLen -\
    \ 1 - 1\n        val operandArrayLenMinusOneMinusOne = operandArrayLen - 1 - 1\n\
    \        val opArrayLenMinusOneMinusOneMinusOne = opArrayLen - 1 - 1 - 1\n   \
    \     val operandArrayLenMinusOneMinusOneMinusOne = operandArrayLen - 1 - 1 -\
    \ 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOne = opArrayLen -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne =\
    \ opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n       \
    \ val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -\
    \ 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMin", "        val\
    \ opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneIndex = opList.indexOf(\"-\")\n        val operandLenMinusOneIndex\
    \ = operandList.indexOf(\"-\")\n        val opLenMinusOneValue = opList.indexOf(\"\
    -\") + 1\n        val operandLenMinusOneValue = operandList.indexOf(\"-\") + 1\n\
    \        val opLenMinusOneValueIndex = opList.indexOf(\"-\") + 2\n        val\
    \ operandLenMinusOneValueIndex = operandList.indexOf(\"-\") + 2\n        val opLenMinusOneValueValue\
    \ = opList.indexOf(\"-\") + 3\n        val operandLenMinusOneValueValue = operandList.indexOf(\"\
    -\") + 3\n        val opLenMinusOneValueValueIndex = opList.indexOf(\"-\") + 4\n\
    \        val operandLenMinusOneValueValueIndex = operandList.indexOf(\"-\") +\
    \ 4\n        val opLenMinusOneValueValueValue = opList.indexOf(\"-\") + 5\n  \
    \      val operandLenMinusOneValueValueValue = operandList.indexOf(\"-\") + 5\n\
    \        val opLenMinusOneValueValueValueIndex = opList.indexOf(\"-\") + 6\n \
    \       val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"-\"\
    ) + 6\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\") +\
    \ 7\n        val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"\
    -\") + 7\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\"\
    ) + 8\n        val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"\
    -\") + 8\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\"\
    ) + 9\n        val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"\
    -\") + 9\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\"\
    ) + 10\n        val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"\
    -\") + 10\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\"\
    ) + 11\n        val operandLenMinusOneValueValueValueIndex = operandList.indexOf(\"\
    -\") + 11\n        val opLenMinusOneValueValueValueValue = opList.indexOf(\"-\"\
    ) + 12\n        ", "        val opList = op.mkString(\"+\")\n        val opList2\
    \ = op.mkString(\"*\")\n        val opList3 = op.mkString(\"//\")\n        val\
    \ opList4 = op.mkString(\"**\")\n        val opList5 = op.mkString(\"+\")\n  \
    \      val opList6 = op.mkString(\"*\")\n        val opList7 = op.mkString(\"\
    //\")\n        val opList8 = op.mkString(\"**\")\n        val opList9 = op.mkString(\"\
    +\")\n        val opList10 = op.mkString(\"*\")\n        val opList11 = op.mkString(\"\
    //\")\n        val opList12 = op.mkString(\"**\")\n        val opList13 = op.mkString(\"\
    +\")\n        val opList14 = op.mkString(\"*\")\n        val opList15 = op.mkString(\"\
    //\")\n        val opList16 = op.mkString(\"**\")\n        val opList17 = op.mkString(\"\
    +\")\n        val opList18 = op.mkString(\"*\")\n        val opList19 = op.mkString(\"\
    //\")\n        val opList20 = op.mkString(\"**\")\n        val opList21 = op.mkString(\"\
    +\")\n        val opList22 = op.mkString(\"*\")\n        val opList23 = op.mkString(\"\
    //\")\n        val opList24 = op.mkString(\"**\")\n        val opList25 = op.mkString(\"\
    +\")\n        val opList26 = op.mkString(\"*\")\n        val opList27 = op.mkString(\"\
    //\")\n        val opList28 = op.mkString(\"**\")\n        val opList29 = op.mkString(\"\
    +\")\n        val opList30 = op.mkString(\"*\")\n        val opList31 = op.mkString(\"\
    //\")\n        val opList32 = op.mkString(\"**\")\n        val opList33 = op.mkString(\"\
    +\")\n        val opList34 = op.mkString(\"*\")\n        val opList35 = op.mkString(\"\
    //\")\n        val opList36 = op.mkString(\"**\")\n        val opList37 = op.mkString(\"\
    +\")\n        val opList38 = op.mkString(\"*\")\n        val opList39 = op.mkString(\"\
    //\")\n        val opList40 = op.mkString(\"**\")\n        val opList41 = op.mkString(\"\
    +\")\n        val opList42 = op.mkString(\"*\")\n        val opList43 = op.mkString(\"\
    //\")\n        val opList44 = op.mkString(\"**\")\n        val opList45 = op.mkString(\"\
    +\")\n        val opList46 = op.mk", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap16\
    \ = new mut", "        val ops = op.map(_.toUpperCase)\n        val opLen = ops.size\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayIndex = 0\n        val operandArrayIndex = 0\n        val\
    \ result = operandArray(0)\n        while(opArrayIndex < opArrayLen && operandArrayIndex\
    \ < operandArrayLen){\n            val op = ops(opArrayIndex)\n            val\
    \ operand = operandArray(operandArrayIndex)\n            val opResult = opArrayIndex\
    \ == opArrayLen - 1 ? operand : operand + opArrayIndex * operand\n           \
    \ result += opResult\n            opArrayIndex += 1\n            operandArrayIndex\
    \ += 1\n        }\n        result", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val opLen = ops.size\n        val operandLen = operand.size\n       \
    \ val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen -\
    \ 1\n        val opLenMinusOneOpLen = opLen - opLenMinusOne\n        val operandLenMinusOneOpLen\
    \ = operandLen - operandLenMinusOne\n        val opLenMinusOneOpLenMinusOne =\
    \ opLen - opLenMinusOne - opLenMinusOne\n        val operandLenMinusOneOpLenMinusOne\
    \ = operandLen - operandLenMinusOne - operandLenMinusOne\n        val opLenMinusOneOpLenMinusOneOpLen\
    \ = opLen - opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen\n        val operandLenMinusOneOpLenMinusOneOpLen\
    \ = operandLen - operandLenMinusOne - operandLenMinusOne - operandLenMinusOneOpLen\n\
    \        val opLenMinusOneOpLenMinusOneOpLenMinusOne = opLen - opLenMinusOne -\
    \ opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen - opLenMinusOneOpLenMinusOne\n\
    \        val operandLenMinusOneOpLenMinusOneOpLenMinusOne = operandLen - operandLenMinusOne\
    \ - operandLenMinusOne - operandLenMinusOne - operandLenMinusOneOpLen - operandLenMinusOneOpLenMinusOne\
    \ - operandLenMinusOneOpLenMinusOneOpLen\n        val opLenMinusOneOpLenMinusOneOpLenMinusOneOpLen\
    \ = opLen - opLenMinusOne - opLenMinusOne - opLenMinusOne - opLenMinusOne - opLenMinusOneOpLen\
    \ - opLenMinusOneOpLenMinusOne - opLenMinusOneOpLenMinusOne - opLenMinusOneOpLenMinusOneOpLen\n\
    \        val operandLenMinusOneOpLenMinusOneOpLenMinusOneOpLen = operandLen -\
    \ operandLenMinusOne - operandLenMinusOne - operandLenMinusOne - operandLenMinusOne\
    \ - operandLenMinusOneOpLen - operandLenMinusOneOpLenMinusOne - operandLenMinusOneOp",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOneMinusOne = opLen - 1 - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLen - 1 - 1\n        val opLenMinusOneMinusOneMinusOne = opLen - 1\
    \ - 1 - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLen - 1 - 1\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLen - 1 - 1 - 1 -\
    \ 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLen -\
    \ 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\
    \ - 1 - 1 - 1\n        val operandLenMinusOneMinusOneMinusOneMinus", "       \
    \ val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val operandLen\
    \ = operandArray.length\n        val opArrayLen = opArray.length\n        val\
    \ result = operandArray(0)\n        val op1 = opArray(0)\n        val op2 = opArray(1)\n\
    \        val op3 = opArray(2)\n        val op4 = opArray(3)\n        val op5 =\
    \ opArray(4)\n        val op6 = opArray(5)\n        val op7 = opArray(6)\n   \
    \     val op8 = opArray(7)\n        val op9 = opArray(8)\n        val op10 = opArray(9)\n\
    \        val op11 = opArray(10)\n        val op12 = opArray(11)\n        val op13\
    \ = opArray(12)\n        val op14 = opArray(13)\n        val op15 = opArray(14)\n\
    \        val op16 = opArray(15)\n        val op17 = opArray(16)\n        val op18\
    \ = opArray(17)\n        val op19 = opArray(18)\n        val op20 = opArray(19)\n\
    \        val op21 = opArray(20)\n        val op22 = opArray(21)\n        val op23\
    \ = opArray(22)\n        val op24 = opArray(23)\n        val op25 = opArray(24)\n\
    \        val op26 = opArray(25)\n        val op27 = opArray(26)\n        val op28\
    \ = opArray(27)\n        val op29 = opArray(28)\n        val op30 = opArray(29)\n\
    \        val op31 = opArray(30)\n        val op32 = opArray(31)\n        val op33\
    \ = opArray(32)\n        val op34 = opArray(33)\n        val op35 = opArray(34)\n\
    \        val op36 = opArray(35)\n        val op37 = opArray(36)\n        val op38\
    \ = opArray(37)\n        val op39 = opArray(38)\n        val op40 = opArray(39)\n\
    \        val op41 = opArray(40)\n        val op42 = opArray(41)\n        val op43\
    \ = opArray(42)\n        val op44 = opArray(43)\n        val op45 = opArray(44)\n\
    \        val op46 = opArray(45)\n        val op47 = opArray(46)\n        val op48\
    \ = opArray(47)\n        val op49 = opArray(48)\n", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val result2 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3 =\
    \ new mutable.HashMap[String, Long]()\n        val result3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val result4 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val result5 = new mutable.HashMap[String, Long]()\n        val opMap6 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val result6 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7 =\
    \ new mutable.HashMap[String, Long]()\n        val result7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val result8 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val result9 = new mutable.HashMap[String, Long]()\n        val opMap10 =\
    \ new mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val result10 = new mutable.HashMap[String, Long]()\n      \
    \  val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val result", "        val opList\
    \ = op.mkString(\"+\")\n        val opListLength = opList.length\n        val\
    \ operandList = operand.mkString(\"+\")\n        val operandListLength = operandList.length\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = ", "        val ops = op.map(_.toUpperCase)\n\
    \        val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n\
    \        val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n\
    \        val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n\
    \        val ", "        val ops = op.map(x => x.toLowerCase)\n        val opLen\
    \ = ops.size\n        val opArr = ops.map(x => x.toChar)\n        val opArrLen\
    \ = opArr.size\n        val operandArr = operand.map(x => x.toLong)\n        val\
    \ operandArrLen = operandArr.size\n        val result = operandArr(0)\n      \
    \  val op1 = opArr(0)\n        val op2 = opArr(1)\n        val op3 = opArr(2)\n\
    \        val op4 = opArr(3)\n        val op5 = opArr(4)\n        val op6 = opArr(5)\n\
    \        val op7 = opArr(6)\n        val op8 = opArr(7)\n        val op9 = opArr(8)\n\
    \        val op10 = opArr(9)\n        val op11 = opArr(10)\n        val op12 =\
    \ opArr(11)\n        val op13 = opArr(12)\n        val op14 = opArr(13)\n    \
    \    val op15 = opArr(14)\n        val op16 = opArr(15)\n        val op17 = opArr(16)\n\
    \        val op18 = opArr(17)\n        val op19 = opArr(18)\n        val op20\
    \ = opArr(19)\n        val op21 = opArr(20)\n        val op22 = opArr(21)\n  \
    \      val op23 = opArr(22)\n        val op24 = opArr(23)\n        val op25 =\
    \ opArr(24)\n        val op26 = opArr(25)\n        val op27 = opArr(26)\n    \
    \    val op28 = opArr(27)\n        val op29 = opArr(28)\n        val op30 = opArr(29)\n\
    \        val op31 = opArr(30)\n        val op32 = opArr(31)\n        val op33\
    \ = opArr(32)\n        val op34 = opArr(33)\n        val op35 = opArr(34)\n  \
    \      val op36 = opArr(35)\n        val op37 = opArr(36)\n        val op38 =\
    \ opArr(37)\n        val op39 = opArr(38)\n        val op40 = opArr(39)\n    \
    \    val op41 = opArr(40)\n        val op42 = opArr(41)\n        val op43 = opArr(42)\n\
    \        val op44 = ", "        val ops = op.map(_.toLowerCase).toList\n     \
    \   val operands = operand.map(_.toLong).toList\n        val opLen = ops.size\n\
    \        val operandLen = operands.size\n        val opIndex = 0\n        val\
    \ operandIndex = 0\n        var result = 0L\n        while(opIndex < opLen &&\
    \ operandIndex < operandLen) {\n            val op = ops(opIndex)\n          \
    \  val operand = operands(operandIndex)\n            val opVal = opToVal(op)\n\
    \            val operandVal = operandToVal(operand)\n            val opResult\
    \ = opVal + operandVal\n            val operandResult = operandVal + opResult\n\
    \            result += (opResult * operandResult)\n            opIndex += 1\n\
    \            operandIndex += 1\n        }\n        result", "        val ops =\
    \ op.map(_.toLowerCase)\n        val opLen = ops.size\n        val operands =\
    \ operand.map(_.toLong)\n        val operandLen = operands.size\n        val opMap\
    \ = new mutable.HashMap[String, Long]()\n        ops.foreach(op => {\n       \
    \     opMap += op -> (opMap.getOrElse(op, 0L) + operands(operandLen - 1))\n  \
    \      })\n        val opKeys = opMap.keySet\n        val opKeyLen = opKeys.size\n\
    \        val opValues = opMap.values.toList\n        val opValueLen = opValues.size\n\
    \        val opKeyMap = new mutable.HashMap[Long, String]()\n        opKeys.foreach(key\
    \ => {\n            opKeyMap += key -> opValues.map(value => if (value == key)\
    \ opKeyMap.getOrElse(key, \"\") else \"\").mkString(\"\")\n        })\n      \
    \  val opKeyKeys = opKeyMap.keySet\n        val opKeyKeyLen = opKeyKeys.size\n\
    \        val opKeyValues = opKeyMap.values.toList\n        val opKeyValueLen =\
    \ opKeyValues.size\n        val opKeyMap = new mutable.HashMap[String, String]()\n\
    \        opKeyKeys.foreach(key => {\n            opKeyMap += key -> opKeyValues.map(value\
    \ => if (value == key) opKeyMap.getOrElse(key, \"\") else \"\").mkString(\"\"\
    )\n        })\n        val opKeyKeys = opKeyMap.keySet\n        val opKeyKeyLen\
    \ = opKeyKeys.size\n        val opKeyValues = opKeyMap.values.toList\n       \
    \ val opKeyValueLen = opKeyValues.size\n        val opKeyMap = new mutable.HashMap[String,\
    \ String]()\n        opKeyKeys.foreach(key => {\n            opKeyMap += key ->\
    \ opKeyValues.map(value => if (value == key) opKeyMap.getOrElse(key, \"\") else\
    \ \"\").mkString(\"\")\n        })\n        val opKeyKeys = opKeyMap.keySet\n\
    \        val opKeyKeyLen = opKeyKeys.size\n        val opKeyValues = opKeyMap.values.toList\n\
    \        val opKeyValueLen = opKeyValues.size\n        val opKeyMap = new mutable.HashMap[String,\
    \ String]()\n        opKeyKeys.foreach(key => {\n            opKeyMap += key ->\
    \ opKeyValues.map(value => if (value == key) opKeyMap.getOrElse(key, \"\") else\
    \ \"\").mkString(\"\")\n        })\n        val opKeyKeys = opKeyMap.key", " \
    \       val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opMap2 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap2 = new mutable.HashMap[String, Long]()\n        val opMap3 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap4 = new mutable.HashMap[String, Long]()\n        val opMap5 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap6 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap6 = new mutable.HashMap[String, Long]()\n        val opMap7 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap8 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap10 = new mutable.HashMap[String, Long]()\n        val opMap11\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap12 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap12 = new mutable.HashMap[String, Long]()\n        val opMap13\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap14 = new mutable.HashMap[String, Long]()\n        val opMap15\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap16 = new mutable.HashMap[", "        val opList =\
    \ op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n   \
    \     val opLen = opList.length\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLen = operandList.length\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opIndex = 0\n        val operandIndex = 0\n        val result\
    \ = operandList[operandIndex] * operandList[operandIndex + 1]\n        val opIndexMinusOne\
    \ = opIndex - 1\n        val operandIndexMinusOne = operandIndex - 1\n       \
    \ val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen -\
    \ 1\n        while (operandIndex < operandLenMinusOne) {\n            val opIndexMinusOne\
    \ = opIndex - 1\n            val operandIndexMinusOne = operandIndex - 1\n   \
    \         val opLenMinusOne = opLen - 1\n            val operandLenMinusOne =\
    \ operandLen - 1\n            val opIndexMinusOnePlusOne = opIndexMinusOne + 1\n\
    \            val operandIndexMinusOnePlusOne = operandIndexMinusOne + 1\n    \
    \        val opLenMinusOnePlusOne = opLenMinusOne + 1\n            val operandLenMinusOnePlusOne\
    \ = operandLenMinusOne + 1\n            val opIndexMinusOneMinusOne = opIndexMinusOne\
    \ - 1\n            val operandIndexMinusOneMinusOne = operandIndexMinusOne - 1\n\
    \            val opLenMinusOneMinusOne = opLenMinusOne - 1\n            val operandLenMinusOneMinusOne\
    \ = operandLenMinusOne - 1\n            val opIndexPlusOne = opIndex + 1\n   \
    \         val operandIndexPlusOne = operandIndex + 1\n            val opLenPlusOne\
    \ = opLen + 1\n            val operandLenPlusOne = operandLen + 1\n          \
    \  val opIndexMinusOneMinusOnePlusOne = opIndexMinusOne - 1\n            val operandIndexMinusOneMinusOnePlusOne\
    \ = operandIndexMinusOne - 1\n            val opLenMinusOneMinusOnePlusOne = opLenMinusOne\
    \ - 1\n            val operandLenMinusOneMinusOnePlusOne = operandLenMinusOne\
    \ - 1\n            val opIndexMinusOnePlusOneMinusOne = opIndexMinusOne + 1\n\
    \            val operandIndexMinusOnePlusOneMinusOne = operandIndexMinusOne +\
    \ 1\n            val opLenMinusOnePlusOneMin", "        val opList = op.map(_.toUpperCase)\n\
    \        val opListLen = opList.length\n        val operandList = operand.map(_.toLong)\n\
    \        val operandListLen = operandList.length\n        val operatorList = opList.dropRight(1)\n\
    \        val operatorListLen = operatorList.length\n        val result = operandList.foldLeft(operandList(0))\
    \ { (acc, val) =>\n            val opIndex = opList.indexOf(acc.last)\n      \
    \      val opVal = opList(opIndex)\n            val operandIndex = operandList.indexOf(val)\n\
    \            val operandVal = operandList(operandIndex)\n            val opValInt\
    \ = opVal.toInt\n            val operandValInt = operandVal.toInt\n          \
    \  val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValInt = operandVal.toInt\n\
    \            val opValInt = opVal.toInt\n            val operandValIn", "    \
    \    val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val opList = opList.split(\"\\\\+\").map(_.trim).toList\n      \
    \  val operandList = operandList.split(\"\\\\+\").map(_.trim).toList\n       \
    \ val opListLength = opList.size\n        val operandListLength = operandList.size\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val op", "        val\
    \ opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toLong)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayArray = opArray.map(_.toChar)\n        val operandArrayArray\
    \ = operandArray.map(_.toLong)\n        val opArrayArrayLen = opArrayArray.length\n\
    \        val operandArrayArrayLen = operandArrayArray.length\n        val opArrayArrayArray\
    \ = opArrayArray.map(_.toChar)\n        val operandArrayArrayArray = operandArrayArray.map(_.toLong)\n\
    \        val opArrayArrayArrayLen = opArrayArrayArray.length\n        val operandArrayArrayArrayLen\
    \ = operandArrayArrayArray.length\n        val opArrayArrayArrayArray = opArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArray = operandArrayArrayArray.map(_.toLong)\n\
    \        val opArrayArrayArrayArrayLen = opArrayArrayArrayArray.length\n     \
    \   val operandArrayArrayArrayArrayLen = operandArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArray = opArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArray = operandArrayArrayArrayArray.map(_.toLong)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArray = opArrayArrayArrayArrayArray.map(_.toChar)\n\
    \        val operandArrayArrayArrayArrayArrayArray = operandArrayArrayArrayArrayArray.map(_.toLong)\n\
    \        val opArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArrayArrayArrayArrayArrayArrayArrayLen = opArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val operandArrayArrayArrayArrayArrayArrayLen = operandArrayArrayArrayArrayArrayArrayArray.length\n\
    \        val opArray", "        val ops = op.mkString(\"+\")\n        val opList\
    \ = ops.split(\"\\\\+\").map(_.toLong)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.size\n        val operandLength = operandList.size\n\
    \        val opIndex = opLength - 1\n        val operandIndex = operandLength\
    \ - 1\n        val result = opList(opIndex) * operandList(operandIndex)\n    \
    \    result", "        val ops = op.mkString(\"+\")\n        val ops = ops.split(\"\
    \\\\+\").map(_.trim).toList\n        val ops = ops.map(op => op match {\n    \
    \        case \"+\" => 1\n            case \"-\" => -1\n            case \"*\"\
    \ => 1\n            case \"/\" => 1\n            case \"**\" => 1\n          \
    \  case _ => 0\n        })\n        val ops = ops.map(op => op match {\n     \
    \       case 1 => 1\n            case -1 => -1\n            case 1 => 1\n    \
    \        case 1 => 1\n            case _ => 0\n        })\n        val ops = ops.map(op\
    \ => op match {\n            case 1 => 1\n            case -1 => -1\n        \
    \    case 1 => 1\n            case 1 => 1\n            case _ => 0\n        })\n\
    \        val ops = ops.map(op => op match {\n            case 1 => 1\n       \
    \     case -1 => -1\n            case 1 => 1\n            case 1 => 1\n      \
    \      case _ => 0\n        })\n        val ops = ops.map(op => op match {\n \
    \           case 1 => 1\n            case -1 => -1\n            case 1 => 1\n\
    \            case 1 => 1\n            case _ => 0\n        })\n        val ops\
    \ = ops.map(op => op match {\n            case 1 => 1\n            case -1 =>\
    \ -1\n            case 1 => 1\n            case 1 => 1\n            case _ =>\
    \ 0\n        })\n        val ops = ops.map(op => op match {\n            case\
    \ 1 => 1\n            case -1 => -1\n            case 1 => 1\n            case\
    \ 1 => 1\n            case _ => 0\n        })\n        val ops = ops.map(op =>\
    \ op match {\n            case 1 => 1\n            case -1 => -1\n           \
    \ case 1 => 1\n            case 1 => 1\n            case _ => 0\n        })\n\
    \        val ops = ops.map(op => op match {\n            case 1 => 1\n       \
    \     case -1 => -1\n            case 1 => 1\n            case 1 => 1\n      \
    \      case _ => 0\n        })\n        val ops = ops.map(op => op match {\n \
    \           case 1 => 1\n            case -1 => -1\n            case 1 => 1\n\
    \            case 1 => 1\n            case _ => 0\n        })\n        val ops\
    \ = ops.map(op => op match {\n            case 1 => 1\n            case -1 =>\
    \ -1\n            case 1 => 1\n            case 1 => 1\n            case _ =>\
    \ 0\n        })\n        val ops = ops.map(op => op match {\n            case\
    \ 1 => 1\n            case -1 => -1\n            case 1 => 1\n            case\
    \ 1 => 1\n            case _ => 0\n        })\n        val ops = ops.map(", " \
    \       val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opArray = opList.map(_.toChar)\n        val operandArray = operandList.map(_.toChar)\n\
    \        val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayIndex = Array.fill(opArrayLen)(0)\n        val operandArrayIndex\
    \ = Array.fill(operandArrayLen)(0)\n        val opArrayIndexLen = opArrayIndex.length\n\
    \        val operandArrayIndexLen = operandArrayIndex.length\n        val opArrayIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndexIndex\
    \ = 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndexIndex\
    \ = 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndexIndex\
    \ = 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndexIndex\
    \ = 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toLong).toList\n        val opLen = opList.size\n        val\
    \ operandLen = operandList.size\n        val result = operandList(0)\n       \
    \ val op1 = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n\
    \        val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLength =\
    \ opList.length\n        val operandLength = operandList.length\n        val result\
    \ = operandList.foldLeft(operandList.head) {\n            (acc, x) => acc + opList.foldLeft(x)\
    \ {\n                (acc, y) => acc + y * operandList.last\n            }\n \
    \       }\n        result", "        val ops = op.mkString(\"+\")\n        val\
    \ opList = ops.split(\"\\\\+\").map(_.toLong)\n        val opLen = opList.size\n\
    \        val operands = operand.map(_.toLong)\n        val operandLen = operands.size\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusTwo = opLen - 2\n        val operandLenMinusTwo =\
    \ operandLen - 2\n        val opLenMinusThree = opLen - 3\n        val operandLenMinusThree\
    \ = operandLen - 3\n        val opLenMinusFour = opLen - 4\n        val operandLenMinusFour\
    \ = operandLen - 4\n        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix\
    \ = operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLen", "        val opList = op.map(_.toUpperCase)\n        val opLen\
    \ = opList.length\n        val operandList = operand.map(_.toLong)\n        val\
    \ operandLen = operandList.length\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(_.toUpperCase)\n        val operandMapKeys = operandList.map(_.toLong)\n\
    \        val opMapValues = opList.map(_.toUpperCase)\n        val operandMapValues\
    \ = operandList.map(_.toLong)\n        val opMapKeySet = opMapKeys.toSet\n   \
    \     val operandMapKeySet = operandMapKeys.toSet\n        val opMapValueSet =\
    \ opMapValues.toSet\n        val operandMapValueSet = operandMapValues.toSet\n\
    \        val opMapKeysLen = opMapKeySet.size\n        val operandMapKeysLen =\
    \ operandMapKeySet.size\n        val opMapValuesLen = opMapValueSet.size\n   \
    \     val operandMapValuesLen = operandMapValueSet.size\n        val opMapKeysSet\
    \ = opMapKeySet.map(_.toUpperCase)\n        val operandMapKeysSet = operandMapKeySet.map(_.toLong)\n\
    \        val opMapValuesSet = opMapValueSet.map(_.toUpperCase)\n        val operandMapValuesSet\
    \ = operandMapValueSet.map(_.toLong)\n        val opMapKeysSetLen = opMapKeysSet.size\n\
    \        val operandMapKeysSetLen = operandMapKeysSet.size\n        val opMapValuesSetLen\
    \ = opMapValuesSet.size\n        val operandMapValuesSetLen = operandMapValuesSet.size\n\
    \        val opMapKeysSetSet = opMapKeysSet.map(_.toUpperCase)\n        val operandMapKeysSetSet\
    \ = operandMapKeysSet.map(_.toLong)\n        val opMapValuesSetSet = opMapValuesSet.map(_.toUpperCase)\n\
    \        val operandMapValuesSetSet = operandMapValuesSet.map(_.toLong)\n    \
    \    val opMapKeysSetSetLen = opMapKeysSetSet.size\n        val operandMapKeysSetSetLen\
    \ = operandMapKeysSetSet.size\n        val opMapValuesSetSetLen = opMapValuesSetSet.size\n\
    \        val operandMapValuesSetSetLen", "        val opList = op.map(x => x.toUpperCase)\n\
    \        val operandList = operand.map(x => x.toLong)\n        val opLength =\
    \ opList.length\n        val operandLength = operandList.length - 1\n        val\
    \ opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"*\"\
    )\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"-\")\n        val opIndex6 = opList.indexOf(\"\
    *\")\n        val opIndex7 = opList.indexOf(\"/\")\n        val opIndex8 = opList.indexOf(\"\
    **\")\n        val opIndex9 = opList.indexOf(\"+\")\n        val opIndex10 = opList.indexOf(\"\
    -\")\n        val opIndex11 = opList.indexOf(\"*\")\n        val opIndex12 = opList.indexOf(\"\
    /\")\n        val opIndex13 = opList.indexOf(\"**\")\n        val opIndex14 =\
    \ opList.indexOf(\"+\")\n        val opIndex15 = opList.indexOf(\"-\")\n     \
    \   val opIndex16 = opList.indexOf(\"*\")\n        val opIndex17 = opList.indexOf(\"\
    /\")\n        val opIndex18 = opList.indexOf(\"**\")\n        val opIndex19 =\
    \ opList.indexOf(\"+\")\n        val opIndex20 = opList.indexOf(\"-\")\n     \
    \   val opIndex21 = opList.indexOf(\"*\")\n        val opIndex22 = opList.indexOf(\"\
    /\")\n        val opIndex23 = opList.indexOf(\"**\")\n        val opIndex24 =\
    \ opList.indexOf(\"+\")\n        val opIndex25 = opList.indexOf(\"-\")\n     \
    \   val opIndex26 = opList.indexOf(\"*\")\n        val opIndex27 = opList.indexOf(\"\
    /\")\n        val opIndex28 = opList.indexOf(\"**\")\n        val opIndex29 =\
    \ opList.indexOf(\"+\")\n        val opIndex30 = opList.indexOf(\"-\")\n     \
    \   val opIndex31 = opList.indexOf(\"*\")\n        val opIndex32 = opList.indexOf(\"\
    /\")\n        val opIndex33 = opList.indexOf(\"**\")\n        val opIndex34 =\
    \ opList.indexOf(\"+\")\n        val opIndex35 = opList.indexOf(\"-\")\n     \
    \   val opIndex36 = opList.indexOf(\"*\")\n        val opIndex37 = opList.indexOf(\"\
    /\")\n        val opIndex38 = opList.indexOf(\"**\")\n        val opIndex39 =\
    \ opList.indexOf(\"+\")\n        val opIndex40", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toInt).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opArray = opList.map(_.toChar).toArray\n\
    \        val operandArray = operandList.map(_.toChar).toArray\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val opArrayMax = opArrayLen - 1\n        val operandArrayMax = operandArrayLen\
    \ - 1\n        val opArrayMin = opArrayLen + 1\n        val operandArrayMin =\
    \ operandArrayLen + 1\n        val opArraySum = opArraySum = 0\n        val operandArraySum\
    \ = operandArraySum = 0\n        val opArrayProduct = opArrayProduct = 1\n   \
    \     val operandArrayProduct = operandArrayProduct = 1\n        val opArrayMul\
    \ = opArrayMul = 1\n        val operandArrayMul = operandArrayMul = 1\n      \
    \  val opArrayDiv = opArrayDiv = 1\n        val operandArrayDiv = operandArrayDiv\
    \ = 1\n        val opArrayExp = opArrayExp = 1\n        val operandArrayExp =\
    \ operandArrayExp = 1\n        val opArraySum = opArraySum = 0\n        val operandArraySum\
    \ = operandArraySum = 0\n        val opArrayProduct = opArrayProduct = 1\n   \
    \     val operandArrayProduct = operandArrayProduct = 1\n        val opArrayMul\
    \ = opArrayMul = 1\n        val operandArrayMul = operandArrayMul = 1\n      \
    \  val opArrayDiv = opArrayDiv = 1\n        val operandArrayDiv = operandArrayDiv\
    \ = 1\n        val opArrayExp = opArrayExp = 1\n        val operandArrayExp =\
    \ operandArrayExp = 1\n        val opArraySum = opArraySum = 0\n        val operandArraySum\
    \ = operandArraySum = 0\n        val opArrayProduct = opArrayProduct = 1\n   \
    \     val operandArrayProduct = operandArrayProduct = 1\n        val opArrayMul\
    \ = opArrayMul = 1\n        val operandArrayMul = operandArrayMul = 1\n      \
    \  val opArrayDiv = opArrayDiv = 1\n        val operandArrayDiv = operandArrayDiv\
    \ = 1\n        val opArrayExp = opArrayExp = 1\n        val operandArrayExp =\
    \ operandArrayExp = 1\n        val opArraySum = opArraySum = 0\n        val operandArraySum\
    \ = operandArraySum = 0\n        val opArrayProduct = opArrayProduct = 1\n   \
    \     val operandArrayProduct = operandArrayProduct = 1\n        val opArray",
  "        val opList = op.asInstanceOf[List[String]]\n        val operandList = operand.asInstanceOf[List[Long]]\n\
    \        val length = opList.size\n        val operandLength = operandList.size\n\
    \        val result = operandList.head\n        val op1 = operandList.tail.head\n\
    \        val op2 = operandList.tail.tail.head\n        val op3 = operandList.tail.tail.tail.head\n\
    \        val op4 = operandList.tail.tail.tail.tail.head\n        val op5 = operandList.tail.tail.tail.tail.tail.head\n\
    \        val op6 = operandList.tail.tail.tail.tail.tail.tail.head\n        val\
    \ op7 = operandList.tail.tail.tail.tail.tail.tail.tail.head\n        val op8 =\
    \ operandList.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val op9 =\
    \ operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n        val op10\
    \ = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n     \
    \   val op11 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op12 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op13 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op14 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op15 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op16 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op17 = operandList.tail.tail.tail.tail.tail.tail.tail.tail.tail.",
  "        val ops = op.map(x => x.toChar)\n        val op1 = ops(0)\n        val\
    \ op2 = ops(1)\n        val op3 = ops(2)\n        val op4 = ops(3)\n        val\
    \ op5 = ops(4)\n        val op6 = ops(5)\n        val op7 = ops(6)\n        val\
    \ op8 = ops(7)\n        val op9 = ops(8)\n        val op10 = ops(9)\n        val\
    \ op11 = ops(10)\n        val op12 = ops(11)\n        val op13 = ops(12)\n   \
    \     val op14 = ops(13)\n        val op15 = ops(14)\n        val op16 = ops(15)\n\
    \        val op17 = ops(16)\n        val op18 = ops(17)\n        val op19 = ops(18)\n\
    \        val op20 = ops(19)\n        val op21 = ops(20)\n        val op22 = ops(21)\n\
    \        val op23 = ops(22)\n        val op24 = ops(23)\n        val op25 = ops(24)\n\
    \        val op26 = ops(25)\n        val op27 = ops(26)\n        val op28 = ops(27)\n\
    \        val op29 = ops(28)\n        val op30 = ops(29)\n        val op31 = ops(30)\n\
    \        val op32 = ops(31)\n        val op33 = ops(32)\n        val op34 = ops(33)\n\
    \        val op35 = ops(34)\n        val op36 = ops(35)\n        val op37 = ops(36)\n\
    \        val op38 = ops(37)\n        val op39 = ops(38)\n        val op40 = ops(39)\n\
    \        val op41 = ops(40)\n        val op42 = ops(41)\n        val op43 = ops(42)\n\
    \        val op44 = ops(43)\n        val op45 = ops(44)\n        val op46 = ops(45)\n\
    \        val op47 = ops(46)\n        val op48 = ops(47)\n        val op49 = ops(48)\n\
    \        val op50 = ops(49)\n        val op51 = ops(50)\n        val op52 = ops(51)\n\
    \        val op53 = ops(52)\n        val op54 = ops(53)\n", "        val ops =\
    \ op.map(x => x.toUpperCase)\n        val opLen = ops.size\n        val opArray\
    \ = ops.toArray\n        val operandArray = operand.toArray\n        val opArrayLen\
    \ = opArray.length\n        val operandArrayLen = operandArray.length\n      \
    \  val result = operandArray(0)\n        val opIndex = 0\n        val operandIndex\
    \ = 1\n        while(opIndex < opArrayLen && operandIndex < operandArrayLen){\n\
    \            val op = ops(opIndex)\n            val operand = operandArray(operandIndex)\n\
    \            val opVal = opArrayOp(op)\n            val operandVal = operandArrayOp(op,\
    \ operand)\n            val newResult = opVal * operandVal + result\n        \
    \    result = newResult\n            opIndex += 1\n            operandIndex +=\
    \ 1\n        }\n        result", "        val ops = op.map(_.toUpperCase)\n  \
    \      val opLen = ops.length\n        val operands = operand.map(_.toLong)\n\
    \        val operandLen = operands.length\n        val result = operands.foldLeft(0L)\
    \ { (acc, x) => \n            val op = ops.head\n            val opLen = ops.length\n\
    \            val operand = operands.head\n            val operandLen = operands.length\n\
    \            val opIndex = ops.indexOf(\"+\")\n            val opIndex2 = ops.indexOf(\"\
    -\")\n            val opIndex3 = ops.indexOf(\"*\")\n            val opIndex4\
    \ = ops.indexOf(\"/\")\n            val opIndex5 = ops.indexOf(\"**\")\n     \
    \       val opIndex6 = ops.indexOf(\"//\")\n            val opIndex7 = ops.indexOf(\"\
    %\")\n            val opIndex8 = ops.indexOf(\"&\")\n            val opIndex9\
    \ = ops.indexOf(\"|\")\n            val opIndex10 = ops.indexOf(\"^\")\n     \
    \       val opIndex11 = ops.indexOf(\"~\")\n            val opIndex12 = ops.indexOf(\"\
    <<\")\n            val opIndex13 = ops.indexOf(\">>\")\n            val opIndex14\
    \ = ops.indexOf(\"==\")\n            val opIndex15 = ops.indexOf(\"!=\")\n   \
    \         val opIndex16 = ops.indexOf(\"<\")\n            val opIndex17 = ops.indexOf(\"\
    >\")\n            val opIndex18 = ops.indexOf(\"<=\")\n            val opIndex19\
    \ = ops.indexOf(\">=\")\n            val opIndex20 = ops.indexOf(\"+\")\n    \
    \        val opIndex21 = ops.indexOf(\"-\")\n            val opIndex22 = ops.indexOf(\"\
    *\")\n            val opIndex23 = ops.indexOf(\"/\")\n            val opIndex24\
    \ = ops.indexOf(\"**\")\n            val opIndex25 = ops.indexOf(\"//\")\n   \
    \         val opIndex26 = ops.indexOf(\"%\")\n            val opIndex27 = ops.indexOf(\"\
    &\")\n            val opIndex28 = ops.indexOf(\"|\")\n            val opIndex29\
    \ = ops.indexOf(\"^\")\n            val opIndex30 = ops.indexOf(\"~\")\n     \
    \       val opIndex31 = ops.indexOf(\"<<\")\n            val opIndex32 = ops.indexOf(\"\
    >>\")\n            val opIndex33 = ops.indexOf(\"==\")\n            val opIndex34\
    \ = ops.indexOf(\"!=\")\n            val opIndex35 = ops.indexOf(\"<\")\n    \
    \        val opIndex36 = ops.indexOf(\">\")\n            val opIndex37 = ops.indexOf(\"\
    <=\")\n            val opIndex38 = ops.indexOf(\">=\")\n            ", "     \
    \   val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val length = operands.length - 1\n        val operators = ops.map(_.toUpperCase)\n\
    \        val operatorLength = operators.length\n        val result = operands.foldLeft(0)((acc,\
    \ x) => acc + x * operators(operatorLength - 1))\n        result", "        val\
    \ opList = op.mkString(\"+\")\n        val opListLength = opList.length\n    \
    \    val operandList = operand.mkString(\"+\")\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength = ",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val operatorList = opList.filterNot(_ == \"*\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"-\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"/\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"**\")\n        val operandList = operandList.filterNot(_ == 0)\n      \
    \  val operatorList = operatorList.filterNot(_ == \"+\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"*\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"-\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"/\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"**\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"+\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"*\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"-\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"/\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"**\")\n        val operandList = operandList.filterNot(_ == 0)\n      \
    \  val operatorList = operatorList.filterNot(_ == \"+\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"*\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"-\")\n        val operandList\
    \ = operandList.filterNot(_ == 0)\n        val operatorList = operatorList.filterNot(_\
    \ == \"/\")\n        val operandList = operandList.filterNot(_ == 0)\n       \
    \ val operatorList = operatorList.filterNot(_ == \"**\")\n        val operand",
  "        var result = operand(0)\n        val operator = op.drop(1)\n        val\
    \ operands = op.take(operand.length-1)\n        operands.foreach(i => result =\
    \ result + i * operator(0))\n        result", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val opLen = ops.size\n        val operands = operand.map(_.toLong).toList\n\
    \        val operandLen = operands.size\n        val opLenMinusOne = opLen - 1\n\
    \        val operandLenMinusOne = operandLen - 1\n        val opLenMinusTwo =\
    \ opLen - 2\n        val operandLenMinusTwo = operandLen - 2\n        val opLenMinusThree\
    \ = opLen - 3\n        val operandLenMinusThree = operandLen - 3\n        val\
    \ opLenMinusFour = opLen - 4\n        val operandLenMinusFour = operandLen - 4\n\
    \        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive = operandLen\
    \ - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix =\
    \ operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n        val ", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toInt)\n  \
    \      val opLen = opList.length\n        val opLenMinusOne = opLen - 1\n    \
    \    val operandLen = operandList.length\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opIndex = 0\n        val operandIndex = 0\n        var result\
    \ = 0\n        while (operandIndex < operandLenMinusOne) {\n            val op1\
    \ = opList(opIndex)\n            val op2 = opList(opIndex + 1)\n            val\
    \ op3 = opList(opIndex + 2)\n            val op4 = opList(opIndex + 3)\n     \
    \       val op5 = opList(opIndex + 4)\n            val op6 = opList(opIndex +\
    \ 5)\n            val op7 = opList(opIndex + 6)\n            val op8 = opList(opIndex\
    \ + 7)\n            val op9 = opList(opIndex + 8)\n            val op10 = opList(opIndex\
    \ + 9)\n            val op11 = opList(opIndex + 10)\n            val op12 = opList(opIndex\
    \ + 11)\n            val op13 = opList(opIndex + 12)\n            val op14 = opList(opIndex\
    \ + 13)\n            val op15 = opList(opIndex + 14)\n            val op16 = opList(opIndex\
    \ + 15)\n            val op17 = opList(opIndex + 16)\n            val op18 = opList(opIndex\
    \ + 17)\n            val op19 = opList(opIndex + 18)\n            val op20 = opList(opIndex\
    \ + 19)\n            val op21 = opList(opIndex + 20)\n            val op22 = opList(opIndex\
    \ + 21)\n            val op23 = opList(opIndex + 22)\n            val op24 = opList(opIndex\
    \ + 23)\n            val op25 = opList(opIndex + 24)\n            val op26 = opList(opIndex\
    \ + 25)\n            val op27 = opList(opIndex + 26)\n            val op28 = opList(opIndex\
    \ + 27)\n            val op29 = opList(opIndex + 28)\n            val op30 = opList(opIndex\
    \ + 29)\n            val op31 = opList(opIndex + 30)\n            val op32 = opList(opIndex\
    \ + 31)\n            val op33 = opList(opIndex + 32)\n            val op34 = opList(opIndex\
    \ + 33)\n            val op35 = opList(opIndex + 34)\n            val op36 = op",
  "        val ops = op.map(_.toLowerCase).toList\n        val opLen = ops.size\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val operandLen = operandArray.length\n        val opArrayLen = opArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)",
  "        val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opArray = ops.toArray\n        val operandArray = operands.toArray\n  \
    \      val opArrayLen = opArray.length\n        val operandArrayLen = operandArray.length\n\
    \        val opArrayIndex = Array.fill(opArrayLen)(0)\n        val operandArrayIndex\
    \ = Array.fill(operandArrayLen)(0)\n        val opArrayIndexLen = opArrayIndex.length\n\
    \        val operandArrayIndexLen = operandArrayIndex.length\n        val opArrayIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndex =\
    \ 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndex =\
    \ 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndex =\
    \ 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = opArrayIndexIndex.length\n        val operandArrayIndexIndexLen = operandArrayIndexIndex.length\n\
    \        val opArrayIndexIndexIndex = 0\n        val operandArrayIndexIndex =\
    \ 0\n        val opArrayIndexIndexLen = opArrayIndexIndex.length\n        val\
    \ operandArrayIndexIndexLen = operandArrayIndexIndex.length\n        val opArrayIndexIndexIndex\
    \ = 0\n        val operandArrayIndexIndex = 0\n        val opArrayIndexIndexLen\
    \ = ", "        val opList = op.map(_.toLowerCase).toList\n        val operandList\
    \ = operand.map(_.toInt).toList\n        val opLength = opList.length\n      \
    \  val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ opList.map(_.toLowerCase)\n        val operandMapKeys = operandList.map(_.toInt)\n\
    \        val opMapValues = opList.map(x => opMap.getOrElse(x, 0L))\n        val\
    \ operandMapValues = operandList.map(x => operandMap.getOrElse(x, 0L))\n     \
    \   val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(_.length).sum\n\
    \        val operandMapValuesLength = operandMapValues.map(_.length).sum\n   \
    \     val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(_.length).sum\n\
    \        val operandMapValuesLength = operandMapValues.map(_.length).sum\n   \
    \     val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(_.length).sum\n\
    \        val operandMapValuesLength = operandMapValues.map(_.length).sum\n   \
    \     val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(_.length).sum\n\
    \        val operandMapValuesLength = operandMapValues.map(_.length).sum\n   \
    \     val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(_.length).sum\n\
    \        val operandMapValuesLength = operandMapValues.map(_.length).sum\n   \
    \     val opMapKeysLength = opMapKeys.map(_.length).sum\n        val operandMapKeysLength\
    \ = operandMapKeys.map(_.length).sum\n        val opMapValuesLength = opMapValues.map(",
  "        val opList = op.mkString(\"+\")\n        val operandList = operand.mkString(\"\
    +\")\n        val opList = opList.split(\"\\\\+\").map(_.trim).toList\n      \
    \  val operandList = operandList.split(\"\\\\+\").map(_.trim).toList\n       \
    \ val opListLength = opList.size\n        val operandListLength = operandList.size\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val op", "        val\
    \ opList = op.mkString(\"+\")\n        val opListLength = opList.size\n      \
    \  val operandList = operand.mkString(\"+\")\n        val operandListLength =\
    \ operandList.size\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = operandListLength\
    \ - 1\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = operandListLength\
    \ - 1\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = operandListLength\
    \ - 1\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = operandListLength\
    \ - 1\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = operandListLength\
    \ - 1\n        val opListLength = opListLength - 1\n        val operandListLength\
    \ = operandListLength - 1\n        val opListLength = opListLength - 1\n     \
    \   val operandListLength = operandListLength - 1\n        val opListLength =\
    \ opListLength - 1\n        val operandListLength = operandListLength - 1\n  \
    \      val opListLength = opListLength - 1\n        val operandListLength = ",
  "        val opList = op.mkString(\"+\")\n        val opList2 = op.mkString(\"-\"\
    )\n        val opList3 = op.mkString(\"*\")\n        val opList4 = op.mkString(\"\
    //\")\n        val opList5 = op.mkString(\"**\")\n        val opList6 = op.mkString(\"\
    +\")\n        val opList7 = op.mkString(\"-\")\n        val opList8 = op.mkString(\"\
    *\")\n        val opList9 = op.mkString(\"//\")\n        val opList10 = op.mkString(\"\
    **\")\n        val opList11 = op.mkString(\"+\")\n        val opList12 = op.mkString(\"\
    -\")\n        val opList13 = op.mkString(\"*\")\n        val opList14 = op.mkString(\"\
    //\")\n        val opList15 = op.mkString(\"**\")\n        val opList16 = op.mkString(\"\
    +\")\n        val opList17 = op.mkString(\"-\")\n        val opList18 = op.mkString(\"\
    *\")\n        val opList19 = op.mkString(\"//\")\n        val opList20 = op.mkString(\"\
    **\")\n        val opList21 = op.mkString(\"+\")\n        val opList22 = op.mkString(\"\
    -\")\n        val opList23 = op.mkString(\"*\")\n        val opList24 = op.mkString(\"\
    //\")\n        val opList25 = op.mkString(\"**\")\n        val opList26 = op.mkString(\"\
    +\")\n        val opList27 = op.mkString(\"-\")\n        val opList28 = op.mkString(\"\
    *\")\n        val opList29 = op.mkString(\"//\")\n        val opList30 = op.mkString(\"\
    **\")\n        val opList31 = op.mkString(\"+\")\n        val opList32 = op.mkString(\"\
    -\")\n        val opList33 = op.mkString(\"*\")\n        val opList34 = op.mkString(\"\
    //\")\n        val opList35 = op.mkString(\"**\")\n        val opList36 = op.mkString(\"\
    +\")\n        val opList37 = op.mkString(\"-\")\n        val opList38 = op.mkString(\"\
    *\")\n        val opList39 = op.mkString(\"//\")\n        val opList40 = op.mkString(\"\
    **\")\n        val opList41 = op.mkString(\"+\")\n        val opList42 = op.mkString(\"\
    -\")\n        val opList43 = op.mkString(\"*\")\n        val opList44 = op.mkString(\"\
    //\")\n        val opList45 = op.mkString(\"**\")\n        val op", "        val\
    \ ops = op.map(x => x.toChar)\n        val opArray = ops.toArray\n        val\
    \ operandArray = operand.toArray\n        val length = opArray.length\n      \
    \  val operandArrayLength = operandArray.length\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48)\n        val op50 = opArray(49", "        val\
    \ ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val opIndex = ops.indexOf(\"+\")\n        val opIndex2 = ops.indexOf(\"\
    -\")\n        val opIndex3 = ops.indexOf(\"*\")\n        val opIndex4 = ops.indexOf(\"\
    /\")\n        val opIndex5 = ops.indexOf(\"**\")\n        val opIndex6 = ops.indexOf(\"\
    //\")\n        val opIndex7 = ops.indexOf(\"%\")\n        val opIndex8 = ops.indexOf(\"\
    *\")\n        val opIndex9 = ops.indexOf(\"/\")\n        val opIndex10 = ops.indexOf(\"\
    **\")\n        val opIndex11 = ops.indexOf(\"//\")\n        val opIndex12 = ops.indexOf(\"\
    %\")\n        val opIndex13 = ops.indexOf(\"*\")\n        val opIndex14 = ops.indexOf(\"\
    /\")\n        val opIndex15 = ops.indexOf(\"**\")\n        val opIndex16 = ops.indexOf(\"\
    //\")\n        val opIndex17 = ops.indexOf(\"%\")\n        val opIndex18 = ops.indexOf(\"\
    *\")\n        val opIndex19 = ops.indexOf(\"/\")\n        val opIndex20 = ops.indexOf(\"\
    **\")\n        val opIndex21 = ops.indexOf(\"//\")\n        val opIndex22 = ops.indexOf(\"\
    %\")\n        val opIndex23 = ops.indexOf(\"*\")\n        val opIndex24 = ops.indexOf(\"\
    /\")\n        val opIndex25 = ops.indexOf(\"**\")\n        val opIndex26 = ops.indexOf(\"\
    //\")\n        val opIndex27 = ops.indexOf(\"%\")\n        val opIndex28 = ops.indexOf(\"\
    *\")\n        val opIndex29 = ops.indexOf(\"/\")\n        val opIndex30 = ops.indexOf(\"\
    **\")\n        val opIndex31 = ops.indexOf(\"//\")\n        val opIndex32 = ops.indexOf(\"\
    %\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    /\")\n        val opIndex35 = ops.indexOf(\"**\")\n        val opIndex36 = ops.indexOf(\"\
    //\")\n        val opIndex37 = ops.indexOf(\"%\")\n        val opIndex38 = ops.indexOf(\"\
    *\")\n        val opIndex39 = ops.indexOf(\"/\")\n        val opIndex40 = ops.indexOf(\"\
    **\")\n        val opIndex41 = ops.indexOf(\"//\")\n        val opIndex42 = ops.indexOf(\"\
    %\")\n        val ", "        val ops = op.map(_.toUpperCase)\n        val opList\
    \ = ops.toList\n        val operands = operand.toList\n        val opLen = opList.size\n\
    \        val operandLen = operands.size - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = 0L\n        val opMapKeys = opMap.keySet\n        val operandMapKeys\
    \ = operandMap.keySet\n        val opMapValues = opMap.values.toList\n       \
    \ val operandMapValues = operandMap.values.toList\n        val opMapKeysLen =\
    \ opMapKeys.size\n        val operandMapKeysLen = operandMapKeys.size\n      \
    \  val opMapValuesLen = opMapValues.size\n        val operandMapValuesLen = operandMapValues.size\n\
    \        val opMapKeysMap = new mutable.HashMap[String, Long]()\n        val operandMapKeysMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMapValuesMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMapValuesMap = new mutable.HashMap[String, Long]()\n\
    \        val opMapKeysMapKeys = opMapKeysMap.keySet\n        val operandMapKeysMapKeys\
    \ = operandMapKeysMap.keySet\n        val opMapValuesMapKeys = opMapValuesMap.keySet\n\
    \        val operandMapValuesMapKeys = operandMapValuesMap.keySet\n        val\
    \ opMapKeysMapValues = opMapKeysMap.values.toList\n        val operandMapKeysMapValues\
    \ = operandMapKeysMap.values.toList\n        val opMapValuesMapValues = opMapValuesMap.values.toList\n\
    \        val operandMapValuesMapValues = operandMapValuesMap.values.toList\n \
    \       val opMapKeysMapKeysLen = opMapKeysMapKeys.size\n        val operandMapKeysMapKeysLen\
    \ = operandMapKeysMapKeys.size\n        val opMapValuesMapKeysLen = opMapValuesMapKeys.size\n\
    \        val operandMapValuesMapKeysLen = operandMapValuesMapKeys.size\n     \
    \   val opMapKeysMapValuesLen = opMapKeysMapValues.size\n        val operandMapKeysMapValuesLen\
    \ = operandMapKeysMapValues.size\n        val opMapValuesMapValuesLen = opMapValuesMapValues.size\n\
    \        val operandMapValuesMapValuesLen", "        val opList = op.map(x =>\
    \ x.toChar)\n        val operandList = operand.map(x => x.toLong)\n        val\
    \ opLength = opList.length\n        val operandLength = operandList.length - 1\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap16", "        val ops = op.map(_.toUpperCase)\n\
    \        val opArr = ops.toArray\n        val opLen = opArr.length\n        val\
    \ opArr = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.toArray\n        val operandArr\
    \ = operand.toArray\n        val operandLen = operandArr.length\n        val opArr\
    \ = ops.toArray\n        val operandArr = operand.toArray\n        val operandLen\
    \ = operandArr.length\n        val opArr = ops.", "        val ops = op.map(_.toLowerCase)\n\
    \        val opLen = ops.size\n        val operands = operand.map(_.toLong)\n\
    \        val operandLen = operands.size\n        val opArray = Array.ofDim[String](opLen)\n\
    \        val operandArray = Array.ofDim[Long](operandLen)\n        val result\
    \ = new mutable.HashMap[String, Long]()\n        var i = 0\n        while (i <\
    \ opLen) {\n            opArray(i) = ops(i)\n            i += 1\n        }\n \
    \       val opIndex = 0\n        while (i < operandLen) {\n            operandArray(i)\
    \ = operands(i)\n            i += 1\n        }\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        var j = 0\n      \
    \  while (j < opArrayLen) {\n            var opVal = opArray(j)\n            var\
    \ operandVal = operandArray(j)\n            while (j < opArrayLen && operandArrayLen\
    \ > 0) {\n                opVal = opVal + opArray(j)\n                operandVal\
    \ = operandVal + operandArray(j)\n                j += 1\n            }\n    \
    \        val key = opVal\n            val value = operandVal\n            val\
    \ oldValue = result.getOrElse(key, 0)\n            result(key, value) = oldValue\
    \ + value\n        }\n        val keys = result.keySet\n        val values = result.values\n\
    \        val maxValue = values.max\n        val minValue = values.min\n      \
    \  if (maxValue == minValue) {\n            return maxValue\n        }\n     \
    \   val midValue = maxValue + minValue\n        val midKeys = keys.toSeq.sortBy(_._1).take(midValue\
    \ / 2).map(_.toString).toSeq\n        val midValues = values.toSeq.sortBy(_._1).take(midValue\
    \ / 2).map(_.toString).toSeq\n        val result = midKeys.zip(midValues).map(x\
    \ => x._1 + x._2).sum\n        return result", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val length = ops.size\n\
    \        val stack = mutable.Stack[Long]()\n        val result = operands.head\n\
    \        val operator = ops.head\n        val operand = operands.tail.head\n \
    \       val operators = ops.tail\n        val operator = operators.head\n    \
    \    val operands = operands.tail\n        val length = operands.size\n      \
    \  val operators = ops.map(_.toLowerCase)\n        val operands = operands.map(_.toLong)\n\
    \        val length = operands.size\n        val operator = operators.head\n \
    \       val operand = operands.head\n        val operators = ops.tail\n      \
    \  val operands = operands.tail\n        val length = operands.size\n        val\
    \ operator = operators.head\n        val operand = operands.head\n        val\
    \ operators = ops.tail\n        val operands = operands.tail\n        val length\
    \ = operands.size\n        val operator = operators.head\n        val operand\
    \ = operands.head\n        val operators = ops.tail\n        val operands = operands.tail\n\
    \        val length = operands.size\n        val operator = operators.head\n \
    \       val operand = operands.head\n        val operators = ops.tail\n      \
    \  val operands = operands.tail\n        val length = operands.size\n        val\
    \ operator = operators.head\n        val operand = operands.head\n        val\
    \ operators = ops.tail\n        val operands = operands.tail\n        val length\
    \ = operands.size\n        val operator = operators.head\n        val operand\
    \ = operands.head\n        val operators = ops.tail\n        val operands = operands.tail\n\
    \        val length = operands.size\n        val operator = operators.head\n \
    \       val operand = operands.head\n        val operators = ops.tail\n      \
    \  val operands = operands.tail\n        val length = operands.size\n        val\
    \ operator = operators.head\n        val operand = operands.head\n        val\
    \ operators = ops.tail\n        val operands = operands.tail\n        val length\
    \ = operands.size\n        val operator = operators.head\n        val operand\
    \ = operands.head\n        val operators = ops.tail\n        val operands = operands.tail\n\
    \        val length = operands.size\n        val operator = operators.head\n \
    \       val operand = operands.head\n        val operators = ops.tail\n      \
    \  val operands = operands.tail\n        val length = operands.size\n        val\
    \ operator = operators.head\n        val operand = operands.head\n        val\
    \ operator", "        val opList = op.map(x => x.toLowerCase)\n        val operandList\
    \ = operand.map(x => x.toLong)\n        val opLen = opList.length\n        val\
    \ operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opMap2 = new mutable.HashMap[String, Long]()\n        val operandMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap3 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap4 = new mutable.HashMap[String, Long]()\n        val operandMap4\
    \ = new mutable.HashMap[String, Long]()\n        val opMap5 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap5 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap6 = new mutable.HashMap[String, Long]()\n        val operandMap6\
    \ = new mutable.HashMap[String, Long]()\n        val opMap7 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap7 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap8 = new mutable.HashMap[String, Long]()\n        val operandMap8\
    \ = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap9 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap10 = new mutable.HashMap[String, Long]()\n        val operandMap10\
    \ = new mutable.HashMap[String, Long]()\n        val opMap11 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap11 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap12 = new mutable.HashMap[String, Long]()\n        val operandMap12\
    \ = new mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap13 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap14 = new mutable.HashMap[String, Long]()\n        val operandMap14\
    \ = new mutable.HashMap[String, Long]()\n        val opMap15 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap15 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap16 = new mutable.HashMap[String, Long]()\n        val operandMap",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\n\
    \        val opIndex = opList.indexOf(\"+\")\n        val opIndex2 = opList.indexOf(\"\
    *\")\n        val opIndex3 = opList.indexOf(\"/\")\n        val opIndex4 = opList.indexOf(\"\
    **\")\n        val opIndex5 = opList.indexOf(\"//\")\n        val opIndex6 = opList.indexOf(\"\
    %\")\n        val opIndex7 = opList.indexOf(\"*\")\n        val opIndex8 = opList.indexOf(\"\
    +\")\n        val opIndex9 = opList.indexOf(\"-\")\n        val opIndex10 = opList.indexOf(\"\
    //\")\n        val opIndex11 = opList.indexOf(\"**\")\n        val opIndex12 =\
    \ opList.indexOf(\"%\")\n        val opIndex13 = opList.indexOf(\"*\")\n     \
    \   val opIndex14 = opList.indexOf(\"/\")\n        val opIndex15 = opList.indexOf(\"\
    **\")\n        val opIndex16 = opList.indexOf(\"//\")\n        val opIndex17 =\
    \ opList.indexOf(\"%\")\n        val opIndex18 = opList.indexOf(\"*\")\n     \
    \   val opIndex19 = opList.indexOf(\"/\")\n        val opIndex20 = opList.indexOf(\"\
    **\")\n        val opIndex21 = opList.indexOf(\"//\")\n        val opIndex22 =\
    \ opList.indexOf(\"%\")\n        val opIndex23 = opList.indexOf(\"*\")\n     \
    \   val opIndex24 = opList.indexOf(\"/\")\n        val opIndex25 = opList.indexOf(\"\
    **\")\n        val opIndex26 = opList.indexOf(\"//\")\n        val opIndex27 =\
    \ opList.indexOf(\"%\")\n        val opIndex28 = opList.indexOf(\"*\")\n     \
    \   val opIndex29 = opList.indexOf(\"/\")\n        val opIndex30 = opList.indexOf(\"\
    **\")\n        val opIndex31 = opList.indexOf(\"//\")\n        val opIndex32 =\
    \ opList.indexOf(\"%\")\n        val opIndex33 = opList.indexOf(\"*\")\n     \
    \   val opIndex34 = opList.indexOf(\"/\")\n        val opIndex35 = opList.indexOf(\"\
    **\")\n        val opIndex36 = opList.indexOf(\"//\")\n        val opIndex37 =\
    \ opList.indexOf(\"%\")\n        val opIndex38 = opList.indexOf(\"*\")\n     \
    \   val opIndex39 = opList.", "        val ops = op.map(x => x.toChar)\n     \
    \   val operands = operand.map(x => x.toLong)\n        val opCount = ops.size\n\
    \        val operandCount = operands.size\n        val opIndex = ops.indexOf('-')\n\
    \        val op1 = ops(0)\n        val op2 = ops(opIndex == -1 ? 0 : opIndex +\
    \ 1)\n        val op3 = ops(opIndex == -1 ? opCount - 1 : opIndex + 2)\n     \
    \   val op4 = ops(opIndex == -1 ? opCount - 2 : opIndex + 3)\n        val op5\
    \ = ops(opIndex == -1 ? opCount - 3 : opIndex + 4)\n        val op6 = ops(opIndex\
    \ == -1 ? opCount - 4 : opIndex + 5)\n        val op7 = ops(opIndex == -1 ? opCount\
    \ - 5 : opIndex + 6)\n        val op8 = ops(opIndex == -1 ? opCount - 6 : opIndex\
    \ + 7)\n        val op9 = ops(opIndex == -1 ? opCount - 7 : opIndex + 8)\n   \
    \     val op10 = ops(opIndex == -1 ? opCount - 8 : opIndex + 9)\n        val op11\
    \ = ops(opIndex == -1 ? opCount - 9 : opIndex + 10)\n        val op12 = ops(opIndex\
    \ == -1 ? opCount - 10 : opIndex + 11)\n        val op13 = ops(opIndex == -1 ?\
    \ opCount - 11 : opIndex + 12)\n        val op14 = ops(opIndex == -1 ? opCount\
    \ - 12 : opIndex + 13)\n        val op15 = ops(opIndex == -1 ? opCount - 13 :\
    \ opIndex + 14)\n        val op16 = ops(opIndex == -1 ? opCount - 14 : opIndex\
    \ + 15)\n        val op17 = ops(opIndex == -1 ? opCount - 15 : opIndex + 16)\n\
    \        val op18 = ops(opIndex == -1 ? opCount - 16 : opIndex + 17)\n       \
    \ val op19 = ops(opIndex == -1 ? opCount - 17 : opIndex + 18)\n        val op20\
    \ = ops(opIndex == -1 ? opCount - 18 : opIndex + 19)\n        val op21 = ops(opIndex\
    \ == -1 ? opCount - 19 : opIndex + 20)\n        val op22 = ops(opIndex == -1 ?\
    \ opCount - 20 : opIndex + 21)\n        val op23 = ops(opIndex == -1 ", "    \
    \    val ops = op.map(x => x.toChar)\n        val operands = operand.map(x =>\
    \ x.toLong)\n        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val opIndex = 0\n        val operandIndex = 0\n        val result = operands(operandIndex)\n\
    \        while (operandIndex < operandLength) {\n            val op = ops(opIndex)\n\
    \            val operand = operands(operandIndex)\n            val opResult =\
    \ if (op == '+') operands(operandIndex + opLength) + result else operands(operandIndex\
    \ + opLength) - result\n            val operandResult = if (op == '*') operands(operandIndex\
    \ + opLength) * result else operands(operandIndex + opLength) / result\n     \
    \       val opFloorDiv = if (op == '/') operands(operandIndex + opLength).floorDiv(result)\
    \ else 0\n            val operandFloorDiv = if (op == '/') operands(operandIndex\
    \ + opLength).floorDiv(result) else 0\n            val opExp = if (op == '**')\
    \ operands(operandIndex + opLength).pow(result) else 0\n            val operandExp\
    \ = if (op == '**') operands(operandIndex + opLength).pow(result) else 0\n   \
    \         val opResultExp = if (op == '**') operands(operandIndex + opLength).pow(result)\
    \ else 0\n            val operandResultExp = if (op == '**') operands(operandIndex\
    \ + opLength).pow(result) else 0\n            val opResultFloorDiv = if (op ==\
    \ '/') operands(operandIndex + opLength).floorDiv(result) else 0\n           \
    \ val operandResultFloorDiv = if (op == '/') operands(operandIndex + opLength).floorDiv(result)\
    \ else 0\n            val opResultExpFloorDiv = if (op == '/') operands(operandIndex\
    \ + opLength).floorDiv(result) else 0\n            val operandResultExpFloorDiv\
    \ = if (op == '/') operands(operandIndex + opLength).floorDiv(result) else 0\n\
    \            val opResultExpFloorDivExp = if (op == '/') operands(operandIndex\
    \ + opLength).floorDiv(result).pow(result) else 0\n            val operandResultExpFloorDivExp\
    \ = if (op == '/') operands(operandIndex + opLength).floorDiv(result).pow(result)\
    \ else 0\n            val opResultExpFloorDivExpFloorDiv = if (op == '/') operands(operandIndex\
    \ + opLength).floorDiv(result).pow(result).floorDiv(result) else 0\n         \
    \   val operandResultExpFloorDivExpFloorDiv = if (op == '/') operand", "     \
    \   val opList = op.mkString(\"+\")\n        val opListLength = opList.split(\"\
    \\\\+\").length\n        val operandList = operand.mkString(\"+\")\n        val\
    \ operandListLength = operandList.split(\"\\\\+\").length\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opList",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val result = 0\n        val opMapKeys\
    \ = opMap.keySet\n        val operandMapKeys = operandMap.keySet\n        val\
    \ opMapValues = opMap.values.toList\n        val operandMapValues = operandMap.values.toList\n\
    \        val opMapKeysLen = opMapKeys.size\n        val operandMapKeysLen = operandMapKeys.size\n\
    \        val opMapValuesLen = opMapValues.size\n        val operandMapValuesLen\
    \ = operandMapValues.size\n        val opMapKeysSet = opMapKeys.toSet\n      \
    \  val operandMapKeysSet = operandMapKeys.toSet\n        val opMapValuesSet =\
    \ opMapValues.toSet\n        val operandMapValuesSet = operandMapValues.toSet\n\
    \        val opMapKeysSetLen = opMapKeysSet.size\n        val operandMapKeysSetLen\
    \ = operandMapKeysSet.size\n        val opMapValuesSetLen = opMapValuesSet.size\n\
    \        val operandMapValuesSetLen = operandMapValuesSet.size\n        val opMapKeysSetSet\
    \ = opMapKeysSet.toSet\n        val operandMapKeysSetSet = operandMapKeysSet.toSet\n\
    \        val opMapValuesSetSet = opMapValuesSet.toSet\n        val operandMapValuesSetSet\
    \ = operandMapValuesSet.toSet\n        val opMapKeysSetSetLen = opMapKeysSetSet.size\n\
    \        val operandMapKeysSetSetLen = operandMapKeysSetSet.size\n        val\
    \ opMapValuesSetSetLen = opMapValuesSetSet.size\n        val operandMapValuesSetSetLen\
    \ = operandMapValuesSetSet.size\n        val opMapKeysSetSetSet = opMapKeysSetSet.toSet\n\
    \        val operandMapKeysSetSetSet = operandMapKeysSetSet.toSet\n        val\
    \ opMapValuesSetSetSet = opMapValuesSetSet.toSet\n        val operandMapValuesSetSetSet\
    \ = operandMapValuesSetSet.toSet\n        val opMapKeysSetSetSetLen = opMapKeysSetSetSet.size",
  "        val ops = op.map(x => x.toChar)\n        val operands = operand.map(x =>\
    \ x.toLong)\n        val opLength = ops.size\n        val operandLength = operands.size\n\
    \        val result = operands(0) * (opLength - 1) * operands(1) * (operandLength\
    \ - 2)\n        val rest = operands.drop(2)\n        val restLength = rest.size\n\
    \        rest.zip(ops).zipWithIndex.foreach { case (op, i) =>\n            val\
    \ opLength = ops.size\n            val operandLength = operands.size\n       \
    \     val opIndex = ops.indexOf(op)\n            val operandIndex = operands.indexOf(operands(i))\n\
    \            val opValue = ops(opIndex)\n            val operandValue = operands(operandIndex)\n\
    \            val opValueLength = opValue.length\n            val operandValueLength\
    \ = operandValue.length\n            val opValueIndex = opValue.length - opValueLength\n\
    \            val operandValueIndex = operandValue.length - operandValueLength\n\
    \            val opValueValue = opValue(opValueIndex)\n            val operandValueValue\
    \ = operandValue(operandValueIndex)\n            val opValueValueLength = opValueValue.length\n\
    \            val operandValueValueLength = operandValueValue.length\n        \
    \    val opValueValueIndex = opValueValue.length - opValueValueLength\n      \
    \      val operandValueValueIndex = operandValueValue.length - operandValueValueLength\n\
    \            val opValueValueValue = opValueValue(opValueValueIndex)\n       \
    \     val operandValueValueValue = operandValueValue(operandValueValueIndex)\n\
    \            val opValueValueValueLength = opValueValueValue.length\n        \
    \    val operandValueValueValueLength = operandValueValueValue.length\n      \
    \      val opValueValueValueIndex = opValueValueValue.length - opValueValueValueLength\n\
    \            val operandValueValueValueIndex = operandValueValueValue.length -\
    \ operandValueValueValueLength\n            val opValueValueValueValue = opValueValueValue(opValueValueValueIndex)\n\
    \            val operandValueValueValueValue = operandValueValue(operandValueValueValueIndex)\n\
    \            val opValueValueValueValueLength = opValueValueValueValue.length\n\
    \            val operandValueValueValueValueLength = operandValueValueValueValueValue.length\n\
    \            val opValueValueValueValueIndex = opValueValueValueValue.length -\
    \ opValueValueValueValueValueLength\n            val operandValueValueValueValueIndex\
    \ = operandValueValueValueValueValue.length - operandValueValueValueValueValueLength\n\
    \            val opValueValueValueValueValue = opValueValueValue(opValueValueValueValueIndex)\n\
    \            val operandValueValueValueValueValue = operandValueValue(operandValueValueValueValueIndex)\n\
    \            val opValueValueValueValueValueLength = opValueValueValue", "   \
    \     val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toInt).toList\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opSet = opList.map(_.toChar).toSet\n        val operandSet\
    \ = operandList.map(_.toChar).toSet\n        val opSetLen = opSet.length\n   \
    \     val operandSetLen = operandSet.length\n        val opSetSet = opSet.intersect(operandSet)\n\
    \        val operandSetSet = operandSet.intersect(opSet)\n        val opSetSetLen\
    \ = opSetSet.length\n        val operandSetSetLen = operandSetSet.length\n   \
    \     val opSetSetSet = opSetSet.intersect(operandSetSet)\n        val operandSetSetLen\
    \ = opSetSetSet.length\n        val opSetSetSetLen = opSetSetSet.length\n    \
    \    val operandSetSetSetLen = operandSetSetSet.length\n        val opSetSetSetLen\
    \ = opSetSetSet.length\n        val operandSetSetSetLen = operandSetSetSet.length\n\
    \        val opSetSetSetLen = opSetSetSet.length\n        val operandSetSetSetLen\
    \ = operandSetSetSet.length\n        val opSetSetSetLen = opSetSetSet.length\n\
    \        val operandSetSetSetLen = operandSetSetSet.length\n        val opSetSetSetLen\
    \ = opSetSetSet.length\n        val operandSetSetSetLen = operandSetSetSet.length\n\
    \        val opSetSetSetLen = opSetSetSet.length\n        val operandSetSetSetLen\
    \ = operandSetSetSet.length\n        val opSetSetSetLen = opSetSetSet.length\n\
    \        val operandSetSetSetLen = operandSetSetSet.length\n        val opSetSetSetLen\
    \ = opSetSetSet.length\n        val operandSetSetSetLen = operandSetSetSet.length\n\
    \        val opSetSetSetLen = opSetSetSet.length\n        val operandSetSetSetLen\
    \ = operandSetSetSet.length\n        val opSetSetSetLen = opSetSetSet.length\n\
    \        val operandSetSetSetLen = operandSetSetSet.length\n        val opSetSetSetLen\
    \ = opSetSetSet.length\n        val operandSetSetSetLen = operandSetSetSet.length\n\
    \        val opSetSetSetLen = opSetSetSet.length\n        val operandSetSetSetLen\
    \ = operandSetSetSet.length\n", "        val ops = op.map(x => x.toDouble)\n \
    \       val op1 = ops.head\n        val op2 = ops.last\n        val op3 = ops.init\n\
    \        val op4 = ops.tail\n        val op5 = ops.dropRight(1)\n        val op6\
    \ = ops.dropRight(2)\n        val op7 = ops.dropRight(3)\n        val op8 = ops.dropRight(4)\n\
    \        val op9 = ops.dropRight(5)\n        val op10 = ops.dropRight(6)\n   \
    \     val op11 = ops.dropRight(7)\n        val op12 = ops.dropRight(8)\n     \
    \   val op13 = ops.dropRight(9)\n        val op14 = ops.dropRight(10)\n      \
    \  val op15 = ops.dropRight(11)\n        val op16 = ops.dropRight(12)\n      \
    \  val op17 = ops.dropRight(13)\n        val op18 = ops.dropRight(14)\n      \
    \  val op19 = ops.dropRight(15)\n        val op20 = ops.dropRight(16)\n      \
    \  val op21 = ops.dropRight(17)\n        val op22 = ops.dropRight(18)\n      \
    \  val op23 = ops.dropRight(19)\n        val op24 = ops.dropRight(20)\n      \
    \  val op25 = ops.dropRight(21)\n        val op26 = ops.dropRight(22)\n      \
    \  val op27 = ops.dropRight(23)\n        val op28 = ops.dropRight(24)\n      \
    \  val op29 = ops.dropRight(25)\n        val op30 = ops.dropRight(26)\n      \
    \  val op31 = ops.dropRight(27)\n        val op32 = ops.dropRight(28)\n      \
    \  val op33 = ops.dropRight(29)\n        val op34 = ops.dropRight(30)\n      \
    \  val op35 = ops.dropRight(31)\n        val op36 = ops.dropRight(32)\n      \
    \  val op37 = ops.dropRight(33)\n        val op38 = ops.dropRight(34)\n      \
    \  val op39 = ops.dropRight(35)\n        val op40 = ops.dropRight(36)\n      \
    \  val op41 = ops.dropRight(37)\n        val op42 = ops.dropRight(38)\n      \
    \  val op43 = ops.dropRight(39)\n        val op44 = ops.dropRight(40)\n      \
    \  val op45 = ops.dropRight(41)\n        val op46 = ops.dropRight(42)\n      \
    \  val op47 = ops.dropRight(4", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opMap = {\n          \
    \  val opMap = new mutable.HashMap[String, Long]\n            opList.foreach(op\
    \ => {\n                opMap += op -> (opMap.getOrElse(op, 0L) + 1)\n       \
    \     })\n            opMap\n        }\n        val operandMap = {\n         \
    \   val operandMap = new mutable.HashMap[String, Long]\n            operandList.foreach(operand\
    \ => {\n                operandMap += operand -> (operandMap.getOrElse(operand,\
    \ 0L) + 1)\n            })\n            operandMap\n        }\n        val opKeys\
    \ = opMap.keys.toList\n        val operandKeys = operandMap.keys.toList\n    \
    \    val opKeysLen = opKeys.size\n        val operandKeysLen = operandKeys.size\n\
    \        val opKeysMap = {\n            val opKeysMap = new mutable.HashMap[String,\
    \ Long]\n            opKeys.foreach(op => {\n                opKeysMap += op ->\
    \ (opKeysMap.getOrElse(op, 0L) + 1)\n            })\n            opKeysMap\n \
    \       }\n        val operandKeysMap = {\n            val operandKeysMap = new\
    \ mutable.HashMap[String, Long]\n            operandKeys.foreach(operand => {\n\
    \                operandKeysMap += operand -> (operandKeysMap.getOrElse(operand,\
    \ 0L) + 1)\n            })\n            operandKeysMap\n        }\n        val\
    \ opKeysKeys = opKeysMap.keys.toList\n        val operandKeysKeys = operandKeysMap.keys.toList\n\
    \        val opKeysKeysLen = opKeysKeys.size\n        val operandKeysKeysLen =\
    \ operandKeysKeys.size\n        val opKeysKeysMap = {\n            val opKeysKeysMap\
    \ = new mutable.HashMap[String, Long]\n            opKeysKeys.foreach(op => {\n\
    \                opKeysKeysMap += op -> (opKeysKeysMap.getOrElse(op, 0L) + 1)\n\
    \            })\n            opKeysKeysMap\n        }\n        val operandKeysKeysMap\
    \ = {\n            val operandKeysKeysMap = new mutable.HashMap[String, Long]\n\
    \            operandKeysKeys.foreach(operand => {\n                operandKeysKeysMap\
    \ += operand -> (operandKeysKeysMap.getOrElse(operand, 0L) + 1)", "        val\
    \ opList = op.map(x => x.toLowerCase).toList\n        val operandList = operand.map(x\
    \ => x.toLong).toList\n        val opLen = opList.length\n        val operandLen\
    \ = operandList.length\n        val opIndex = 0\n        val operandIndex = 0\n\
    \        var result = 0L\n        while(opIndex < opLen && operandIndex < operandLen)\
    \ {\n            val op = opList(opIndex)\n            val operand = operandList(operandIndex)\n\
    \            val opVal = opIndex + operandIndex\n            val operandVal =\
    \ opIndex + operandIndex + 1\n            val opVal2 = opIndex + operandIndex\
    \ + 2\n            val operandVal2 = opIndex + operandIndex + 3\n            val\
    \ opVal3 = opIndex + operandIndex + 4\n            val operandVal3 = opIndex +\
    \ operandIndex + 5\n            val opVal4 = opIndex + operandIndex + 6\n    \
    \        val operandVal4 = opIndex + operandIndex + 7\n            val opVal5\
    \ = opIndex + operandIndex + 8\n            val operandVal5 = opIndex + operandIndex\
    \ + 9\n            val opVal6 = opIndex + operandIndex + 10\n            val operandVal6\
    \ = opIndex + operandIndex + 11\n            val opVal7 = opIndex + operandIndex\
    \ + 12\n            val operandVal7 = opIndex + operandIndex + 13\n          \
    \  val opVal8 = opIndex + operandIndex + 14\n            val operandVal8 = opIndex\
    \ + operandIndex + 15\n            val opVal9 = opIndex + operandIndex + 16\n\
    \            val operandVal9 = opIndex + operandIndex + 17\n            val opVal10\
    \ = opIndex + operandIndex + 18\n            val operandVal10 = opIndex + operandIndex\
    \ + 19\n            val opVal11 = opIndex + operandIndex + 20\n            val\
    \ operandVal11 = opIndex + operandIndex + 21\n            val opVal12 = opIndex\
    \ + operandIndex + 22\n            val operandVal12 = opIndex + operandIndex +\
    \ 23\n            val opVal13 = opIndex + operandIndex + 24\n            val operandVal13\
    \ = opIndex + operandIndex + 25\n            val opVal14 = opIndex + operandIndex\
    \ + 26\n            val operandVal14 = opIndex + operandIndex + 27\n         \
    \   val opVal15 = opIndex + operandIndex + 28\n            val operandVal15 =\
    \ opIndex + operandIndex + 29\n            val opVal16 = opIndex + operandIndex\
    \ + 30\n            val operandVal16 = opIndex + operand", "        val opList\
    \ = op.mkString(\"+\")\n        val opList2 = op.mkString(\"*\")\n        val\
    \ opList3 = op.mkString(\"//\")\n        val opList4 = op.mkString(\"**\")\n \
    \       val opList5 = op.mkString(\"+\")\n        val opList6 = op.mkString(\"\
    *\")\n        val opList7 = op.mkString(\"//\")\n        val opList8 = op.mkString(\"\
    **\")\n        val opList9 = op.mkString(\"+\")\n        val opList10 = op.mkString(\"\
    *\")\n        val opList11 = op.mkString(\"//\")\n        val opList12 = op.mkString(\"\
    **\")\n        val opList13 = op.mkString(\"+\")\n        val opList14 = op.mkString(\"\
    *\")\n        val opList15 = op.mkString(\"//\")\n        val opList16 = op.mkString(\"\
    **\")\n        val opList17 = op.mkString(\"+\")\n        val opList18 = op.mkString(\"\
    *\")\n        val opList19 = op.mkString(\"//\")\n        val opList20 = op.mkString(\"\
    **\")\n        val opList21 = op.mkString(\"+\")\n        val opList22 = op.mkString(\"\
    *\")\n        val opList23 = op.mkString(\"//\")\n        val opList24 = op.mkString(\"\
    **\")\n        val opList25 = op.mkString(\"+\")\n        val opList26 = op.mkString(\"\
    *\")\n        val opList27 = op.mkString(\"//\")\n        val opList28 = op.mkString(\"\
    **\")\n        val opList29 = op.mkString(\"+\")\n        val opList30 = op.mkString(\"\
    *\")\n        val opList31 = op.mkString(\"//\")\n        val opList32 = op.mkString(\"\
    **\")\n        val opList33 = op.mkString(\"+\")\n        val opList34 = op.mkString(\"\
    *\")\n        val opList35 = op.mkString(\"//\")\n        val opList36 = op.mkString(\"\
    **\")\n        val opList37 = op.mkString(\"+\")\n        val opList38 = op.mkString(\"\
    *\")\n        val opList39 = op.mkString(\"//\")\n        val opList40 = op.mkString(\"\
    **\")\n        val opList41 = op.mkString(\"+\")\n        val opList42 = op.mkString(\"\
    *\")\n        val opList43 = op.mkString(\"//\")\n        val opList44 = op.mkString(\"\
    **\")\n        val opList45 = op.mkString(\"+\")\n        val opList46 = op.mk",
  "        val ops = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val length = ops.length\n        val result = 0L\n        val stack =\
    \ mutable.Stack[Long]()\n        val operators = mutable.HashMap[String, Long]()\n\
    \        val operatorStack = mutable.Stack[String]()\n        val operandStack\
    \ = mutable.Stack[Long]()\n        val operatorStackCount = mutable.Stack[Int]()\n\
    \        val operandStackCount = mutable.Stack[Int]()\n        val operatorStackCountStack\
    \ = mutable.Stack[Int]()\n        val operandStackCountStack = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCount = mutable.Stack[Int]()\n        val\
    \ operandStackCountStackCount = mutable.Stack[Int]()\n        val operatorStackCountStackCountStack\
    \ = mutable.Stack[Int]()\n        val operandStackCountStackCountStack = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCountStackCount = mutable.Stack[Int]()\n \
    \       val operandStackCountStackCountStackCount = mutable.Stack[Int]()\n   \
    \     val operatorStackCountStackCountStackCountStack = mutable.Stack[Int]()\n\
    \        val operandStackCountStackCountStackCountStack = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCountStackCountStackCount = mutable.Stack[Int]()\n\
    \        val operandStackCountStackCountStackCountStackCount = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCountStackCountStackCountStack = mutable.Stack[Int]()\n\
    \        val operandStackCountStackCountStackCountStackCountStack = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCountStackCountStackCountStackCount = mutable.Stack[Int]()\n\
    \        val operandStackCountStackCountStackCountStackCountStackCount = mutable.Stack[Int]()\n\
    \        val operatorStackCountStackCountStackCountStackCountStackCountStack =\
    \ mutable.Stack[Int]()\n        val operandStackCountStackCountStackCountStackCountStackCountStack\
    \ = mutable.Stack[Int]()\n        val operatorStackCountStackCountStackCountStackCountStackCountStackCount\
    \ = mutable.Stack[Int]()\n        val operandStackCountStackCountStackCountStackCountStackCountStackCount\
    \ = mutable.Stack[Int]()\n        val operatorStackCountStackCountStackCountStackCountStackCountStackCountStack\
    \ = mutable.", "        val ops = op.map(_.toLowerCase)\n        val opLen = ops.size\n\
    \        val opArr = ops.toArray\n        val opArr_length = opArr.length\n  \
    \      val operandArr = operand.toArray\n        val operandArr_length = operandArr.length\n\
    \        val result = operandArr.foldLeft(0) { (acc, x) => \n            val op\
    \ = ops(0)\n            val operand = operandArr(0)\n            val opArr_length\
    \ = opArr.length\n            val operandArr_length = operandArr.length\n    \
    \        val opArr_length = opArr.length\n            val operandArr_length =\
    \ operandArr.length\n            val opArr_length = opArr.length\n           \
    \ val operandArr_length = operandArr.length\n            val opArr_length = opArr.length\n\
    \            val operandArr_length = operandArr.length\n            val opArr_length\
    \ = opArr.length\n            val operandArr_length = operandArr.length\n    \
    \        val opArr_length = opArr.length\n            val operandArr_length =\
    \ operandArr.length\n            val opArr_length = opArr.length\n           \
    \ val operandArr_length = operandArr.length\n            val opArr_length = opArr.length\n\
    \            val operandArr_length = operandArr.length\n            val opArr_length\
    \ = opArr.length\n            val operandArr_length = operandArr.length\n    \
    \        val opArr_length = opArr.length\n            val operandArr_length =\
    \ operandArr.length\n            val opArr_length = opArr.length\n           \
    \ val operandArr_length = operandArr.length\n            val opArr_length = opArr.length\n\
    \            val operandArr_length = operandArr.length\n            val opArr_length\
    \ = opArr.length\n            val operandArr_length = operandArr.length\n    \
    \        val opArr_length = opArr.length\n            val operandArr_length =\
    \ operandArr.length\n            val opArr_length = opArr.length\n           \
    \ val operandArr_length = operandArr.length\n            val opArr_length = opArr.length\n\
    \            val operandArr_length = operandArr.length\n            val opArr_length\
    \ = opArr.length\n            val operandArr_length = operandArr.length\n    \
    \        val opArr_length = opArr.length\n            val operandArr_length =\
    \ operandArr.length\n            val opArr_length = opArr.length\n           \
    \ val operandArr_length = operandArr.length\n            val opArr_", "      \
    \  val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        var result = 0L\n        var\
    \ i = 0\n        while (i < opLen) {\n            opMap.put(opList(i), operandList(i))\n\
    \            i += 1\n        }\n        val opKeys = opMap.keys.toList\n     \
    \   val opValues = opMap.values.toList\n        var j = 0\n        while (j <\
    \ operandLen) {\n            operandMap.put(opKeys(j), operandList(j))\n     \
    \       j += 1\n        }\n        val operandKeys = operandMap.keys.toList\n\
    \        val operandValues = operandMap.values.toList\n        var k = 0\n   \
    \     while (k < (operandLen + opLen)) {\n            val opKey = opKeys(k)\n\
    \            val opValue = opValues(k)\n            val operandKey = operandKeys(k)\n\
    \            val operandValue = operandValues(k)\n            val opVal = opMap.get(opKey)\n\
    \            val operandVal = operandMap.get(operandKey)\n            val opVal2\
    \ = opMap.get(opKey)\n            val operandVal2 = operandMap.get(operandKey)\n\
    \            val opVal3 = opMap.get(opKey)\n            val operandVal3 = operandMap.get(operandKey)\n\
    \            val opVal4 = opMap.get(opKey)\n            val operandVal4 = operandMap.get(operandKey)\n\
    \            val opVal5 = opMap.get(opKey)\n            val operandVal5 = operandMap.get(operandKey)\n\
    \            val opVal6 = opMap.get(opKey)\n            val operandVal6 = operandMap.get(operandKey)\n\
    \            val opVal7 = opMap.get(opKey)\n            val operandVal7 = operandMap.get(operandKey)\n\
    \            val opVal8 = opMap.get(opKey)\n            val operandVal8 = operandMap.get(operandKey)\n\
    \            val opVal9 = opMap.get(opKey)\n            val operandVal9 = operandMap.get(operandKey)\n\
    \            val opVal10 = opMap.get(opKey)\n            val operandVal10 = operandMap.get(operandKey)\n\
    \            val opVal11 = opMap.get(opKey)\n            val operandVal11 = operandMap.get(operandKey)\n\
    \            val opVal12 = opMap.get(opKey)\n            val operandVal12 = operandMap.get(operandKey)\n\
    \            val op", "        val ops = op.map(_.toLowerCase).toList\n      \
    \  val operands = operand.map(_.toLong).toList\n        val opLen = ops.size\n\
    \        val operandLen = operands.size - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMapKeys =\
    \ ops.toList\n        val operandMapKeys = operands.toList\n        val opMapValues\
    \ = ops.map(_.toLong)\n        val operandMapValues = operands.map(_.toLong)\n\
    \        val opMapKeySet = opMapKeys.toSet\n        val operandMapKeySet = operandMapKeys.toSet\n\
    \        val opMapValueSet = opMapValues.toSet\n        val operandMapValueSet\
    \ = operandMapValues.toSet\n        val opMapKeysSize = opMapKeys.size\n     \
    \   val operandMapKeysSize = operandMapKeys.size\n        val opMapValueSize =\
    \ opMapValues.size\n        val operandMapValueSize = operandMapValues.size\n\
    \        val opMapKeysSet = opMapKeySet.toSet\n        val operandMapKeysSet =\
    \ operandMapKeySet.toSet\n        val opMapValueSet = opMapValueSet.toSet\n  \
    \      val operandMapValueSet = operandMapValueSet.toSet\n        val opMapKeysSize\
    \ = opMapKeys.size\n        val operandMapKeysSize = operandMapKeys.size\n   \
    \     val opMapValueSize = opMapValues.size\n        val operandMapValueSize =\
    \ operandMapValues.size\n        val opMapKeysSet = opMapKeysSet.toSet\n     \
    \   val operandMapKeysSet = operandMapKeysSet.toSet\n        val opMapValueSet\
    \ = opMapValueSet.toSet\n        val operandMapValueSet = operandMapValueSet.toSet\n\
    \        val opMapKeysSize = opMapKeys.size\n        val operandMapKeysSize =\
    \ operandMapKeys.size\n        val opMapValueSize = opMapValues.size\n       \
    \ val operandMapValueSize = operandMapValues.size\n        val opMapKeysSet =\
    \ opMapKeysSet.toSet\n        val operandMapKeysSet = operandMapKeysSet.toSet\n\
    \        val opMapValueSet = opMapValueSet.toSet\n        val operandMapValueSet\
    \ = operandMapValueSet.toSet\n        val opMapKeysSize = opMapKeys.size", " \
    \       val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val length = opList.size\n        val result = operandList(0)\n     \
    \   val ops = opList.drop(1)\n        val opLength = ops.size\n        val opIndex\
    \ = 0\n        val operandIndex = 1\n        while(opIndex < opLength) {\n   \
    \         val op = ops(opIndex)\n            val operand = operandList(operandIndex)\n\
    \            val opResult = if (op == \"+\") {\n                result + operand\n\
    \            } else if (op == \"-\") {\n                result - operand\n   \
    \         } else if (op == \"*\") {\n                result * operand\n      \
    \      } else if (op == \"//\") {\n                result / operand\n        \
    \    } else if (op == \"**\") {\n                result ** operand\n         \
    \   }\n            result += opResult\n            opIndex += 1\n            operandIndex\
    \ += 1\n        }\n        result", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.length\n\
    \        val operandLen = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val result = new mutable.HashMap[String, Long]()\n        val opMap2 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap3 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap3 = new mutable.HashMap[String, Long]()\n        val opMap4 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap5 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap5 = new mutable.HashMap[String, Long]()\n        val opMap6 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap7 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap7 = new mutable.HashMap[String, Long]()\n        val opMap8 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap9 = new mutable.HashMap[String, Long]()\n        val\
    \ operandMap9 = new mutable.HashMap[String, Long]()\n        val opMap10 = new\
    \ mutable.HashMap[String, Long]()\n        val operandMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap11 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap11 = new mutable.HashMap[String, Long]()\n        val opMap12\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap13 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap13 = new mutable.HashMap[String, Long]()\n        val opMap14\
    \ = new mutable.HashMap[String, Long]()\n        val operandMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap15 = new mutable.HashMap[String, Long]()\n       \
    \ val operandMap15 = new mutable.HashMap[String, Long]()\n        val opMap16\
    \ = new mutable.Hash", "        val ops = op.map(_.toLowerCase).toList\n     \
    \   val opLen = ops.length\n        val opArray = ops.toArray\n        val operandArray\
    \ = operand.toArray\n        val opArrayLen = opArray.length\n        val operandArrayLen\
    \ = operandArray.length\n        val opArrayLenMinusOne = opArrayLen - 1\n   \
    \     val operandArrayLenMinusOne = operandArrayLen - 1\n        val opArrayLenMinusOneMinusOne\
    \ = opArrayLen - 1 - 1\n        val operandArrayLenMinusOneMinusOne = operandArrayLen\
    \ - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOne = opArrayLen - 1 - 1\
    \ - 1\n        val operandArrayLenMinusOneMinusOneMinusOne = operandArrayLen -\
    \ 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOne = opArrayLen\
    \ - 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n    \
    \    val opArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n\
    \        val operandArrayLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandArrayLen - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -\
    \ 1 - 1 - 1 - 1\n        val opArrayLenMinusOneMinusOneMinusOneMinusOneMinus",
  "        val opList = op.map(_.toLowerCase).toList\n        val operandList = operand.map(_.toLong).toList\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = opList.zip(operandList).map(x => x._1 -> x._2)\n  \
    \      val opMapLen = opMap.length\n        val opMapKeys = opMap.keys\n     \
    \   val opMapValues = opMap.values.toList\n        val opMapKeysLen = opMapKeys.length\n\
    \        val opMapValuesLen = opMapValues.length\n        val opMapKeysVal = opMapKeys.map(x\
    \ => x.toLong)\n        val opMapKeysValLen = opMapKeysVal.length\n        val\
    \ opMapValuesVal = opMapValues.map(x => x.toLong)\n        val opMapValuesValLen\
    \ = opMapValuesVal.length\n        val opMapKeysValVal = opMapKeysVal.zip(opMapValuesVal).map(x\
    \ => x._1 -> x._2)\n        val opMapKeysValValLen = opMapKeysValVal.length\n\
    \        val opMapValuesValVal = opMapValuesVal.zip(opMapValuesVal).map(x => x._1\
    \ -> x._2)\n        val opMapValuesValValLen = opMapValuesValVal.length\n    \
    \    val opMapKeysValValVal = opMapKeysValVal.zip(opMapValuesValVal).map(x =>\
    \ x._1 -> x._2)\n        val opMapKeysValValValLen = opMapKeysValValVal.length\n\
    \        val opMapValuesValValVal = opMapValuesValVal.zip(opMapValuesValVal).map(x\
    \ => x._1 -> x._2)\n        val opMapValuesValValValLen = opMapValuesValValVal.length\n\
    \        val opMapKeysValValValVal = opMapKeysValValVal.zip(opMapValuesValValVal).map(x\
    \ => x._1 -> x._2)\n        val opMapKeysValValValValLen = opMapKeysValValValVal.length\n\
    \        val opMapValuesValValValVal = opMapValuesValValVal.zip(opMapValuesValValVal).map(x\
    \ => x._1 -> x._2)\n        val opMapValuesValValValValLen = opMapValuesValValValVal.length\n\
    \        val opMap", "        val ops = op.map(_.toChar)\n        val operands\
    \ = operand.map(_.toLong)\n        val opLength = ops.size\n        val operandLength\
    \ = operands.size\n        val result = operands.foldLeft(0L) {\n            (acc,\
    \ x) => acc + (ops.zip(operands).map { case (op, x) => op(x) * x }.reduceLeftOption(_\
    \ + _).getOrElse(0L))\n        }\n        result", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLength = opList.length\n\
    \        val operandLength = operandList.length - 1\n        val opMap = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap = new mutable.HashMap[String, Long]()\n    \
    \    val opIndex = 0\n        val operandIndex = 0\n        while (operandIndex\
    \ < operandLength) {\n            opMap.put(opList(opIndex), operandList(operandIndex))\n\
    \            operandIndex += 1\n        }\n        while (operandIndex < operandLength)\
    \ {\n            operandMap.put(opList(opIndex), operandList(operandIndex))\n\
    \            operandIndex += 1\n        }\n        val opKey = opMap.toSeq.sortBy(_._1).map(_._1).mkString\n\
    \        val operandKey = operandMap.toSeq.sortBy(_._1).map(_._1).mkString\n \
    \       val opValue = opMap.get(opKey)\n        val operandValue = operandMap.get(operandKey)\n\
    \        val result = opValue + operandValue\n        result", "        val opList\
    \ = op.map(_.toUpperCase)\n        val opLen = opList.length\n        val operandList\
    \ = operand.map(_.toLong)\n        val operandLen = operandList.length\n     \
    \   val opMap : Map[String, Long] = opList.zip(operandList).map(x => (x._1, x._2)).toMap\n\
    \        val opLenMap = opList.zip(operandList).map(x => (x._1, x._2.length)).toMap\n\
    \        val opLenMinusOne = opLenMap - \"+\"\n        val opLenMinusTwo = opLenMap\
    \ - \"*\"\n        val opLenMinusThree = opLenMap - \"//\"\n        val opLenMinusFour\
    \ = opLenMap - \"**\"\n        val opLenMinusFive = opLenMap - \"-\"\n       \
    \ val opLenMinusSix = opLenMap - \"+\"\n        val opLenMinusSeven = opLenMap\
    \ - \"*\"\n        val opLenMinusEight = opLenMap - \"//\"\n        val opLenMinusNine\
    \ = opLenMap - \"**\"\n        val opLenMinusTen = opLenMap - \"-\"\n        val\
    \ opLenMinusEleven = opLenMap - \"+\"\n        val opLenMinusTwelve = opLenMap\
    \ - \"*\"\n        val opLenMinusThirteen = opLenMap - \"//\"\n        val opLenMinusFourteen\
    \ = opLenMap - \"**\"\n        val opLenMinusFifteen = opLenMap - \"-\"\n    \
    \    val opLenMinusSixteen = opLenMap - \"+\"\n        val opLenMinusSeventeen\
    \ = opLenMap - \"*\"\n        val opLenMinusEighteen = opLenMap - \"//\"\n   \
    \     val opLenMinusNineteen = opLenMap - \"**\"\n        val opLenMinusTwenty\
    \ = opLenMap - \"-\"\n        val opLenMinusThirty = opLenMap - \"+\"\n      \
    \  val opLenMinusFourty = opLenMap - \"*\"\n        val opLenMinusFifty = opLenMap\
    \ - \"//\"\n        val opLenMinusSixty = opLenMap - \"**\"\n        val opLenMinusSeventy\
    \ = opLenMap - \"-\"\n        val opLenMinusE", "        val ops = op.map(_.toUpperCase)\n\
    \        val operands = operand.map(_.toLong)\n        val length = ops.length\n\
    \        val stack = mutable.Stack[Long]()\n        val result = operands.head\n\
    \        val operator = ops.head\n        val operand = operands.tail.head\n \
    \       val operators = ops.tail\n        while(operands.nonEmpty) {\n       \
    \     val operator = ops.head\n            val operand = operands.head\n     \
    \       val operators = ops.tail\n            val value = operand match {\n  \
    \              case i: Int => i.toLong\n                case _ => operand\n  \
    \          }\n            val stack = mutable.Stack[Long]()\n            while(operators.nonEmpty)\
    \ {\n                val operator = operators.head\n                val operand\
    \ = operands.head\n                val operators = operators.tail\n          \
    \      val value = operand match {\n                    case i: Int => i.toLong\n\
    \                    case _ => operand\n                }\n                val\
    \ stack = mutable.Stack[Long]()\n                val result = value match {\n\
    \                    case i: Int => i.toLong\n                    case _ => value\n\
    \                }\n                val stack = mutable.Stack[Long]()\n      \
    \          val result = value match {\n                    case i: Int => i.toLong\n\
    \                    case _ => value\n                }\n                val stack\
    \ = mutable.Stack[Long]()\n                val result = value match {\n      \
    \              case i: Int => i.toLong\n                    case _ => value\n\
    \                }\n                val stack = mutable.Stack[Long]()\n      \
    \          val result = value match {\n                    case i: Int => i.toLong\n\
    \                    case _ => value\n                }\n                val stack\
    \ = mutable.Stack[Long]()\n                val result = value match {\n      \
    \              case i: Int => i.toLong\n                    case _ => value\n\
    \                }\n                val stack = mutable.Stack[Long]()\n      \
    \          val result = value match {\n                    case i: Int => i.toLong\n\
    \                    case _ => value\n                }\n                val stack\
    \ = mutable.Stack[Long]()\n                val result = value match {\n      \
    \              case i: Int => i.toLong\n                    case _ => value\n\
    \                }\n                val stack = mutable.Stack[Long]()\n      \
    \          val result = value match {\n                    case i: Int => i.toLong\n\
    \                    case _ => value\n                }\n                val stack\
    \ = mutable.Stack[Long]()\n                val result = value match {\n      \
    \              case i: Int => i.toLong\n                    case _ => value\n\
    \                }\n                val stack = mutable.Stack[Long]()\n      \
    \          val result = value ", "        val ops = op.map(_.toUpperCase)\n  \
    \      val opLen = ops.size\n        val opArray = ops.toArray\n        val operandLen\
    \ = operand.size\n        val operandArray = operand.toArray\n        val result\
    \ = operandArray(0)\n        val op1 = opArray(0)\n        val op2 = opArray(1)\n\
    \        val op3 = opArray(2)\n        val op4 = opArray(3)\n        val op5 =\
    \ opArray(4)\n        val op6 = opArray(5)\n        val op7 = opArray(6)\n   \
    \     val op8 = opArray(7)\n        val op9 = opArray(8)\n        val op10 = opArray(9)\n\
    \        val op11 = opArray(10)\n        val op12 = opArray(11)\n        val op13\
    \ = opArray(12)\n        val op14 = opArray(13)\n        val op15 = opArray(14)\n\
    \        val op16 = opArray(15)\n        val op17 = opArray(16)\n        val op18\
    \ = opArray(17)\n        val op19 = opArray(18)\n        val op20 = opArray(19)\n\
    \        val op21 = opArray(20)\n        val op22 = opArray(21)\n        val op23\
    \ = opArray(22)\n        val op24 = opArray(23)\n        val op25 = opArray(24)\n\
    \        val op26 = opArray(25)\n        val op27 = opArray(26)\n        val op28\
    \ = opArray(27)\n        val op29 = opArray(28)\n        val op30 = opArray(29)\n\
    \        val op31 = opArray(30)\n        val op32 = opArray(31)\n        val op33\
    \ = opArray(32)\n        val op34 = opArray(33)\n        val op35 = opArray(34)\n\
    \        val op36 = opArray(35)\n        val op37 = opArray(36)\n        val op38\
    \ = opArray(37)\n        val op39 = opArray(38)\n        val op40 = opArray(39)\n\
    \        val op41 = opArray(40)\n        val op42 = opArray(41)\n        val op43\
    \ = opArray(42)\n        val op44 = opArray(43)\n        val op45 = opArray(44)\n\
    \        val op46 = opArray(45)\n        val op47 = opArray(46)\n        val op48\
    \ = opArray(47)\n        val op49 = opArray(48)\n        val op50 = opArray(49)\n",
  "        val ops = op.map(x => x.toChar)\n        val opList = ops.toList\n    \
    \    val operands = operand.toList\n        val length = opList.size\n       \
    \ val opLength = operands.size - 1\n        val opLength = opLength.toInt\n  \
    \      val result = operands.head\n        val op1 = operands.tail.head\n    \
    \    val op2 = operands.tail.tail.head\n        val op3 = operands.tail.tail.tail.head\n\
    \        val op4 = operands.tail.tail.tail.tail.head\n        val op5 = operands.tail.tail.tail.tail.tail.head\n\
    \        val op6 = operands.tail.tail.tail.tail.tail.tail.head\n        val op7\
    \ = operands.tail.tail.tail.tail.tail.tail.tail.head\n        val op8 = operands.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op9 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op10 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op11 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op12 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op13 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op14 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op15 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op16 = operands.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        val op17 = operands.tail.tail.tail.tail.tail.tail.", "        val ops\
    \ = op.map(_.toUpperCase)\n        val opLen = ops.size\n        val operandLen\
    \ = operand.size\n        val opIndex = ops.indexOf(\"+\")\n        val op1 =\
    \ if (opIndex == -1) operand.head else operand.head\n        val op2 = if (opIndex\
    \ == opLen-1) operand.last else operand.last\n        val op3 = if (opIndex ==\
    \ opLen-2) operand.last+1 else operand.last+1\n        val op4 = if (opIndex ==\
    \ opLen-3) operand.last+2 else operand.last+2\n        val op5 = if (opIndex ==\
    \ opLen-4) operand.last+3 else operand.last+3\n        val op6 = if (opIndex ==\
    \ opLen-5) operand.last+4 else operand.last+4\n        val op7 = if (opIndex ==\
    \ opLen-6) operand.last+5 else operand.last+5\n        val op8 = if (opIndex ==\
    \ opLen-7) operand.last+6 else operand.last+6\n        val op9 = if (opIndex ==\
    \ opLen-8) operand.last+7 else operand.last+7\n        val op10 = if (opIndex\
    \ == opLen-9) operand.last+8 else operand.last+8\n        val op11 = if (opIndex\
    \ == opLen-10) operand.last+9 else operand.last+9\n        val op12 = if (opIndex\
    \ == opLen-11) operand.last+10 else operand.last+10\n        val op13 = if (opIndex\
    \ == opLen-12) operand.last+11 else operand.last+11\n        val op14 = if (opIndex\
    \ == opLen-13) operand.last+12 else operand.last+12\n        val op15 = if (opIndex\
    \ == opLen-14) operand.last+13 else operand.last+13\n        val op16 = if (opIndex\
    \ == opLen-15) operand.last+14 else operand.last+14\n        val op17 = if (opIndex\
    \ == opLen-16) operand.last+15 else operand.last+15\n        val op18 = if (opIndex\
    \ == opLen-17) operand.last+16 else operand.last+16\n        val op19 = if (opIndex\
    \ == opLen-18) operand.last+17 else operand.last+17\n        val op20 = if (opIndex\
    \ == opLen-19) operand.last+18 else operand.last+18\n        val op", "      \
    \  val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.size\n        val operandLen = operandList.size\n\
    \        val opMap : Map[String, Int] = opList.zip(operandList).map(x => (x._1,\
    \ x._2)).toMap\n        val operandMap : Map[Int, Int] = operandList.zip(operandList).map(x\
    \ => (x._1, x._2)).toMap\n        val opKeys = opMap.keys\n        val operandKeys\
    \ = operandMap.keys\n        val opKeysLen = opKeys.size\n        val operandKeysLen\
    \ = operandKeys.size\n        val opValues = opMap.values.toList\n        val\
    \ operandValues = operandMap.values.toList\n        val opValueLen = opValues.size\n\
    \        val operandValueLen = operandValues.size\n        val opValueMap : Map[String,\
    \ Int] = opValues.zip(operandValues).map(x => (x._1, x._2)).toMap\n        val\
    \ operandValueMap : Map[Int, Int] = operandValues.zip(operandValues).map(x =>\
    \ (x._1, x._2)).toMap\n        val opKeysValues = opKeysValues.toList\n      \
    \  val operandKeysValues = operandKeysValues.toList\n        val opKeysValueLen\
    \ = opKeysValues.size\n        val operandKeysValueLen = operandKeysValues.size\n\
    \        val opKeysValueMap : Map[String, Int] = opKeysValues.zip(operandKeysValues).map(x\
    \ => (x._1, x._2)).toMap\n        val operandKeysValueMap : Map[Int, Int] = operandKeysValues.zip(operandKeysValues).map(x\
    \ => (x._1, x._2)).toMap\n        val opKeysValueMapLen = opKeysValueMapLen\n\
    \        val operandKeysValueMapLen = operandKeysValueMapLen\n        val opKeysValueMapKeys\
    \ = opKeysValueMap.keys\n        val operandKeysValueMapKeys = operandKeysValueMap.keys\n\
    \        val opKeysValueMapKeysLen = opKeysValueMapKeys.size\n        val operandKeysValueMapKeysLen\
    \ = operandKeysValueMapKeys.size\n        val opKeysValueMapValues = opKeysValueMap.values.toList\n\
    \        val operandKeysValueMapValues = operandKeysValueMap.values.toList\n \
    \       val opKey", "        var result : Long = 0\n        for(i <- 0 until operand.length-1)\
    \ {\n            val a = operand(i)\n            val b = operand(i+1)\n      \
    \      val op = op(i)\n            result += (if (op == \"+\") { a + b } else\
    \ { a - b })\n        }\n        result", "        val opList = op.map(_.toUpperCase)\n\
    \        val operandList = operand.map(_.toLong)\n        val opLen = opList.size\n\
    \        val operandLen = operandList.size\n        val opSet = opList.map(_.toChar)\n\
    \        val opSetLen = opSet.size\n        val opSetSet = opSet.map(c => opSet.indexOf(c))\n\
    \        val opSetSetLen = opSetSet.size\n        val opSetSetSetLen = opSetSetSet.size\n\
    \        val opSetSetSetSetLen = opSetSetSetSet.size\n        val opSetSetSetSetSetLen\
    \ = opSetSetSetSetSet.size\n        val opSetSetSetSetSetSetLen = opSetSetSetSetSetSet.size\n\
    \        val opSetSetSetSetSetSetLen = opSetSetSetSetSetSetSet.size\n        val\
    \ opSetSetSetSetSetSetSetLen = opSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetSetLen\
    \ = opSetSetSetSetSetSetSetSetSetSetSetSetSetSetSet.size\n        val opSetSetSetSetSetSetSetSetSetSetSetSet",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val opMap2\
    \ = new mutable.HashMap[String, Long]()\n        val opMap3 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap4 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap5 = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap7 = new mutable.HashMap[String, Long]()\n        val\
    \ opMap8 = new mutable.HashMap[String, Long]()\n        val opMap9 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap10 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap11 = new mutable.HashMap[String, Long]()\n        val opMap12 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap13 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap14 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap15 = new mutable.HashMap[String, Long]()\n        val opMap16 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap17 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap18 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap19 = new mutable.HashMap[String, Long]()\n        val opMap20 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap21 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap22 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap23 = new mutable.HashMap[String, Long]()\n        val opMap24 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap25 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap26 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap27 = new mutable.HashMap[String, Long]()\n        val opMap28 = new\
    \ mutable.HashMap[String, Long]()\n        val opMap29 = new mutable.HashMap[String,\
    \ Long]()\n        val opMap30 = new mutable.HashMap[String, Long]()\n       \
    \ val opMap31 = new mutable.HashMap[String, Long]()\n        val opMap", "   \
    \     val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val operandLenMinusOneMinusOne\
    \ = operandLenMinusOne - 1\n        val opLenMinusOneMinusOneMinusOne = opLenMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOne = operandLenMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne = operandLenMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne", "        val ops = op.map(x => x.toLowerCase)\n\
    \        val opLen = ops.length\n        val opArr = ops.map(x => x.toChar)\n\
    \        val opArrLen = opArr.length\n        val operandLen = operand.length\n\
    \        val operandArr = operand.map(x => x.toLong)\n        val operandArrLen\
    \ = operandArr.length\n        val resultArr = new Array[Long](operandArrLen +\
    \ opArrLen + 1)\n        val resultArrLen = resultArr.length\n        val opIndex\
    \ = 0\n        val operandIndex = 0\n        val resultIndex = 0\n        while(operandIndex\
    \ < operandArrLen && opIndex < opArrLen) {\n            val op = ops(opIndex)\n\
    \            val operand = operandArr(operandIndex)\n            val result =\
    \ operand\n            val opArr = opArr(opIndex)\n            val opArrLen =\
    \ opArr.length\n            val opArrArr = opArr.map(x => x.toChar)\n        \
    \    val opArrArrLen = opArrArr.length\n            val opArrArrArr = opArrArr.map(x\
    \ => x.toInt)\n            val opArrArrArrLen = opArrArrArr.length\n         \
    \   val opArrArrArrArr = opArrArrArr.map(x => x.toLong)\n            val opArrArrArrArrLen\
    \ = opArrArrArrArr.length\n            val opArrArrArrArrArr = opArrArrArrArr.map(x\
    \ => x.toDouble)\n            val opArrArrArrArrArrLen = opArrArrArrArrArr.length\n\
    \            val opArrArrArrArrArrArr = opArrArrArrArrArr.map(x => x.toFloat)\n\
    \            val opArrArrArrArrArrArrLen = opArrArrArrArrArrArr.length\n     \
    \       val opArrArrArrArrArrArrArr = opArrArrArrArrArrArrArr.map(x => x.toBoolean)\n\
    \            val opArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArr.length\n\
    \            val opArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArr.map(x\
    \ => x.toChar)\n            val opArrArrArrArrArrArrArrArrLen = opArrArrArrArrArrArrArrArr.length\n\
    \            val opArrArrArrArrArrArrArrArrArr = opArrArrArrArrArrArrArrArrArr.map(x\
    \ => ", "        val ops = op.map(_.toUpperCase)\n        val opList = ops.toList\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operands = operand.toList\n    \
    \    val operandLen = operands.size\n        val ops = opList.map(_.toUpperCase)\n\
    \        val opLen = opList.size\n        val operand", "        val opList =\
    \ op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n   \
    \     val opLen = opList.size\n        val operandLen = operandList.size\n   \
    \     val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusTwo = opLen - 2\n        val operandLenMinusTwo =\
    \ operandLen - 2\n        val opLenMinusThree = opLen - 3\n        val operandLenMinusThree\
    \ = operandLen - 3\n        val opLenMinusFour = opLen - 4\n        val operandLenMinusFour\
    \ = operandLen - 4\n        val opLenMinusFive = opLen - 5\n        val operandLenMinusFive\
    \ = operandLen - 5\n        val opLenMinusSix = opLen - 6\n        val operandLenMinusSix\
    \ = operandLen - 6\n        val opLenMinusSeven = opLen - 7\n        val operandLenMinusSeven\
    \ = operandLen - 7\n        val opLenMinusEight = opLen - 8\n        val operandLenMinusEight\
    \ = operandLen - 8\n        val opLenMinusNine = opLen - 9\n        val operandLenMinusNine\
    \ = operandLen - 9\n        val opLenMinusTen = opLen - 10\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val opLenMinusEleven = opLen - 11\n        val operandLenMinusEleven\
    \ = operandLen - 11\n        val opLenMinusTwelve = opLen - 12\n        val operandLenMinusTwelve\
    \ = operandLen - 12\n        val opLenMinusThirteen = opLen - 13\n        val\
    \ operandLenMinusThirteen = operandLen - 13\n        val opLenMinusFourteen =\
    \ opLen - 14\n        val operandLenMinusFourteen = operandLen - 14\n        val\
    \ opLenMinusFifteen = opLen - 15\n        val operandLenMinusFifteen = operandLen\
    \ - 15\n        val opLenMinusSixteen = opLen - 16\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val opLenMinusSeventeen = opLen - 17\n        val\
    \ operandLenMinusSeventeen = operandLen - 17\n        "]
stop_tokens:
- "\n    }\n"
