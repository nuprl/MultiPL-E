name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val ops = op.map(_.toLowerCase)\n        val opLen = ops.length\n\
    \        val opLenMinusOne = opLen - 1\n        val operandLen = operand.length\n\
    \        val operandLenMinusOne = operandLen - 1\n        val operandLenMinusTwo\
    \ = operandLen - 2\n        val operandLenMinusThree = operandLen - 3\n      \
    \  val operandLenMinusFour = operandLen - 4\n        val operandLenMinusFive =\
    \ operandLen - 5\n        val operandLenMinusSix = operandLen - 6\n        val\
    \ operandLenMinusSeven = operandLen - 7\n        val operandLenMinusEight = operandLen\
    \ - 8\n        val operandLenMinusNine = operandLen - 9\n        val operandLenMinusTen\
    \ = operandLen - 10\n        val operandLenMinusEleven = operandLen - 11\n   \
    \     val operandLenMinusTwelve = operandLen - 12\n        val operandLenMinusThirteen\
    \ = operandLen - 13\n        val operandLenMinusFourteen = operandLen - 14\n \
    \       val operandLenMinusFifteen = operandLen - 15\n        val operandLenMinusSixteen\
    \ = operandLen - 16\n        val operandLenMinusSeventeen = operandLen - 17\n\
    \        val operandLenMinusEighteen = operandLen - 18\n        val operandLenMinusNineteen\
    \ = operandLen - 19\n        val operandLenMinusTwenty = operandLen - 20\n   \
    \     val operandLenMinusThirty = operandLen - 30\n        val operandLenMinusFourty\
    \ = operandLen - 40\n        val operandLenMinusFifty = operandLen - 50\n    \
    \    val operandLenMinusSixty = operandLen - 60\n        val operandLenMinusSeventy\
    \ = operandLen - 70\n        val operandLenMinusEighty = operandLen - 80\n   \
    \     val operandLenMinusNinety = operandLen - 90\n        val operandLenMinusEleventy\
    \ = operandLen - 100\n        val operandLenMinusTwelvety = operandLen - 110\n\
    \        val operandLenMinusThirtyty = operandLen - 120\n        val operandLenMinusFourtyty\
    \ = operandLen - 130\n        val operandLenMinusFiftyty = operandLen - 140\n\
    \        val operandLenMinusSixtyty = operandLen - 150\n", "        val ops =\
    \ op.map(_.toUpperCase)\n        val opLen = ops.size\n        val opArray = ops.toArray\n\
    \        val operandArray = operand.toArray\n        val opArrayLen = opArray.length\n\
    \        val operandArrayLen = operandArray.length\n        val result = operandArray(0)\n\
    \        val op1 = opArray(0)\n        val op2 = opArray(1)\n        val op3 =\
    \ opArray(2)\n        val op4 = opArray(3)\n        val op5 = opArray(4)\n   \
    \     val op6 = opArray(5)\n        val op7 = opArray(6)\n        val op8 = opArray(7)\n\
    \        val op9 = opArray(8)\n        val op10 = opArray(9)\n        val op11\
    \ = opArray(10)\n        val op12 = opArray(11)\n        val op13 = opArray(12)\n\
    \        val op14 = opArray(13)\n        val op15 = opArray(14)\n        val op16\
    \ = opArray(15)\n        val op17 = opArray(16)\n        val op18 = opArray(17)\n\
    \        val op19 = opArray(18)\n        val op20 = opArray(19)\n        val op21\
    \ = opArray(20)\n        val op22 = opArray(21)\n        val op23 = opArray(22)\n\
    \        val op24 = opArray(23)\n        val op25 = opArray(24)\n        val op26\
    \ = opArray(25)\n        val op27 = opArray(26)\n        val op28 = opArray(27)\n\
    \        val op29 = opArray(28)\n        val op30 = opArray(29)\n        val op31\
    \ = opArray(30)\n        val op32 = opArray(31)\n        val op33 = opArray(32)\n\
    \        val op34 = opArray(33)\n        val op35 = opArray(34)\n        val op36\
    \ = opArray(35)\n        val op37 = opArray(36)\n        val op38 = opArray(37)\n\
    \        val op39 = opArray(38)\n        val op40 = opArray(39)\n        val op41\
    \ = opArray(40)\n        val op42 = opArray(41)\n        val op43 = opArray(42)\n\
    \        val op44 = opArray(43)\n        val op45 = opArray(44)\n        val op46\
    \ = opArray(45)\n        val op47 = opArray(46)\n        val op48 = opArray(47)\n\
    \        val op49 = opArray(48", "        val ops = op.map(x => x.toLowerCase)\n\
    \        val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n\
    \        val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n\
    \        val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n\
    \        ", "        val opList = op.mkString(\"+\")\n        val opList = opList.split(\"\
    \\\\+\").map(_.trim).toList\n        val opList = opList.filter(_.nonEmpty)\n\
    \        val operandList = operand.mkString(\"+\")\n        val operandList =\
    \ operandList.split(\"\\\\+\").map(_.trim).toList\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operandList.map(_.toLong)\n        val operandList\
    \ = operandList.filter(_.nonEmpty)\n        val operandList = operandList.map(_.toLong)\n\
    \        val operandList = operandList.filter(_.nonEmpty)\n        val operandList\
    \ = operandList.map(_.toLong)\n        val operandList = operandList.filter(_.nonEmpty)\n\
    \        val operandList = operand", "        val opList = op.map(_.toLowerCase).toList\n\
    \        val operandList = operand.map(_.toLong).toList\n        val operatorList\
    \ = opList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"+\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"*\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"-\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"/\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"**\")\n    \
    \    val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"+\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"*\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"-\")\n        val operandList = operandList.filterNot(_\
    \ == 0)\n        val operatorList = operatorList.filterNot(_ == \"/\")\n     \
    \   val operandList = operandList.filterNot(_ == 0)\n        val operatorList\
    \ = operatorList.filterNot(_ == \"**\")\n        val operand", "        val ops\
    \ = op.map(_.toLowerCase).toList\n        val operands = operand.map(_.toLong).toList\n\
    \        val opLen = ops.size\n        val operandLen = operands.size\n      \
    \  val opIndex = ops.indexOf(\"*\")\n        val opIndex2 = ops.indexOf(\"/\"\
    )\n        val opIndex3 = ops.indexOf(\"**\")\n        val opIndex4 = ops.indexOf(\"\
    //\")\n        val opIndex5 = ops.indexOf(\"+\")\n        val opIndex6 = ops.indexOf(\"\
    -\")\n        val opIndex7 = ops.indexOf(\"**\")\n        val opIndex8 = ops.indexOf(\"\
    //\")\n        val opIndex9 = ops.indexOf(\"*\")\n        val opIndex10 = ops.indexOf(\"\
    /\")\n        val opIndex11 = ops.indexOf(\"+\")\n        val opIndex12 = ops.indexOf(\"\
    -\")\n        val opIndex13 = ops.indexOf(\"*\")\n        val opIndex14 = ops.indexOf(\"\
    /\")\n        val opIndex15 = ops.indexOf(\"**\")\n        val opIndex16 = ops.indexOf(\"\
    //\")\n        val opIndex17 = ops.indexOf(\"*\")\n        val opIndex18 = ops.indexOf(\"\
    /\")\n        val opIndex19 = ops.indexOf(\"**\")\n        val opIndex20 = ops.indexOf(\"\
    //\")\n        val opIndex21 = ops.indexOf(\"*\")\n        val opIndex22 = ops.indexOf(\"\
    /\")\n        val opIndex23 = ops.indexOf(\"**\")\n        val opIndex24 = ops.indexOf(\"\
    //\")\n        val opIndex25 = ops.indexOf(\"*\")\n        val opIndex26 = ops.indexOf(\"\
    /\")\n        val opIndex27 = ops.indexOf(\"**\")\n        val opIndex28 = ops.indexOf(\"\
    //\")\n        val opIndex29 = ops.indexOf(\"*\")\n        val opIndex30 = ops.indexOf(\"\
    /\")\n        val opIndex31 = ops.indexOf(\"**\")\n        val opIndex32 = ops.indexOf(\"\
    //\")\n        val opIndex33 = ops.indexOf(\"*\")\n        val opIndex34 = ops.indexOf(\"\
    /\")\n        val opIndex35 = ops.indexOf(\"**\")\n        val opIndex36 = ops.indexOf(\"\
    //\")\n        val opIndex37 = ops.indexOf(\"*\")\n        val opIndex38 = ops.indexOf(\"\
    /\")\n        val opIndex39 = ops.indexOf(\"**\")\n        val opIndex40 = ops.indexOf(\"\
    //\")\n        val opIndex41 = ops.indexOf(\"*\")\n        val opIndex42 = ops.indexOf(\"\
    /\")\n        val opIndex4", "        val ops = op.map(x => x.toChar)\n      \
    \  val op1 = ops(0)\n        val op2 = ops(1)\n        val op3 = ops(2)\n    \
    \    val op4 = ops(3)\n        val op5 = ops(4)\n        val op6 = ops(5)\n  \
    \      val op7 = ops(6)\n        val op8 = ops(7)\n        val op9 = ops(8)\n\
    \        val op10 = ops(9)\n        val op11 = ops(10)\n        val op12 = ops(11)\n\
    \        val op13 = ops(12)\n        val op14 = ops(13)\n        val op15 = ops(14)\n\
    \        val op16 = ops(15)\n        val op17 = ops(16)\n        val op18 = ops(17)\n\
    \        val op19 = ops(18)\n        val op20 = ops(19)\n        val op21 = ops(20)\n\
    \        val op22 = ops(21)\n        val op23 = ops(22)\n        val op24 = ops(23)\n\
    \        val op25 = ops(24)\n        val op26 = ops(25)\n        val op27 = ops(26)\n\
    \        val op28 = ops(27)\n        val op29 = ops(28)\n        val op30 = ops(29)\n\
    \        val op31 = ops(30)\n        val op32 = ops(31)\n        val op33 = ops(32)\n\
    \        val op34 = ops(33)\n        val op35 = ops(34)\n        val op36 = ops(35)\n\
    \        val op37 = ops(36)\n        val op38 = ops(37)\n        val op39 = ops(38)\n\
    \        val op40 = ops(39)\n        val op41 = ops(40)\n        val op42 = ops(41)\n\
    \        val op43 = ops(42)\n        val op44 = ops(43)\n        val op45 = ops(44)\n\
    \        val op46 = ops(45)\n        val op47 = ops(46)\n        val op48 = ops(47)\n\
    \        val op49 = ops(48)\n        val op50 = ops(49)\n        val op51 = ops(50)\n\
    \        val op52 = ops(51)\n        val op53 = ops(52)\n        val op54 = ops(53)\n",
  "        val ops = op.map(_.toUpperCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val\
    \ opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val ops = op.mkString(\"+\")\n        val opList = ops.split(\"\\\\+\"\
    )\n        val operands = operand.mkString(\"+\")\n        val operandList = operands.split(\"\
    \\\\+\")\n        val opListLength = opList.length\n        val operandListLength\
    \ = operandList.length\n        val opListLength = opListLength - 1\n        val\
    \ operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operandListLength - 1\n\
    \        val opListLength = opListLength - 1\n        val operandListLength =\
    \ operandListLength - 1\n        val opListLength = opListLength - 1\n       \
    \ val operandListLength = operandListLength - 1\n        val opListLength = opListLength\
    \ - 1\n        val operandListLength = operandListLength - 1\n        val opListLength\
    \ = opListLength - 1\n        val operandListLength = operand", "        val ops\
    \ = op.map(_.toUpperCase)\n        val opSet = ops.toSet\n        val opLen =\
    \ ops.length\n        val opSetLen = opSet.size\n        val operandLen = operand.length\n\
    \        val operandSetLen = operandSet.size\n        val opSetLenMinusOne = opSetLen\
    \ - 1\n        val operandSetLenMinusOne = operandSetLen - 1\n        val opLenMinusOne\
    \ = opLen - 1\n        val operandLenMinusOne = operandLen - 1\n        val opSetLenMinusOne\
    \ = opSetLen - 1\n        val operandSetLenMinusOne = operandSetLen - 1\n    \
    \    val opLenMinusOne = opLen - 1\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opSetLenMinusOne = opSetLen - 1\n        val operandSetLenMinusOne\
    \ = operandSetLen - 1\n        val opLenMinusOne = opLen - 1\n", "        val\
    \ opList = op.map(x => x.toChar)\n        val operandList = operand.map(x => x.toLong)\n\
    \        val opLen = opList.length\n        val operandLen = operandList.length\
    \ - 1\n        val opMap = new mutable.HashMap[String, Long]()\n        val operandMap\
    \ = new mutable.HashMap[String, Long]()\n        val opMap2 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap2 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap3 = new mutable.HashMap[String, Long]()\n        val operandMap3\
    \ = new mutable.HashMap[String, Long]()\n        val opMap4 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap4 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap5 = new mutable.HashMap[String, Long]()\n        val operandMap5\
    \ = new mutable.HashMap[String, Long]()\n        val opMap6 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap6 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap7 = new mutable.HashMap[String, Long]()\n        val operandMap7\
    \ = new mutable.HashMap[String, Long]()\n        val opMap8 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap8 = new mutable.HashMap[String, Long]()\n   \
    \     val opMap9 = new mutable.HashMap[String, Long]()\n        val operandMap9\
    \ = new mutable.HashMap[String, Long]()\n        val opMap10 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap10 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap11 = new mutable.HashMap[String, Long]()\n        val operandMap11\
    \ = new mutable.HashMap[String, Long]()\n        val opMap12 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap12 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap13 = new mutable.HashMap[String, Long]()\n        val operandMap13\
    \ = new mutable.HashMap[String, Long]()\n        val opMap14 = new mutable.HashMap[String,\
    \ Long]()\n        val operandMap14 = new mutable.HashMap[String, Long]()\n  \
    \      val opMap15 = new mutable.HashMap[String, Long]()\n        val operandMap15\
    \ = new mutable.HashMap[String, Long]()\n        val opMap16 = new mutable.HashMap[String,\
    \ Long]()\n        val operand", "        val ops = op.map(_.toUpperCase)\n  \
    \      val opList = ops.toList\n        val opLen = opList.size\n        val operandList\
    \ = operand.toList\n        val operandLen = operandList.size\n        val op1\
    \ = opList(0)\n        val op2 = opList(1)\n        val op3 = opList(2)\n    \
    \    val op4 = opList(3)\n        val op5 = opList(4)\n        val op6 = opList(5)\n\
    \        val op7 = opList(6)\n        val op8 = opList(7)\n        val op9 = opList(8)\n\
    \        val op10 = opList(9)\n        val op11 = opList(10)\n        val op12\
    \ = opList(11)\n        val op13 = opList(12)\n        val op14 = opList(13)\n\
    \        val op15 = opList(14)\n        val op16 = opList(15)\n        val op17\
    \ = opList(16)\n        val op18 = opList(17)\n        val op19 = opList(18)\n\
    \        val op20 = opList(19)\n        val op21 = opList(20)\n        val op22\
    \ = opList(21)\n        val op23 = opList(22)\n        val op24 = opList(23)\n\
    \        val op25 = opList(24)\n        val op26 = opList(25)\n        val op27\
    \ = opList(26)\n        val op28 = opList(27)\n        val op29 = opList(28)\n\
    \        val op30 = opList(29)\n        val op31 = opList(30)\n        val op32\
    \ = opList(31)\n        val op33 = opList(32)\n        val op34 = opList(33)\n\
    \        val op35 = opList(34)\n        val op36 = opList(35)\n        val op37\
    \ = opList(36)\n        val op38 = opList(37)\n        val op39 = opList(38)\n\
    \        val op40 = opList(39)\n        val op41 = opList(40)\n        val op42\
    \ = opList(41)\n        val op43 = opList(42)\n        val op44 = opList(43)\n\
    \        val op45 = opList(44)\n        val op46 = opList(45)\n        val op47\
    \ = opList(46)\n        val op48 = opList(47)\n        val op49 = opList(48)\n\
    \        val op50 = opList(49)\n        val op51 = opList(", "        val opList\
    \ = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n \
    \       val opLen = opList.size\n        val opLenMinusOne = opLen - 1\n     \
    \   val operandLen = operandList.size\n        val operandLenMinusOne = operandLen\
    \ - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne =\
    \ operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operandLenMinusOne\
    \ = operandLen - 1\n        val opLenMinusOne = opLen - 1\n        val operand",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val result = operandList.foldLeft(operandList.head) { (acc, x)\
    \ =>\n            val op = opList.head\n            val operand = operandList.tail\n\
    \            val opIndex = opList.indexOf(op)\n            val operandIndex =\
    \ operandList.indexOf(x)\n            val opLength = opList.length\n         \
    \   val operandLength = operandList.length - 1\n            val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                val operand = operandList.drop(operandIndex)\n\
    \                val opLength = opList.length\n                val operandLength\
    \ = operandList.length - 1\n                val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                    val operand = operandList.drop(operandIndex)\n\
    \                    val opLength = opList.length\n                    val operandLength\
    \ = operandList.length - 1\n                    val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                        val operand = operandList.drop(operandIndex)\n\
    \                        val opLength = opList.length\n                      \
    \  val operandLength = operandList.length - 1\n                        val opResult\
    \ = opList.drop(opIndex).foldLeft(acc) { (acc, op) =>\n                      \
    \      val operand = operandList.drop(operandIndex)\n                        \
    \    val opLength = opList.length\n                            val operandLength\
    \ = operandList.length - 1\n                            val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                val operand = operandList.drop(operandIndex)\n\
    \                                val opLength = opList.length\n              \
    \                  val operandLength = operandList.length - 1\n              \
    \                  val opResult = opList.drop(opIndex).foldLeft(acc) { (acc, op)\
    \ =>\n                                    val operand = operandList.drop(operandIndex)\n\
    \                                    val opLength = opList.length\n          \
    \                          val operandLength = operandList.length - 1\n      \
    \                              val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                        val operand = operandList.drop(operandIndex)\n\
    \                                        val opLength = opList.length\n      \
    \                                  val operandLength = operandList.length - 1\n\
    \                                        val opResult = opList.drop(opIndex).foldLeft(acc)\
    \ { (acc, op) =>\n                                            val operand = operandList.drop(operandIndex)\n\
    \                                            val opLength = opList.length\n  \
    \                                          val operandLength = ", "        val\
    \ opList = op.map(x => x.toChar).toList\n        val operandList = operand.map(x\
    \ => x.toLong).toList\n        val opLength = opList.length\n        val operandLength\
    \ = operandList.length - 1\n        val opArray = Array.ofDim[Char](opLength)\n\
    \        val operandArray = Array.ofDim[Long](operandLength)\n        var i =\
    \ 0\n        var j = 0\n        var k = 0\n        var result = 0\n        while(i\
    \ < opLength) {\n            opArray(i) = opList(i)\n            i += 1\n    \
    \    }\n        while(j < operandLength) {\n            operandArray(j) = operandList(j)\n\
    \            j += 1\n        }\n        while(i < opLength) {\n            while(j\
    \ < operandLength) {\n                while(k <= j) {\n                    if(opArray(i)\
    \ == operandArray(k)) {\n                        result += (operandArray(k) *\
    \ operandArray(j))\n                        k += 1\n                    }\n  \
    \                  k += 1\n                }\n                j += 1\n       \
    \     }\n            i += 1\n        }\n        result", "        val opList =\
    \ op.map(_.toLowerCase)\n        val opLen = opList.length\n        val operandList\
    \ = operand.map(_.toLong)\n        val operandLen = operandList.length\n     \
    \   val opMap = new mutable.HashMap[String, Long]()\n        val operandMap =\
    \ new mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]()\n        val opIndex = 0\n        val operandIndex = 0\n        val\
    \ opLen = opList.length\n        val operandLen = operandList.length\n       \
    \ val opMap = new mutable.HashMap[String, Long]()\n        val operandMap = new\
    \ mutable.HashMap[Long, Long]()\n        val result = new mutable.HashMap[String,\
    \ Long]", "        val ops = op.map(_.toLowerCase)\n        val operands = operand.map(_.toLong)\n\
    \        val opLen = ops.size\n        val opLenMinusOne = opLen - 1\n       \
    \ val operandLen = operands.size - 1\n        val opLenMinusOneMinusOne = opLenMinusOne\
    \ - 1\n        val operandLenMinusOne = operandLen - 1\n        val opLenMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne - 1\n \
    \       val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne = opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = operandLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val opLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = opLenMinusOneMinusOneMinusOne", "        val ops = op.map(_.toLowerCase)\n\
    \        val opArray = ops.toArray\n        val operandArray = operand.toArray\n\
    \        val opLength = opArray.length\n        val operandLength = operandArray.length\n\
    \        val result = operandArray(0)\n        val op1 = opArray(0)\n        val\
    \ op2 = opArray(1)\n        val op3 = opArray(2)\n        val op4 = opArray(3)\n\
    \        val op5 = opArray(4)\n        val op6 = opArray(5)\n        val op7 =\
    \ opArray(6)\n        val op8 = opArray(7)\n        val op9 = opArray(8)\n   \
    \     val op10 = opArray(9)\n        val op11 = opArray(10)\n        val op12\
    \ = opArray(11)\n        val op13 = opArray(12)\n        val op14 = opArray(13)\n\
    \        val op15 = opArray(14)\n        val op16 = opArray(15)\n        val op17\
    \ = opArray(16)\n        val op18 = opArray(17)\n        val op19 = opArray(18)\n\
    \        val op20 = opArray(19)\n        val op21 = opArray(20)\n        val op22\
    \ = opArray(21)\n        val op23 = opArray(22)\n        val op24 = opArray(23)\n\
    \        val op25 = opArray(24)\n        val op26 = opArray(25)\n        val op27\
    \ = opArray(26)\n        val op28 = opArray(27)\n        val op29 = opArray(28)\n\
    \        val op30 = opArray(29)\n        val op31 = opArray(30)\n        val op32\
    \ = opArray(31)\n        val op33 = opArray(32)\n        val op34 = opArray(33)\n\
    \        val op35 = opArray(34)\n        val op36 = opArray(35)\n        val op37\
    \ = opArray(36)\n        val op38 = opArray(37)\n        val op39 = opArray(38)\n\
    \        val op40 = opArray(39)\n        val op41 = opArray(40)\n        val op42\
    \ = opArray(41)\n        val op43 = opArray(42)\n        val op44 = opArray(43)\n\
    \        val op45 = opArray(44)\n        val op46 = opArray(45)\n        val op47\
    \ = opArray(46)\n        val op48 = opArray(47)\n        val op49 = opArray(48)\n\
    \        val op50 = opArray(49)\n        ", "        val ops = op.map(_.toLowerCase).toList\n\
    \        val operands = operand.map(_.toLong).toList\n        val opLength = ops.size\n\
    \        val operandLength = operands.size\n        val result = operands.head\n\
    \        val op1 = operands.tail.head\n        val op2 = operands.tail.tail.head\n\
    \        val op1Length = op1.size\n        val op2Length = op2.size\n        val\
    \ op1Index = ops.indexOf(\"+\")\n        val op2Index = ops.indexOf(\"-\")\n \
    \       val op1Index2 = ops.indexOf(\"*\")\n        val op2Index2 = ops.indexOf(\"\
    /\")\n        val op1Index3 = ops.indexOf(\"//\")\n        val op2Index3 = ops.indexOf(\"\
    **\")\n        val op1Index4 = ops.indexOf(\"%\")\n        val op2Index4 = ops.indexOf(\"\
    %%\")\n        val op1Index5 = ops.indexOf(\"&\")\n        val op2Index5 = ops.indexOf(\"\
    |\")\n        val op1Index6 = ops.indexOf(\"^\")\n        val op2Index6 = ops.indexOf(\"\
    <<\")\n        val op1Index7 = ops.indexOf(\">>\")\n        val op2Index7 = ops.indexOf(\"\
    >>>\")\n        val op1Index8 = ops.indexOf(\"==\")\n        val op2Index8 = ops.indexOf(\"\
    !=\")\n        val op1Index9 = ops.indexOf(\"<\")\n        val op2Index9 = ops.indexOf(\"\
    >\")\n        val op1Index10 = ops.indexOf(\"<=\")\n        val op2Index10 = ops.indexOf(\"\
    >=\")\n        val op1Index11 = ops.indexOf(\"!<\")\n        val op2Index11 =\
    \ ops.indexOf(\"!>\")\n        val op1Index12 = ops.indexOf(\"!<=\")\n       \
    \ val op2Index12 = ops.indexOf(\"!>\")\n        val op1Index13 = ops.indexOf(\"\
    &&\")\n        val op2Index13 = ops.indexOf(\"||\")\n        val op1Index14 =\
    \ ops.indexOf(\"??\")\n        val op2Index14 = ops.indexOf(\"???\")\n       \
    \ val op1Index15 = ops.indexOf(\"????\")\n        val op2Index15 = ops.indexOf(\"\
    ?????\")\n        val op1Index16 = ops.indexOf(\"??????\")\n        val op2Index16\
    \ = ops.indexOf(\"???????\")\n        val op1Index17 = ops.indexOf(\"????????\"\
    )\n        val op2Index17 = ops.indexOf(\"?????????\")\n        val op1Index",
  "        val opList = op.map(_.toUpperCase)\n        val operandList = operand.map(_.toLong)\n\
    \        val opLength = opList.length\n        val operandLength = operandList.length\
    \ - 1\n        val opArray = opList.map(_.toChar)\n        val operandArray =\
    \ operandList.map(_.toLong)\n        val opArrayLength = opArray.length\n    \
    \    val operandArrayLength = operandArray.length\n        val opArrayLength =\
    \ opArrayLength\n        val operandArrayLength = operandArrayLength\n       \
    \ val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = operandArrayLength\n\
    \        val opArrayLength = opArrayLength\n        val operandArrayLength = "]
stop_tokens:
- "\n    }\n"
