name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
  \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
  \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val longestPalindrome = longestPalindrome(string.tail)\n  \
    \      string + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.foldLeft(\"\"){ (longest,\
    \ palindrome) =>\n            val reversed = palindrome.tail.reverse\n       \
    \     val prefix = palindrome.takeWhile(_ != reversed)\n            val suffix\
    \ = palindrome.dropWhile(_ != reversed)\n            val newPalindrome = prefix\
    \ ++ reversed ++ suffix\n            if (newPalindrome < longest) {\n        \
    \        longest = newPalindrome\n            }\n            newPalindrome\n \
    \       }\n        longestPalindrome + string", "        val longestPalindrome\
    \ = longestPalindrome(string, \"\")\n        longestPalindrome + reverseString(longestPalindrome)",
  "        val longestPalindrome = string.takeWhile(x => x.toString.toLowerCase ==\
    \ x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n        string\
    \ + longestPalindrome", "        val longestPalindrome = string.takeWhile(x =>\
    \ x.toString.toLowerCase == x.toString.toLowerCase.reverse)\n        val reversedString\
    \ = longestPalindrome.reverse\n        string + reversedString", "        val\
    \ longestPalindrome = string.takeWhile(c => c != string.last).reverse\n      \
    \  val reversedString = longestPalindrome + string.drop(longestPalindrome.size)\n\
    \        reversedString", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        longestPalindrome + reverseOfPrefix(longestPalindrome)",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val prefixString = string.drop(longestPalindrome.length)\n        val\
    \ reversedPrefixString = prefixString.reverse\n        val palindrome = longestPalindrome\
    \ + reversedPrefixString\n        palindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = string.foldLeft(\"\"){ (longest, s) =>\n      \
    \      val longestPalindrome = longest.foldLeft(\"\"){ (longestPalindrome, s2)\
    \ =>\n                val longestPalindrome = longestPalindrome + s2\n       \
    \         val longestPalindrome = longestPalindrome + longest\n              \
    \  longestPalindrome\n            }\n        }\n        val reversedString = longestPalindrome.foldLeft(\"\
    \"){ (reversed, s) =>\n            val reversedString = reversed.foldLeft(\"\"\
    ){ (reversedString, s2) =>\n                val reversedString = reversedString\
    \ + s2\n                val reversedString = reversedString + s\n            \
    \    reversedString\n            }\n        }\n        reversedString + longestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeString = reversedLongestPalindrome.toString\n     \
    \   val reversedLongestPalindromeStringLength = reversedLongestPalindromeString.length\n\
    \        val longestPalindromeLength = longestPalindrome.length\n        val longestPalindromeStringLength\
    \ = longestPalindromeStringLength\n        val longestPalindromeStringLengthPlusOne\
    \ = longestPalindromeStringLength + 1\n        val longestPalindromeStringLengthMinusOne\
    \ = longestPalindromeStringLength - 1\n        val longestPalindromeStringLengthMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOne\
    \ = longestPalindromeStringLengthMinusOne - 1\n        val longestPalindromeStringLengthMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOnePlusOne - 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOnePlusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne - 1\n       \
    \ val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne - 1\n       \
    \ val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne + 1\n       \
    \ val longestPalindromeStringLength", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        var longestPalindrome = string\n    \
    \    var longestPalindromeLength = string.length\n        var longestPalindromePrefix\
    \ = string\n        var longestPalindromeSuffix = string\n        var longestPalindromePrefixLength\
    \ = string.length\n        var longestPalindromeSuffixLength = string.length\n\
    \        var longestPalindromeReverse = string\n        var longestPalindromeReverseLength\
    \ = string.length\n        var longestPalindromeReversePrefix = string\n     \
    \   var longestPalindromeReverseSuffix = string\n        var longestPalindromeReversePrefixLength\
    \ = string.length\n        var longestPalindromeReverseSuffixLength = string.length\n\
    \        var longestPalindromeReverseReverse = string\n        var longestPalindromeReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReversePrefix = string\n\
    \        var longestPalindromeReverseReverseSuffix = string\n        var longestPalindromeReverseReversePrefixLength\
    \ = string.length\n        var longestPalindromeReverseReverseSuffixLength = string.length\n\
    \        var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length", " \
    \       val longestPalindrome = longestPalindrome(string.tail)\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        string + reversedString", "    \
    \    val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val prefixString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixString", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        val reversedString = string.drop(longestPalindrome.length)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        string + reversedString + longestPalindrome",
  "        val longestPalindrome = string.foldLeft(\"\"){ (longest, s) =>\n      \
    \      val reversed = s.reverse\n            val prefixLength = longest.length\n\
    \            val suffixLength = reversed.length\n            val prefixReversed\
    \ = reversed.substring(prefixLength)\n            val suffixReversed = reversed.substring(suffixLength)\n\
    \            val palindrome = longest.substring(prefixLength, longest.length)\
    \ + prefixReversed + suffixReversed + longest.substring(longest.length)\n    \
    \        palindrome\n        }\n        longestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x != string.reverse).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x.toString.toLowerCase ==\
    \ x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n        longestPalindrome\
    \ + longestPalindrome.takeWhile(x => x.toString.toLowerCase == x.toString.toLowerCase\
    \ && x != x.toString.toUpperCase).reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = longestPalindrome(string,\
    \ \"\")\n        longestPalindrome + longestPalindrome.reverse", "        val\
    \ longestPalindrome = string.takeWhile(x => x == string.last).reverse\n      \
    \  string + longestPalindrome", "        val longestPalindromicSuffix = string.substring(string.length-1)\n\
    \        val longestPalindromicPrefixString = string.substring(0, string.length-1)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val longestPalindromicSuffix = longestPalindromicSuffix.reverse\n   \
    \     longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefix",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        string + longestPalindrome", "        val longestPalindromicSuffix =\
    \ string.takeWhile(x => x.isLetter).reverse\n        val longestPalindromicPrefixString\
    \ = string.takeWhile(x => x.isLetter).reverse\n        val longestPalindromicPrefix\
    \ = longestPalindromicPrefixString.reverse\n        longestPalindromicPrefix +\
    \ longestPalindromicSuffix + longestPalindromicPrefix", "        val longestPalindrome\
    \ = string.takeWhile(x => x != string.reverse).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.size)\n        string + longestPalindromicSuffix", "        val longestPalindrome\
    \ = string.tails.reverse.takeWhile(_.isLetter).mkString\n        val prefixString\
    \ = string.takeWhile(_.isLetter).reverse\n        val suffixString = string.drop(longestPalindrome.length)\n\
    \        prefixString + longestPalindrome + suffixString", "        val longestPalindromicSuffix\
    \ = string.takeWhile(c => c != string.last).reverse\n        val longestPalindromicPrefixString\
    \ = string.takeWhile(c => c != string.first)\n        val longestPalindromicPrefix\
    \ = longestPalindromicPrefixString.reverse\n        longestPalindromicPrefix +\
    \ longestPalindromicSuffix + longestPalindromicPrefixString", "        val longestPalindromicSuffix\
    \ = string.takeWhile(c => c != string.last).reverse\n        val longestPalindromicPrefixString\
    \ = string.takeWhile(c => c != longestPalindromicSuffix.last).reverse\n      \
    \  longestPalindromicPrefixString + longestPalindromicSuffix", "        val longestPalindrome\
    \ = string.foldLeft(\"\") { (longest, s) =>\n            val reversed = s.reverse\n\
    \            if (reversed == s) longest\n            else (longest + reversed)\n\
    \        }\n        longestPalindrome + string.drop(longestPalindrome.size)",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val reversedString = longestPalindrome + string.drop(longestPalindrome.size)\n\
    \        reversedString", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.foldLeft((\"\", \"\"))((longestPalindrome, currentChar) => {\n    \
    \        val reversedChar = currentChar.reverse\n            (currentChar + reversedChar,\
    \ currentChar + reversedChar)\n        })\n        longestPalindrome._1 + longestPalindrome._2",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindromicSuffix\
    \ = string.lastOption.filter( s => s.reverse.equals(s) )\n        val longestPalindromicPrefixString\
    \ = string.take(longestPalindromicSuffix.length).reverse\n        longestPalindromicPrefixString\
    \ + longestPalindromicSuffix.reverse", "        val longestPalindromicSuffix =\
    \ longestPalindromicSuffix(string.tail)\n        val reversedLongestPalindromicSuffix\
    \ = reversedLongestPalindromicSuffix(longestPalindromicSuffix)\n        string\
    \ +: reversedLongestPalindromicSuffix", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        string + longestPalindrome", "       \
    \ val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n  \
    \      string + longestPalindrome", "        val longestPalindromicSuffix = string.takeWhile(_.isLetter).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(_.isLetter).reverse\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefixString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        val reversedString = reverseString(string.head)\
    \ + longestPalindrome\n        reversedString", "        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val reversedLongestPalindrome = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = string.takeWhile(c => c != string.reverse(string.indexOf(c))).reverse\n  \
    \      string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string +: longestPalindrome.reverse", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        val reversedString\
    \ = reverse(string.head) + longestPalindrome\n        reversedString", "     \
    \   val longestPalindrome = findLongestPalindrome(string.tail)\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        string + reversedLongestPalindrome", " \
    \       val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindrome =\
    \ string.last\n        val reversedString = string.reverse\n        val prefixString\
    \ = string.takeWhile(_ != longestPalindrome)\n        val suffixString = reversedString.takeWhile(_\
    \ != longestPalindrome)\n        prefixString + longestPalindrome + suffixString",
  "        val longestPalindromicSuffix = string.takeWhile(x => x == string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(x => x == string.first)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefixString",
  "        val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        val reversedPrefixOfLongestPalindromicSuffix = string.take(longestPalindromicSuffix.length)\
    \ +\n            reverseString(string.take(longestPalindromicSuffix.length))\n\
    \        longestPalindromicSuffix +\n            reversedPrefixOfLongestPalindromicSuffix",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string, string.size)\n        val reversedString\
    \ = reverseString(string, longestPalindromicSuffix)\n        reversedString +\
    \ longestPalindromicSuffix", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        val reversedString = longestPalindrome.reverse\n        string + reversedString",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val reversedLongestPalindromicSuffix = reversedLongestPalindromicSuffix(longestPalindromicSuffix,\
    \ string.size)\n        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffix.mkString(\"\
    \")\n        val reversedLongestPalindromicSuffixStringWithPalindromicSuffix =\
    \ reversedLongestPalindromicSuffixStringWithPalindromicSuffix(reversedLongestPalindromicSuffixString,\
    \ longestPalindromicSuffix)\n        reversedLongestPalindromicSuffixStringWithPalindromicSuffix",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        val prefix = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        prefix + longestPalindrome", "        val longestPalindrome = string.last\n\
    \        val reversedString = string.reverse\n        val prefixString = string.takeWhile(x\
    \ => x != longestPalindrome)\n        val suffixString = reversedString.takeWhile(x\
    \ => x != longestPalindrome)\n        prefixString + longestPalindrome + suffixString",
  "        val longestPalindromicSuffix = string.takeWhile(x => x.toString.toLowerCase\
    \ == x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n        val\
    \ longestPalindromicPrefixString = string.takeWhile(x => x.toString.toLowerCase\
    \ == x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n        val\
    \ longestPalindromicPrefixString = longestPalindromicPrefixString.takeWhile(x\
    \ => x.toString.toLowerCase == x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n\
    \        longestPalindromicSuffix +: longestPalindromicPrefixString", "      \
    \  val longestPalindrome = string.foldLeft(\"\"){ (longest, palindrome) =>\n \
    \           val reversed = palindrome.reverse\n            val prefixString =\
    \ longest.takeWhile(c => c != reversed)\n            val suffixString = longest.dropWhile(c\
    \ => c != reversed)\n            val newLongest = prefixString + reversed + suffixString\n\
    \            newLongest\n        }\n        longestPalindrome", "        val longestPalindrome\
    \ = string.last\n        val reversedString = string.reverse\n        val reversedLongestPalindrome\
    \ = reversedString.last\n        val reversedLongestPalindromeLength = reversedLongestPalindrome.length\n\
    \        val reversedLongestPalindromePrefix = reversedString.take(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromeSuffix = reversedString.drop(reversedLongestPalindromeLength)\n\
    \        val reversedLongestPalindromePrefixString = reversedLongestPalindromePrefix.mkString(\"\
    \")\n        val reversedLongestPalindromeSuffixString = reversedLongestPalindromeSuffix.mkString(\"\
    \")\n        val reversedLongestPalindromeString = (reversedLongestPalindromePrefixString\
    \ + reversedLongestPalindromeSuffixString).reverse\n        val reversedLongestPalindromeStringLength\
    \ = reversedLongestPalindromeString.length\n        val reversedLongestPalindromeStringPrefix\
    \ = reversedLongestPalindromeString.take(reversedLongestPalindromeStringLength)\n\
    \        val reversedLongestPalindromeStringSuffix = reversedLongestPalindromeString.drop(reversedLongestPalindromeStringLength)\n\
    \        val reversedLongestPalindromeStringPrefixString = reversedLongestPalindromeStringPrefix.mkString(\"\
    \")\n        val reversedLongestPalindromeStringSuffixString = reversedLongestPalindromeStringSuffix.mkString(\"\
    \")\n        val reversedLongestPalindromeString = (reversedLongestPalindromeStringPrefixString\
    \ + reversedLongestPalindromeStringSuffixString).reverse\n        val reversedLongestPalindromeStringLength\
    \ = reversedLongestPalindromeString.length\n        val reversedLongestPalindromeStringPrefix\
    \ = reversedLongestPalindromeString.take(reversedLongestPalindromeStringLength)\n\
    \        val reversedLongestPalindromeStringSuffix = reversedLongestPalindromeString.drop(reversedLongestPalindromeStringLength)\n\
    \        val reversedLongestPalindromeStringPrefixString = reversedLongestPalindromeStringPrefix.mkString(\"\
    \")\n", "        val longestPalindrome = longestPalindrome(string.tail)\n    \
    \    string + longestPalindrome", "        val longestPalindrome = string.takeWhile(c\
    \ => c != string.reverse(string.indexOf(c))).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = string.tails.reverse.foldLeft(\"\")( (acc, s) =>\
    \ s + acc )\n        val reversedString = string.tails.reverse.foldLeft(\"\")(\
    \ (acc, s) => s + acc )\n        reversedString + longestPalindrome", "      \
    \  val longestPalindrome = findLongestPalindrome(string)\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedString",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        val longestPalindromicPrefix = (string.head + longestPalindromicSuffix).reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val prefix = string.takeWhile(x\
    \ => x != longestPalindrome).reverse\n        prefix + longestPalindrome", " \
    \       val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ +: longestPalindrome.reverse", "        val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        val reversedLongestPalindromicSuffix = reverseString(longestPalindromicSuffix)\n\
    \        string + reversedLongestPalindromicSuffix", "        val longestPalindrome\
    \ = findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        val reversedString = reverseString(string.head)\
    \ + longestPalindrome\n        reversedString", "        val longestPalindrome\
    \ = findLongestPalindrome(string.tail)\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        string + reversedLongestPalindrome",
  "        val longestPalindromicSuffix = string.takeWhile(x => x == string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(x => x == string.first)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefix",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedLongestPalindrome = reverseString(longestPalindrome)\n  \
    \      longestPalindrome + reversedLongestPalindrome", "        val longestPalindrome\
    \ = findLongestPalindrome(string.trim())\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(_ != string.reverse.head)\n  \
    \      val reversedString = string.reverse.tail\n        longestPalindrome + reversedString",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        var longestPalindrome = string\n    \
    \    var longestPalindromeLength = string.length\n        var longestPalindromeLengthPrev\
    \ = string.length\n        var longestPalindromeLengthPrev2 = 0\n        var longestPalindromeLengthPrev3\
    \ = 0\n        var longestPalindromeLengthPrev4 = 0\n        var longestPalindromeLengthPrev5\
    \ = 0\n        var longestPalindromeLengthPrev6 = 0\n        var longestPalindromeLengthPrev7\
    \ = 0\n        var longestPalindromeLengthPrev8 = 0\n        var longestPalindromeLengthPrev9\
    \ = 0\n        var longestPalindromeLengthPrev10 = 0\n        var longestPalindromeLengthPrev11\
    \ = 0\n        var longestPalindromeLengthPrev12 = 0\n        var longestPalindromeLengthPrev13\
    \ = 0\n        var longestPalindromeLengthPrev14 = 0\n        var longestPalindromeLengthPrev15\
    \ = 0\n        var longestPalindromeLengthPrev16 = 0\n        var longestPalindromeLengthPrev17\
    \ = 0\n        var longestPalindromeLengthPrev18 = 0\n        var longestPalindromeLengthPrev19\
    \ = 0\n        var longestPalindromeLengthPrev20 = 0\n        var longestPalindromeLengthPrev21\
    \ = 0\n        var longestPalindromeLengthPrev22 = 0\n        var longestPalindromeLengthPrev23\
    \ = 0\n        var longestPalindromeLengthPrev24 = 0\n        var longestPalindromeLengthPrev25\
    \ = 0\n        var longestPalindromeLengthPrev26 = 0\n        var longestPalindromeLengthPrev27\
    \ = 0\n        var longestPalindromeLengthPrev28 = 0\n        var longestPalindromeLengthPrev29\
    \ = 0\n        var longestPalindromeLengthPrev30 = 0\n        var longestPalindromeLengthPrev31\
    \ = 0\n        var longestPalindromeLengthPrev32 = 0\n        var longestPalindromeLengthPrev33\
    \ = 0\n        var longestPalindromeLengthPrev34 = 0\n        var longestPalindromeLengthPrev35\
    \ = 0\n        var longestPalindromeLengthPrev36 = 0\n        var longestPalindromeLengthPrev37\
    \ = 0\n        var longestPalindromeLengthPrev38 = 0\n        var longestPalindromeLengthPrev39\
    \ = 0\n        var longestPalindromeLengthPrev40 = 0\n        var longestPalindromeLengthPrev41\
    \ = 0\n        var longestPalindromeLengthPrev42 = 0\n        var longestPalindromeLengthPrev43\
    \ = 0\n        var longestPalindromeLengthPrev44 = 0\n        var longestPalindrome",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val reversedString = string.drop(longestPalindrome.length)\n        val\
    \ reversedStringPrefix = reversedString.takeWhile(c => c != string.last)\n   \
    \     val reversedStringSuffix = reversedString.drop(reversedString.length - longestPalindrome.length)\n\
    \        longestPalindrome + reversedStringPrefix + reversedStringSuffix", " \
    \       val longestPalindrome = string.takeWhile(x => x.isLetter).reverse\n  \
    \      val prefixString = string.drop(longestPalindrome.size)\n        val reversedPrefixString\
    \ = prefixString.reverse\n        val palindrome = longestPalindrome + reversedPrefixString\n\
    \        palindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = longestPalindrome.reverse\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.takeWhile(x => x\
    \ == string.last).reverse\n        val prefixString = string.drop(longestPalindrome.length)\n\
    \        val suffixString = longestPalindrome + prefixString\n        suffixString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ +: longestPalindrome.reverse", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        var longestPalindromicSuffix\
    \ = \"\"\n        var longestPalindromicPrefix = 0\n        var longestPalindromicLength\
    \ = 0\n        var longestPalindromic = \"\"\n        var longestPalindromicReverse\
    \ = \"\"\n        var longestPalindromicReverseLength = 0\n        var longestPalindromicReversePrefix\
    \ = \"\"\n        var longestPalindromicReverseSuffix = 0\n        var longestPalindromicReversePostfix\
    \ = 0\n        var longestPalindromicReversePostfixLength = 0\n        var longestPalindromicReversePostfixPrefix\
    \ = \"\"\n        var longestPalindromicReversePostfixSuffix = 0\n        var\
    \ longestPalindromicReversePostfixPrefixLength = 0\n        var longestPalindromicReversePostfixSuffixLength\
    \ = 0\n        var longestPalindromicReversePostfixPrefixLength = 0\n        var\
    \ longestPalindromicReversePostfixSuffixLength = 0\n        var longestPalindromicReversePostfixPrefixLength\
    \ = 0\n        var longestPalindromicReversePostfixSuffixLength = 0\n        var\
    \ longestPalindromicReversePostfixPrefixLength = 0\n        var longestPalindromicReversePostfixSuffixLength\
    \ = 0\n        var longestPalindromicReversePostfixPrefixLength = 0\n        var\
    \ longestPalindromicReversePostfixSuffixLength = 0\n        var longestPalindromicReversePostfixPrefixLength\
    \ = 0\n        var longestPalindromicReversePostfixSuffixLength = 0\n        var\
    \ longestPalindromicReversePostfixPrefixLength = 0\n        var longestPalindromicReversePostfixSuffixLength\
    \ = 0\n        var longestPalindromicReversePostfixPrefixLength = 0\n        var\
    \ longestPalindromicReversePostfixSuffixLength = 0\n        var longestPalindromicReversePostfixPrefixLength\
    \ = 0\n        var longestPalindromicReversePostfixSuffixLength = 0\n        var\
    \ longestPalindromicReversePostfixPrefixLength = 0\n        var longestPalindromicReversePostfixSuffixLength\
    \ = 0\n        var longestPalindromicReversePostfixPrefixLength = 0\n        var\
    \ longestPalindromicReversePostfixSuffixLength = 0\n        var longestPalindromicReversePostfixPrefixLength\
    \ = 0\n        var longestPalindromicReversePostfixSuffixLength = 0\n        var\
    \ longestPalindromicReversePostfixPrefixLength = 0\n        var longestPalindromicReversePostfixSuffixLength\
    \ = 0\n        var longestPalindromicReversePostfixPrefixLength = 0\n        var\
    \ longestPalindromicReversePostfixSuffixLength = 0\n        var longestPalindromicReversePostfixPrefixLength\
    \ = 0\n        var longestPalindromicReversePostfixSuffixLength", "        val\
    \ longestPalindromicSuffix = string.takeWhile(x => x != string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(x => x != string.last).reverse\n\
    \        val longestPalindromicPrefixString = longestPalindromicPrefixString +\
    \ longestPalindromicSuffix\n        longestPalindromicPrefixString + longestPalindromicSuffix",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = string.takeWhile(x\
    \ => x != string.reverse.takeWhile(y => y == x))\n        longestPalindrome ++\
    \ string.reverse.takeWhile(x => x != longestPalindrome.reverse.takeWhile(y =>\
    \ y == x))", "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        val reversedPrefixOfLongestPalindromicSuffix = reversedPrefixOfLongestPalindromicSuffix(longestPalindromicSuffix)\n\
    \        string + reversedPrefixOfLongestPalindromicSuffix", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        string + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        val reversedString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        var longestPalindrome = string\n        var longestPalindromeLength = string.length\n\
    \        var longestPalindromePrefix = \"\"\n        var longestPalindromeSuffix\
    \ = \"\"\n        var longestPalindromeSuffixLength = string.length\n        var\
    \ longestPalindromeSuffixPrefix = \"\"\n        var longestPalindromeSuffixSuffix\
    \ = 0\n        var longestPalindromeSuffixSuffixLength = 0\n        var longestPalindromeSuffixSuffixPrefix\
    \ = \"\"\n        var longestPalindromeSuffixSuffixSuffix = 0\n        var longestPalindromeSuffixSuffixSuffixLength\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixPrefix = \"\"\n        var\
    \ longestPalindromeSuffixSuffixSuffixSuffix = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixPrefix = \"\"\n  \
    \      var longestPalindromeSuffixSuffixSuffixSuffixSuffix = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixLength\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixPrefix = \"\"\n  \
    \      var longestPalindromeSuffixSuffixSuffixSuffixSuffix = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\
    \n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = 0\n    \
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n        var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n\
    \        var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n  \
    \      var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix = 0\n \
    \       var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n      \
    \  var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n        var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\
    \n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix = 0\n    \
    \    var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n        var\
    \ longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixSuffix\
    \ = 0\n        var longestPalindromeSuffixSuffixSuffixSuffixSuffixLength = 0\n\
    \        var longestPalindromeSuffixSuffixSuffixSuffixSuffixPrefix = \"\"\n  \
    \      var longest", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindromicSuffix = string.last.takeWhile(x => x != string.reverse.last)\n\
    \        val longestPalindromicPrefixString = string.takeWhile(x => x != string.reverse.last)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val longestPalindromicSuffix = longestPalindromicSuffix.reverse\n   \
    \     longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefixString",
  "        val longestPalindrome = string.tails.reverse.mkString\n        val reversedString\
    \ = string.head + longestPalindrome\n        reversedString", "        val longestPalindrome\
    \ = string.takeWhile(x => x.isLetter).reverse\n        val prefix = string.takeWhile(x\
    \ => !x.isLetter)\n        val suffix = string.drop(prefix.length)\n        prefix\
    \ + longestPalindrome + suffix", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.length)\n        val reversedPrefixOfLongestPalindromicSuffix = reversedPrefixOfLongestPalindromicSuffix(string,\
    \ longestPalindromicSuffix)\n        val reversedSuffixOfLongestPalindromicSuffix\
    \ = reversedSuffixOfLongestPalindromicSuffix(string, longestPalindromicSuffix)\n\
    \        val reversedStringOfLongestPalindromicSuffix = reversedStringOfLongestPalindromicSuffix(string,\
    \ longestPalindromicSuffix)\n        val reversedStringOfLongestPalindromicSuffixWithSuffix\
    \ = reversedStringOfLongestPalindromicSuffixWithSuffix(string, longestPalindromicSuffix,\
    \ reversedSuffixOfLongestPalindromicSuffix)\n        val reversedStringOfLongestPalindromicSuffixWithPrefixSuffix\
    \ = reversedStringOfLongestPalindromicSuffixWithPrefixSuffix(string, longestPalindromicSuffix,\
    \ reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix)\n\
    \        val reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffix =\
    \ reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffix(string, longestPalindromicSuffix,\
    \ reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix)\n\
    \        val reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffixSuffixSuffix\
    \ = reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffixSuffixSuffix(string,\
    \ longestPalindromicSuffix, reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedSuffixOfLongestPalindromicSuffixWithSuffix)\n        val reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffixSuffixSuffixSuffixSuffix\
    \ = reversedStringOfLongestPalindromicSuffixWithPrefixPrefixSuffixSuffixSuffixSuffix(string,\
    \ longestPalindromicSuffix, reversedPrefixOfLongestPalindromicSuffix, reversedSuffixOfLongestPalindromicSuffix,\
    \ reversedSuffixOfLongestPalindromicSuffixWithSuffix, reversedSuffixOfLongestPalindromicSuffixWithPrefixSuffix)\n\
    \        val reversedStringOfLongestPalindromicSuffixWithPrefix", "        val\
    \ longestPalindrome = findLongestPalindrome(string.tail)\n        string +: longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        val reversedString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        val reversedLongestPalindrome =\
    \ longestPalindrome.reverse\n        string + reversedLongestPalindrome", "  \
    \      val longestPalindrome = string.takeWhile(x => x != string.reverse).reverse\n\
    \        string + longestPalindrome", "        val longestPalindromicSuffix =\
    \ string.takeWhile(x => x.isLetter).reverse\n        val longestPalindromicPrefixString\
    \ = string.takeWhile(x => x.isLetter).reverse\n        val longestPalindromicPrefix\
    \ = longestPalindromicPrefixString.reverse\n        longestPalindromicPrefix +\
    \ longestPalindromicSuffix + longestPalindromicPrefix", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string.tail)\n        val reversedString = reverseString(string.head\
    \ + longestPalindromicSuffix)\n        reversedString + longestPalindromicSuffix",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedString",
  "        val longestPalindromicSuffix = string.lastOption.filter(_ == string.last).map(_\
    \ + string.length).orElse(\"\")\n        val reversedString = string.dropRight(longestPalindromicSuffix.length).reverse\n\
    \        string + reversedString + longestPalindromicSuffix", "        val longestPalindrome\
    \ = findLongestPalindrome(string.tail)\n        val reversedLongestPalindrome\
    \ = longestPalindrome.reverse\n        val reversedLongestPalindromeWithPrefix\
    \ = reversedLongestPalindrome + string.head\n        reversedLongestPalindromeWithPrefix",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        val\
    \ reversedString = longestPalindrome.tail.reverse\n        longestPalindrome +\
    \ reversedString", "        var longestPalindrome = string\n        var longestPalindromeLength\
    \ = string.length\n        var longestPalindromePrefix = \"\"\n        var longestPalindromeSuffix\
    \ = \"\"\n        var longestPalindromePrefixLength = 0\n        var longestPalindromeSuffixLength\
    \ = 0\n        var longestPalindromePrefixReverse = \"\"\n        var longestPalindromeSuffixReverse\
    \ = \"\"\n        var longestPalindromePrefixReverseLength = 0\n        var longestPalindromeSuffixReverseLength\
    \ = 0\n        var longestPalindromePrefixReverseReverse = \"\"\n        var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n        var longestPalindromePrefixReverseReverseLength = 0\n      \
    \  var longestPalindromeSuffixReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverse = \"\"\n  \
    \      var longestPalindromePrefixReverseReverseReverseLength = 0\n        var\
    \ longestPalindromeSuffixReverseReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverseReverse = \"\
    \"\n        var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n \
    \       var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    \
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n      \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n   \
    \     var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n       \
    \ var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n \
    \       var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n  \
    \      var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    \
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeSuffixReverseReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverseReverse = \"\
    \"\n        var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n\
    \        var longestPalindromeSuffixReverseReverseReverseLength = 0\n        var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n        var\
    \ longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n        var longestPalindromePrefixReverseReverseReverseReverseReverseLength\
    \ = 0\n        var ", "        val longestPalindrome = string.takeWhile(x => x.toString.toLowerCase\
    \ == x.toString.toLowerCase && !x.toString.toLowerCase == x.toString.toUpperCase).reverse\n\
    \        string + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindromicSuffix\
    \ = string.substring(string.length-1)\n        val longestPalindromicPrefixString\
    \ = string.substring(0, string.length-1)\n        val longestPalindromicPrefix\
    \ = longestPalindromicPrefixString.reverse\n        val longestPalindromicSuffixString\
    \ = longestPalindromicSuffix.reverse\n        val longestPalindromicPalindrome\
    \ = longestPalindromicPrefix + longestPalindromicSuffixString\n        longestPalindromicPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.takeWhile(x => x.isLetter).reverse\n\
    \        val reversedString = string.takeWhile(x => x.isLetter).reverse\n    \
    \    val reversedStringPrefix = reversedString.takeWhile(x => x.isLetter).reverse\n\
    \        val reversedStringSuffix = reversedString.dropWhile(x => x.isLetter).reverse\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromePrefix = reversedLongestPalindrome.takeWhile(x => x.isLetter).reverse\n\
    \        val reversedLongestPalindromeSuffix = reversedLongestPalindrome.dropWhile(x\
    \ => x.isLetter).reverse\n        val palindrome = longestPalindrome + reversedStringPrefix\
    \ + reversedLongestPalindromePrefix + reversedStringSuffix + reversedLongestPalindromeSuffix\n\
    \        palindrome", "        val longestPalindromicSuffix = string.takeWhile(x\
    \ => x.isLetter).reverse\n        val longestPalindromicPrefixString = string.takeWhile(x\
    \ => x.isLetter).reverse\n        val longestPalindromicPrefix = longestPalindromicPrefixString.takeWhile(x\
    \ => x.isLetter).reverse\n        val longestPalindromicSuffix = longestPalindromicSuffix.takeWhile(x\
    \ => x.isLetter).reverse\n        longestPalindromicPrefix + longestPalindromicSuffix\
    \ + longestPalindromicPrefixString", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindromicSuffix = longestPalindromicSuffix(string,\
    \ string.size)\n        string + longestPalindromicSuffix", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val prefixString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixString", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        string + reversedString + longestPalindrome",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        string + longestPalindrome", "        var longestPalindrome = string\n\
    \        var longestPalindromeLength = 0\n        var longestPalindromePrefix\
    \ = \"\"\n        var longestPalindromeSuffix = \"\"\n        var longestPalindromeReverse\
    \ = \"\"\n        var longestPalindromeReverseLength = 0\n        var longestPalindromeReversePrefix\
    \ = \"\"\n        var longestPalindromeReverseSuffix = \"\"\n        var longestPalindromeReverseReverse\
    \ = \"\"\n        var longestPalindromeReverseReverseLength = 0\n        var longestPalindromeReverseReversePrefix\
    \ = \"\"\n        var longestPalindromeReverseReverseSuffix = \"\"\n        var\
    \ longestPalindromeReverseReverseReverse = \"\"\n        var longestPalindromeReverseReverseReverseLength\
    \ = 0\n        var longestPalindromeReverseReverseReversePrefix = \"\"\n     \
    \   var longestPalindromeReverseReverseReverseSuffix = \"\"\n        var longestPalindromeReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeReverseReverseReversePrefix = \"\"\n        var longestPalindromeReverseReverseReverseSuffix\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseReverse = \"\"\n \
    \       var longestPalindromeReverseReverseReverseLength = 0\n        var longestPalindromeReverseReverseReversePrefix\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseSuffix = \"\"\n  \
    \      var longestPalindromeReverseReverseReverseReverse = \"\"\n        var longestPalindromeReverseReverseReverseLength\
    \ = 0\n        var longestPalindromeReverseReverseReversePrefix = \"\"\n     \
    \   var longestPalindromeReverseReverseReverseSuffix = \"\"\n        var longestPalindromeReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeReverseReverseReversePrefix = \"\"\n        var longestPalindromeReverseReverseReverseSuffix\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseReverse = \"\"\n \
    \       var longestPalindromeReverseReverseReverseLength = 0\n        var longestPalindromeReverseReverseReversePrefix\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseSuffix = \"\"\n  \
    \      var longestPalindromeReverseReverseReverseReverse = \"\"\n        var longestPalindromeReverseReverseReverseLength\
    \ = 0\n        var longestPalindromeReverseReverseReversePrefix = \"\"\n     \
    \   var longestPalindromeReverseReverseReverseSuffix = \"\"\n        var longestPalindromeReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeReverseReverseReversePrefix = \"\"\n        var longestP",
  "        val longestPalindrome = findLongestPalindrome(string)\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindrome = string.foldLeft(\"\") { (longest, s) =>\n     \
    \       val reversed = s.reverse\n            if (reversed.startsWith(longest))\
    \ {\n                (reversed, longest)\n            } else {\n             \
    \   (longest, reversed)\n            }\n        }._1\n        longestPalindrome\
    \ + longestPalindrome.substring(longestPalindrome.lastIndexOf(reversed))", " \
    \       val longestPalindrome = findLongestPalindrome(string)\n        val reversedLongestPalindrome\
    \ = reverseString(longestPalindrome)\n        longestPalindrome + reversedLongestPalindrome",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindrome =\
    \ string.foldLeft(\"\"){ (longest, s) =>\n            val reversed = s.reverse\n\
    \            val prefix = reversed.takeWhile(c => c != longest)\n            val\
    \ suffix = reversed.dropWhile(c => c != longest)\n            prefix + suffix\n\
    \        }\n        longestPalindrome + longestPalindrome.reverse", "        var\
    \ longestPalindrome = string\n        var longestPalindromeLength = string.length\n\
    \        var longestPalindromePrefix = \"\"\n        var longestPalindromeSuffix\
    \ = \"\"\n        var longestPalindromePrefixLength = 0\n        var longestPalindromeSuffixLength\
    \ = 0\n        var longestPalindromePrefixReverse = \"\"\n        var longestPalindromeSuffixReverse\
    \ = \"\"\n        var longestPalindromePrefixReverseLength = 0\n        var longestPalindromeSuffixReverseLength\
    \ = 0\n        var longestPalindromePrefixReverseReverse = \"\"\n        var longestPalindromeSuffixReverseReverse\
    \ = \"\"\n        var longestPalindromePrefixReverseReverseLength = 0\n      \
    \  var longestPalindromeSuffixReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverse = \"\"\n  \
    \      var longestPalindromePrefixReverseReverseReverseLength = 0\n        var\
    \ longestPalindromeSuffixReverseReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverseReverse = \"\
    \"\n        var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n \
    \       var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    \
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n      \
    \  var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n   \
    \     var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n       \
    \ var longestPalindromePrefixReverseReverseReverseReverseReverseLength = 0\n \
    \       var longestPalindromeSuffixReverseReverseReverseReverseLength = 0\n  \
    \      var longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n\
    \        var longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n    \
    \    var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n     \
    \   var longestPalindromeSuffixReverseReverseReverseLength = 0\n        var longestPalindromePrefixReverseReverseReverseReverse\
    \ = \"\"\n        var longestPalindromeSuffixReverseReverseReverseReverse = \"\
    \"\n        var longestPalindromePrefixReverseReverseReverseReverseLength = 0\n\
    \        var longestPalindromeSuffixReverseReverseReverseLength = 0\n        var\
    \ longestPalindromePrefixReverseReverseReverseReverseReverse = \"\"\n        var\
    \ longestPalindromeSuffixReverseReverseReverseReverse = \"\"\n        var longestPalindromePrefixReverseReverseReverseReverseLength\
    \ = 0\n        var longest", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x != string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = string.takeWhile(x => x != string.last).reverse\n\
    \        string + longestPalindrome", "        var longestPalindrome = string\n\
    \        var longestPalindromeLength = string.length\n        var longestPalindromePrefix\
    \ = string\n        var longestPalindromeSuffix = string\n        var longestPalindromeReversedSuffix\
    \ = string\n        var longestPalindromeReversedPrefix = string\n        var\
    \ longestPalindromeReversedSuffixLength = string.length\n        var longestPalindromeReversedPrefixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefix =\
    \ string\n        var longestPalindromeReversedPrefixReversedSuffix = string\n\
    \        var longestPalindromeReversedSuffixReversedPrefixLength = string.length\n\
    \        var longestPalindromeReversedPrefixReversedSuffixReversedPrefix = string\n\
    \        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixLength\
    \ = string.length\n        var longestPalindromeReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixLength\
    \ = string.length\n        var longestPalindromeReversedPrefixReversedSuffixReversedPrefixReversedSuffixReversedPrefixReversedSuffix",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val reversedString = string.drop(longestPalindrome.length)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        string\
    \ + reversedLongestPalindrome", "        val longestPalindrome = string.takeWhile(x\
    \ => x != string.last).reverse\n        val prefix = string.takeWhile(x => x !=\
    \ longestPalindrome).reverse\n        prefix + longestPalindrome", "        val\
    \ longestPalindrome = string.takeWhile(x => x != string.last).reverse\n      \
    \  val prefixString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixString", "        val longestPalindrome = string.takeWhile(x\
    \ => x != string.last).reverse\n        val reversedString = string.drop(longestPalindrome.length)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        val reversedString = reverseString(longestPalindrome)\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.foldLeft(\"\") {\n            (longestPalindrome, currentChar) =>\n \
    \               val reversedChar = currentChar.reverse\n                val prefixString\
    \ = longestPalindrome + reversedChar\n                if (prefixString.length\
    \ < longestPalindrome.length) prefixString\n                else longestPalindrome\n\
    \        }\n        longestPalindrome + longestPalindrome.reverse", "        val\
    \ longestPalindromicSuffix = string.lastOption.filter(_ == string.last)\n    \
    \    val longestPalindromicPrefixString = string.take(longestPalindromicSuffix.length)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        val longestPalindromicSuffixString = longestPalindromicSuffix.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffixString", "       \
    \ val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n     \
    \   val reversedString = reverseString(string.tail)\n        val reversedLongestPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix)\n        val reversedLongestPalindromicSuffixWithPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix)\n\
    \        val reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffix)\n        val reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffix + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix)\n\
    \        val reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffix + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix)\n\
    \        val reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ = reverseString(longestPalindromicSuffix + reversedLongestPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffix + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffix\
    \ + reversedLongestPalindromicSuffixWithPalindromicSuffixWithPalindromicSuffixWithPalin",
  "        val longestPalindrome = string.last\n        val reversedString = string.dropRight(longestPalindrome.length)\n\
    \        val reversedStringWithPalindrome = reversedString + longestPalindrome\n\
    \        reversedStringWithPalindrome", "        val longestPalindrome = string.foldLeft(\"\
    \"){ (longest, s) =>\n            val reversed = s.reverse\n            if (reversed.startsWith(s))\
    \ reverse + reversed\n            else longest\n        }\n        longestPalindrome\
    \ + string.reverse", "        val longestPalindromicSuffix = longestPalindromicSuffix(string.tail)\n\
    \        val reversedString = string.tail.reverse\n        string + reversedString\
    \ + longestPalindromicSuffix", "        val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        val longestPalindromicPrefixString = string.take(longestPalindromicSuffix.length)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefix",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        val reversedLongestPalindromicSuffix = reversedLongestPalindromicSuffix(longestPalindromicSuffix,\
    \ string.size)\n        val reversedLongestPalindromicSuffixString = reversedLongestPalindromicSuffix.mkString(\"\
    \")\n        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindromicSuffixStringLength = reversedLongestPalindromicSuffixString.length\n\
    \        val reversedLongestPalindro", "        val longestPalindrome = string.takeWhile(x\
    \ => x == string.last).reverse\n        val reversedString = longestPalindrome\
    \ + string.drop(longestPalindrome.size)\n        reversedString", "        val\
    \ longestPalindrome = string.foldLeft(\"\") { (longest, s) =>\n            val\
    \ reversed = s.reverse\n            if (reversed.startsWith(s)) {\n          \
    \      val palindrome = reverse + s\n                if (palindrome < longest)\
    \ {\n                    longest = palindrome\n                }\n           \
    \ }\n        }\n        longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        longestPalindrome + reverseOfLongestPalindrome(longestPalindrome)", " \
    \       val longestPalindrome = longestPalindrome(string.tail)\n        val reversedString\
    \ = reverseString(string.head) + longestPalindrome\n        reversedString", " \
    \       val longestPalindrome = findLongestPalindrome(string.tail)\n        val\
    \ reversedString = longestPalindrome.tail.reverse\n        longestPalindrome +\
    \ reversedString", "        val longestPalindrome = string.foldLeft(\"\") { (longest,\
    \ palindrome) =>\n            val reversedPalindrome = palindrome.foldLeft(\"\"\
    ) { (reversed, char) =>\n                val newReversed = reversed.reverse +\
    \ char\n                if (newReversed == palindrome) {\n                   \
    \ newReversed\n                } else {\n                    reversed\n      \
    \          }\n            }\n            if (palindrome == longestPalindrome)\
    \ {\n                longestPalindrome\n            } else {\n               \
    \ longestPalindrome + reversedPalindrome\n            }\n        }\n        longestPalindrome",
  "        val longestPalindromicSuffix = string.takeWhile(x => x == string.last).reverse\n\
    \        val longestPalindromicPrefixString = string.takeWhile(x => x == string.last)\n\
    \        val longestPalindromicPrefix = longestPalindromicPrefixString.reverse\n\
    \        longestPalindromicPrefix + longestPalindromicSuffix + longestPalindromicPrefixString",
  "        val longestPalindrome = string.takeWhile(x => x.isLetter).reverse\n   \
    \     val prefixString = string.takeWhile(x => !x.isLetter)\n        val suffixString\
    \ = string.dropWhile(x => !x.isLetter)\n        val reversedPrefixString = prefixString.reverse\n\
    \        val reversedSuffixString = suffixString.reverse\n        val palindrome\
    \ = longestPalindrome + reversedPrefixString + reversedSuffixString\n        palindrome",
  "        val longestPalindrome = string.takeWhile(c => c != string.last).reverse\n\
    \        val prefix = string.takeWhile(c => c != longestPalindrome.last)\n   \
    \     prefix + longestPalindrome", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = string.tails.reverse.takeWhile(_.isLetter).reverse\n\
    \        val reversedString = string.tails.reverse.takeWhile(_.isLetter).reverse\n\
    \        longestPalindrome + reversedString", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        string + longestPalindrome",
  "        val longestPalindromicSuffix = longestPalindromicSuffix(string, string.size)\n\
    \        string + longestPalindromicSuffix", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string.tail)\n        val reversedString = reverseString(string.head\
    \ + longestPalindromicSuffix)\n        reversedString", "        val longestPalindromicSuffix\
    \ = longestPalindromicSuffix(string, string.size)\n        val reversedPrefixOfLongestPalindromicSuffix\
    \ = reversedPrefixOfLongestPalindromicSuffix(string, longestPalindromicSuffix)\n\
    \        val reversedSuffixOfLongestPalindromicSuffix = reversedSuffixOfLongestPalindromicSuffix(string,\
    \ longestPalindromicSuffix)\n        val palindrome = reversedPrefixOfLongestPalindromicSuffix\
    \ + reversedSuffixOfLongestPalindromicSuffix\n        palindrome", "        val\
    \ longestPalindrome = string.takeWhile(x => x.toString.toLowerCase == x.toString.toLowerCase\
    \ && x != x.reverse).reverse\n        val reversedString = longestPalindrome +\
    \ string.drop(longestPalindrome.size)\n        reversedString", "        val longestPalindrome\
    \ = longestPalindrome(string.tail)\n        string + longestPalindrome.reverse",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        val\
    \ reversedString = string.head + longestPalindrome.reverse\n        reversedString",
  "        val longestPalindromicSuffix = findLongestPalindromicSuffix(string.tail)\n\
    \        val reversedLongestPalindromicSuffix = reverseString(longestPalindromicSuffix)\n\
    \        string + reversedLongestPalindromicSuffix", "        val longestPalindrome\
    \ = string.foldLeft(\"\"){ (longest, s) =>\n            val reversed = s.reverse\n\
    \            val prefix = reversed.takeWhile(c => c != longest.last)\n       \
    \     val suffix = reversed.dropWhile(c => c != longest.last)\n            prefix\
    \ + longestPalindrome + suffix\n        }\n        longestPalindrome", "     \
    \   val longestPalindrome = longestPalindrome(string, string.size)\n        longestPalindrome\
    \ + reverseOfPrefix(longestPalindrome, string.size)"]
stop_tokens:
- "\n    }\n"
