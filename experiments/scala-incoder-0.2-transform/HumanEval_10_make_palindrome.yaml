name: HumanEval_10_make_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find the shortest palindrome that begins with a supplied string.\n    //\
  \ Algorithm idea is simple:\n    // - Find the longest postfix of supplied string\
  \ that is a palindrome.\n    // - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\
  \"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n\
  \    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(makePalindrome((\"\
  \")).equals((\"\")));\n    assert(makePalindrome((\"x\")).equals((\"x\")));\n  \
  \  assert(makePalindrome((\"xyz\")).equals((\"xyzyx\")));\n    assert(makePalindrome((\"\
  xyx\")).equals((\"xyx\")));\n    assert(makePalindrome((\"jerry\")).equals((\"jerryrrej\"\
  )));\n    }\n\n}\n"
completions: ["        val longestPalindrome = longestPalindrome(string.tail)\n  \
    \      string + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string)\n\
    \        val reversedString = reverseString(longestPalindrome)\n        longestPalindrome\
    \ + reversedString", "        val longestPalindrome = string.foldLeft(\"\"){ (longest,\
    \ palindrome) =>\n            val reversed = palindrome.tail.reverse\n       \
    \     val prefix = palindrome.takeWhile(_ != reversed)\n            val suffix\
    \ = palindrome.dropWhile(_ != reversed)\n            val newPalindrome = prefix\
    \ ++ reversed ++ suffix\n            if (newPalindrome < longest) {\n        \
    \        longest = newPalindrome\n            }\n            newPalindrome\n \
    \       }\n        longestPalindrome + string", "        val longestPalindrome\
    \ = longestPalindrome(string, \"\")\n        longestPalindrome + reverseString(longestPalindrome)",
  "        val longestPalindrome = string.takeWhile(x => x.toString.toLowerCase ==\
    \ x.toString.toLowerCase && x != x.toString.toUpperCase).reverse\n        string\
    \ + longestPalindrome", "        val longestPalindrome = string.takeWhile(x =>\
    \ x.toString.toLowerCase == x.toString.toLowerCase.reverse)\n        val reversedString\
    \ = longestPalindrome.reverse\n        string + reversedString", "        val\
    \ longestPalindrome = string.takeWhile(c => c != string.last).reverse\n      \
    \  val reversedString = longestPalindrome + string.drop(longestPalindrome.size)\n\
    \        reversedString", "        val longestPalindrome = longestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ findLongestPalindrome(string)\n        longestPalindrome + reverseOfPrefix(longestPalindrome)",
  "        val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val prefixString = string.drop(longestPalindrome.length)\n        val\
    \ reversedPrefixString = prefixString.reverse\n        val palindrome = longestPalindrome\
    \ + reversedPrefixString\n        palindrome", "        val longestPalindrome\
    \ = string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = string.foldLeft(\"\"){ (longest, s) =>\n      \
    \      val longestPalindrome = longest.foldLeft(\"\"){ (longestPalindrome, s2)\
    \ =>\n                val longestPalindrome = longestPalindrome + s2\n       \
    \         val longestPalindrome = longestPalindrome + longest\n              \
    \  longestPalindrome\n            }\n        }\n        val reversedString = longestPalindrome.foldLeft(\"\
    \"){ (reversed, s) =>\n            val reversedString = reversed.foldLeft(\"\"\
    ){ (reversedString, s2) =>\n                val reversedString = reversedString\
    \ + s2\n                val reversedString = reversedString + s\n            \
    \    reversedString\n            }\n        }\n        reversedString + longestPalindrome",
  "        val longestPalindrome = findLongestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        val longestPalindrome = findLongestPalindrome(string.trim())\n\
    \        val reversedLongestPalindrome = longestPalindrome.reverse\n        val\
    \ reversedLongestPalindromeString = reversedLongestPalindrome.toString\n     \
    \   val reversedLongestPalindromeStringLength = reversedLongestPalindromeString.length\n\
    \        val longestPalindromeLength = longestPalindrome.length\n        val longestPalindromeStringLength\
    \ = longestPalindromeStringLength\n        val longestPalindromeStringLengthPlusOne\
    \ = longestPalindromeStringLength + 1\n        val longestPalindromeStringLengthMinusOne\
    \ = longestPalindromeStringLength - 1\n        val longestPalindromeStringLengthMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOne\
    \ = longestPalindromeStringLengthMinusOne - 1\n        val longestPalindromeStringLengthMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOnePlusOne - 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOnePlusOne + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne - 1\n       \
    \ val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOnePlusOne = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne\
    \ + 1\n        val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne - 1\n       \
    \ val longestPalindromeStringLengthMinusOneMinusOneMinusOneMinusOneMinusOnePlusOne\
    \ = longestPalindromeStringLengthMinusOneMinusOneMinusOnePlusOne + 1\n       \
    \ val longestPalindromeStringLength", "        val longestPalindrome = findLongestPalindrome(string.tail)\n\
    \        string + longestPalindrome.reverse", "        val longestPalindrome =\
    \ string.takeWhile(x => x == string.last).reverse\n        val reversedString\
    \ = string.drop(longestPalindrome.length)\n        longestPalindrome + reversedString",
  "        val longestPalindrome = longestPalindrome(string.tail)\n        string\
    \ + longestPalindrome.reverse", "        var longestPalindrome = string\n    \
    \    var longestPalindromeLength = string.length\n        var longestPalindromePrefix\
    \ = string\n        var longestPalindromeSuffix = string\n        var longestPalindromePrefixLength\
    \ = string.length\n        var longestPalindromeSuffixLength = string.length\n\
    \        var longestPalindromeReverse = string\n        var longestPalindromeReverseLength\
    \ = string.length\n        var longestPalindromeReversePrefix = string\n     \
    \   var longestPalindromeReverseSuffix = string\n        var longestPalindromeReversePrefixLength\
    \ = string.length\n        var longestPalindromeReverseSuffixLength = string.length\n\
    \        var longestPalindromeReverseReverse = string\n        var longestPalindromeReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReversePrefix = string\n\
    \        var longestPalindromeReverseReverseSuffix = string\n        var longestPalindromeReverseReversePrefixLength\
    \ = string.length\n        var longestPalindromeReverseReverseSuffixLength = string.length\n\
    \        var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length\n   \
    \     var longestPalindromeReverseReverseReverse = string\n        var longestPalindromeReverseReverseReverseLength\
    \ = string.length\n        var longestPalindromeReverseReverseReversePrefix =\
    \ string\n        var longestPalindromeReverseReverseReverseSuffix = string\n\
    \        var longestPalindromeReverseReverseReversePrefixLength = string.length\n\
    \        var longestPalindromeReverseReverseSuffixLength = string.length", " \
    \       val longestPalindrome = longestPalindrome(string.tail)\n        val reversedString\
    \ = reverseString(longestPalindrome)\n        string + reversedString", "    \
    \    val longestPalindrome = string.takeWhile(x => x == string.last).reverse\n\
    \        val prefixString = string.takeWhile(x => x != longestPalindrome).reverse\n\
    \        longestPalindrome + prefixString"]
stop_tokens:
- "\n    }\n"
