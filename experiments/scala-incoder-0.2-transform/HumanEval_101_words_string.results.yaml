language: scala
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dxgkqza.scala:16)\n\tat Problem.main(tmp1dxgkqza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8has2yov.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dxgkqza.scala:16)\n\tat Problem.main(tmp1dxgkqza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val list = mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            list += word\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjekawqa.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn1grhrb4.scala:20)\n\tat Problem.main(tmpn1grhrb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordList = words.toList\n        wordList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbnfcgpl.scala:17)\n\tat Problem.main(tmpbbnfcgpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\W+\"\"\")\n\
    \        val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nmpq_ah.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgacpaio1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val list = mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            list += word\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjekawqa.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val words2 = words.filter(!_.isEmpty)\n        val words3 = words2.filter(!_.startsWith(\"\
    ,\"))\n        val words4 = words3.filter(!_.startsWith(\"'\"))\n        val words5\
    \ = words4.filter(!_.startsWith(\"\\\"\"))\n        val words6 = words5.filter(!_.startsWith(\"\
    (\"))\n        val words7 = words6.filter(!_.startsWith(\")\"))\n        val words8\
    \ = words7.filter(!_.startsWith(\",\"))\n        val words9 = words8.filter(!_.startsWith(\"\
    '\"))\n        val words10 = words9.filter(!_.startsWith(\"\\\"\"))\n        val\
    \ words11 = words10.filter(!_.startsWith(\"(\"))\n        val words12 = words11.filter(!_.startsWith(\"\
    )\"))\n        val words13 = words12.filter(!_.startsWith(\",\"))\n        val\
    \ words14 = words13.filter(!_.startsWith(\"'\"))\n        val words15 = words14.filter(!_.startsWith(\"\
    \\\"\"))\n        val words16 = words15.filter(!_.startsWith(\"(\"))\n       \
    \ val words17 = words16.filter(!_.startsWith(\")\"))\n        val words18 = words17.filter(!_.startsWith(\"\
    ,\"))\n        val words19 = words18.filter(!_.startsWith(\"'\"))\n        val\
    \ words20 = words19.filter(!_.startsWith(\"\\\"\"))\n        val words21 = words20.filter(!_.startsWith(\"\
    (\"))\n        val words22 = words21.filter(!_.startsWith(\")\"))\n        val\
    \ words23 = words22.filter(!_.startsWith(\",\"))\n        val words24 = words23.filter(!_.startsWith(\"\
    '\"))\n        val words25 = words24.filter(!_.startsWith(\"\\\"\"))\n       \
    \ val words26 = words25.filter(!_.startsWith(\"(\"))\n        val words27 = words26.filter(!_.startsWith(\"\
    )\"))\n        val words28 = words27.filter(!_.startsWith(\",\"))\n        val\
    \ words29 = words28.filter(!_.startsWith(\"'\"))\n        val words30 = words29.filter(!_.startsWith(\"\
    \\\"\"))\n        val words31 = words30.filter(!_.startsWith(\"(\"))\n       \
    \ val words32 = words31.filter(!_.startsWith(\")\"))\n        val words33 = words31.filter(!_.startsWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprnp1qtvl.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmprnp1qtvl.scala:44:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e\
    [0m \e[36mwords33\e[0m = words31.filter(!_.startsWith\n\e[31m\e[31m   |\e[0m \
    \                                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mstartsWith\e[0m in \e\
    [33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Boolean\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Boolean\n\e[31m   |\e[0mmatch expected\
    \ type ?{ unary_! : ? }\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnp1qtvl.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpktn0o7iq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        val wordsArray2 = wordsArray.map(_.trim).toList\n\
    \        val wordsArray3 = wordsArray2.filter(_.nonEmpty)\n        val wordsArray4\
    \ = wordsArray3.map(_.split(\" \")).toList\n        val wordsArray5 = wordsArray4.map(_.toUpperCase).toList\n\
    \        val wordsArray6 = wordsArray5.filter(_.nonEmpty)\n        val wordsArray7\
    \ = wordsArray6.map(_.split(\" \")).toList\n        val wordsArray8 = wordsArray7.map(_.toUpperCase).toList\n\
    \        val wordsArray9 = wordsArray8.filter(_.nonEmpty)\n        val wordsArray10\
    \ = wordsArray9.map(_.split(\" \")).toList\n        val wordsArray11 = wordsArray10.map(_.toUpperCase).toList\n\
    \        val wordsArray12 = wordsArray11.filter(_.nonEmpty)\n        val wordsArray13\
    \ = wordsArray12.map(_.split(\" \")).toList\n        val wordsArray14 = wordsArray13.map(_.toUpperCase).toList\n\
    \        val wordsArray15 = wordsArray14.filter(_.nonEmpty)\n        val wordsArray16\
    \ = wordsArray15.map(_.split(\" \")).toList\n        val wordsArray17 = wordsArray16.map(_.toUpperCase).toList\n\
    \        val wordsArray18 = wordsArray17.filter(_.nonEmpty)\n        val wordsArray19\
    \ = wordsArray18.map(_.split(\" \")).toList\n        val wordsArray20 = wordsArray19.map(_.toUpperCase).toList\n\
    \        val wordsArray21 = wordsArray20.filter(_.nonEmpty)\n        val wordsArray22\
    \ = wordsArray21.map(_.split(\" \")).toList\n        val wordsArray23 = wordsArray22.map(_.toUpperCase).toList\n\
    \        val wordsArray24 = wordsArray23.filter(_.nonEmpty)\n        val wordsArray25\
    \ = wordsArray24.map(_.split(\" \")).toList\n        val wordsArray26 = wordsArray25.map(_.toUpperCase).toList\n\
    \        val wordsArray27 = wordsArray26.filter(_.nonEmpty)\n        val wordsArray28\
    \ = wordsArray27.map(_.split(\" \")).toList\n        val wordsArray29 = wordsArray28.map(_.toUpperCase).toList\n\
    \        val wordsArray30 = wordsArray29.filter(_.nonEmpty)\n        val wordsArray31\
    \ = wordsArray30.map(_.split(\" \")).toList\n        val wordsArray32 = wordsArray31.map(_.toUpperCase).toList\n\
    \        val wordsArray33 = wordsArray32.filter(_.nonEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4czx0_d.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordsArray5\e[0m = wordsArray4.map(_.toUpperCase).toList\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value toUpperCase is not a member of\
    \ Array[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4czx0_d.scala:18:47\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArray6\e[0m = wordsArray5.filter(_.nonEmpty)\n\e[31m\e[31m   |\e[0m \
    \                                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ nonEmpty is not a member of Nothing, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4czx0_d.scala:19:44\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArray7\e[0m = wordsArray6.map(_.split(\e[31m\" \"\e[0m)).toList\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  value split is not a member of Nothing\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp4czx0_d.scala:20:44 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m "
  stdout: ''
  timestamp: 1660013237
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3uxfb1l.scala:17)\n\tat Problem.main(tmpw3uxfb1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        val wordsArray2 = wordsArray.map(_.trim).toList\n\
    \        wordsArray2\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphbayshmo.scala:18)\n\tat Problem.main(tmphbayshmo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdvfz19c.scala:17)\n\tat Problem.main(tmpcdvfz19c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = ArrayBuffer.empty[String]\n        for(i <- 0 until\
    \ wordsArrayLength){\n            wordsArrayList += wordsArray(i)\n        }\n\
    \        wordsArrayList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqs4typ1.scala:26)\n\tat Problem.main(tmpbqs4typ1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyd3211r.scala:21)\n\tat Problem.main(tmpwyd3211r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mtnu5vb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq1fs3n91.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = new mutable.ArrayList[String](wordsArrayLength)\n\
    \        wordsArray.foreach(wordsArrayList.add)\n        return wordsArrayList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprmwoq6iu.scala:15:33 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayList\e[0m = \e\
    [33mnew\e[0m mutable.ArrayList[\e[35mString\e[0m](wordsArrayLength)\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013229
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplt62sq4b.scala:16)\n\tat Problem.main(tmplt62sq4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArray2 = new Array[String](wordsArrayLength)\n        var i\
    \ = 0\n        while (i < wordsArrayLength) {\n            wordsArray2(i) = wordsArray(i)\n\
    \            i += 1\n        }\n        wordsArray2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvfjf_t1.scala:21:8\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m        wordsArray2\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray2\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvby48u9h.scala:16)\n\tat Problem.main(tmpvby48u9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val words2 = words.filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp97i4s7uv.scala:17)\n\tat Problem.main(tmp97i4s7uv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jf_fr7l.scala:16)\n\tat Problem.main(tmp7jf_fr7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordList = words.toList\n        wordList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbnfcgpl.scala:17)\n\tat Problem.main(tmpbbnfcgpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordList = words.toList\n        wordList.map(word => word.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm41bmjzv.scala:17)\n\tat Problem.main(tmpm41bmjzv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        val words2 = words.map(_.toLowerCase).toList\n\
    \        val words3 = words2.filter(_.length > 0)\n        val words4 = words3.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words5 = words4.filter(_.matches(\"^[a-z]+\"))\n   \
    \     val words6 = words5.filter(_.matches(\"^[a-z]+$\"))\n        val words7\
    \ = words6.filter(_.matches(\"^[a-z]+\"))\n        val words8 = words7.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words9 = words8.filter(_.matches(\"^[a-z]+\"))\n   \
    \     val words10 = words9.filter(_.matches(\"^[a-z]+$\"))\n        val words11\
    \ = words10.filter(_.matches(\"^[a-z]+\"))\n        val words12 = words11.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words13 = words12.filter(_.matches(\"^[a-z]+\"))\n \
    \       val words14 = words13.filter(_.matches(\"^[a-z]+$\"))\n        val words15\
    \ = words14.filter(_.matches(\"^[a-z]+\"))\n        val words16 = words15.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words17 = words16.filter(_.matches(\"^[a-z]+\"))\n \
    \       val words18 = words17.filter(_.matches(\"^[a-z]+$\"))\n        val words19\
    \ = words18.filter(_.matches(\"^[a-z]+\"))\n        val words20 = words19.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words21 = words20.filter(_.matches(\"^[a-z]+\"))\n \
    \       val words22 = words21.filter(_.matches(\"^[a-z]+$\"))\n        val words23\
    \ = words22.filter(_.matches(\"^[a-z]+\"))\n        val words24 = words23.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words25 = words24.filter(_.matches(\"^[a-z]+\"))\n \
    \       val words26 = words25.filter(_.matches(\"^[a-z]+$\"))\n        val words27\
    \ = words26.filter(_.matches(\"^[a-z]+\"))\n        val words28 = words27.filter(_.matches(\"\
    ^[a-z]+$\"))\n        val words29 = words28.filter(_.matches(\"^[a-z]+\"))\n \
    \       val words30 = words29.filter(_.matches(\"^[a-z]+$\"))\n        val words31\
    \ = words30.filter(_.matches(\"^[a-z]+\"))\n        val words32 = words31.filter(_.matches(\"\
    ^[a-z]+$\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpra7ql6wq.scala:43:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mwords32\e[0m = words31.filter(_.matches(\"\
    ^[a-z]+$\n\e[31m\e[31m   |\e[0m                                              \
    \ ^\e[0m\n\e[31m   |\e[0m                                               unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpra7ql6wq.scala:45:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpra7ql6wq.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpra7ql6wq.scala:45:4 -------------------------\e[0m\e\
    [0m\n\e[31m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m\
    \    Not found: ^[a-z]+$def\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => result += word)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5c_tjmra.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013230
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val words2 = words.map(_.toLowerCase)\n        val words3 = words2.toList\n\
    \        words3.toArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm6f5o64_.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words3.toArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe532qlf.scala:17)\n\tat Problem.main(tmpfe532qlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        val wordsArray = words.toArray\n        wordsArray.map(word => word.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7vlaxggh.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray.map(\e[36mword\e\
    [0m => word.toLowerCase)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9a535un.scala:20)\n\tat Problem.main(tmph9a535un.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = wordsArray.map(x => x.trim).toList\n        val\
    \ wordsArrayListLength = wordsArrayList.length\n        val wordsArrayListWithSpaces\
    \ = wordsArrayList.map(x => \" \" + x).toList\n        val wordsArrayListWithSpacesLength\
    \ = wordsArrayListWithSpaces.length\n        val wordsArrayListWithSpacesWithSpaces\
    \ = wordsArrayListWithSpaces.map(x => \" \" + x).toList\n        val wordsArrayListWithSpacesWithSpacesLength\
    \ = wordsArrayListWithSpacesWithSpaces.length\n        val wordsArrayListWithSpacesWithSpacesWithSpaces\
    \ = wordsArrayListWithSpacesWithSpaces.map(x => \" \" + x).toList\n        val\
    \ wordsArrayListWithSpacesWithSpacesWithSpacesLength = wordsArrayListWithSpacesWithSpacesWithSpaces.length\n\
    \        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpaces = wordsArrayListWithSpacesWithSpacesWithSpaces.map(x\
    \ => \" \" + x).toList\n        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpaces.length\n        val\
    \ wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpaces.map(x\
    \ => \" \" + x).toList\n        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.map(x =>\
    \ \" \" + x).toList\n        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \        val wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ = wordsArrayListWithSpacesWithSpacesWith\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppbyrvop5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.map(\e\
    [36mx\e[0m => \e[31m\" \"\e[0m + x).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppbyrvop5.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\e\
    [0m = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmppbyrvop5.scala:29:89 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\e\
    [0m = wordsArrayListWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e"
  stdout: ''
  timestamp: 1660013243
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = wordsArray.toList\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListIterator = wordsArrayList.iterator\n\
    \        val wordsArrayListIteratorNext = wordsArrayListIterator.next\n      \
    \  val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.asInstanceOf[String]\n\
    \        val wordsArrayListIteratorNextValueLength = wordsArrayListIteratorNextValue.length\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \        val wordsArrayListIteratorNextValueChar = wordsArrayListIteratorNextValue.charAt(0)\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueChar.length\n\
    \        val wordsArrayListIteratorNextValueCharLength = wordsArrayListIteratorNextValueCharLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpieploier.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextValueCharLength\e\
    [0m = wordsArrayListIteratorNextValueCharLength\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextValueCharLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mwordsArrayListIteratorNextValueCharLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpieploier.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextValueChar\e[0m\
    \ = wordsArrayListIteratorNextValue.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextValueChar is already defined as\
    \ \e[33mvalue\e[0m \e[35mwordsArrayListIteratorNextValueChar\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpieploier.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsArrayListIteratorNextValueCharLength\e[0m = wordsArrayListIteratorNextValueChar.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextValueCharLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mwordsArrayListIteratorNextValueCharLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpieploier.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextValueCharLength\e\
    [0m = wordsArrayListIteratorNextValueCharLength\n\e[31m\e"
  stdout: ''
  timestamp: 1660013243
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result += word\n        }\n        return result.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2cclpqa_.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013239
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = ArrayBuffer.empty[String]\n        for (i <- 0 until\
    \ wordsArrayLength) {\n            wordsArrayList += wordsArray(i)\n        }\n\
    \        wordsArrayList.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0myxxz__.scala:26)\n\tat Problem.main(tmp0myxxz__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mtnu5vb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        words.toList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmgkjbfqz.scala:16)\n\tat Problem.main(tmpmgkjbfqz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9a535un.scala:20)\n\tat Problem.main(tmph9a535un.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        val words2 = words.map(_.toLowerCase)\n      \
    \  val words3 = words2.filter(_.length() > 0)\n        val words4 = words3.filter(_.length()\
    \ < 3)\n        val words5 = words4.filter(_.length() > 0)\n        val words6\
    \ = words5.filter(_.length() < 3)\n        val words7 = words6.filter(_.length()\
    \ > 0)\n        val words8 = words7.filter(_.length() < 3)\n        val words9\
    \ = words8.filter(_.length() > 0)\n        val words10 = words9.filter(_.length()\
    \ < 3)\n        val words11 = words10.filter(_.length() > 0)\n        val words12\
    \ = words11.filter(_.length() < 3)\n        val words13 = words12.filter(_.length()\
    \ > 0)\n        val words14 = words13.filter(_.length() < 3)\n        val words15\
    \ = words14.filter(_.length() > 0)\n        val words16 = words15.filter(_.length()\
    \ < 3)\n        val words17 = words16.filter(_.length() > 0)\n        val words18\
    \ = words17.filter(_.length() < 3)\n        val words19 = words18.filter(_.length()\
    \ > 0)\n        val words20 = words19.filter(_.length() < 3)\n        val words21\
    \ = words20.filter(_.length() > 0)\n        val words22 = words21.filter(_.length()\
    \ < 3)\n        val words23 = words22.filter(_.length() > 0)\n        val words24\
    \ = words23.filter(_.length() < 3)\n        val words25 = words24.filter(_.length()\
    \ > 0)\n        val words26 = words25.filter(_.length() < 3)\n        val words27\
    \ = words26.filter(_.length() > 0)\n        val words28 = words27.filter(_.length()\
    \ < 3)\n        val words29 = words28.filter(_.length() > 0)\n        val words30\
    \ = words29.filter(_.length() < 3)\n        val words31 = words30.filter(_.length()\
    \ > 0)\n        val words32 = words31.filter(_.length() < 3)\n        val words33\
    \ = words32.filter(_.length() > 0)\n        val words34 = words33.filter(_.length()\
    \ < 3)\n        val words35 = words34.filter(_.length() > 0)\n        val words36\
    \ = words35.filter(_.length() < 3)\n        val words37 = words36.filter(_.length()\
    \ > 0)\n        val words38 = words37.filter(_.length() < 3)\n        val words39\
    \ = words38.filter(_.length() > 0)\n        val words40 = words39.filter(_.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvno508ac.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpvno508ac.scala:51:37 --------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \        \e[33mval\e[0m \e[36mwords40\e[0m = words39.filter(_.length\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    Int\n\e[31m   |\e[0m       \
    \                              Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvno508ac.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val result = new mutable.ListBuffer[String]()\n        for (word <-\
    \ words) {\n            result.add(word)\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxy9fdghq.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mtnu5vb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += (word + \", \")\n        }\n        result -= result.last\n\
    \        result.mkString.split(\", \").toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu50bi_bl.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013240
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result.add(word)\n        }\n        return result.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqfj2mr8p.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jf_fr7l.scala:16)\n\tat Problem.main(tmp7jf_fr7l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3uxfb1l.scala:17)\n\tat Problem.main(tmpw3uxfb1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe532qlf.scala:17)\n\tat Problem.main(tmpfe532qlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = wordsArray.toList\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListIterator = wordsArrayList.iterator\n\
    \        val wordsArrayListIteratorLength = wordsArrayListIterator.length\n  \
    \      val wordsArrayListIteratorNext = wordsArrayListIterator.next\n        val\
    \ wordsArrayListIteratorNextLength = wordsArrayListIteratorNext.length\n     \
    \   val wordsArrayListIteratorNextNext = wordsArrayListIteratorNext.next\n   \
    \     val wordsArrayListIteratorNextNextLength = wordsArrayListIteratorNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNext = wordsArrayListIteratorNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextLength = wordsArrayListIteratorNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNext = wordsArrayListIteratorNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextLength = wordsArrayListIteratorNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNext = wordsArrayListIteratorNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNext = wordsArrayListIteratorNextNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNext = wordsArrayListIteratorNextNextNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNext = wordsArrayListIteratorNextNextNextNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextNext = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextNextLength\
    \ = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext.length\n  \
    \      val wordsArrayListIteratorNextNextNextNextNextNext\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppx8cgt3e.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx8cgt3e.scala:21:72\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayListIteratorNextNext\e[0m = wordsArrayListIteratorNext.next\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue next is not a member of String - did you mean wordsArrayListIteratorNext.indent?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppx8cgt3e.scala:35:73 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextNextNextNextNextNextNextNextNext\e\
    [0m = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext.next\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppx8cgt3e.scala:36:79\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayListIteratorNextNextNextNextNextNextNextNextNextLength\e[0m = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNext\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppx8cgt3e.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   "
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase)\n\
    \        val result = new mutable.ListBuffer[String]()\n        for(word <- words)\
    \ {\n            result += word\n        }\n        result.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzyoib4vm.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe532qlf.scala:17)\n\tat Problem.main(tmpfe532qlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj67mgir3.scala:18)\n\tat Problem.main(tmpj67mgir3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ result = new mutable.ListBuffer[String]()\n        for (word <- words) {\n \
    \           result.add(word.trim())\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2t2x2qpf.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        val words2 = words.filter(_.nonEmpty)\n      \
    \  words2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhc5rgcy.scala:17)\n\tat Problem.main(tmpbhc5rgcy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013246
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        val words2 = words.filter(_.nonEmpty)\n      \
    \  val words3 = words2.map(_.toLowerCase)\n        val words4 = words3.filter(_.nonEmpty)\n\
    \        val words5 = words4.map(_.toUpperCase)\n        val words6 = words5.filter(_.nonEmpty)\n\
    \        val words7 = words6.map(_.swapCase)\n        val words8 = words7.filter(_.nonEmpty)\n\
    \        val words9 = words8.map(_.toUpperCase)\n        val words10 = words9.filter(_.nonEmpty)\n\
    \        val words11 = words10.map(_.swapCase)\n        val words12 = words11.filter(_.nonEmpty)\n\
    \        val words13 = words12.map(_.toUpperCase)\n        val words14 = words13.filter(_.nonEmpty)\n\
    \        val words15 = words14.map(_.swapCase)\n        val words16 = words15.filter(_.nonEmpty)\n\
    \        val words17 = words16.map(_.toUpperCase)\n        val words18 = words17.filter(_.nonEmpty)\n\
    \        val words19 = words18.map(_.swapCase)\n        val words20 = words19.filter(_.nonEmpty)\n\
    \        val words21 = words20.map(_.toUpperCase)\n        val words22 = words21.filter(_.nonEmpty)\n\
    \        val words23 = words22.map(_.swapCase)\n        val words24 = words23.filter(_.nonEmpty)\n\
    \        val words25 = words24.map(_.toUpperCase)\n        val words26 = words25.filter(_.nonEmpty)\n\
    \        val words27 = words26.map(_.swapCase)\n        val words28 = words27.filter(_.nonEmpty)\n\
    \        val words29 = words28.map(_.toUpperCase)\n        val words30 = words29.filter(_.nonEmpty)\n\
    \        val words31 = words30.map(_.swapCase)\n        val words32 = words31.filter(_.nonEmpty)\n\
    \        val words33 = words30.map(_.toUpperCase)\n        val words34 = words31.filter(_.nonEmpty)\n\
    \        val words35 = words30.map(_.swapCase)\n        val words36 = words31.filter(_.nonEmpty)\n\
    \        val words37 = words30.map(_.toUpperCase)\n        val words38 = words31.filter(_.nonEmpty)\n\
    \        val words39 = words30.map(_.swapCase)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp8pj7j_xk.scala:51:11 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pj7j_xk.scala:18:34 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwords7\e[0m = words6.map(_.swapCase)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                value swapCase is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pj7j_xk.scala:19:37 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwords8\e[0m = words7.filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue nonEmpty is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8pj7j_xk.scala:20:34\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mwords9\e[0m = words8.map(_.toUpperCase)\n\e[31m\e[31m   |\e[0m           \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660013249
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        words.toList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmgkjbfqz.scala:16)\n\tat Problem.main(tmpmgkjbfqz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013245
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\W+\"\"\")\n\
    \        val result = new mutable.ListBuffer[String]()\n        words.foreach(word\
    \ => result += word)\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9v03gfhu.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdvfz19c.scala:17)\n\tat Problem.main(tmpcdvfz19c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = mutable.ArrayBuffer(wordsArray)\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListArray = wordsArrayList.toArray\n\
    \        val wordsArrayListArrayLength = wordsArrayListArray.length\n        val\
    \ wordsArrayListArrayList = new ArrayList[String](wordsArrayListArrayLength)\n\
    \        val wordsArrayListArrayListLength = wordsArrayListArrayList.length\n\
    \        val wordsArrayListArrayListArray = new ArrayList[String](wordsArrayListArrayListLength)\n\
    \        val wordsArrayListArrayListArrayLength = wordsArrayListArrayListArray.length\n\
    \        val wordsArrayListArrayListArrayList = new ArrayList[String](wordsArrayListArrayListArrayListLength)\n\
    \        val wordsArrayListArrayListArrayListLength = wordsArrayListArrayListArrayList.length\n\
    \        val wordsArrayListArrayListArrayListArray = new ArrayList[String](wordsArrayListArrayListArrayListArrayLength)\n\
    \        val wordsArrayListArrayListArrayListArrayLength = wordsArrayListArrayListArrayListArray.length\n\
    \        val wordsArrayListArrayListArrayListArrayList = new ArrayList[String](wordsArrayListArrayListArrayListArrayListArrayLength)\n\
    \        val wordsArrayListArrayListArrayListArrayListLength = wordsArrayListArrayListArrayListArrayListArray.length\n\
    \        val wordsArrayListArrayListArrayListArrayListArray = new ArrayList[String](wordsArrayListArrayListArrayListArrayListArrayListLength)\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayLength = wordsArrayListArrayListArrayListArrayListArrayArray.length\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayList = new ArrayList[String](wordsArrayListArrayListArrayListArrayListArrayListArrayListLength)\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayListLength = wordsArrayListArrayListArrayListArrayListArrayListArrayListArray.length\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayListArray = new ArrayList[String](wordsArrayListArrayListArrayListArrayListArrayListArrayListArrayListLength)\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayListArrayLength = wordsArrayListArrayListArrayListArrayListArrayListArrayListArray.length\n\
    \        val wordsArrayListArrayListArrayListArrayListArrayListArrayList = new\
    \ ArrayList[String](wordsArrayListArrayListArrayListArrayListArrayList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd7ib7e8d.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7ib7e8d.scala:15:29\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayList\e[0m = mutable.ArrayBuffer(wordsArray)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpd7ib7e8d.scala:19:42 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mwordsArrayListArrayList\e[0m = \e[33mnew\e[0m\
    \ \e[35mArrayList\e[0m[\e[35mString\e[0m](wordsArrayListArrayLength)\n\e[31m\e\
    [31m   |\e[0m                                          ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Not found: type ArrayList\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7ib7e8d.scala:21:47\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayListArrayListArray\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e\
    [35mString\e[0m](wordsArrayListArrayListLength)\n\e[31m\e[31m   |\e[0m       \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                                          Not found: type ArrayList\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd7ib7e8d.scala:23:51 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListArrayListArrayList\e\
    [0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m](wordsArrayListArrayListArrayListLength)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m lo"
  stdout: ''
  timestamp: 1660013244
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgd8_l_p3.scala:18)\n\tat Problem.main(tmpgd8_l_p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013246
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3uxfb1l.scala:17)\n\tat Problem.main(tmpw3uxfb1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordList = words.toList\n        wordList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbnfcgpl.scala:17)\n\tat Problem.main(tmpbbnfcgpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplt62sq4b.scala:16)\n\tat Problem.main(tmplt62sq4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val list = words.map(word => word.split(\", \")).toList\n        list.map(_.toList).flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjq9dith.scala:17)\n\tat Problem.main(tmpgjq9dith.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013250
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo9uqv7qc.scala:22)\n\tat Problem.main(tmpo9uqv7qc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph9a535un.scala:20)\n\tat Problem.main(tmph9a535un.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = mutable.ArrayBuffer(wordsArray)\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListIterator = wordsArrayList.iterator\n\
    \        val wordsArrayListIteratorNext = wordsArrayListIterator.next\n      \
    \  val wordsArrayListIteratorNextAsString = wordsArrayListIteratorNext.asInstanceOf[String]\n\
    \        val wordsArrayListIteratorNextAsArray = wordsArrayListIteratorNext.asInstanceOf[Array[String]]\n\
    \        val wordsArrayListIteratorNextAsArrayLength = wordsArrayListIteratorNextAsArray.length\n\
    \        val wordsArrayListIteratorNextAsArrayList = new ArrayList[String](wordsArrayListIteratorNextAsArrayLength)\n\
    \        val wordsArrayListIteratorNextAsArrayListLength = wordsArrayListIteratorNextAsArrayList.length\n\
    \        val wordsArrayListIteratorNextAsArrayListIterator = wordsArrayListIteratorNextAsArrayList.iterator\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNext = wordsArrayListIteratorNextAsArrayListIterator.next\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNextAsString = wordsArrayListIteratorNextAsArrayListIteratorNext.asInstanceOf[String]\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNextAsArray = wordsArrayListIteratorNextAsArrayListIteratorNext.asInstanceOf[Array[String]]\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayLength =\
    \ wordsArrayListIteratorNextAsArrayListIteratorNextAsArray.length\n        val\
    \ wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayList = new ArrayList[String](wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayLength)\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListLength\
    \ = wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayList.length\n    \
    \    val wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIterator\
    \ = wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayList.iterator\n  \
    \      val wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNext\
    \ = wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIterator.next\n\
    \        val wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNextAsString\
    \ = wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNext.asInstanceOf[String]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70al82zk.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayList\e[0m = mutable.ArrayBuffer(wordsArray)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp70al82zk.scala:22:56 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextAsArrayList\e\
    [0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m](wordsArrayListIteratorNextAsArrayLength)\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70al82zk.scala:29:79\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mwordsArrayListIteratorNextAsArrayListIteratorNextAsArrayList\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mString\e[0m](wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayLength)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp70al82zk.scala:33:95 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNextAsString\e\
    [0m = wordsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNextAsArrayListIteratorNext.asInstanceOf[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                      \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljziji0o.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpshx0_28z.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase)\n\
    \        val words2 = words.filter(_.length > 0)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbj9i13qm.scala:17)\n\tat Problem.main(tmpbj9i13qm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyd3211r.scala:21)\n\tat Problem.main(tmpwyd3211r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxx_95a1c.scala:17)\n\tat Problem.main(tmpxx_95a1c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArray2 = new Array[String](wordsArrayLength)\n        for (i\
    \ <- 0 until wordsArrayLength) {\n            wordsArray2(i) = wordsArray(i)\n\
    \        }\n        return wordsArray2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgytunino.scala:19:15\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mreturn\e[0m wordsArray2\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \       Found:    (wordsArray2 : Array[String])\n\e[31m   |\e[0m             \
    \  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n      \
    \  val wordsArrayLength = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArray.length\n        val wordsArrayLength\
    \ = wordsArray.length\n        val wordsArrayLength = wordsArray.length\n    \
    \    val wordsArrayLength = wordsArray.length\n        val wordsArrayLength =\
    \ wordsArray.length\n        val wordsArrayLength = wordsArray.length\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6vr48n8y.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6vr48n8y.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6vr48n8y.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6vr48n8y.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp6vr48n8y.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArray.length\n\e[31m\e[31m   |\e[0m       "
  stdout: ''
  timestamp: 1660013252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val words2 = words.toList\n        words2.toArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmtdtqo5k.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        words2.toArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e\
    [1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).filter(_.nonEmpty)\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcdvfz19c.scala:17)\n\tat Problem.main(tmpcdvfz19c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordsArray = words.toArray\n        wordsArray\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuaw1jk_c.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*\"\"\
    \").map(_.trim).toList\n        words.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplt62sq4b.scala:16)\n\tat Problem.main(tmplt62sq4b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mtnu5vb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = wordsArray.toList\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListIterator = wordsArrayList.iterator\n\
    \        val wordsArrayListIteratorNext = wordsArrayListIterator.next\n      \
    \  val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n  \
    \      val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n  \
    \      val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArrayListIteratorNextKey = wordsArrayListIteratorNext.key\n\
    \        val wordsArrayListIteratorNextValue = wordsArrayListIteratorNext.value\n\
    \        val wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppu7_g4af.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppu7_g4af.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsArrayListIteratorNextValue\e[0m = wordsArrayListIteratorNext.value\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextValue is already defined as \e[33mvalue\e\
    [0m \e[35mwordsArrayListIteratorNextValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppu7_g4af.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsArrayListIteratorNextKey\e[0m = wordsArrayListIteratorNext.key\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextKey is already defined as \e[33mvalue\e\
    [0m \e[35mwordsArrayListIteratorNextKey\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppu7_g4af.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextValue\e\
    [0m = wordsArrayListIteratorNext.value\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextValue is already defined as \e[33mvalue\e\
    [0m \e[35mwordsArrayListIteratorNextValue\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppu7_g4af.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsArrayListIteratorNextKey\e[0m = wordsArrayListIteratorNext.key\n\e\
    [31m\e[31m "
  stdout: ''
  timestamp: 1660013252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfe532qlf.scala:17)\n\tat Problem.main(tmpfe532qlf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013241
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", | \")\n      \
    \  words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkistzv95.scala:19)\n\tat Problem.main(tmpkistzv95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8has2yov.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpshx0_28z.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayList = mutable.ArrayBuffer(wordsArray)\n        val wordsArrayListLength\
    \ = wordsArrayList.length\n        val wordsArrayListIterator = wordsArrayList.iterator\n\
    \        val wordsArrayListIteratorLength = wordsArrayListIterator.length\n  \
    \      val wordsArrayListIteratorNext = wordsArrayListIterator.next\n        val\
    \ wordsArrayListIteratorNextLength = wordsArrayListIteratorNext.length\n     \
    \   val wordsArrayListIteratorNextNext = wordsArrayListIteratorNext.next\n   \
    \     val wordsArrayListIteratorNextNextLength = wordsArrayListIteratorNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNext = wordsArrayListIteratorNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextLength = wordsArrayListIteratorNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNext = wordsArrayListIteratorNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextLength = wordsArrayListIteratorNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNext = wordsArrayListIteratorNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNext = wordsArrayListIteratorNextNextNextNextNext.next\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextLength = wordsArrayListIteratorNextNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextNextLength\
    \ = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNextLength\
    \ = wordsArrayListIteratorNextNextNextNextNextNextNextNextNextNextNextNext.length\n\
    \        val wordsArray\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbb11lcj.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbb11lcj.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordsArrayListIteratorNextNextNextNextNextNextNextLength\e[0m = wordsArrayListIteratorNextNextNextNextNextNextNextNext.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextNextNextNextNextNextNextLength is\
    \ already defined as \e[33mvalue\e[0m \e[35mwordsArrayListIteratorNextNextNextNextNextNextNextLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbb11lcj.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayListIteratorNextNextNextNextNextNextNextNextLength\e\
    [0m = wordsArrayListIteratorNextNextNextNextNextNextNextNextNext.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayListIteratorNextNextNextNextNextNextNextNextLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordsArrayListIteratorNextNextNextNextNextNextNextNextLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpgbb11lcj.scala:15:29 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayList\e[0m = mutable.ArrayBuffer(wordsArray)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E0"
  stdout: ''
  timestamp: 1660013252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwyd3211r.scala:21)\n\tat Problem.main(tmpwyd3211r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8mtnu5vb.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013233
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.reverse.map(_.toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt470sovw.scala:16)\n\tat Problem.main(tmpt470sovw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toArray\n        val wordsArrayList = wordsArray.toList\n\
    \        wordsArrayList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkr_i1sd9.scala:22)\n\tat Problem.main(tmpkr_i1sd9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpljziji0o.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013251
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwkp52c4n.scala:17)\n\tat Problem.main(tmpwkp52c4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbgeeg1vt.scala:17)\n\tat Problem.main(tmpbgeeg1vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp959h_nl4.scala:21)\n\tat Problem.main(tmp959h_nl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase)\n\
    \        val wordList = words.toList\n        wordList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp570hdifg.scala:17)\n\tat Problem.main(tmp570hdifg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(_.trim).toList\n\
    \        val wordsArray = words.toArray\n        val wordsArrayLength = wordsArray.length\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n      \
    \  val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\
    \        val wordsArrayLength = wordsArrayLength\n        val wordsArrayLength\
    \ = wordsArrayLength\n        val wordsArrayLength = wordsArrayLength\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptmu_y6j5.scala:15:12 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptmu_y6j5.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptmu_y6j5.scala:17:12 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptmu_y6j5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mwordsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmptmu_y6j5.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordsArrayLength\e[0m =\
    \ wordsArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^"
  stdout: ''
  timestamp: 1660013253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\W+\"\"\")\n\
    \        val words2 = words.map(_.trim).toList\n        words2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpund6x_k6.scala:21)\n\tat Problem.main(tmpund6x_k6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013254
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
