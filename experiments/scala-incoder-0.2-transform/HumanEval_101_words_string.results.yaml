language: scala
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dxgkqza.scala:16)\n\tat Problem.main(tmp1dxgkqza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result.add(word)\n        }\n        return result.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8has2yov.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795531
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\s*,\\s*|\\\
    s*,\\s*\"\"\").map(_.trim).toList\n        words.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1dxgkqza.scala:16)\n\tat Problem.main(tmp1dxgkqza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val list = mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            list += word\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjekawqa.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn1grhrb4.scala:20)\n\tat Problem.main(tmpn1grhrb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11bm9i9g.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpowjuum19.scala:16)\n\tat Problem.main(tmpowjuum19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp07vtujgm.scala:16)\n\tat Problem.main(tmp07vtujgm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ words2 = words.map(_.trim).toList\n        words2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0cydaxmj.scala:17)\n\tat Problem.main(tmp0cydaxmj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        val\
    \ wordsArray = words.toList\n        wordsArray\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2b44v7kf.scala:17)\n\tat Problem.main(tmp2b44v7kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkseapaug.scala:20)\n\tat Problem.main(tmpkseapaug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4swmrh_.scala:16)\n\tat Problem.main(tmpe4swmrh_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    )\n        val wordList = words.toList\n        wordList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbnfcgpl.scala:17)\n\tat Problem.main(tmpbbnfcgpl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795533
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"\\W+\"\"\")\n\
    \        val wordsArray = words.toArray\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7nmpq_ah.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        wordsArray\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArray\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val result = new mutable.ListBuffer[String]()\n        for (word <- words)\
    \ {\n            result += word\n        }\n        return result.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgacpaio1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsArray = words.toList\n        wordsArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6inwkr0q.scala:21)\n\tat Problem.main(tmp6inwkr0q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795532
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\")\n \
    \       val list = mutable.ListBuffer[String]()\n        for (word <- words) {\n\
    \            list += word\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjekawqa.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795530
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return an array of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").map(_.toLowerCase).toList\n\
    \        val words2 = words.filter(!_.isEmpty)\n        val words3 = words2.filter(!_.startsWith(\"\
    ,\"))\n        val words4 = words3.filter(!_.startsWith(\"'\"))\n        val words5\
    \ = words4.filter(!_.startsWith(\"\\\"\"))\n        val words6 = words5.filter(!_.startsWith(\"\
    (\"))\n        val words7 = words6.filter(!_.startsWith(\")\"))\n        val words8\
    \ = words7.filter(!_.startsWith(\",\"))\n        val words9 = words8.filter(!_.startsWith(\"\
    '\"))\n        val words10 = words9.filter(!_.startsWith(\"\\\"\"))\n        val\
    \ words11 = words10.filter(!_.startsWith(\"(\"))\n        val words12 = words11.filter(!_.startsWith(\"\
    )\"))\n        val words13 = words12.filter(!_.startsWith(\",\"))\n        val\
    \ words14 = words13.filter(!_.startsWith(\"'\"))\n        val words15 = words14.filter(!_.startsWith(\"\
    \\\"\"))\n        val words16 = words15.filter(!_.startsWith(\"(\"))\n       \
    \ val words17 = words16.filter(!_.startsWith(\")\"))\n        val words18 = words17.filter(!_.startsWith(\"\
    ,\"))\n        val words19 = words18.filter(!_.startsWith(\"'\"))\n        val\
    \ words20 = words19.filter(!_.startsWith(\"\\\"\"))\n        val words21 = words20.filter(!_.startsWith(\"\
    (\"))\n        val words22 = words21.filter(!_.startsWith(\")\"))\n        val\
    \ words23 = words22.filter(!_.startsWith(\",\"))\n        val words24 = words23.filter(!_.startsWith(\"\
    '\"))\n        val words25 = words24.filter(!_.startsWith(\"\\\"\"))\n       \
    \ val words26 = words25.filter(!_.startsWith(\"(\"))\n        val words27 = words26.filter(!_.startsWith(\"\
    )\"))\n        val words28 = words27.filter(!_.startsWith(\",\"))\n        val\
    \ words29 = words28.filter(!_.startsWith(\"'\"))\n        val words30 = words29.filter(!_.startsWith(\"\
    \\\"\"))\n        val words31 = words30.filter(!_.startsWith(\"(\"))\n       \
    \ val words32 = words31.filter(!_.startsWith(\")\"))\n        val words33 = words31.filter(!_.startsWith\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprnp1qtvl.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmprnp1qtvl.scala:44:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e\
    [0m \e[36mwords33\e[0m = words31.filter(!_.startsWith\n\e[31m\e[31m   |\e[0m \
    \                                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35mstartsWith\e[0m in \e\
    [33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String): Boolean\n\
    \e[31m   |\e[0m (x$0: String, x$1: Int): Boolean\n\e[31m   |\e[0mmatch expected\
    \ type ?{ unary_! : ? }\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprnp1qtvl.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795532
