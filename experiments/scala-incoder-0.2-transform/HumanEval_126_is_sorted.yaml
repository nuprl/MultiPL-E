name: HumanEval_126_is_sorted
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return whether or not they are sorted\n    // in\
  \ ascending order. If list has more than 1 duplicate of the same\n    // number,\
  \ return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    //\
  \ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n\
  \    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong,\
  \ 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
  \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until\
    \ lst.size) {\n            if(set.contains(lst(i))) {\n                return\
    \ false\n            }\n            set.add(lst(i))\n        }\n        return\
    \ true", "        val seen = mutable.HashSet[Long]()\n        val seen2 = mutable.HashSet[Long]()\n\
    \        val seen3 = mutable.HashSet[Long]()\n        val seen4 = mutable.HashSet[Long]()\n\
    \        val seen5 = mutable.HashSet[Long]()\n        val seen6 = mutable.HashSet[Long]()\n\
    \        val seen7 = mutable.HashSet[Long]()\n        val seen8 = mutable.HashSet[Long]()\n\
    \        val seen9 = mutable.HashSet[Long]()\n        val seen10 = mutable.HashSet[Long]()\n\
    \        val seen11 = mutable.HashSet[Long]()\n        val seen12 = mutable.HashSet[Long]()\n\
    \        val seen13 = mutable.HashSet[Long]()\n        val seen14 = mutable.HashSet[Long]()\n\
    \        val seen15 = mutable.HashSet[Long]()\n        val seen16 = mutable.HashSet[Long]()\n\
    \        val seen17 = mutable.HashSet[Long]()\n        val seen18 = mutable.HashSet[Long]()\n\
    \        val seen19 = mutable.HashSet[Long]()\n        val seen20 = mutable.HashSet[Long]()\n\
    \        val seen21 = mutable.HashSet[Long]()\n        val seen22 = mutable.HashSet[Long]()\n\
    \        val seen23 = mutable.HashSet[Long]()\n        val seen24 = mutable.HashSet[Long]()\n\
    \        val seen25 = mutable.HashSet[Long]()\n        val seen26 = mutable.HashSet[Long]()\n\
    \        val seen27 = mutable.HashSet[Long]()\n        val seen28 = mutable.HashSet[Long]()\n\
    \        val seen29 = mutable.HashSet[Long]()\n        val seen30 = mutable.HashSet[Long]()\n\
    \        val seen31 = mutable.HashSet[Long]()\n        val seen32 = mutable.HashSet[Long]()\n\
    \        val seen33 = mutable.HashSet[Long]()\n        val seen34 = mutable.HashSet[Long]()\n\
    \        val seen35 = mutable.HashSet[Long]()\n        val seen36 = mutable.HashSet[Long]()\n\
    \        val seen37 = mutable.HashSet[Long]()\n        val seen38 = mut", "  \
    \      val seen = mutable.HashSet[Long]()\n        val seen2 = mutable.HashSet[Long]()\n\
    \        val seen3 = mutable.HashSet[Long]()\n        val seen4 = mutable.HashSet[Long]()\n\
    \        val seen5 = mutable.HashSet[Long]()\n        val seen6 = mutable.HashSet[Long]()\n\
    \        val seen7 = mutable.HashSet[Long]()\n        val seen8 = mutable.HashSet[Long]()\n\
    \        val seen9 = mutable.HashSet[Long]()\n        val seen10 = mutable.HashSet[Long]()\n\
    \        val seen11 = mutable.HashSet[Long]()\n        val seen12 = mutable.HashSet[Long]()\n\
    \        val seen13 = mutable.HashSet[Long]()\n        val seen14 = mutable.HashSet[Long]()\n\
    \        val seen15 = mutable.HashSet[Long]()\n        val seen16 = mutable.HashSet[Long]()\n\
    \        val seen17 = mutable.HashSet[Long]()\n        val seen18 = mutable.HashSet[Long]()\n\
    \        val seen19 = mutable.HashSet[Long]()\n        val seen20 = mutable.HashSet[Long]()\n\
    \        val seen21 = mutable.HashSet[Long]()\n        val seen22 = mutable.HashSet[Long]()\n\
    \        val seen23 = mutable.HashSet[Long]()\n        val seen24 = mutable.HashSet[Long]()\n\
    \        val seen25 = mutable.HashSet[Long]()\n        val seen26 = mutable.HashSet[Long]()\n\
    \        val seen27 = mutable.HashSet[Long]()\n        val seen28 = mutable.HashSet[Long]()\n\
    \        val seen29 = mutable.HashSet[Long]()\n        val seen30 = mutable.HashSet[Long]()\n\
    \        val seen31 = mutable.HashSet[Long]()\n        val seen32 = mutable.HashSet[Long]()\n\
    \        val seen33 = mutable.HashSet[Long]()\n        val seen34 = mutable.HashSet[Long]()\n\
    \        val seen35 = mutable.HashSet[Long]()\n        val seen36 = mutable.HashSet[Long]()\n\
    \        val seen37 = mutable.HashSet[Long]()\n        val seen38 = mut", "  \
    \      val set = new mutable.HashSet[Long]()\n        val list = new mutable.ArrayList[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set += lst(i)\n    \
    \        list += lst(i)\n        }\n        return true", "        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i)))\
    \ {\n                return false\n            }\n            set.add(lst(i))\n\
    \        }\n        return true", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- 0 until lst.size) {\n            if(set.contains(lst(i))) {\n\
    \                return false\n            }\n            set.add(lst(i))\n  \
    \      }\n        return true", "        val seen = mutable.HashSet[Long]()\n\
    \        val seen2 = mutable.HashSet[Long]()\n        val seen3 = mutable.HashSet[Long]()\n\
    \        val seen4 = mutable.HashSet[Long]()\n        val seen5 = mutable.HashSet[Long]()\n\
    \        val seen6 = mutable.HashSet[Long]()\n        val seen7 = mutable.HashSet[Long]()\n\
    \        val seen8 = mutable.HashSet[Long]()\n        val seen9 = mutable.HashSet[Long]()\n\
    \        val seen10 = mutable.HashSet[Long]()\n        val seen11 = mutable.HashSet[Long]()\n\
    \        val seen12 = mutable.HashSet[Long]()\n        val seen13 = mutable.HashSet[Long]()\n\
    \        val seen14 = mutable.HashSet[Long]()\n        val seen15 = mutable.HashSet[Long]()\n\
    \        val seen16 = mutable.HashSet[Long]()\n        val seen17 = mutable.HashSet[Long]()\n\
    \        val seen18 = mutable.HashSet[Long]()\n        val seen19 = mutable.HashSet[Long]()\n\
    \        val seen20 = mutable.HashSet[Long]()\n        val seen21 = mutable.HashSet[Long]()\n\
    \        val seen22 = mutable.HashSet[Long]()\n        val seen23 = mutable.HashSet[Long]()\n\
    \        val seen24 = mutable.HashSet[Long]()\n        val seen25 = mutable.HashSet[Long]()\n\
    \        val seen26 = mutable.HashSet[Long]()\n        val seen27 = mutable.HashSet[Long]()\n\
    \        val seen28 = mutable.HashSet[Long]()\n        val seen29 = mutable.HashSet[Long]()\n\
    \        val seen30 = mutable.HashSet[Long]()\n        val seen31 = mutable.HashSet[Long]()\n\
    \        val seen32 = mutable.HashSet[Long]()\n        val seen33 = mutable.HashSet[Long]()\n\
    \        val seen34 = mutable.HashSet[Long]()\n        val seen35 = mutable.HashSet[Long]()\n\
    \        val seen36 = mutable.HashSet[Long]()\n        val seen37 = mutable.HashSet[Long]()\n\
    \        val seen38 = mut", "        val set = new mutable.HashSet[Long]()\n \
    \       val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n\
    \            if(set.contains(lst(i))) {\n                return false\n      \
    \      }\n            set += lst(i)\n        }\n        return true", "      \
    \  val set = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n\
    \            if(set.contains(lst(i))) {\n                return false\n      \
    \      }\n            set.add(lst(i))\n        }\n        return true", "    \
    \    val set = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(!set.contains(lst(i))) {\n                set.add(lst(i))\n\
    \                return true\n            }\n        }\n        return false",
  "        val set = new mutable.HashSet[Long]()\n        for(i <- 0 until lst.size)\
    \ {\n            if(set.contains(lst(i))) {\n                return false\n  \
    \          }\n            set.add(lst(i))\n        }\n        return true", " \
    \       val seen = new mutable.HashSet[Long]()\n        val sorted = new mutable.ListBuffer[Long]()\n\
    \        val unsorted = new mutable.ListBuffer[Long]()\n        val duplicates\
    \ = new mutable.ListBuffer[Long]()\n        val duplicatesCount = 0\n        val\
    \ unsortedCount = 0\n        val sortedCount = 0\n        val unsortedDuplicatesCount\
    \ = 0\n        val sortedDuplicatesCount = 0\n        val duplicatesCount2 = 0\n\
    \        val unsortedDuplicatesCount2 = 0\n        val sortedDuplicatesCount2\
    \ = 0\n        val duplicatesCount3 = 0\n        val unsortedDuplicatesCount3\
    \ = 0\n        val sortedDuplicatesCount3 = 0\n        val duplicatesCount4 =\
    \ 0\n        val unsortedDuplicatesCount4 = 0\n        val sortedDuplicatesCount4\
    \ = 0\n        val duplicatesCount5 = 0\n        val unsortedDuplicatesCount5\
    \ = 0\n        val sortedDuplicatesCount5 = 0\n        val duplicatesCount6 =\
    \ 0\n        val unsortedDuplicatesCount6 = 0\n        val sortedDuplicatesCount6\
    \ = 0\n        val duplicatesCount7 = 0\n        val unsortedDuplicatesCount7\
    \ = 0\n        val sortedDuplicatesCount7 = 0\n        val duplicatesCount8 =\
    \ 0\n        val unsortedDuplicatesCount8 = 0\n        val sortedDuplicatesCount8\
    \ = 0\n        val duplicatesCount9 = 0\n        val unsortedDuplicatesCount9\
    \ = 0\n        val sortedDuplicatesCount9 = 0\n        val duplicatesCount10 =\
    \ 0\n        val unsortedDuplicatesCount10 = 0\n        val sortedDuplicatesCount10\
    \ = 0\n        val duplicatesCount11 = 0\n        val unsortedDuplicatesCount11\
    \ = 0\n        val sortedDuplicatesCount11 = 0\n        val duplicatesCount12\
    \ = 0\n        val unsortedDuplicatesCount12 = 0\n        val sortedDuplicatesCount12\
    \ = 0\n        val duplicatesCount13 = 0\n        val unsortedDuplicatesCount13\
    \ = 0\n        val sortedDuplicatesCount13 = 0\n        val duplicatesCount14\
    \ = 0\n        val unsortedDuplicatesCount14 = 0\n        val sortedDuplicatesCount14\
    \ = 0\n        val duplicatesCount15 = 0\n        val unsortedDuplicatesCount15\
    \ = 0\n        val sortedDuplicatesCount15 = 0\n        val duplicatesCount16\
    \ = 0\n        val unsortedDuplicatesCount16 = 0\n        val sortedDuplicatesCount16\
    \ = 0\n        val duplicatesCount17 = 0\n        val unsortedDuplicatesCount",
  "        val set = mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n\
    \            if(set.contains(lst(i))) {\n                return false\n      \
    \      }\n            set += lst(i)\n        }\n        return true", "      \
    \  val set = mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n \
    \           if(set.contains(lst(i))) {\n                return false\n       \
    \     }\n            set += lst(i)\n        }\n        return true", "       \
    \ val seen = mutable.HashSet[Long]()\n        val seenCount = mutable.HashMap[Long,\
    \ Int]()\n        val sorted = lst.sortWith(_ < _)\n        val len = lst.size\n\
    \        for(i <- 0 until len) {\n            val current = lst(i)\n         \
    \   val count = seenCount(current)\n            if(count == 0) {\n           \
    \     seen += current\n                seenCount(current) = seenCount(current)\
    \ + 1\n            } else if(count == 1) {\n                val seenCount = seenCount(current)\n\
    \                if(seenCount > 1) {\n                    return false\n     \
    \           }\n            } else {\n                return false\n          \
    \  }\n        }\n        true", "        val seen = mutable.HashSet[Long]()\n\
    \        val seenCount = mutable.HashMap[Long, Int]()\n        val sorted = lst.sortWith(_\
    \ < _)\n        val len = lst.size\n        for(i <- 0 until len) {\n        \
    \    val cur = lst(i)\n            if(!seen(cur)) {\n                seen(cur)\
    \ = true\n                seenCount(cur) = seenCount(cur) + 1\n              \
    \  if(seenCount(cur) == 1) {\n                    return true\n              \
    \  }\n            }\n        }\n        return false", "        val set = new\
    \ mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n            if(!set.contains(lst(i)))\
    \ {\n                set.add(lst(i))\n                return true\n          \
    \  }\n        }\n        return false", "        val seen = mutable.HashSet[Long]()\n\
    \        val sorted = lst.sortWith((x, y) => x < y)\n        val duplicates =\
    \ lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n        if (duplicates.nonEmpty)\
    \ false\n        else {\n            val seen = mutable.HashSet[Long]()\n    \
    \        val sorted = lst.sortWith((x, y) => x < y)\n            val duplicates\
    \ = lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n            val duplicatesCount\
    \ = duplicates.map(x => x.size).sum\n            if (duplicatesCount > 1) false\n\
    \            else {\n                val seen = mutable.HashSet[Long]()\n    \
    \            val sorted = lst.sortWith((x, y) => x < y)\n                val duplicates\
    \ = lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n                val duplicatesCount\
    \ = duplicates.map(x => x.size).sum\n                if (duplicatesCount == 1)\
    \ true\n                else {\n                    val seen = mutable.HashSet[Long]()\n\
    \                    val sorted = lst.sortWith((x, y) => x < y)\n            \
    \        val duplicates = lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n\
    \                    val duplicatesCount = duplicates.map(x => x.size).sum\n \
    \                   if (duplicatesCount == 2) true\n                    else {\n\
    \                        val seen = mutable.HashSet[Long]()\n                \
    \        val sorted = lst.sortWith((x, y) => x < y)\n                        val\
    \ duplicates = lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n         \
    \               val duplicatesCount = duplicates.map(x => x.size).sum\n      \
    \                  if (duplicatesCount == 3) true\n                        else\
    \ {\n                            val seen = mutable.HashSet[Long]()\n        \
    \                    val sorted = lst.sortWith((x, y) => x < y)\n            \
    \                val duplicates = lst.groupBy(x => x).filter(_._2.size > 1).map(_._2)\n\
    \                            val duplicatesCount = duplicates.map(x => x.size).sum\n\
    \                            if (duplicatesCount == 4) true\n                \
    \            else {\n                                val seen = mutable.HashSet[Long]()\n\
    \                                val sorted = lst.sortWith((x, y) => x < y)\n\
    \                                val duplicates = lst.groupBy(x => x).filter(_._2.size\
    \ > 1).map(_._2)\n                                val duplicatesCount = duplicates.map(x\
    \ => x.size).sum\n                                if (duplicatesCount == 5) true\n\
    \                                else {\n                                    val ",
  "        val set = mutable.HashSet[Long]()\n        for(i <- 0 until lst.size) {\n\
    \            if(set.contains(lst(i))) {\n                return false\n      \
    \      }\n            set += lst(i)\n        }\n        return true"]
stop_tokens:
- "\n    }\n"
