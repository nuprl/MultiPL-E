name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n\
  \    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        val maxIndex = lst.map(_.toLong).max\n        val minIndex\
    \ = lst.map(_.toLong).min\n        val maxValue = lst.map(_.toLong).max\n    \
    \    val minValue = lst.map(_.toLong).min\n        val maxIndex2 = lst.map(_.toLong).max\n\
    \        val minIndex2 = lst.map(_.toLong).min\n        val maxValue2 = lst.map(_.toLong).max\n\
    \        val minValue2 = lst.map(_.toLong).min\n        val maxIndex3 = lst.map(_.toLong).max\n\
    \        val minIndex3 = lst.map(_.toLong).min\n        val maxValue3 = lst.map(_.toLong).max\n\
    \        val minValue3 = lst.map(_.toLong).min\n        val maxIndex4 = lst.map(_.toLong).max\n\
    \        val minIndex4 = lst.map(_.toLong).min\n        val maxValue4 = lst.map(_.toLong).max\n\
    \        val minValue4 = lst.map(_.toLong).min\n        val maxIndex5 = lst.map(_.toLong).max\n\
    \        val minIndex5 = lst.map(_.toLong).min\n        val maxValue5 = lst.map(_.toLong).max\n\
    \        val minValue5 = lst.map(_.toLong).min\n        val maxIndex6 = lst.map(_.toLong).max\n\
    \        val minIndex6 = lst.map(_.toLong).min\n        val maxValue6 = lst.map(_.toLong).max\n\
    \        val minValue6 = lst.map(_.toLong).min\n        val maxIndex7 = lst.map(_.toLong).max\n\
    \        val minIndex7 = lst.map(_.toLong).min\n        val maxValue7 = lst.map(_.toLong).max\n\
    \        val minValue7 = lst.map(_.toLong).min\n        val maxIndex8 = lst.map(_.toLong).max\n\
    \        val minIndex8 = lst.map(_.toLong).min\n        val maxValue8 = lst.map(_.toLong).max\n\
    \        val minValue8 = lst.map(_.toLong).min\n        val maxIndex9 = lst.map(_.toLong).max\n\
    \        val minIndex9 = lst.map(_.toLong).min\n        val maxValue9 = lst.map(_.toLong).max\n\
    \        val minValue9 = lst.map(_.toLong).min\n        val maxIndex10 = lst.map(_.toLong).",
  "        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val minIndex2 = lst.indexOf(minValue, minIndex + 1)\n        val maxIndex2\
    \ = lst.indexOf(maxValue, maxIndex + 1)\n        val minIndex3 = lst.indexOf(minValue,\
    \ minIndex + 2)\n        val maxIndex3 = lst.indexOf(maxValue, maxIndex + 2)\n\
    \        val minIndex4 = lst.indexOf(minValue, minIndex + 3)\n        val maxIndex4\
    \ = lst.indexOf(maxValue, maxIndex + 3)\n        val minIndex5 = lst.indexOf(minValue,\
    \ minIndex + 4)\n        val maxIndex5 = lst.indexOf(maxValue, maxIndex + 4)\n\
    \        val minIndex6 = lst.indexOf(minValue, minIndex + 5)\n        val maxIndex6\
    \ = lst.indexOf(maxValue, maxIndex + 5)\n        val minIndex7 = lst.indexOf(minValue,\
    \ minIndex + 6)\n        val maxIndex7 = lst.indexOf(maxValue, maxIndex + 6)\n\
    \        val minIndex8 = lst.indexOf(minValue, minIndex + 7)\n        val maxIndex8\
    \ = lst.indexOf(maxValue, maxIndex + 7)\n        val minIndex9 = lst.indexOf(minValue,\
    \ minIndex + 8)\n        val maxIndex9 = lst.indexOf(maxValue, maxIndex + 8)\n\
    \        val minIndex10 = lst.indexOf(minValue, minIndex + 9)\n        val maxIndex10\
    \ = lst.indexOf(maxValue, maxIndex + 9)\n        val minIndex11 = lst.indexOf(minValue,\
    \ minIndex + 10)\n        val maxIndex11 = lst.indexOf(maxValue, maxIndex + 10)\n\
    \        val minIndex12 = lst.indexOf(minValue, minIndex + 11)\n        val maxIndex12\
    \ = lst.indexOf(maxValue, maxIndex + 11)\n        val minIndex13 = lst.indexOf(minValue,\
    \ minIndex + 12)\n        val maxIndex13 = lst.indexOf(maxValue, maxIndex + 12)\n\
    \        val minIndex14 = lst.indexOf(minValue, minIndex + 13)\n        val maxIndex14\
    \ = lst.indexOf(maxValue, maxIndex + 13)\n        val minIndex15 = lst.indexOf(minValue,\
    \ minIndex + 14)\n        val maxIndex15 = lst.indexOf(maxValue, maxIndex + 14)\n\
    \        val minIndex16 = lst.indexOf(minValue, minIndex + 15)\n        val maxIndex16\
    \ = lst.indexOf(maxValue, maxIndex + 15)\n        val minIndex17 = lst.indexOf(minValue,\
    \ minIndex + 16)\n        val maxIndex", "        val minValue = lst.min\n   \
    \     val maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x ==\
    \ minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n     \
    \   val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex)\n\
    \        val minListWithMax = minList ++ maxList\n        val maxListWithMin =\
    \ maxList ++ minList\n        val minListWithMaxAndMin = minListWithMax ++ minListWithMin\n\
    \        val maxListWithMinAndMax = maxListWithMin ++ maxListWithMax\n       \
    \ val minListWithMaxAndMinAndMax = minListWithMaxAndMin ++ maxListWithMinAndMax\n\
    \        minListWithMaxAndMinAndMax", "        val minValue = lst.min\n      \
    \  val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n    \
    \    val maxIndex = lst.indexOf(maxValue)\n        val middleIndex = math.max(minIndex,maxIndex)\
    \ / 2\n        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middleIndex)\n        val middleIndex = lst.indexOf(middleValue)\n\
    \        val middleValue = lst(middle", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val currentIndex = minIndex\n        while(currentIndex < maxIndex){\n  \
    \          result.add(lst(currentIndex))\n            currentIndex += 1\n    \
    \    }\n        result.toList", "        val sorted = lst.sortWith((a, b) => a\
    \ < b)\n        val result: List[Long] = lst.filterNot(sorted.contains)\n    \
    \    result", "        val minValue = lst.min\n        val maxValue = lst.max\n\
    \        val minIndex = 0\n        val maxIndex = lst.size - 1\n        val tempList\
    \ = lst.sortWith(_ < _)\n        val newList = tempList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse\n\
    \        newList", "        val minValue = lst.min\n        val maxValue = lst.max\n\
    \        val minIndex = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val maxValueIndex\
    \ = lst.indexOf(maxValue)\n        val minValueIndex = lst.indexOf(minValue)\n\
    \        val maxValueIndex = lst.indexOf(maxValue)\n        val minValueIndex\
    \ = lst.indexOf(minValue)\n        val maxValueIndex = lst.indexOf(maxValue)\n\
    \        val minValueIndex = lst.indexOf(minValue)\n        val max", "      \
    \  val minVal = lst.min\n        val maxVal = lst.max\n        val minIndex =\
    \ lst.indexWhere(x => x == minVal)\n        val maxIndex = lst.indexWhere(x =>\
    \ x == maxVal)\n        val minValIndex = lst.indexWhere(x => x == minVal)\n \
    \       val maxValIndex = lst.indexWhere(x => x == maxVal)\n        val minValIndex2\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex2 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex3 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex3 = lst.indexWhere(x => x == maxVal)\n        val minValIndex4\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex4 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex5 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex5 = lst.indexWhere(x => x == maxVal)\n        val minValIndex6\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex6 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex7 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex7 = lst.indexWhere(x => x == maxVal)\n        val minValIndex8\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex8 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex9 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex9 = lst.indexWhere(x => x == maxVal)\n        val minValIndex10\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex10 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex11 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex11 = lst.indexWhere(x => x == maxVal)\n        val minValIndex12\
    \ = lst.indexWhere(x => x == minVal)\n        val maxValIndex12 = lst.indexWhere(x\
    \ => x == maxVal)\n        val minValIndex13 = lst.indexWhere(x => x == minVal)\n\
    \        val maxValIndex13 = lst.indexWhere(x ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex2 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex2 = lst.indexWhere(x => x == maxValue)\n        val minIndex3\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex3 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex4 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex4 = lst.indexWhere(x => x == maxValue)\n        val minIndex5\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex5 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex6 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex6 = lst.indexWhere(x => x == maxValue)\n        val minIndex7\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex7 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex8 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex8 = lst.indexWhere(x => x == maxValue)\n        val minIndex9\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex9 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex10 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex10 = lst.indexWhere(x => x == maxValue)\n        val minIndex11\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex11 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex12 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex12 = lst.indexWhere(x => x == maxValue)\n        val minIndex13\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex13 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex14 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex14 = lst.indexWhere(x => x == maxValue)\n        val minIndex15\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex15 = lst.indexWhere(x\
    \ => x == maxValue)", "        val minValue = lst.min\n        val maxValue =\
    \ lst.max\n        val minIndex = lst.indexOf(minValue)\n        val maxIndex\
    \ = lst.indexOf(maxValue)\n        val listToSort = lst.filter(_ != minValue &&\
    \ _ != maxValue)\n        val listToSort2 = listToSort.sortWith((x, y) => x -\
    \ y)\n        val listToSort3 = listToSort2.filter(_ != minValue)\n        val\
    \ listToSort4 = listToSort3.filter(_ != maxValue)\n        listToSort4.take(minIndex).reverse.take(maxIndex).reverse.sortWith((x,\
    \ y) => x - y)", "        val newList = mutable.ListBuffer.empty[Long]\n     \
    \   val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    val midIndex = minIndex + maxIndex / 2\n        val midValue = lst(midIndex)\n\
    \        newList += minValue\n        newList += midValue\n        newList +=\
    \ maxValue\n        newList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex2 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex2 = lst.indexWhere(x => x == maxValue)\n        val minIndex3\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex3 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex4 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex4 = lst.indexWhere(x => x == maxValue)\n        val minIndex5\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex5 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex6 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex6 = lst.indexWhere(x => x == maxValue)\n        val minIndex7\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex7 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex8 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex8 = lst.indexWhere(x => x == maxValue)\n        val minIndex9\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex9 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex10 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex10 = lst.indexWhere(x => x == maxValue)\n        val minIndex11\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex11 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex12 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex12 = lst.indexWhere(x => x == maxValue)\n        val minIndex13\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex13 = lst.indexWhere(x\
    \ => x == maxValue)\n        val minIndex14 = lst.indexWhere(x => x == minValue)\n\
    \        val maxIndex14 = lst.indexWhere(x => x == maxValue)\n        val minIndex15\
    \ = lst.indexWhere(x => x == minValue)\n        val maxIndex15 = lst.indexWhere(x\
    \ => x == maxValue)", "        val list = new mutable.ListBuffer[Long]()\n   \
    \     val minValue = lst.min\n        val maxValue = lst.max\n        val minIndex\
    \ = lst.indexOf(minValue)\n        val maxIndex = lst.indexOf(maxValue)\n    \
    \    for(i <- minIndex to maxIndex){\n            list += lst(i)\n        }\n\
    \        list.toList", "        val minValue = lst.min\n        val maxValue =\
    \ lst.max\n        val minIndex = lst.indexWhere(x => x == minValue)\n       \
    \ val maxIndex = lst.indexWhere(x => x == maxValue)\n        val minList = lst.take(minIndex)\n\
    \        val maxList = lst.drop(maxIndex)\n        val minListWithMax = minList\
    \ ++ maxList\n        val maxListWithMin = maxList ++ minList\n        val minListWithMaxAndMin\
    \ = minListWithMax ++ minListWithMin\n        val maxListWithMinAndMax = maxListWithMin\
    \ ++ maxListWithMax\n        val minListWithMaxAndMinAndMax = minListWithMaxAndMin\
    \ ++ maxListWithMinAndMax\n        minListWithMaxAndMinAndMax", "        val minValue\
    \ = lst.min\n        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => \n            if (x == minValue) y else x\n        )\n        if (newList.size\
    \ < 2) newList\n        else strangeSortList(newList.take(minIndex) + newList.drop(maxIndex))",
  "        val minVal = lst.min\n        val maxVal = lst.max\n        val minIndex\
    \ = lst.indexWhere(x => x == minVal)\n        val maxIndex = lst.indexWhere(x\
    \ => x == maxVal)\n        val minVal2 = lst.take(minIndex).min\n        val maxVal2\
    \ = lst.take(maxIndex).max\n        val minIndex2 = lst.indexWhere(x => x == minVal2)\n\
    \        val maxIndex2 = lst.indexWhere(x => x == maxVal2)\n        val minVal3\
    \ = lst.take(minIndex2).min\n        val maxVal3 = lst.take(maxIndex2).max\n \
    \       val minIndex3 = lst.indexWhere(x => x == minVal3)\n        val maxIndex3\
    \ = lst.indexWhere(x => x == maxVal3)\n        lst.sortWith((x, y) => if (x ==\
    \ minVal) y else x)", "        val list = lst.sortWith((a, b) => a < b)\n    \
    \    val list2 = list.sortWith((a, b) => a < b)\n        val list3 = list.sortWith((a,\
    \ b) => a > b)\n        val list4 = list.sortWith((a, b) => a > b)\n        val\
    \ list5 = list.sortWith((a, b) => a < b)\n        val list6 = list.sortWith((a,\
    \ b) => a > b)\n        val list7 = list.sortWith((a, b) => a < b)\n        val\
    \ list8 = list.sortWith((a, b) => a > b)\n        val list9 = list.sortWith((a,\
    \ b) => a < b)\n        val list10 = list.sortWith((a, b) => a > b)\n        val\
    \ list11 = list.sortWith((a, b) => a < b)\n        val list12 = list.sortWith((a,\
    \ b) => a > b)\n        val list13 = list.sortWith((a, b) => a < b)\n        val\
    \ list14 = list.sortWith((a, b) => a > b)\n        val list15 = list.sortWith((a,\
    \ b) => a < b)\n        val list16 = list.sortWith((a, b) => a > b)\n        val\
    \ list17 = list.sortWith((a, b) => a < b)\n        val list18 = list.sortWith((a,\
    \ b) => a > b)\n        val list19 = list.sortWith((a, b) => a < b)\n        val\
    \ list20 = list.sortWith((a, b) => a > b)\n        val list21 = list.sortWith((a,\
    \ b) => a < b)\n        val list22 = list.sortWith((a, b) => a > b)\n        val\
    \ list23 = list.sortWith((a, b) => a < b)\n        val list24 = list.sortWith((a,\
    \ b) => a > b)\n        val list25 = list.sortWith((a, b) => a < b)\n        val\
    \ list26 = list.sortWith((a, b) => a > b)\n        val list27 = list.sortWith((a,\
    \ b) => a < b)\n        val list28 = list.sortWith((a, b) => a > b)\n        val\
    \ list29 = list.sortWith((a, b) => a < b)\n        val list30 = list.sortWith((a,\
    \ b) => a > b)\n        val list31 = list.sortWith((a, b) => a < b)\n        val\
    \ list32 = list.sortWith((a, b) => a > b)\n        val list33 = list.sortWith((a,\
    \ b) => a < b)\n        val list34 = list.sortWith((a, b) => a > b)\n        val\
    \ list35 = list.sortWith((a, b) => a < b)", "        val minValue = lst.min\n\
    \        val maxValue = lst.max\n        val minIndex = lst.indexWhere(x => x\
    \ == minValue)\n        val maxIndex = lst.indexWhere(x => x == maxValue)\n  \
    \      val minList = lst.take(minIndex)\n        val maxList = lst.drop(maxIndex\
    \ + 1)\n        val minList2 = minList.map(_ + minValue)\n        val maxList2\
    \ = maxList.map(_ - maxValue)\n        val minList3 = minList2.zip(maxList2).map{case\
    \ (x, y) => x + y}\n        val maxList3 = minList2.zip(maxList2).map{case (x,\
    \ y) => x - y}\n        val minList4 = minList3.zip(maxList3).map{case (x, y)\
    \ => x + y}\n        val maxList4 = minList3.zip(maxList3).map{case (x, y) =>\
    \ x - y}\n        val minList5 = minList4.zip(maxList4).map{case (x, y) => x +\
    \ y}\n        val maxList5 = minList4.zip(maxList4).map{case (x, y) => x - y}\n\
    \        val minList6 = minList5.zip(maxList5).map{case (x, y) => x + y}\n   \
    \     val maxList6 = minList5.zip(maxList5).map{case (x, y) => x - y}\n      \
    \  val minList7 = minList6.zip(maxList6).map{case (x, y) => x + y}\n        val\
    \ maxList7 = minList6.zip(maxList6).map{case (x, y) => x - y}\n        val minList8\
    \ = minList7.zip(maxList7).map{case (x, y) => x + y}\n        val maxList8 = minList7.zip(maxList7).map{case\
    \ (x, y) => x - y}\n        val minList9 = minList8.zip(maxList8).map{case (x,\
    \ y) => x + y}\n        val maxList9 = minList8.zip(maxList8).map{case (x, y)\
    \ => x - y}\n        val minList10 = minList9.zip(maxList9).map{case (x, y) =>\
    \ x + y}\n        val maxList10 = minList9.zip(maxList9).map{case (x, y) => x\
    \ - y}\n        val minList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ + y}\n        val maxList11 = minList10.zip(maxList10).map{case (x, y) => x\
    \ - y}\n        val minList12 = minList11.", "        val minValue = lst.min\n\
    \        val maxValue = lst.max\n        val minIndex = lst.indexOf(minValue)\n\
    \        val maxIndex = lst.indexOf(maxValue)\n        val newList = lst.sortWith((x,\
    \ y) => x < y)\n        newList.take(minIndex).reverse.take(maxIndex).reverse.take(minIndex).reverse.take(maxIndex).reverse"]
stop_tokens:
- "\n    }\n"
