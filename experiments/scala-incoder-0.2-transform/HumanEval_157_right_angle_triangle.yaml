name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n      \
    \  val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n\
    \        val c2 = c1 + a2\n        val a3 = a2 + b2\n        val b3 = b2 + c3\n\
    \        val c3 = c3 + a3\n        (a1 == a2 && b1 == b2 && c1 == c2) || (a1 ==\
    \ a3 && b1 == b3 && c1 == c3)", "        val ab = math.abs(b - a)\n        val\
    \ ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab\
    \ + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd", "        val\
    \ a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a1\n\
    \        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2 && b2 == c2 && c2 ==\
    \ a2)", "        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val\
    \ c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n     \
    \   val c2 = c1 + a1\n        (a1 + b1 + c1 == a2 && b1 + c1 + a1 == b2 && c1\
    \ + a1 + b1 == c2) || (a2 + b2 + c2 == a1 && b2 + c2 + a1 == b1 && c2 + a2 + b1\
    \ == c1)", "        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n     \
    \   val c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n\
    \        val c2 = c1 + a2\n        (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 &&\
    \ c1 + a2 + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2\
    \ + b2 == c2) || (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 ==\
    \ c2)", "        val a1 = math.abs(a)\n        val b1 = math.abs(b)\n        val\
    \ c1 = math.abs(c)\n        val a2 = a1 + b1\n        val b2 = b1 + c1\n     \
    \   val c2 = c1 + a2\n        (a1 == b1 && b1 == c1 && c1 == a2) || (a2 == b2\
    \ && b2 == c2 && c2 == a2)", "        // Write your code here\n        val a1\
    \ = math.abs(a)\n        val b1 = math.abs(b)\n        val c1 = math.abs(c)\n\
    \        val a2 = a1 + b1\n        val b2 = b1 + c1\n        val c2 = c1 + a2\n\
    \        (a1 + b1 + c1 == a2 && b1 + c1 + a2 == b2 && c1 + a2 + b2 == c2)", " \
    \       val ab = math.abs(b - a)\n        val bc = math.abs(c - b)\n        val\
    \ ac = math.abs(c - a)\n        val abc = math.abs(ab - bc)\n        val acb =\
    \ math.abs(ac - ab)\n        abc < acb", "        val ab = math.abs(a-b)\n   \
    \     val ac = math.abs(a-c)\n        val bc = math.abs(b-c)\n        ab >= ac\
    \ && ab >= bc", "        val ab = math.abs(a - b)\n        val ac = math.abs(a\
    \ - c)\n        val bc = math.abs(b - c)\n        ab > ac && ab > bc", "     \
    \   val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val bc\
    \ = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        abc > ab", " \
    \       val ab = math.abs(a-b)\n        val ac = math.abs(a-c)\n        val bc\
    \ = math.abs(b-c)\n        ab > ac && ab > bc", "        val ab = math.pow(a,\
    \ 2)\n        val bc = math.pow(b, 2)\n        val cd = math.pow(c, 2)\n     \
    \   val abc = math.pow(ab + bc, 2)\n        val bcd = math.pow(b + cd, 2)\n  \
    \      val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n\
    \        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd + ab,\
    \ 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.pow(b +\
    \ cd, 2)\n        val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab\
    \ + bc, 2)\n        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd\
    \ + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.pow(b\
    \ + cd, 2)\n        val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab\
    \ + bc, 2)\n        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd\
    \ + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.pow(b\
    \ + cd, 2)\n        val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab\
    \ + bc, 2)\n        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd\
    \ + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.pow(b\
    \ + cd, 2)\n        val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab\
    \ + bc, 2)\n        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd\
    \ + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.pow(b\
    \ + cd, 2)\n        val cdab = math.pow(cd + ab, 2)\n        val abbc = math.pow(ab\
    \ + bc, 2)\n        val bcbd = math.pow(b + cd, 2)\n        val cdab = math.pow(cd\
    \ + ab, 2)\n        val abbc = math.pow(ab + bc, 2)\n        val bcbd = math.",
  "        val ab = math.abs(b - a)\n        val ac = math.abs(c - a)\n        val\
    \ bc = math.abs(b - c)\n        val abc = math.abs(ab + ac)\n        val bcd =\
    \ math.abs(bc + ab)\n        abc < bcd", "        val ab = math.abs(a-b)\n   \
    \     val bc = math.abs(b-c)\n        val ac = math.abs(a-c)\n        ab > bc\
    \ && ab > ac", "        val ab = math.abs(a - b)\n        val bc = math.abs(b\
    \ - c)\n        val ac = math.abs(a - c)\n        ab > bc && ab > ac", "     \
    \   val ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc\
    \ = math.abs(b - c)\n        ab == ac && ab == bc", "        val ab = math.abs(a\
    \ - b)\n        val bc = math.abs(b - c)\n        val ac = math.abs(a - c)\n \
    \       ab == bc && ab == ac", "        val ab = math.abs(b - a)\n        val\
    \ ac = math.abs(c - a)\n        val bc = math.abs(b - c)\n        val abc = math.abs(ab\
    \ + ac)\n        val bcd = math.abs(bc + ab)\n        abc < bcd", "        val\
    \ ab = math.abs(a - b)\n        val ac = math.abs(a - c)\n        val bc = math.abs(b\
    \ - c)\n        ab == ac && ab == bc"]
stop_tokens:
- "\n    }\n"
