name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty array of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
  \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
  \    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1\
  \ <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        val arr = arr.toList\n        val len = arr.length\n      \
    \  val maxDigit = arr.take(k).map(_.toString.length).max\n        val result =\
    \ arr.take(k).foldLeft(0l) { (sum, element) => sum + element }\n        val maxDigitSum\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum2 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum3 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum4 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum5\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum6 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum7 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum8 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum9\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum10 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum11 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum12 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum13\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum14 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum15 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum16 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum17\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum18 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum19 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum20 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum21\
    \ = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum22 = arr.take(k).map(_.toString.length).sum\n\
    \        val maxDigitSum23 = arr.take(k).map(_.toString.length).sum\n        val\
    \ maxDigitSum24 = arr.take(k).map(_.toString.length).sum\n        val maxDigitSum25\
    \ = arr.take(k).map(_.toString.", "        val arr = arr.toList\n        val len\
    \ = arr.size\n        val sum = 0\n        val maxSum = arr.take(k).foldLeft(0L){\
    \ (sum, el) => sum + el.toString.toLong }\n        val maxSumStr = maxSum.toString\n\
    \        val maxSumLen = maxSumStr.length\n        val maxSumDigits = maxSumStr.dropRight(maxSumLen)\n\
    \        val maxSumDigit = maxSumDigits.toLong\n        val maxSumDigitStr = maxSumDigits.toString\n\
    \        val maxSumDigitStrLen = maxSumDigitStr.length\n        val maxSumDigitStrDigits\
    \ = maxSumDigitStr.dropRight(maxSumDigitStrLen)\n        val maxSumDigitStrDigit\
    \ = maxSumDigitStrDigits.toLong\n        val maxSumDigitStrDigitStr = maxSumDigitStrDigits.toString\n\
    \        val maxSumDigitStrDigitStrLen = maxSumDigitStrDigitStr.length\n     \
    \   val maxSumDigitStrDigitStrDigits = maxSumDigitStrDigitStr.dropRight(maxSumDigitStrDigitStrLen)\n\
    \        val maxSumDigitStrDigitStrDigit = maxSumDigitStrDigitStrDigits.toLong\n\
    \        val maxSumDigitStrDigitStrDigitStr = maxSumDigitStrDigitStrDigits.toString\n\
    \        val maxSumDigitStrDigitStrDigitStrLen = maxSumDigitStrDigitStrDigitStr.length\n\
    \        val maxSumDigitStrDigitStrDigitStrDigits = maxSumDigitStrDigitStrDigitStr.dropRight(maxSumDigitStrDigitStrDigitStrLen)\n\
    \        val maxSumDigitStrDigitStrDigitStrDigit = maxSumDigitStrDigitStrDigitStrDigits.toLong\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStr = maxSumDigitStrDigitStrDigitStrDigits.toString\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStrLen = maxSumDigitStrDigitStrDigitStrDigitStr.length\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStrDigits = maxSumDigitStrDigitStrDigitStrDigitStr.dropRight(maxSumDigitStrDigitStrDigitStrDigitStrLen)\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStrDigit = maxSumDigitStrDigitStrDigitStrDigitStrDigits.toLong\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStrDigitStr = maxSumDigitStrDigitStrDigitStrDigitStrDigits.toString\n\
    \        val maxSumDigitStrDigitStrDigitStrDigitStrDigit", "        val arr =\
    \ arr.toList\n        val len = arr.size\n        val maxTwoDigits = arr.take(k).map(_.toString.length).max\n\
    \        val result = arr.take(k).foldLeft(0l) { (sum, elem) => sum + elem.toString.substring(0,maxTwoDigits)\
    \ }\n        result", "        var sum = 0\n        var i = 0\n        while (i\
    \ < k) {\n            sum += arr(i)\n            i += 1\n        }\n        return\
    \ sum", "        val arr = arr.toList\n        val len = arr.length\n        val\
    \ maxLen = arr.take(k).map(_.toString.length).max\n        val sum = 0\n     \
    \   for(i <- 0 until k) {\n            val str = arr.take(i).map(_.toString).mkString(\"\
    \")\n            val len = str.length\n            val maxLen = str.take(k).map(_.toString.length).max\n\
    \            sum += str.substring(0,k).map(_.toLong).sum\n        }\n        sum",
  "        val arr = arr.toList\n        val len = arr.length\n        val maxLen\
    \ = len - k\n        val maxLen2 = maxLen / 2\n        val maxLen3 = maxLen /\
    \ 3\n        val maxLen4 = maxLen / 4\n        val maxLen5 = maxLen / 5\n    \
    \    val maxLen6 = maxLen / 6\n        val maxLen7 = maxLen / 7\n        val maxLen8\
    \ = maxLen / 8\n        val maxLen9 = maxLen / 9\n        val maxLen10 = maxLen\
    \ / 10\n        val maxLen11 = maxLen / 11\n        val maxLen12 = maxLen / 12\n\
    \        val maxLen13 = maxLen / 13\n        val maxLen14 = maxLen / 14\n    \
    \    val maxLen15 = maxLen / 15\n        val maxLen16 = maxLen / 16\n        val\
    \ maxLen17 = maxLen / 17\n        val maxLen18 = maxLen / 18\n        val maxLen19\
    \ = maxLen / 19\n        val maxLen20 = maxLen / 20\n        val maxLen21 = maxLen\
    \ / 21\n        val maxLen22 = maxLen / 22\n        val maxLen23 = maxLen / 23\n\
    \        val maxLen24 = maxLen / 24\n        val maxLen25 = maxLen / 25\n    \
    \    val maxLen26 = maxLen / 26\n        val maxLen27 = maxLen / 27\n        val\
    \ maxLen28 = maxLen / 28\n        val maxLen29 = maxLen / 29\n        val maxLen30\
    \ = maxLen / 30\n        val maxLen31 = maxLen / 31\n        val maxLen32 = maxLen\
    \ / 32\n        val maxLen33 = maxLen / 33\n        val maxLen34 = maxLen / 34\n\
    \        val maxLen35 = maxLen / 35\n        val maxLen36 = maxLen / 36\n    \
    \    val maxLen37 = maxLen / 37\n        val maxLen38 = maxLen / 38\n        val\
    \ maxLen39 = maxLen / 39\n        val maxLen40 = maxLen / 40\n        val maxLen41\
    \ = maxLen / 41\n        val maxLen42 = maxLen / 42\n        val maxLen43 = maxLen\
    \ / 43\n        val maxLen44 = maxLen / 44\n        val maxLen45 = maxLen / 45\n\
    \        val maxLen46 = maxLen / 46\n        val maxLen47 = max", "        val\
    \ arr = arr.toList\n        val len = arr.size\n        val max = (len / 2).toInt\n\
    \        val sum = 0\n        val maxSum = 0\n        val maxSumIndex = 0\n  \
    \      val maxSumElement = 0\n        val maxSumElementIndex = 0\n        val\
    \ maxSumElement2 = 0\n        val maxSumElement2Index = 0\n        val maxSumElement3\
    \ = 0\n        val maxSumElement3Index = 0\n        val maxSumElement4 = 0\n \
    \       val maxSumElement4Index = 0\n        val maxSumElement5 = 0\n        val\
    \ maxSumElement5Index = 0\n        val maxSumElement6 = 0\n        val maxSumElement6Index\
    \ = 0\n        val maxSumElement7 = 0\n        val maxSumElement7Index = 0\n \
    \       val maxSumElement8 = 0\n        val maxSumElement8Index = 0\n        val\
    \ maxSumElement9 = 0\n        val maxSumElement9Index = 0\n        val maxSumElement10\
    \ = 0\n        val maxSumElement10Index = 0\n        val maxSumElement11 = 0\n\
    \        val maxSumElement11Index = 0\n        val maxSumElement12 = 0\n     \
    \   val maxSumElement12Index = 0\n        val maxSumElement13 = 0\n        val\
    \ maxSumElement13Index = 0\n        val maxSumElement14 = 0\n        val maxSumElement14Index\
    \ = 0\n        val maxSumElement15 = 0\n        val maxSumElement15Index = 0\n\
    \        val maxSumElement16 = 0\n        val maxSumElement16Index = 0\n     \
    \   val maxSumElement17 = 0\n        val maxSumElement17Index = 0\n        val\
    \ maxSumElement18 = 0\n        val maxSumElement18Index = 0\n        val maxSumElement19\
    \ = 0\n        val maxSumElement19Index = 0\n        val maxSumElement20 = 0\n\
    \        val maxSumElement20Index = 0\n        val maxSumElement21 = 0\n     \
    \   val maxSumElement21Index = 0\n        val maxSumElement22 = 0\n        val\
    \ maxSumElement22Index = 0\n        val maxSumElement23 = 0\n        val maxSumElement23Index\
    \ = 0\n        val maxSumElement24 = 0\n        val maxSumElement24Index = 0\n\
    \        val maxSumElement25 = 0\n        val maxSumElement25Index = 0\n     \
    \   val maxSumElement26 = 0\n        val maxSumElement26Index = 0\n        val\
    \ maxSumElement27 = 0\n        val maxSumElement27Index = 0\n        val maxSumElement28\
    \ = 0\n        val maxSumElement28", "        val arr = arr.toList\n        val\
    \ len = arr.size\n        val maxNum = arr.max\n        val maxNumDigit = maxNum.toString.length\n\
    \        val maxNumDigit2 = maxNum.toString.length * 2\n        val maxNumDigit3\
    \ = maxNum.toString.length * 3\n        val maxNumDigit4 = maxNum.toString.length\
    \ * 4\n        val maxNumDigit5 = maxNum.toString.length * 5\n        val maxNumDigit6\
    \ = maxNum.toString.length * 6\n        val maxNumDigit7 = maxNum.toString.length\
    \ * 7\n        val maxNumDigit8 = maxNum.toString.length * 8\n        val maxNumDigit9\
    \ = maxNum.toString.length * 9\n        val maxNumDigit10 = maxNum.toString.length\
    \ * 10\n        val maxNumDigit11 = maxNum.toString.length * 11\n        val maxNumDigit12\
    \ = maxNum.toString.length * 12\n        val maxNumDigit13 = maxNum.toString.length\
    \ * 13\n        val maxNumDigit14 = maxNum.toString.length * 14\n        val maxNumDigit15\
    \ = maxNum.toString.length * 15\n        val maxNumDigit16 = maxNum.toString.length\
    \ * 16\n        val maxNumDigit17 = maxNum.toString.length * 17\n        val maxNumDigit18\
    \ = maxNum.toString.length * 18\n        val maxNumDigit19 = maxNum.toString.length\
    \ * 19\n        val maxNumDigit20 = maxNum.toString.length * 20\n        val maxNumDigit21\
    \ = maxNum.toString.length * 21\n        val maxNumDigit22 = maxNum.toString.length\
    \ * 22\n        val maxNumDigit23 = maxNum.toString.length * 23\n        val maxNumDigit24\
    \ = maxNum.toString.length * 24\n        val maxNumDigit25 = maxNum.toString.length\
    \ * 25\n        val maxNumDigit26 = maxNum.toString.length * 26\n        val maxNumDigit27\
    \ = maxNum.toString.length * 27\n        val maxNumDigit28 = maxNum.toString.length\
    \ * 28\n        val maxNumDigit29 = maxNum.toString.length * 29\n        val maxNumDigit30\
    \ = maxNum.toString.length * 30\n        val maxNumDigit31 = maxNum.toString.length\
    \ * 31\n        val maxNumDigit32 = maxNum.toString.length * 32\n        val maxNumDigit33\
    \ = maxNum.toString.length * 33\n        val maxNumDigit34 = maxNum.toString.",
  "        val arr = arr.toList\n        val len = arr.size\n        val max = (len\
    \ / 2).toInt\n        val sum = 0\n        val maxSum = arr(max)\n        val\
    \ maxSumIndex = maxSum.toString.length\n        val maxSumDigit = maxSum.toString.charAt(maxSumIndex)\n\
    \        val maxSumDigitIndex = maxSumDigit.toString.length\n        val maxSumDigit2\
    \ = maxSum.toString.charAt(maxSumIndex + 1)\n        val maxSumDigit2Index = maxSumDigit2.toString.length\n\
    \        val maxSumDigit3 = maxSum.toString.charAt(maxSumIndex + 2)\n        val\
    \ maxSumDigit3Index = maxSumDigit3.toString.length\n        val maxSumDigit4 =\
    \ maxSum.toString.charAt(maxSumIndex + 3)\n        val maxSumDigit4Index = maxSumDigit4.toString.length\n\
    \        val maxSumDigit5 = maxSum.toString.charAt(maxSumIndex + 4)\n        val\
    \ maxSumDigit5Index = maxSumDigit5.toString.length\n        val maxSumDigit6 =\
    \ maxSum.toString.charAt(maxSumIndex + 5)\n        val maxSumDigit6Index = maxSumDigit6.toString.length\n\
    \        val maxSumDigit7 = maxSum.toString.charAt(maxSumIndex + 6)\n        val\
    \ maxSumDigit7Index = maxSumDigit7.toString.length\n        val maxSumDigit8 =\
    \ maxSum.toString.charAt(maxSumIndex + 7)\n        val maxSumDigit8Index = maxSumDigit8.toString.length\n\
    \        val maxSumDigit9 = maxSum.toString.charAt(maxSumIndex + 8)\n        val\
    \ maxSumDigit9Index = maxSumDigit9.toString.length\n        val maxSumDigit10\
    \ = maxSum.toString.charAt(maxSumIndex + 9)\n        val maxSumDigit10Index =\
    \ maxSumDigit10.toString.length\n        val maxSumDigit11 = maxSum.toString.charAt(maxSumIndex\
    \ + 10)\n        val maxSumDigit11Index = maxSumDigit11.toString.length\n    \
    \    val maxSumDigit12 = maxSum.toString.charAt(maxSumIndex + 11)\n        val\
    \ maxSumDigit12Index = maxSumDigit12.toString.length\n        val maxSumDigit13\
    \ = maxSum.toString.charAt(maxSumIndex + 12)\n        val maxSumDigit13Index =\
    \ maxSumDigit13.toString.length\n        val maxSumDigit14 = maxSum.toString.charAt(maxSumIndex\
    \ + 13)\n        val maxSumDigit14Index = maxSumDigit14.toString.length\n    \
    \    val maxSumDigit15 = maxSum.toString.charAt(maxSumIndex + 14)\n", "      \
    \  val arr = arr.toList\n        val len = arr.size\n        val maxTwoDigits\
    \ = arr.take(k).map(_.toString.length).max\n        val twoDigits = arr.take(k).map(_.toString).map(_.length).max\n\
    \        val res = arr.take(k).sum\n        val twoDigitSum = arr.take(k).map(_.toString).map(_.length).sum\n\
    \        val twoDigitSum2 = arr.take(k).map(_.toString).map(_.length).sum\n  \
    \      val twoDigitSum3 = arr.take(k).map(_.toString).map(_.length).sum\n    \
    \    val twoDigitSum4 = arr.take(k).map(_.toString).map(_.length).sum\n      \
    \  val twoDigitSum5 = arr.take(k).map(_.toString).map(_.length).sum\n        val\
    \ twoDigitSum6 = arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum7\
    \ = arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum8 =\
    \ arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum9 = arr.take(k).map(_.toString).map(_.length).sum\n\
    \        val twoDigitSum10 = arr.take(k).map(_.toString).map(_.length).sum\n \
    \       val twoDigitSum11 = arr.take(k).map(_.toString).map(_.length).sum\n  \
    \      val twoDigitSum12 = arr.take(k).map(_.toString).map(_.length).sum\n   \
    \     val twoDigitSum13 = arr.take(k).map(_.toString).map(_.length).sum\n    \
    \    val twoDigitSum14 = arr.take(k).map(_.toString).map(_.length).sum\n     \
    \   val twoDigitSum15 = arr.take(k).map(_.toString).map(_.length).sum\n      \
    \  val twoDigitSum16 = arr.take(k).map(_.toString).map(_.length).sum\n       \
    \ val twoDigitSum17 = arr.take(k).map(_.toString).map(_.length).sum\n        val\
    \ twoDigitSum18 = arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum19\
    \ = arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum20 =\
    \ arr.take(k).map(_.toString).map(_.length).sum\n        val twoDigitSum21 = arr.take(k).map(_.toString).map(_.length).sum\n\
    \        val twoDigitSum22 = arr.take(k).map(_.toString).map(_.length).sum\n \
    \       val two", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val res = arr.take(k).foldLeft(0l) { (sum, el) => sum + el.toString.toLong\
    \ }\n        res % 10", "        var sum = 0L\n        var i = 0\n        while\
    \ (i < k) {\n            sum += arr(i)\n            i += 1\n        }\n      \
    \  return sum", "        val arr = arr.toList\n        val len = arr.size\n  \
    \      val max = (len / 2).toInt\n        val sum = 0\n        var i = 0\n   \
    \     while (i < max) {\n            val j = i + k\n            sum += arr(i).toLong\
    \ + arr(j).toLong\n            i = j\n        }\n        sum", "        val arr\
    \ = arr.toList\n        val len = arr.size\n        val max = (len / 2).toInt\n\
    \        val sum = 0\n        val maxSum = 0\n        val maxSumIndex = 0\n  \
    \      val maxSumIndex2 = 0\n        val maxSumIndex3 = 0\n        val maxSumIndex4\
    \ = 0\n        val maxSumIndex5 = 0\n        val maxSumIndex6 = 0\n        val\
    \ maxSumIndex7 = 0\n        val maxSumIndex8 = 0\n        val maxSumIndex9 = 0\n\
    \        val maxSumIndex10 = 0\n        val maxSumIndex11 = 0\n        val maxSumIndex12\
    \ = 0\n        val maxSumIndex13 = 0\n        val maxSumIndex14 = 0\n        val\
    \ maxSumIndex15 = 0\n        val maxSumIndex16 = 0\n        val maxSumIndex17\
    \ = 0\n        val maxSumIndex18 = 0\n        val maxSumIndex19 = 0\n        val\
    \ maxSumIndex20 = 0\n        val maxSumIndex21 = 0\n        val maxSumIndex22\
    \ = 0\n        val maxSumIndex23 = 0\n        val maxSumIndex24 = 0\n        val\
    \ maxSumIndex25 = 0\n        val maxSumIndex26 = 0\n        val maxSumIndex27\
    \ = 0\n        val maxSumIndex28 = 0\n        val maxSumIndex29 = 0\n        val\
    \ maxSumIndex30 = 0\n        val maxSumIndex31 = 0\n        val maxSumIndex32\
    \ = 0\n        val maxSumIndex33 = 0\n        val maxSumIndex34 = 0\n        val\
    \ maxSumIndex35 = 0\n        val maxSumIndex36 = 0\n        val maxSumIndex37\
    \ = 0\n        val maxSumIndex38 = 0\n        val maxSumIndex39 = 0\n        val\
    \ maxSumIndex40 = 0\n        val maxSumIndex41 = 0\n        val maxSumIndex42\
    \ = 0\n        val maxSumIndex43 = 0\n        val maxSumIndex44 = 0\n        val\
    \ maxSumIndex45 = 0\n        val maxSumIndex46 = 0\n        val maxSumIndex47\
    \ = 0\n        val maxSumIndex48 = 0\n        val maxSumIndex49 = 0\n        val\
    \ maxSumIndex50 = 0\n        val maxSumIndex51 = 0\n        val maxSumIndex52\
    \ = 0\n        val maxSumIndex53 = 0\n        val maxSumIndex54 = 0\n        val\
    \ maxSumIndex55 = 0\n        val maxSumIndex56 = 0\n        val maxSumIndex57\
    \ = 0\n        val maxSumIndex58 = 0\n        val maxSumIndex59 = 0\n        val\
    \ maxSumIndex60 = 0", "        val arr = arr.toList\n        val len = arr.length\n\
    \        val maxDigits = len - k\n        val maxDigitSum = arr.take(k).foldLeft(0l)(_\
    \ + _)\n        val maxDigitSum2 = arr.take(maxDigits).foldLeft(0l)(_ + _)\n \
    \       val maxDigitSum3 = arr.take(maxDigits * 2).foldLeft(0l)(_ + _)\n     \
    \   val maxDigitSum4 = arr.take(maxDigits * 3).foldLeft(0l)(_ + _)\n        val\
    \ maxDigitSum5 = arr.take(maxDigits * 4).foldLeft(0l)(_ + _)\n        val maxDigitSum6\
    \ = arr.take(maxDigits * 5).foldLeft(0l)(_ + _)\n        val maxDigitSum7 = arr.take(maxDigits\
    \ * 6).foldLeft(0l)(_ + _)\n        val maxDigitSum8 = arr.take(maxDigits * 7).foldLeft(0l)(_\
    \ + _)\n        val maxDigitSum9 = arr.take(maxDigits * 8).foldLeft(0l)(_ + _)\n\
    \        val maxDigitSum10 = arr.take(maxDigits * 9).foldLeft(0l)(_ + _)\n   \
    \     val maxDigitSum11 = arr.take(maxDigits * 10).foldLeft(0l)(_ + _)\n     \
    \   val maxDigitSum12 = arr.take(maxDigits * 11).foldLeft(0l)(_ + _)\n       \
    \ val maxDigitSum13 = arr.take(maxDigits * 12).foldLeft(0l)(_ + _)\n        val\
    \ maxDigitSum14 = arr.take(maxDigits * 13).foldLeft(0l)(_ + _)\n        val maxDigitSum15\
    \ = arr.take(maxDigits * 14).foldLeft(0l)(_ + _)\n        val maxDigitSum16 =\
    \ arr.take(maxDigits * 15).foldLeft(0l)(_ + _)\n        val maxDigitSum17 = arr.take(maxDigits\
    \ * 16).foldLeft(0l)(_ + _)\n        val maxDigitSum18 = arr.take(maxDigits *\
    \ 17).foldLeft(0l)(_ + _)\n        val maxDigitSum19 = arr.take", "        var\
    \ sum = 0\n        var i = 0\n        while (i < k) {\n            sum += arr(i)\n\
    \            i += 1\n        }\n        sum", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val len = arr.length\n        val maxLen = k\n        var i = 0\n   \
    \     while (i < len) {\n            if (arr(i).asDigits.length <= maxLen) {\n\
    \                result += arr(i)\n                i += 1\n            } else\
    \ {\n                val temp = arr(i)\n                val digits = temp.asDigits.take(maxLen)\n\
    \                result += digits.sum\n                i += 1\n            }\n\
    \        }\n        result.sum", "        val arr = arr.toList\n        val len\
    \ = arr.length\n        val max = (len / 2).toInt\n        val sum = 0\n     \
    \   val twoDigits = arr.take(max)\n        val twoDigitSum = twoDigits.sum\n \
    \       val twoDigitSum2 = twoDigits.sum\n        val twoDigitSum3 = twoDigits.sum\n\
    \        val twoDigitSum4 = twoDigits.sum\n        val twoDigitSum5 = twoDigits.sum\n\
    \        val twoDigitSum6 = twoDigits.sum\n        val twoDigitSum7 = twoDigits.sum\n\
    \        val twoDigitSum8 = twoDigits.sum\n        val twoDigitSum9 = twoDigits.sum\n\
    \        val twoDigitSum10 = twoDigits.sum\n        val twoDigitSum11 = twoDigits.sum\n\
    \        val twoDigitSum12 = twoDigits.sum\n        val twoDigitSum13 = twoDigits.sum\n\
    \        val twoDigitSum14 = twoDigits.sum\n        val twoDigitSum15 = twoDigits.sum\n\
    \        val twoDigitSum16 = twoDigits.sum\n        val twoDigitSum17 = twoDigits.sum\n\
    \        val twoDigitSum18 = twoDigits.sum\n        val twoDigitSum19 = twoDigits.sum\n\
    \        val twoDigitSum20 = twoDigits.sum\n        val twoDigitSum21 = twoDigits.sum\n\
    \        val twoDigitSum22 = twoDigits.sum\n        val twoDigitSum23 = twoDigits.sum\n\
    \        val twoDigitSum24 = twoDigits.sum\n        val twoDigitSum25 = twoDigits.sum\n\
    \        val twoDigitSum26 = twoDigits.sum\n        val twoDigitSum27 = twoDigits.sum\n\
    \        val twoDigitSum28 = twoDigits.sum\n        val twoDigitSum29 = twoDigits.sum\n\
    \        val twoDigitSum30 = twoDigits.sum\n        val twoDigitSum31 = twoDigits.sum\n\
    \        val twoDigitSum32 = twoDigits.sum\n        val twoDigitSum33 = twoDigits.sum\n\
    \        val twoDigitSum34 = twoDigits.sum\n        val twoDigitSum35 = twoDigits.sum\n\
    \        val twoDigitSum36 = twoDigits.sum\n        val twoDigitSum37 = twoDigits.sum\n\
    \        val twoDigitSum38 = twoDigits.sum\n        val twoDigitSum39 = twoDigits.sum\n\
    \        val twoDigitSum40 = twoDigits.sum\n        val twoDigitSum4", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        val len = arr.length\n\
    \        val max = (len / 2).toInt\n        for (i <- 0 until max) {\n       \
    \     val cur = arr(i)\n            val next = (i + 1) % len\n            if (cur\
    \ < next) {\n                result.add(cur)\n                result.add(next)\n\
    \            }\n        }\n        result.sum", "        val arr = arr.toList\n\
    \        val len = arr.size\n        val max = (len / 2).toInt\n        val sum\
    \ = 0\n        var i = 0\n        while (i < max) {\n            val curr = arr(i)\n\
    \            val next = arr(i + 1)\n            if (curr < next) {\n         \
    \       sum += curr\n                i += 2\n            } else {\n          \
    \      sum += next\n                i += 1\n            }\n        }\n       \
    \ sum"]
stop_tokens:
- "\n    }\n"
