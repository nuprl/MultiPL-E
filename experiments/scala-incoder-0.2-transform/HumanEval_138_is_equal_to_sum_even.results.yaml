language: scala
name: HumanEval_138_is_equal_to_sum_even
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n) {\n            val x = n%i + 1\n          \
    \  if(x == 0) evens += x\n            sum += x\n        }\n        evens.size\
    \ == 4 && sum == n\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprqjp2qkm.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprqjp2qkm.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprqjp2qkm.scala:18:16\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            sum += x\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppsdo9p70.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmppsdo9p70.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that ove"
  stdout: ''
  timestamp: 1659799867
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4Sum = sumEvensSum4.sum\n        sumEvensSum4Sum\
    \ == sumEven\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0uqk2ooi.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter is\
    \ not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = mutable.ListBuffer[Long]()\n        val n = n.toLong\n        for(i <- 0 until\
    \ n) {\n            val x = i.toLong\n            val y = x - 1\n            val\
    \ z = x + 1\n            val w = x - 2\n            val v = x + 2\n          \
    \  val u = x + 3\n            val x = x - 4\n            val y = x - 5\n     \
    \       val z = x - 6\n            val w = x - 7\n            val v = x - 8\n\
    \            val u = x - 9\n            val x = x - 10\n            val y = x\
    \ - 11\n            val z = x - 12\n            val w = x - 13\n            val\
    \ v = x - 14\n            val u = x - 15\n            val x = x - 16\n       \
    \     val y = x - 17\n            val z = x - 18\n            val w = x - 19\n\
    \            val v = x - 20\n            val u = x - 21\n            val x = x\
    \ - 22\n            val y = x - 23\n            val z = x - 24\n            val\
    \ w = x - 25\n            val v = x - 26\n            val u = x - 27\n       \
    \     val x = x - 28\n            val y = x - 29\n            val z = x - 30\n\
    \            val w = x - 31\n            val v = x - 32\n            val u = x\
    \ - 33\n            val x = x - 34\n            val y = x - 35\n            val\
    \ z = x - 36\n            val w = x - 37\n            val v = x - 38\n       \
    \     val u = x - 39\n            val x = x - 40\n            val y = x - 41\n\
    \            val z = x - 42\n            val w = x - 43\n            val v = x\
    \ - 44\n            val u = x - 45\n            val x = x - 46\n            val\
    \ y = x - 47\n            val z = x - 48\n            val w = x - 49\n       \
    \     val v = x - 50\n            val u = x - 51\n            val x = x - 52\n\
    \            val y = x - 53\n            val z = x - 54\n            val w = x\
    \ - 55\n            val v = x - 56\n            val u = x - 57\n            val\
    \ x = x - 58\n            val y = x - 59\n            val z = x - 60\n       \
    \     val w = x - 61\n            val v = x - 62\n            val u = x - 63\n\
    \            val x = x - 64\n            val y = x - 65\n            val z = x\
    \ - 66\n            val w = x - 67\n            val v = x - 68\n            val\
    \ u = x - 69\n            val x = x - 70\n            val y = x - 71\n       \
    \     val z = x - 72\n            val w = x - 73\n            val v = x - 74\n\
    \            val u = x - 75\n            val x = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp15bgp53j.scala:95:19 ---------------------------\e\
    [0m\e[0m\n\e[31m95 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = \n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp15bgp53j.scala:109:0 ---------------------------\e[0m\e[0m\n\e[31m109\
    \ |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}' expected, but eof\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp15bgp53j.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp15bgp53j.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msum\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmp15bgp53j.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = n.toLong\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35mn\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp15bgp53j.scala:23:16 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mx\e[0m = x - \e[31m4\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mx is already\
    \ defined as \e[33mvalue\e[0m \e[35mx\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-"
  stdout: ''
  timestamp: 1659800079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainders\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3c_99va2.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp3c_99va2.scala:24:72 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp3c_99va2.scala:26:82\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3c_99va2.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Re"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0).length\n        val sumEvensLessThanFour = sumEvens - 4\n   \
    \     val sumEvensLessThanFourOrEqualToFour = sumEvensLessThanFour >= 0\n    \
    \    sumEvensLessThanFourOrEqualToFour\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvmpa3fu9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \      value filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnpl91sgq.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpl91sgq.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnpl91sgq.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659799876
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(_\
    \ % 2 == 0).length\n        sumEvens == 4\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpytoazbq9.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value filter\
    \ is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.productIterator.toList\n\
    \        val sumEvensSum = sumEvens.sum\n        val sumEvensSum2 = sumEvens.sum\
    \ * sumEvens.sum\n        val sumEvensSum3 = sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum4 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum5 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum\n        val sumEvensSum6 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum7 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum8 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum9 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum10 = sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum\n        val sumEvensSum11 = sumEvens.sum * sumEvens.sum * sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum\n        val sumEvensSum12 = sumEvens.sum\
    \ * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum *\
    \ sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum * sumEvens.sum\n\
    \        val sumEvensSum13 = sumEvens.sum * sumEvens.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd6o8wu55.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpd6o8wu55.scala:14:31 ------------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.productIterator.toList\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value productIterator is not a member of Int\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd6o8wu55.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainders\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1udqjz47.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1udqjz47.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven.filter(x\
    \ => x % 2 == 0)\n        val sumEvensSum = sumEvens.sum\n        val sumEvensSum4\
    \ = sumEvensSum * 4\n        val sumEvensSum4IsEven = sumEvensSum4 == sumEvens\n\
    \        sumEvensSum4IsEven\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpld4nmfaa.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msumEvens\e[0m = sumEven.filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ filter is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val sumEvensRemainder = sumEven % 4\n        sumEvens == sumEvensRemainder\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbl6xeqht.scala:21)\n\tat Problem.main(tmpbl6xeqht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l))\
    \ == (false));\n    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpicr4bczm.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder % \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpicr4bczm.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of top"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven - sumEvens\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ - sumEvensRemainders\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ - sumEvensRemaindersRemainders\n        val sumEvensRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder - sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainders\n   \
    \     val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj2qqb9cr.scala:27:92 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ - sumEvensRemaindersRemaindersRemaindersRemaindersRemain\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpj2qqb9cr.scala:28:5 ---------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659799864
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val evens = mutable.ListBuffer[Long]()\n        val sum\
    \ = 0\n        for(i <- 0 until n){\n            val x = math.abs(i.toLong)\n\
    \            val y = math.abs(sum.toLong)\n            val z = math.abs(x - y)\n\
    \            if(z == 0){\n                evens += x\n                sum += x\n\
    \            }\n        }\n        evens.size == 4\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgn4qnt05.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgn4qnt05.scala:15:25 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgn4qnt05.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                sum += x\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean sum.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659800079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 4\n        val remainder = sumEven % 4\n        sumEvens == remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isEqualToSumEven((4l)) == (false));\n\
    \    assert(isEqualToSumEven((6l)) == (false));\n    assert(isEqualToSumEven((8l))\
    \ == (true));\n    assert(isEqualToSumEven((10l)) == (true));\n    assert(isEqualToSumEven((11l))\
    \ == (false));\n    assert(isEqualToSumEven((12l)) == (true));\n    assert(isEqualToSumEven((13l))\
    \ == (false));\n    assert(isEqualToSumEven((16l)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0gj4i_u.scala:21)\n\tat Problem.main(tmpv0gj4i_u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemainder / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder % 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemain\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4cjvg1an.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4cjvg1an.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36msumEvensRemaindersRemaindersRemaindersRemainder\e[0m = sumEvensRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainder is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemainders is already\
    \ defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemainders\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4cjvg1an.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemainder / \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemainder"
  stdout: ''
  timestamp: 1659799854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Evaluate whether the given number n can be written as the sum of exactly\
    \ 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n\
    \    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>>\
    \ isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) :\
    \ Boolean = {\n        val sumEven = n.toInt\n        val sumEvens = sumEven /\
    \ 2\n        val sumEvensRemainder = sumEven % 2\n        val sumEvensRemainders\
    \ = sumEvensRemainder / 2\n        val sumEvensRemaindersRemainder = sumEvensRemainder\
    \ % 2\n        val sumEvensRemaindersRemainders = sumEvensRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemainder = sumEvensRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemainders = sumEvensRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainder =\
    \ sumEvensRemaindersRemaindersRemaindersRemainder % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemainders\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemainder / 2\n        val\
    \ sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / 2\n\
    \        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ % 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / 2\n        val sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ = sumEvensRemaindersRemaindersRemain\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isEqualToSumEven((4l)) == (false));\n    assert(isEqualToSumEven((6l))\
    \ == (false));\n    assert(isEqualToSumEven((8l)) == (true));\n    assert(isEqualToSumEven((10l))\
    \ == (true));\n    assert(isEqualToSumEven((11l)) == (false));\n    assert(isEqualToSumEven((12l))\
    \ == (true));\n    assert(isEqualToSumEven((13l)) == (false));\n    assert(isEqualToSumEven((16l))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc93mpavr.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder / \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpc93mpavr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpc93mpavr.scala:25:82 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder\e\
    [0m = sumEvensRemaindersRemaindersRemaindersRemaindersRemaindersRemainder % \e\
    [31m2\e[0m\n\e[31m\e[31m   |\e[0m                                            \
    \                   "
  stdout: ''
  timestamp: 1659799854
