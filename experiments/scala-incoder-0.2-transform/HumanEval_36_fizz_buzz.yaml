name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var remainder = n\n        while (remainder\
    \ > 0) {\n            count += 1\n            if (remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n                count += 1\n            }\n            remainder\
    \ = remainder / 10\n        }\n        count", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)", "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors\
    \ = mutable.HashSet.empty[Long]\n        for(i <- 1 to n) {\n            val d\
    \ = i.toString.toInt\n            if(d % 11 == 0 || d % 13 == 0) {\n         \
    \       divisors += i\n            }\n            counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n        }\n        divisors.toList.map(d => counts.getOrElse(d, 0)).sum",
  "        val fizzBuzz = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val divisorsCount = mutable.Map[Long, Long]()\n        val divisorsCount2\
    \ = mutable.Map[Long, Long]()\n        val divisorsCount3 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount4 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount5 = mutable.Map[Long, Long]()\n        val divisorsCount6 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount7 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount8 = mutable.Map[Long, Long]()\n        val divisorsCount9 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount10 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount11 = mutable.Map[Long, Long]()\n        val divisorsCount12 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount13 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount14 = mutable.Map[Long, Long]()\n        val divisorsCount15 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount16 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount17 = mutable.Map[Long, Long]()\n        val divisorsCount18 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount19 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount20 = mutable.Map[Long, Long]()\n        val divisorsCount21 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount22 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount23 = mutable.Map[Long, Long]()\n        val divisorsCount24 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount25 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount26 = mutable.Map[Long, Long]()\n        val divisorsCount27 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount28 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount29 = mutable.Map[Long, Long]()\n        val divisorsCount30 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount31 = mutable.Map[Long, Long]()\n        val ",
  "        val fizzBuzz = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val divisorsCount = mutable.Set[Long]()\n        val divisorsCount2 =\
    \ mutable.Set[Long]()\n        val divisorsCount3 = mutable.Set[Long]()\n    \
    \    val divisorsCount4 = mutable.Set[Long]()\n        val divisorsCount5 = mutable.Set[Long]()\n\
    \        val divisorsCount6 = mutable.Set[Long]()\n        val divisorsCount7\
    \ = mutable.Set[Long]()\n        val divisorsCount8 = mutable.Set[Long]()\n  \
    \      val divisorsCount9 = mutable.Set[Long]()\n        val divisorsCount10 =\
    \ mutable.Set[Long]()\n        val divisorsCount11 = mutable.Set[Long]()\n   \
    \     val divisorsCount12 = mutable.Set[Long]()\n        val divisorsCount13 =\
    \ mutable.Set[Long]()\n        val divisorsCount14 = mutable.Set[Long]()\n   \
    \     val divisorsCount15 = mutable.Set[Long]()\n        val divisorsCount16 =\
    \ mutable.Set[Long]()\n        val divisorsCount17 = mutable.Set[Long]()\n   \
    \     val divisorsCount18 = mutable.Set[Long]()\n        val divisorsCount19 =\
    \ mutable.Set[Long]()\n        val divisorsCount20 = mutable.Set[Long]()\n   \
    \     val divisorsCount21 = mutable.Set[Long]()\n        val divisorsCount22 =\
    \ mutable.Set[Long]()\n        val divisorsCount23 = mutable.Set[Long]()\n   \
    \     val divisorsCount24 = mutable.Set[Long]()\n        val divisorsCount25 =\
    \ mutable.Set[Long]()\n        val divisorsCount26 = mutable.Set[Long]()\n   \
    \     val divisorsCount27 = mutable.Set[Long]()\n        val divisorsCount28 =\
    \ mutable.Set[Long]()\n        val divisorsCount29 = mutable.Set[Long]()\n   \
    \     val divisorsCount30 = mutable.Set[Long]()\n        val divisorsCount31 =\
    \ mutable.Set[Long]()\n        val divisorsCount32 = mutable.Set[Long]()\n   \
    \     val divisorsCount33 = mutable.Set[Long]()\n        val divisor", "     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n\
    \            if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ % 7 == 0)", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val count = mutable.HashMap.empty[Long, Long]\n        for(i\
    \ <- 0 until n){\n            val remainder = i % 11\n            val divisor\
    \ = i % 13\n            if(remainder == 7 && divisor == 11 || divisor == 13){\n\
    \                count.put(i.toLong, count.getOrElse(i, 0l) + 1)\n           \
    \ }\n        }\n        count.values.sum", "        val nums = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                nums += i\n                count += 1\n\
    \            }\n        }\n        nums.toList.count(_ == 7l)", "        val count\
    \ = mutable.HashMap[Int, Int]()\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        digits.foreach{ case (digit, count) =>\n            if (digit == 7)\n\
    \                count.update(digit, 1)\n        }\n        count.values.toList.sum",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                divisors += i\n  \
    \          }\n            counts += i -> counts.getOrElse(i, 0) + 1\n        }\n\
    \        divisors.toList.map(i => counts.getOrElse(i, 0)).sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n           \
    \ val remainder = i % 11\n            val isFizz = (remainder == 0)\n        \
    \    val isBuzz = (remainder == 6)\n            val isFizzBuzz = (isFizz && isBuzz)\n\
    \            if(isFizzBuzz) {\n                counts.put(i, 1)\n            }\n\
    \        }\n        counts.values.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount28 = mutable.HashMap.", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount2 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount3 = mutable.HashSet.empty[Long]\n        val divisorsCount4\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount5 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount6 = mutable.HashSet.empty[Long]\n        val divisorsCount7\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount8 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount9 = mutable.HashSet.empty[Long]\n        val divisorsCount10\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount11 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount12 = mutable.HashSet.empty[Long]\n        val divisorsCount13\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount14 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount15 = mutable.HashSet.empty[Long]\n        val divisorsCount16\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount17 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount18 = mutable.HashSet.empty[Long]\n        val divisorsCount19\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount20 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount21 = mutable.HashSet.empty[Long]\n        val divisorsCount22\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount23 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount24 = mutable.HashSet.empty[Long]\n        val divisorsCount25\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount26 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount27 = mutable.HashSet.empty[Long]\n        val divisorsCount28\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount29 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount30 = mutable.HashSet.empty[Long]\n        val divisorsCount31\
    \ = mutable.HashSet.empty[Long]\n        ", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             count(i) = 1\n            }\n        }\n        count.values.sum",
  "        val count = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n\
    \            val digit = i % 10\n            if (digit == 7) {\n             \
    \   val count = count.getOrElse(digit, 0)\n                count(digit) += 1\n\
    \            }\n        }\n        count.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n              \
    \  nums += i\n            }\n        }\n        nums.count(_ % 7 == 0)", "   \
    \     val fizzBuzz = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount = mutable.ListBuffer[Long]()\n        val divisorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount4 = mutable.ListBuffer[Long]()\n        val divisorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount7 = mutable.ListBuffer[Long]()\n        val divisorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount10 = mutable.ListBuffer[Long]()\n        val divisorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount12 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount13 = mutable.ListBuffer[Long]()\n        val divisorsCount14\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount15 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount16 = mutable.ListBuffer[Long]()\n        val divisorsCount17\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount18 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount19 = mutable.ListBuffer[Long]()\n        val divisorsCount20\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount21 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount22 = mutable.ListBuffer[Long]()\n        val divisorsCount23\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount24 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount25 = mutable.ListBuffer[Long]()\n        val divisorsCount26\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount27 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount28 = mutable.ListBuffer[Long]()\n        val divisorsCount29\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount30 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount31 = mutable.ListBuffer[Long]()\n", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                val key = i\n          \
    \      val value = count.get(key)\n                if (value == null) {\n    \
    \                count.put(key, 1)\n                } else {\n               \
    \     count.put(key, value + 1)\n                }\n            }\n        }\n\
    \        count.values.toList.max", "        val nums = mutable.ListBuffer(n)\n\
    \        var count = 0\n        var lastDigit = 7\n        var lastNum : Long\
    \ = 0\n        while (lastNum < n) {\n            val newNum = lastNum + 11\n\
    \            if (newNum % 11 == 0 || newNum % 13 == 0) {\n                nums\
    \ += newNum\n                count += 1\n            }\n            lastNum =\
    \ newNum\n        }\n        nums.toList.map(_.toInt).filter(_.toInt == lastDigit).length",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ == 7l)",
  "        val nums = mutable.ListBuffer(n)\n        var count = 0\n        while\
    \ (count < nums.size) {\n            if (nums(count).isMultiple(11) || nums(count).isMultiple(13))\
    \ {\n                count += 1\n            } else {\n                nums(count)\
    \ match {\n                    case 7 : 7 => count += 1\n                    case\
    \ _ : _ => nums(count) match {\n                        case 7 : 7 => count +=\
    \ 1\n                        case _ : _ => nums(count) match {\n             \
    \               case 7 : 7 => count += 1\n                            case _ :\
    \ _ => nums(count) match {\n                                case 7 : 7 => count\
    \ += 1\n                                case _ : _ => nums(count) match {\n  \
    \                                  case 7 : 7 => count += 1\n                \
    \                    case _ : _ => nums(count) match {\n                     \
    \                   case 7 : 7 => count += 1\n                               \
    \         case _ : _ => nums(count) match {\n                                \
    \            case 7 : 7 => count += 1\n                                      \
    \      case _ : _ => nums(count) match {\n                                   \
    \             case 7 : 7 => count += 1\n                                     \
    \           case _ : _ => nums(count) match {\n                              \
    \                      case 7 : 7 => count += 1\n                            \
    \                        case _ : _ => nums(count) match {\n                 \
    \                                       case 7 : 7 => count += 1\n           \
    \                                             case _ : _ => nums(count) match\
    \ {\n                                                            case 7 : 7 =>\
    \ count += 1\n                                                            case\
    \ _ : _ => nums(count) match {\n                                             \
    \                   case 7 : 7 => count += 1\n                               \
    \                                 case _ : _ => nums(count) match {\n        \
    \                                                            case 7 : 7 => count\
    \ += 1\n                                                                    case\
    \ _ : _ => nums(count) match {\n                                             \
    \                           case 7 : 7 => count += 1\n                       \
    \                                                 case _ : _ => nums(count) match\
    \ {\n                                                                        \
    \    case 7 : 7 => count += 1\n                                              \
    \                              case _ : _ => nums(count) match {\n           \
    \                                                                     case 7 :\
    \ 7 => count += 1\n                                                          \
    \                      case _ : _ => nums(count) match {\n                   \
    \                                                                 case 7 : 7 =>\
    \ count += 1\n                                                               \
    \                     case _ : _ => nums(count) match {\n                    \
    \                                                                    case 7 :\
    \ 7 => count += 1\n                                                          \
    \                              case _ : _ => nums(count) match {\n           \
    \                                                                            \
    \     case 7 : 7 => count += 1\n                                             \
    \                                               case _ : _ => nums(count) match\
    \ {\n                                                                        \
    \                        case 7 : 7 => count += 1\n                          \
    \                                                                      case _\
    \ : _ => nums(count) match {\n                                               \
    \                                                     case 7 : 7 => count += 1\n\
    \                                                                            \
    \                        case _ : _ => nums(count) match {\n                 \
    \                                                                            \
    \           case 7 : 7 => count += 1", "        var count = 0\n        var digit\
    \ = 7\n        while(n >= 10) {\n            n /= 10\n            count += 1\n\
    \        }\n        while(n >= 11 || n >= 13) {\n            n /= 10\n       \
    \     count += 1\n        }\n        if(n >= 11 && n >= 13) {\n            n /=\
    \ 10\n            count += 1\n        }\n        if(n >= 11) {\n            n\
    \ /= 10\n            count += 1\n        }\n        if(n >= 13) {\n          \
    \  n /= 10\n            count += 1\n        }\n        if(n >= 11 && n >= 13)\
    \ {\n            n /= 10\n            count += 1\n        }\n        if(n >= 11)\
    \ {\n            n /= 10\n            count += 1\n        }\n        if(n >= 13)\
    \ {\n            n /= 10\n            count += 1\n        }\n        if(n >= 11\
    \ && n >= 13) {\n            n /= 10\n            count += 1\n        }\n    \
    \    if(n >= 11) {\n            n /= 10\n            count += 1\n        }\n \
    \       if(n >= 13) {\n            n /= 10\n            count += 1\n        }\n\
    \        if(n >= 11 && n >= 13) {\n            n /= 10\n            count += 1\n\
    \        }\n        if(n >= 11) {\n            n /= 10\n            count += 1\n\
    \        }\n        if(n >= 13) {\n            n /= 10\n            count += 1\n\
    \        }\n        if(n >= 11 && n >= 13) {\n            n /= 10\n          \
    \  count += 1\n        }\n        if(n >= 11) {\n            n /= 10\n       \
    \     count += 1\n        }\n        if(n >= 13) {\n            n /= 10\n    \
    \        count += 1\n        }\n        if(n >= 11 && n >= 13) {\n           \
    \ n /= 10\n            count += 1\n        }\n        if(n >= 11) {\n        \
    \    n /= 10\n            count += 1\n        }\n        if(n >= 13) {\n     \
    \       n /= 10\n            count += 1\n        }\n        if(n >= 11 && n >=\
    \ 13) {\n            n /= 10\n            count += 1\n        }\n        if(n\
    \ >= 11) {\n            n /= 10\n            count += 1\n        }\n        if(n\
    \ >= 13) {\n            n /= 10\n            count += 1\n        }\n        if(n\
    \ >= 11 && n >= 13) {\n            n /= 10\n            count += 1\n        }\n\
    \        if(n >= 11) {\n            n /= 10\n            count += 1\n        }\n\
    \        if(n >= 13) {\n            n /= 10\n            count += 1\n        }\n\
    \        if(n >= 11 && n >= 13) {\n            n /= 10\n            count += 1\n\
    \        }\n        if(n >= 11) {\n            n /= 10\n            count += 1\n\
    \        }\n        if(n >= 13) {\n            n /= 10\n            count += 1\n\
    \        }", "        val counts = mutable.HashMap.empty[Long, Int]\n        for\
    \ (i <- 1 to n) {\n            val digit = i % 10\n            if (digit == 7)\
    \ {\n                val count = counts.getOrElse(digit, 0)\n                counts(digit)\
    \ = count + 1\n            }\n        }\n        counts.values.sum", "       \
    \ val ns = List(n, (n/11l), (n/13l))\n        val nm = ns map (_ % 11l) filter\
    \ (_ % 7l) map (_ + 1)\n        nm reduceLeft (_ + _)", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            val remainder = i % 11\n        \
    \    val divisor = if (remainder == 0) 11 else 13\n            divisors += (divisor\
    \ -> divisor)\n            counts += (remainder -> 1)\n        }\n        val\
    \ count = counts.values.sum\n        val divisor = divisors.values.sum\n     \
    \   if (divisor == 0) count else count / divisor", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val digit = i % 10\n      \
    \      if (digit == 7) {\n                counts.put(i, counts.getOrElse(i, 0)\
    \ + 1l) \n            }\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n            val\
    \ remainder = i % 11\n            val divideBy11 = i % 13\n            if (remainder\
    \ == 7 && divideBy11 != 0) {\n                counts.putIfAbsent(divideBy11, counts.getOrElse(divideBy11,\
    \ 0) + 1)\n            }\n        }\n        counts.values.sum", "        val\
    \ counts = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until n){\n  \
    \          val remainder = i % 11\n            val isFizz = (remainder == 0)\n\
    \            val isBuzz = (remainder == 6)\n            val isFizzBuzz = (isFizz\
    \ && isBuzz)\n            if(isFizzBuzz){\n                counts(i) = 1\n   \
    \         }\n        }\n        counts.values.sum", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ == 7l)\
    \ + 1", "        val count = mutable.HashMap.empty[Long, Int]\n        for(i <-\
    \ 0 until n){\n            val remainder = n % 10\n            if(remainder ==\
    \ 7){\n                val count = count.get(7l) match {\n                   \
    \ case Some(count) => count + 1\n                    case None => 1\n        \
    \        }\n                count.set(7l, count)\n            }\n            n\
    \ = n / 10\n        }\n        count.values.sum", "        val nums = mutable.ListBuffer(n)\n\
    \        val numsStr = nums.map(_.toString).mkString(\",\")\n        val numsStrArr\
    \ = numsStr.split(\",\")\n        val numsStrArrLen = numsStrArr.length\n    \
    \    val numsStrArrLenMinusOne = numsStrArrLen - 1\n        val numsStrArrLenMinusOneMinusOne\
    \ = numsStrArrLen - 2\n        val numsStrArrLenMinusOneMinusOneMinusOne = numsStrArrLen\
    \ - 3\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOne = numsStrArrLen\
    \ - 4\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOne = numsStrArrLen\
    \ - 5\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 6\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 7\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 8\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 9\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 10\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 11\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = numsStrArrLen - 12\n        val numsStrArrLenMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinus",
  "        val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 0 until n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n\
    \            }\n        }\n        nums.count(_ % 7 == 0)", "        val nums\
    \ = mutable.ListBuffer(n)\n        var count = 0\n        while (nums.nonEmpty)\
    \ {\n            val num = nums.head\n            if (num % 11 == 0 || num % 13\
    \ == 0) {\n                count += 1\n            }\n            nums -= num\n\
    \        }\n        count", "        val count = mutable.HashMap.empty[Long, Int]\n\
    \        for (i <- 1 to n) {\n            val remainder = n % i\n            if\
    \ (remainder == 0 || remainder == 11 || remainder == 13) {\n                val\
    \ count = count(i) + 1\n                count(i) = count\n            }\n    \
    \    }\n        count(n).lastOption.getOrElse(0)", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            if(i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ == 7l)",
  "        val counts = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n\
    \            val d = i % 11\n            val f = i % 13\n            if (d ==\
    \ 7 && f == 0) {\n                counts.update(i.toInt, counts.getOrElse(i, 0)\
    \ + 1l) \n            }\n        }\n        counts.values.sum", "        val nums\
    \ = mutable.ListBuffer(n).map(_.toString.toInt)\n        val numsLength = nums.length\n\
    \        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = numsLength - 1\n        val numsLength = numsLength\
    \ - 1\n        val numsLength = num", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val counts = mutable.HashMap.empty[Long, Int]\n        val\
    \ divisors = mutable.HashSet.empty[Long]\n        divisors.add(11)\n        divisors.add(13)\n\
    \        for(i <- 0 until n){\n            val remainder = i % 11\n          \
    \  val remainder2 = i % 13\n            if(remainder == 7 && remainder2 == 7){\n\
    \                counts(i) = counts.getOrElse(i, 0) + 1\n            }\n     \
    \   }\n        counts.toSeq.sortBy(_._1).reverse.head._2", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until n){\n         \
    \   val d = i % 11\n            val e = (i % 13) + 1\n            counts.put(d,\
    \ e)\n        }\n        counts.filter(_._2 == 7).length", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        divisors += 11\n        divisors += 13\n        divisors += 7\n     \
    \   divisors.foreach(divisor => count += (n / divisor).toLong)\n        count.values.sum",
  "        val nums = mutable.ArrayBuffer(n).map(_.toInt)\n        val counts = mutable.ArrayBuffer(nums.size)\n\
    \        for (i <- 0 until nums.size) {\n            val num = nums(i)\n     \
    \       if (num % 11 == 0 || num % 13 == 0) {\n                counts(i) = 1\n\
    \            }\n            else {\n                counts(i) = 0\n          \
    \  }\n        }\n        counts.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        for (i <-\
    \ 0 until n) divisors += (i / 11l) :: (i / 13l)\n        for (i <- 0 until divisors.size)\
    \ {\n            val divisor = divisors(i)\n            if (n % divisor == 0)\
    \ counts += (divisor -> 1) else counts += (divisor -> 0)\n        }\n        counts.foldLeft(0l)((acc,\
    \ (divisor, count)) => acc + count * (divisor / 11l) * (divisor / 13l))", "  \
    \      val nums = mutable.ListBuffer(n)\n        val numsCopy = nums.toList\n\
    \        var count = 0\n        var i = 0\n        while (i < numsCopy.length)\
    \ {\n            if (numsCopy(i).isMultiple(11) || numsCopy(i).isMultiple(13))\
    \ {\n                numsCopy(i).divide(11)\n                numsCopy(i).divide(13)\n\
    \                count += 1\n            }\n            i += 1\n        }\n  \
    \      count", "        var count = 0\n        for (i <- 1 to n) {\n         \
    \   if (i % 11 == 0 || i % 13 == 0) {\n                count += 1\n          \
    \  }\n        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            val d = i % 11\n            if(d ==\
    \ 7){\n                nums += i\n            }\n        }\n        nums.toList.count(_\
    \ % 11 == 7)", "        val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 ||\
    \ _ % 13 == 0)\n        nums.count(_ == 7)", "        var count = 0\n        for(i\
    \ <- 1 to n){\n            if((i%11)==0||(i%13)==0){\n                count +=\
    \ 1\n            }\n        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val nums = mutable.ListBuffer(n)\n        var count = 0\n \
    \       while(nums.nonEmpty) {\n            val num = nums.head\n            nums\
    \ -= num\n            val remainder = num % 11\n            if(remainder == 7)\
    \ {\n                count += 1\n            }\n            val remainder2 = num\
    \ % 13\n            if(remainder2 == 7) {\n                count += 1\n      \
    \      }\n        }\n        count", "        val count = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        val\
    \ divisors = List(11, 13)\n        divisors.foreach { divisor =>\n           \
    \ val divisorCount = digits.count(divisor % _)\n            if (divisorCount >\
    \ 0) count += divisorCount\n        }\n        count.sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n           \
    \ val remainder = i % 11\n            val divideBy11 = remainder == 0\n      \
    \      val divideBy13 = remainder == 1\n            if(divideBy11 || divideBy13)\
    \ {\n                counts(i) = counts.getOrElse(i, 0) + 1\n            }\n \
    \       }\n        counts.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) nums += i\n        val numsSet = nums.toSet\n  \
    \      val numsSet2 = numsSet.filter(_ % 11 == 0 || _ % 13 == 0)\n        numsSet2.size",
  "        var count = 0\n        var remainder = n\n        while (remainder != 0)\
    \ {\n            if (remainder % 11 == 0 || remainder % 13 == 0) {\n         \
    \       count += 1\n            }\n            remainder = remainder / 10\n  \
    \      }\n        count", "        var count = 0\n        var remainder = n\n\
    \        while (remainder > 0) {\n            val remainderDigit = remainder %\
    \ 10\n            if (remainderDigit == 7) {\n                count += 1\n   \
    \         }\n            remainder = remainder / 10\n        }\n        count",
  "        val ns = n.toString.toInt\n        val nm = n % 11\n        val nn = n\
    \ % 13\n        val nm = nm / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11\n        val nn = nn / 13\n        val ns = ns\
    \ / 11\n        val nn = nn / 13\n        val ns = ns / 11\n        val nn = nn\
    \ / 13\n        val ns = ns / 11", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val count = mutable.HashMap[Int, Int]()\n        for(i <-\
    \ 0 until n){\n            val remainder = n % 10\n            if(remainder ==\
    \ 7){\n                count(remainder) += 1\n            }\n            n /=\
    \ 10\n        }\n        count.values.sum", "        var count = 0\n        var\
    \ remainder = n\n        while (remainder != 0) {\n            if (remainder %\
    \ 11 == 0 || remainder % 13 == 0) {\n                count += 1\n            }\n\
    \            remainder = remainder / 10\n        }\n        count", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for(i <- 0 until n){\n            val digit = i % 10\n       \
    \     if(digit == 7){\n                counts(i) = counts.getOrElse(i, 0) + 1\n\
    \            }\n        }\n        counts.toList.maxBy(_._2)._1", "        val\
    \ nums = mutable.ListBuffer[Long]()\n        val numsLessThanN = mutable.ListBuffer[Long]()\n\
    \        val numsLessThanNLessThanN = mutable.ListBuffer[Long]()\n        val\
    \ numsLessThanNLessThanNLessThanN = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanNLessThanN\
    \ = mutable.ListBuffer[Long]()\n        val numsLess", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ == 7l)",
  "        val counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashSet[Int]()\n\
    \        divisors += 11\n        divisors += 13\n        divisors.foreach(divisor\
    \ => {\n            val remainder = n % divisor\n            n /= divisor\n  \
    \          if (remainder == 0) counts += divisor -> 1\n        })\n        counts.values.sum",
  "        val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n    \
    \        if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n        \
    \    }\n        }\n        nums.count(_ % 7 == 0)", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        divisors +=\
    \ 11l\n        divisors += 13l\n        divisors.foreach(d => counts += (n / d\
    \ -> 1))\n        divisors.foreach(d => counts += (n % d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => counts += (d -> 1))\n\
    \        divisors.foreach(d => counts += (d -> 1))\n        divisors.foreach(d\
    \ => counts += (d -> 1))\n        divisors.foreach(d => ", "        val nums =\
    \ mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until n){\n            if(i\
    \ % 11 == 0 || i % 13 == 0){\n                nums += i\n            }\n     \
    \   }\n        nums.count(7)", "        val count = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashSet[Long]()\n        divisors.add(11)\n  \
    \      divisors.add(13)\n        divisors.add(7)\n        divisors.add(5)\n  \
    \      divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n   \
    \     divisors.add(10)\n        divisors.add(6)\n        divisors.add(4)\n   \
    \     divisors.add(2)\n        divisors.add(8)\n        divisors.add(7)\n    \
    \    divisors.add(1)\n        divisors.add(0)\n        divisors.add(0)\n     \
    \   divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n      \
    \  divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n       \
    \ divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n\
    \        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n \
    \       divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n  \
    \      divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n   \
    \     divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n    \
    \    divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n     \
    \   divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n      \
    \  divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n       \
    \ divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n\
    \        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n \
    \       divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n  \
    \      divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n   \
    \     divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n    \
    \    divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n     \
    \   divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n      \
    \  divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n       \
    \ divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n\
    \        divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n \
    \       divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n  \
    \      divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n   \
    \     divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n    \
    \    divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n     \
    \   divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n      \
    \  divisors.add(0)\n        divisors.add(0)\n        divisors.add(0)\n        ",
  "        val n1 = n % 11\n        val n2 = n % 13\n        val n3 = n / 11\n   \
    \     val n4 = n / 13\n        val n5 = n / 25\n        val n6 = n / 37\n    \
    \    val n7 = n / 53\n        val n8 = n / 67\n        val n9 = n / 83\n     \
    \   val n10 = n / 91\n        val n11 = n / 101\n        val n12 = n / 111\n \
    \       val n13 = n / 131\n        val n14 = n / 151\n        val n15 = n / 171\n\
    \        val n16 = n / 191\n        val n17 = n / 211\n        val n18 = n / 221\n\
    \        val n19 = n / 241\n        val n20 = n / 261\n        val n21 = n / 271\n\
    \        val n22 = n / 281\n        val n23 = n / 291\n        val n24 = n / 301\n\
    \        val n25 = n / 311\n        val n26 = n / 321\n        val n27 = n / 331\n\
    \        val n28 = n / 341\n        val n29 = n / 351\n        val n30 = n / 361\n\
    \        val n31 = n / 371\n        val n32 = n / 381\n        val n33 = n / 391\n\
    \        val n34 = n / 401\n        val n35 = n / 411\n        val n36 = n / 421\n\
    \        val n37 = n / 431\n        val n38 = n / 441\n        val n39 = n / 451\n\
    \        val n40 = n / 461\n        val n41 = n / 471\n        val n42 = n / 481\n\
    \        val n43 = n / 491\n        val n44 = n / 501\n        val n45 = n / 511\n\
    \        val n46 = n / 521\n        val n47 = n / 531\n        val n48 = n / 541\n\
    \        val n49 = n / 551\n        val n50 = n / 561\n        val n51 = n / 571\n\
    \        val n52 = n / 581\n        val n53 = n / 591\n        val n54 = n / 601\n\
    \        val n", "        val counts = mutable.HashMap[Int, Int]()\n        val\
    \ divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    val counts = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n \
    \           val digit = i % 10\n            if (digit == 7) {\n              \
    \  counts.update(i.toInt, counts.getOrElse(i, 0) + 1l) \n            }\n     \
    \   }\n        counts.values.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val divisors = mutable.HashSet.empty[Long]\n        divisors\
    \ += 11\n        divisors += 13\n        divisors.foreach(divisor => {\n     \
    \       val remainder = n % divisor\n            val remainderCount = if (remainder\
    \ == 0) 1 else 0\n            count += (divisor -> remainderCount)\n        })\n\
    \        count.values.sum", "        val count = mutable.HashMap.empty[Long, Int]\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        for\
    \ (i <- 0 until digits.length) {\n            val digit = digits(i)\n        \
    \    if (digit == 7) {\n                val count = count(digit)\n           \
    \     if (count == 0) count(digit) = 1 else count(digit) += 1\n            }\n\
    \        }\n        count(7).toLong", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 0 until n){\n            val remainder = i % 11\n \
    \           val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13){\n    \
    \            counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n\
    \        counts.values.sum", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ isFizz = (remainder == 0)\n            val isBuzz = (remainder == 6)\n     \
    \       val isFizzBuzz = isFizz && isBuzz\n            if(isFizzBuzz) {\n    \
    \            counts.update(i.toInt, counts.getOrElse(i.toInt, 0) + 1l) \n    \
    \        }\n        }\n        counts(7)", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) nums += i\n        nums.count(_ % 11 == 0 || _ %\
    \ 13 == 0)", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n           \
    \     nums += i\n            }\n        }\n        nums.count(_ % 7 == 0)", " \
    \       val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until\
    \ n){\n            val remainder = i % 11\n            val isDivisibleBy11 = remainder\
    \ == 0\n            val isDivisibleBy13 = remainder == 1\n            if(isDivisibleBy11\
    \ || isDivisibleBy13){\n                val digit = i % 10\n                if(count.contains(digit)){\n\
    \                    count(digit) += 1\n                }else{\n             \
    \       count(digit) = 1\n                }\n            }\n        }\n      \
    \  count.values.sum", "        val counts = mutable.HashMap[Int, Int]()\n    \
    \    val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n){\n\
    \            val remainder = i % 11\n            val isFizz = (remainder == 0)\n\
    \            val isBuzz = (remainder == 6)\n            if(isFizz && !isBuzz)\
    \ count += i -> 1\n            else if(isBuzz) count += i -> 2\n            else\
    \ count += i -> 0\n        }\n        count.values.sum", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for(i <- 1 to n){\n            val remainder\
    \ = i % 11\n            val isFizz = (remainder == 0)\n            val isBuzz\
    \ = (remainder == 6)\n            if(isFizz && !isBuzz){\n                counts(i)\
    \ = 1\n            }\n            else if(isBuzz){\n                counts(i)\
    \ = 2\n            }\n            else{\n                counts(i) = 0\n     \
    \       }\n        }\n        counts.values.sum", "        val nums = mutable.ListBuffer(n)\n\
    \        var count = 0\n        while (count < nums.size) {\n            if (nums(count).isMultipleOf[11]\
    \ || nums(count).isMultipleOf[13]) {\n                nums(count) = nums(count).divide[11]\n\
    \                count += 1\n            } else {\n                nums(count)\
    \ = nums(count).divide[13]\n                count += 1\n            }\n      \
    \  }\n        nums.toList.length", "        val nums = mutable.ListBuffer(n)\n\
    \        val result = mutable.ListBuffer[Long]()\n        while(nums.nonEmpty)\
    \ {\n            val num = nums.head\n            val remainder = num % 11\n \
    \           val remainder2 = num % 13\n            if(remainder == 7 || remainder2\
    \ == 7) {\n                result += 1\n            }\n            nums -= num\n\
    \        }\n        result.length", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val counts = mutable.HashMap.empty[Long, Int]\n        val\
    \ divisors = mutable.HashSet.empty[Long]\n        val divisorsCount = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount4\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount8\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount12\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount16\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount20\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount24\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount28\
    \ = mutable.HashMap.", "        val nums = mutable.ArrayBuffer(n).map(_.toInt)\n\
    \        val counts = mutable.ArrayBuffer.fill(nums.length)(0)\n        for (i\
    \ <- 0 until nums.length) {\n            val d = nums(i) % 11\n            if\
    \ (d == 0 || d == 13) counts(i) += 1\n        }\n        nums.map(_.toString).map(_.length).sum",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n)\
    \ {\n            val remainder = n % i\n            if (remainder == 0 || remainder\
    \ == 11 || remainder == 13) {\n                counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        counts.values.sum", "        val nums\
    \ = mutable.ListBuffer(n)\n        var count = 0\n        while(nums.nonEmpty)\
    \ {\n            val num = nums.head\n            nums -= num\n            if(num\
    \ % 11 == 0 || num % 13 == 0) {\n                count += 1\n            }\n \
    \       }\n        count", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val count = mutable.HashMap.empty[Long, Int]\n        for(i\
    \ <- 0 until n){\n            val remainder = i % 11\n            if(remainder\
    \ == 0 || remainder == 13){\n                val digit = i % 10\n            \
    \    if(count.contains(digit)){\n                    count(digit) += 1\n     \
    \           }\n                else {\n                    count(digit) = 1\n\
    \                }\n            }\n        }\n        count.values.sum", "   \
    \     val fizzBuzz = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        val divisorsSet = mutable.Set[Long]()\n        divisorsSet += 11l\n \
    \       divisorsSet += 13l\n        divisorsSet += 17l\n        divisorsSet +=\
    \ 19l\n        divisorsSet += 21l\n        divisorsSet += 23l\n        divisorsSet\
    \ += 25l\n        divisorsSet += 27l\n        divisorsSet += 29l\n        divisorsSet\
    \ += 31l\n        divisorsSet += 33l\n        divisorsSet += 35l\n        divisorsSet\
    \ += 37l\n        divisorsSet += 39l\n        divisorsSet += 41l\n        divisorsSet\
    \ += 43l\n        divisorsSet += 45l\n        divisorsSet += 47l\n        divisorsSet\
    \ += 49l\n        divisorsSet += 51l\n        divisorsSet += 53l\n        divisorsSet\
    \ += 55l\n        divisorsSet += 57l\n        divisorsSet += 59l\n        divisorsSet\
    \ += 61l\n        divisorsSet += 63l\n        divisorsSet += 65l\n        divisorsSet\
    \ += 67l\n        divisorsSet += 69l\n        divisorsSet += 71l\n        divisorsSet\
    \ += 73l\n        divisorsSet += 75l\n        divisorsSet += 77l\n        divisorsSet\
    \ += 79l\n        divisorsSet += 81l\n        divisorsSet += 83l\n        divisorsSet\
    \ += 85l\n        divisorsSet += 87l\n        divisorsSet += 89l\n        divisorsSet\
    \ += 91l\n        divisorsSet += 93l\n        divisorsSet += 95l\n        divisorsSet\
    \ += 97l\n        divisorsSet += 99l\n        divisorsSet += 101l\n        divisorsSet\
    \ += 103l\n        divisorsSet += 105l\n        divisorsSet += 107l\n        divisorsSet\
    \ += 109l\n        divisorsSet += 111l\n        divisorsSet += 113l\n        divisorsSet\
    \ += 115l\n        divisorsSet += 117l\n        divisorsSet += 119l\n        divisorsSet\
    \ += 121l\n        divisorsSet += 123l\n        divisorsSet += 125l\n        divisorsSet\
    \ += 127l\n        divisors", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        var count = 0\n        for (i <- 0 until n) {\n           \
    \ if (i % 11 == 0 || i % 13 == 0) {\n                count += 1\n            }\n\
    \        }\n        count", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        for (i <- 0 until n) {\n            val digit = i % 10\n            if\
    \ (digit == 7) {\n                counts.put(i, counts.getOrElse(i, 0) + 1l) \n\
    \            }\n        }\n        counts.values.sum", "        var count = 0\n\
    \        var remainder = n % 11\n        while(n >= 13) {\n            count +=\
    \ 1\n            remainder = n % 13\n            n -= 13\n        }\n        if(remainder\
    \ == 7) {\n            count += 1\n        }\n        count", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashSet[Int]()\n\
    \        divisors += 11\n        divisors += 13\n        divisors ++= n.toString.reverse.grouped(3).map(_.toInt).toSet\n\
    \        divisors.foreach { divisor =>\n            val remainder = n % divisor\n\
    \            n /= divisor\n            if (remainder == 0) counts(divisor) +=\
    \ 1\n        }\n        counts.values.sum", "        var count = 0\n        var\
    \ remainder = n\n        while (remainder > 0) {\n            count += 1\n   \
    \         if (remainder % 11 == 0 || remainder % 13 == 0) {\n                count\
    \ += 1\n            }\n            remainder = remainder / 10\n        }\n   \
    \     count", "        val counts = mutable.HashMap.empty[Long, Int]\n       \
    \ for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n       \
    \         counts.putIfAbsent(i, 0)\n                counts(i) += 1\n         \
    \   }\n        }\n        counts.filter(_._2 == 1).length", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount5 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount9 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount13 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount17 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount21 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount25 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount28 = mutable.HashMap.empty", "        val nums\
    \ = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n          \
    \  if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n            }\n\
    \        }\n        nums.count(_ % 7 == 0)", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount2 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount3 = mutable.HashSet.empty[Long]\n        val divisorsCount4\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount5 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount6 = mutable.HashSet.empty[Long]\n        val divisorsCount7\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount8 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount9 = mutable.HashSet.empty[Long]\n        val divisorsCount10\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount11 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount12 = mutable.HashSet.empty[Long]\n        val divisorsCount13\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount14 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount15 = mutable.HashSet.empty[Long]\n        val divisorsCount16\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount17 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount18 = mutable.HashSet.empty[Long]\n        val divisorsCount19\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount20 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount21 = mutable.HashSet.empty[Long]\n        val divisorsCount22\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount23 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount24 = mutable.HashSet.empty[Long]\n        val divisorsCount25\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount26 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount27 = mutable.HashSet.empty[Long]\n        val divisorsCount28\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount29 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount30 = mutable.HashSet.empty[Long]\n        val divisorsCount31\
    \ = mutable.HashSet.empty[Long]\n        val ", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n   \
    \     digits.foreach(x => count.update(x, count.getOrElse(x, 0l) + 1))\n     \
    \   count.get(7l) match {\n            case Some(x) => x\n            case None\
    \ => 0l\n        }", "        val fizzBuzz = mutable.Set[Long]()\n        val\
    \ fizzBuzzSet = mutable.Set[Long]()\n        val fizzBuzzSet2 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet3 = mutable.Set[Long]()\n        val fizzBuzzSet4 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet5 = mutable.Set[Long]()\n        val fizzBuzzSet6 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet7 = mutable.Set[Long]()\n        val fizzBuzzSet8 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet9 = mutable.Set[Long]()\n        val fizzBuzzSet10 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet11 = mutable.Set[Long]()\n        val fizzBuzzSet12 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet13 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet14 = mutable.Set[Long]()\n        val fizzBuzzSet15 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet16 = mutable.Set[Long]()\n        val fizzBuzzSet17 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet18 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet19 = mutable.Set[Long]()\n        val fizzBuzzSet20 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet21 = mutable.Set[Long]()\n        val fizzBuzzSet22 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet23 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet24 = mutable.Set[Long]()\n        val fizzBuzzSet25 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet26 = mutable.Set[Long]()\n        val fizzBuzzSet27 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet28 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet29 = mutable.Set[Long]()\n        val fizzBuzzSet30 = mutable.Set[Long]()",
  "        val count = mutable.MutableList[Long]()\n        val divisors = mutable.MutableList[Long]()\n\
    \        val divisorsCount = mutable.MutableList[Long]()\n        val divisorsCount2\
    \ = mutable.MutableList[Long]()\n        val divisorsCount3 = mutable.MutableList[Long]()\n\
    \        val divisorsCount4 = mutable.MutableList[Long]()\n        val divisorsCount5\
    \ = mutable.MutableList[Long]()\n        val divisorsCount6 = mutable.MutableList[Long]()\n\
    \        val divisorsCount7 = mutable.MutableList[Long]()\n        val divisorsCount8\
    \ = mutable.MutableList[Long]()\n        val divisorsCount9 = mutable.MutableList[Long]()\n\
    \        val divisorsCount10 = mutable.MutableList[Long]()\n        val divisorsCount11\
    \ = mutable.MutableList[Long]()\n        val divisorsCount12 = mutable.MutableList[Long]()\n\
    \        val divisorsCount13 = mutable.MutableList[Long]()\n        val divisorsCount14\
    \ = mutable.MutableList[Long]()\n        val divisorsCount15 = mutable.MutableList[Long]()\n\
    \        val divisorsCount16 = mutable.MutableList[Long]()\n        val divisorsCount17\
    \ = mutable.MutableList[Long]()\n        val divisorsCount18 = mutable.MutableList[Long]()\n\
    \        val divisorsCount19 = mutable.MutableList[Long]()\n        val divisorsCount20\
    \ = mutable.MutableList[Long]()\n        val divisorsCount21 = mutable.MutableList[Long]()\n\
    \        val divisorsCount22 = mutable.MutableList[Long]()\n        val divisorsCount23\
    \ = mutable.MutableList[Long]()\n        val divisorsCount24 = mutable.MutableList[Long]()\n\
    \        val divisorsCount25 = mutable.MutableList[Long]()\n        val divisorsCount26\
    \ = mutable.MutableList[Long]()\n        val divisorsCount27 = mutable.MutableList[Long]()\n\
    \        val divisorsCount28 = mutable.MutableList[Long]()\n        val divisorsCount29\
    \ = mutable.MutableList[Long]()\n        val divisorsCount30 = mutable.MutableList[Long]()\n\
    \        val divisorsCount31 = mutable.MutableList[Long]()\n        val divisorsCount32\
    \ = mutable.MutableList[Long]()\n        val divisorsCount33 = mutable.MutableList[Long]()\n\
    \        val divisorsCount34 = ", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ ==\
    \ 7l) + 1", "        val counts = mutable.HashMap[Int, Int]()\n        for(i <-\
    \ 1 to n) {\n            val div = i % 11\n            val mod10 = i % 10\n  \
    \          val mod13 = i % 13\n            if(mod10 == 7) {\n                if(mod13\
    \ == 0) {\n                    counts(div) += 1\n                }\n         \
    \   }\n        }\n        counts.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val remainder = i % 11\n  \
    \          val divisor = if (remainder == 0) 11\n            else 13\n       \
    \     val digit = i % divisor\n            if (digit==7) {\n                counts.put(divisor,\
    \ counts.getOrElse(divisor, 0) + 1)\n            }\n        }\n        counts.values.sum",
  "        var count = 0\n        var lastDigit = 7\n        var lastN = 0\n     \
    \   var lastN1 = 0\n        var lastN2 = 0\n        var lastN3 = 0\n        var\
    \ lastN4 = 0\n        var lastN5 = 0\n        var lastN6 = 0\n        var lastN7\
    \ = 0\n        var lastN8 = 0\n        var lastN9 = 0\n        var lastN10 = 0\n\
    \        var lastN11 = 0\n        var lastN12 = 0\n        var lastN13 = 0\n \
    \       var lastN14 = 0\n        var lastN15 = 0\n        var lastN16 = 0\n  \
    \      var lastN17 = 0\n        var lastN18 = 0\n        var lastN19 = 0\n   \
    \     var lastN20 = 0\n        var lastN21 = 0\n        var lastN22 = 0\n    \
    \    var lastN23 = 0\n        var lastN24 = 0\n        var lastN25 = 0\n     \
    \   var lastN26 = 0\n        var lastN27 = 0\n        var lastN28 = 0\n      \
    \  var lastN29 = 0\n        var lastN30 = 0\n        var lastN31 = 0\n       \
    \ var lastN32 = 0\n        var lastN33 = 0\n        var lastN34 = 0\n        var\
    \ lastN35 = 0\n        var lastN36 = 0\n        var lastN37 = 0\n        var lastN38\
    \ = 0\n        var lastN39 = 0\n        var lastN40 = 0\n        var lastN41 =\
    \ 0\n        var lastN42 = 0\n        var lastN43 = 0\n        var lastN44 = 0\n\
    \        var lastN45 = 0\n        var lastN46 = 0\n        var lastN47 = 0\n \
    \       var lastN48 = 0\n        var lastN49 = 0\n        var lastN50 = 0\n  \
    \      var lastN51 = 0\n        var lastN52 = 0\n        var lastN53 = 0\n   \
    \     var lastN54 = 0\n        var lastN55 = 0\n        var lastN56 = 0\n    \
    \    var lastN57 = 0\n        var lastN58 = 0\n        var lastN59 = 0\n     \
    \   var lastN60 = 0\n        var lastN61 = 0\n        var lastN62 = 0\n      \
    \  var lastN63 = 0\n        var lastN64 = 0\n        var lastN65 = 0\n       \
    \ var lastN66 = 0\n        var lastN67 = 0\n        var lastN68 = 0\n        var\
    \ lastN69 = 0\n        var lastN70 = 0\n        var lastN71 = 0\n        var lastN72\
    \ = 0\n        var lastN73 = 0\n        var lastN74 = 0\n        var lastN75 =\
    \ 0\n        var lastN76 = 0\n        var lastN77 = 0\n        var lastN78 = 0\n\
    \        var lastN79 = 0\n        var lastN80 = 0\n        var lastN81 = 0\n \
    \       var lastN82 = 0\n        var lastN83 = 0\n        var ", "        val\
    \ nums = mutable.ListBuffer(n)\n        val numsSet = nums.toSet\n        val\
    \ numsSetSize = numsSet.size\n        val numsSetIterator = numsSet.iterator\n\
    \        val numsSetIteratorSize = numsSetIterator.size\n        val numsSetIteratorIterator\
    \ = numsSetIterator.iterator\n        val numsSetIteratorIteratorSize = numsSetIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIterator = numsSetIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorSize = numsSetIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIterator = numsSetIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIterator = numsSetIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator =\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIterator.iterator\n        val\
    \ numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize = numsSetIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n   \
    \     val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorSize\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.size\n\
    \        val numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = numsSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator.iterator\n\
    \        val numsSetIteratorIteratorIterator", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val count = mutable.ListBuffer.empty[Long]\n        val digits\
    \ = n.toString.reverse.grouped(3).map(_.toInt)\n        for (i <- 0 until digits.length)\n\
    \            if (digits(i) == 7)\n                count += digits(i)\n       \
    \ count.length", "        val counts = mutable.HashMap.empty[Long, Int]\n    \
    \    for (i <- 0 until n) {\n            val remainder = n % 10\n            if\
    \ (remainder == 7 || remainder == 11 || remainder == 13) {\n                counts.put(n,\
    \ counts.getOrElse(n,0)+1)\n            }\n            n /= 10\n        }\n  \
    \      counts.values.sum", "        val nums = mutable.ListBuffer[Long]()\n  \
    \      for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n  \
    \              nums += i\n            }\n        }\n        nums.count(_ == 7l)",
  "        val result = mutable.ListBuffer[Long]()\n        for(i <- 0 until n){\n\
    \            val remainder = n % 10\n            val isDivisibleBy11Or13 = remainder\
    \ == 7 || remainder == 11 || remainder == 13\n            if(isDivisibleBy11Or13){\n\
    \                result += i\n            }\n        }\n        result.size",
  "        val count = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n   \
    \         if((i%11==0)&&(i%13==0)){\n                count += i\n            }\n\
    \        }\n        count.length", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        for (i <-\
    \ 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n              \
    \  divisors += i\n            }\n            val digit = i % 10\n            if\
    \ (count.contains(digit)) {\n                count(digit) += 1\n            }\
    \ else {\n                count(digit) = 1\n            }\n        }\n       \
    \ divisors.toList.map(i => s\"$i\").foldLeft(0)((acc, x) => acc + x)", "     \
    \   val count = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount5 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount9 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount13 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount17 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount21 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount25 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount28 = mutable.HashMap.empty", "        val nums\
    \ = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n        val count\
    \ = nums.count(_ % 7 == 0)\n        count", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val remainder = n % i\n     \
    \       if (remainder == 0 || remainder == 11 || remainder == 13) {\n        \
    \        counts.putIfAbsent(remainder, counts.getOrElse(remainder, 0) + 1)\n \
    \           }\n        }\n        counts.getOrElse(7, 0)", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        digits.foreach { digit =>\n            val key = digit * 11 + digit\n\
    \            val value = count.get(key)\n            if (value == null) {\n  \
    \              count(key) = 1\n            } else {\n                count(key)\
    \ = value + 1\n            }\n        }\n        count.values.sum", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n        \
    \    val remainder = i % 11\n            val isDivisibleBy11 = remainder == 0\n\
    \            val isDivisibleBy13 = remainder == 1\n            if (isDivisibleBy11\
    \ || isDivisibleBy13) {\n                counts.update(i.toInt, counts.get (i.toInt)\
    \ + 1)\n            }\n        }\n        counts.values.sum", "        var count\
    \ = 0\n        for(i <- 0 until n){\n            if((i%11 == 0) || (i%13 == 0)){\n\
    \                count += 1\n            }\n        }\n        count", "     \
    \   val nums = mutable.ListBuffer[Long]()\n        for(i <- 1 to n){\n       \
    \     if((i % 11) == 0 || (i % 13) == 0){\n                nums += i\n       \
    \     }\n        }\n        nums.count(_ == 7)", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        divisors.add(11)\n\
    \        divisors.add(13)\n        divisors.add(7)\n        divisors.add(5)\n\
    \        divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n \
    \       divisors.add(13)\n        divisors.add(11)\n        divisors.add(7)\n\
    \        divisors.add(5)\n        divisors.add(3)\n        divisors.add(1)\n \
    \       divisors.add(9)\n        divisors.add(13)\n        divisors.add(11)\n\
    \        divisors.add(7)\n        divisors.add(5)\n        divisors.add(3)\n \
    \       divisors.add(1)\n        divisors.add(9)\n        divisors.add(13)\n \
    \       divisors.add(11)\n        divisors.add(7)\n        divisors.add(5)\n \
    \       divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n  \
    \      divisors.add(13)\n        divisors.add(11)\n        divisors.add(7)\n \
    \       divisors.add(5)\n        divisors.add(3)\n        divisors.add(1)\n  \
    \      divisors.add(9)\n        divisors.add(13)\n        divisors.add(11)\n \
    \       divisors.add(7)\n        divisors.add(5)\n        divisors.add(3)\n  \
    \      divisors.add(1)\n        divisors.add(9)\n        divisors.add(13)\n  \
    \      divisors.add(11)\n        divisors.add(7)\n        divisors.add(5)\n  \
    \      divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n   \
    \     divisors.add(13)\n        divisors.add(11)\n        divisors.add(7)\n  \
    \      divisors.add(5)\n        divisors.add(3)\n        divisors.add(1)\n   \
    \     divisors.add(9)\n        divisors.add(13)\n        divisors.add(11)\n  \
    \      divisors.add(7)\n        divisors.add(5)\n        divisors.add(3)\n   \
    \     divisors.add(1)\n        divisors.add(9)\n        divisors.add(13)\n   \
    \     divisors.add(11)\n        divisors.add(7)\n        divisors.add(5)\n   \
    \     divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n    \
    \    divisors.add(13)\n        divisors.add(11)\n        divisors.add(7)\n   \
    \     divisors.add(5)\n        divisors.add(3)\n        divisors.add(1)\n    \
    \    divisors.add(9)\n        divisors.add(13)\n        divisors.add(11)\n   \
    \     divisors.add(7)\n        divisors.add(5)\n        divisors.add(3)\n    \
    \    divisors.add(1)\n        divisors.add(9)\n        divisors.add(13)\n    \
    \    divisors.add(11)\n        divisors.add(7)\n        divisors.add(5)\n    \
    \    divisors.add(3)\n        divisors.add(1)\n        divisors.add(9)\n     \
    \   divisors.add(13)\n        divisors.add(11)\n        divisors.add(7)\n    \
    \    divisors.add(5)\n        divisors.add(3)\n        divisors.add(1)\n", " \
    \       val count = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until\
    \ n){\n            val remainder = i % 11\n            val remainder2 = i % 13\n\
    \            if(remainder == 7 && remainder2 == 0){\n                count(i)\
    \ = 1\n            }\n        }\n        count.size", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        for(i <- 1 to n) {\n            val remainder = i % 11\n    \
    \        val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             val digit = i % 10\n                if(isDivisibleBy11) {\n    \
    \                if(count.contains(digit)) {\n                        count(digit)\
    \ += 1\n                    } else {\n                        count(digit) = 1\n\
    \                    }\n                } else {\n                    if(count.contains(digit))\
    \ {\n                        count(digit) += 1\n                    } else {\n\
    \                        count(digit) = 1\n                    }\n           \
    \     }\n            }\n        }\n        count.values.sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n          \
    \  val d = i % 11\n            if (d == 7) {\n                counts(d) = counts(d)\
    \ + 1\n            }\n        }\n        counts.values.sum", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        for(i <- 1 to n){\n            val d\
    \ = i % 11\n            if(d == 7 || d == 13){\n                counts(d) = counts(d)\
    \ + 1\n            }\n        }\n        counts.values.sum", "        val result\
    \ = mutable.ListBuffer[Long]()\n        val digits = n.toString.toCharArray\n\
    \        for (i <- 0 until digits.length) {\n            if (digits(i) == '7')\
    \ {\n                if (digits(i-1) == '7') {\n                    result +=\
    \ n\n                }\n            }\n        }\n        result.size", "    \
    \    val counts = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n)\
    \ {\n            val remainder = n % i\n            if (remainder == 0 || remainder\
    \ == 11 || remainder == 13) {\n                counts.putIfAbsent(remainder, counts.getOrElse(remainder,\
    \ 0) + 1)\n            }\n        }\n        counts.values.sum", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val remainder = i % 11\n  \
    \          if (remainder == 0 || remainder == 7) {\n                counts(i)\
    \ = counts.getOrElse(i, 0) + 1\n            }\n            divisors(i) = divisors.getOrElse(i,\
    \ 0) + 1\n        }\n        divisors.toList.maxBy(_._2)._1", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        divisors += 11\n        divisors += 13\n        divisors += 7\n     \
    \   divisors.foreach(divisor => {\n            val remainder = n % divisor\n \
    \           count += (remainder -> 1)\n            n /= divisor\n        })\n\
    \        count.values.sum", "        var count = 0\n        for(i <- 0 until n){\n\
    \            if((i%11 == 0) || (i%13 == 0)){\n                count += 1\n   \
    \         }\n        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 1 to n) {\n            val div = i % 11\n            val di\
    \ = i % 13\n            if(div == 0 || di == 0) {\n                nums += i\n\
    \            }\n        }\n        nums.count(_ == 7l)", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n            val remainder\
    \ = n % i\n            if (remainder == 0 || remainder == 11 || remainder == 13)\
    \ {\n                counts.update(i.toInt, counts.getOrElse(i, 0) + 1l)\n   \
    \         }\n        }\n        counts.values.sum", "        val result = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            val remainder = n % i\n            if(remainder\
    \ == 0 || remainder == 11 || remainder == 13) {\n                result += i\n\
    \            }\n        }\n        result.size", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <-\
    \ 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n                nums\
    \ += i\n            }\n        }\n        nums.count(_ % 7 == 0)", "        val\
    \ counts = mutable.HashMap.empty[Long, Int]\n        for(i <- 0 until n){\n  \
    \          val remainder = i % 11\n            val remainder2 = i % 13\n     \
    \       if(remainder == 7 && remainder2 == 7){\n                counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n            }\n        }\n        counts.toSeq.maxBy(_._2)._1", "  \
    \      val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n  \
    \          }\n        }\n        nums.count(_ == 7l) ", "        val counts =\
    \ mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n            val\
    \ remainder = n % i\n            if(remainder == 0 || remainder == 11 || remainder\
    \ == 13) {\n                counts(i) = counts.getOrElse(i, 0) + 1\n         \
    \   }\n        }\n        counts.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             counts.update(i,counts.getOrElse(i,0)+1)\n            }\n      \
    \  }\n        counts.values.sum", "        val ns = n.toString.toInt\n       \
    \ val nm = n % 11\n        val nd = n % 13\n        val nr = n % 17\n        val\
    \ nt = n % 19\n        val nv = n % 31\n        val nw = n % 37\n        val nx\
    \ = n % 41\n        val ny = n % 43\n        val nz = n % 47\n        val ns =\
    \ ns % 11\n        val nm = nm % 13\n        val nd = nd % 17\n        val nr\
    \ = nr % 19\n        val nt = nt % 31\n        val nv = nv % 37\n        val nw\
    \ = nw % 41\n        val nx = nx % 43\n        val ny = ny % 47\n        val nz\
    \ = nz % 11\n        val ns = ns % 13\n        val nm = nm % 17\n        val nd\
    \ = nd % 19\n        val nr = nr % 31\n        val nt = nt % 37\n        val nv\
    \ = nv % 41\n        val nw = nw % 43\n        val nx = nx % 47\n        val ny\
    \ = ny % 11\n        val nz = nz % 13\n        val ns = ns % 17\n        val nm\
    \ = nm % 19\n        val nd = nd % 31\n        val nr = nr % 37\n        val nt\
    \ = nt % 41\n        val nv = nv % 43\n        val nw = nw % 47\n        val nx\
    \ = nx % 11\n        val ny = ny % 13\n        val nz = nz % 17\n        val ns\
    \ = ns % 19\n        val nm = nm % 31\n        val nd = nd % 37\n        val nr\
    \ = nr % 41\n        val nt = nt % 43\n        val nv = nv % 47\n        val nw\
    \ = nw % 11\n        val nx = nx % 13\n        val ny = ny % 17\n        val nz\
    \ = nz % 19\n        val ns = ns % 31\n        val nm = nm % 37\n        val nd\
    \ = nd % 41\n        val nr = nr % 43\n        val nt = nt % 47\n        val nv\
    \ = nv % 11\n        val nw = nw % 13\n        val nx = nx % 17\n        val ny\
    \ = ny % 19\n        val nz = nz % 31", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        divisors.add(11)\n\
    \        divisors.add(13)\n        divisors.add(7)\n        divisors.foreach(divisor\
    \ => counts += divisor)\n        val remainder = n % divisors.last\n        val\
    \ remainderCount = counts.get(remainder)\n        if (remainderCount == 0) 1\n\
    \        else if (remainderCount == 1) remainder\n        else (remainderCount\
    \ + 1)", "        val count = mutable.HashMap.empty[Long, Int]\n        for(i\
    \ <- 1 to n){\n            val remainder = i % 11\n            val divisor = i\
    \ % 13\n            if(remainder == 7 && divisor == 11 || divisor == 13){\n  \
    \              count.put(i.toLong, count.getOrElse(i, 0) + 1l) \n            }\n\
    \        }\n        count.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val d = i % 11\n           \
    \ val e = (i % 13) + 1\n            counts += (d -> e)\n        }\n        counts.values.sum",
  "        val result = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        val divisorsSet = mutable.Set[Long]()\n        val divisorsSet2 = mutable.Set[Long]()\n\
    \        divisorsSet += 11l\n        divisorsSet += 13l\n        divisorsSet2\
    \ += 11l\n        divisorsSet2 += 13l\n        divisorsSet2 += 17l\n        divisorsSet2\
    \ += 19l\n        divisorsSet2 += 21l\n        divisorsSet2 += 23l\n        divisorsSet2\
    \ += 25l\n        divisorsSet2 += 27l\n        divisorsSet2 += 29l\n        divisorsSet2\
    \ += 31l\n        divisorsSet2 += 33l\n        divisorsSet2 += 35l\n        divisorsSet2\
    \ += 37l\n        divisorsSet2 += 39l\n        divisorsSet2 += 41l\n        divisorsSet2\
    \ += 43l\n        divisorsSet2 += 45l\n        divisorsSet2 += 47l\n        divisorsSet2\
    \ += 49l\n        divisorsSet2 += 51l\n        divisorsSet2 += 53l\n        divisorsSet2\
    \ += 55l\n        divisorsSet2 += 57l\n        divisorsSet2 += 59l\n        divisorsSet2\
    \ += 61l\n        divisorsSet2 += 63l\n        divisorsSet2 += 65l\n        divisorsSet2\
    \ += 67l\n        divisorsSet2 += 69l\n        divisorsSet2 += 71l\n        divisorsSet2\
    \ += 73l\n        divisorsSet2 += 75l\n        divisorsSet2 += 77l\n        divisorsSet2\
    \ += 79l\n        divisorsSet2 += 81l\n        divisorsSet2 += 83l\n        divisorsSet2\
    \ += 85l\n        divisorsSet2 += 87l\n        divisorsSet2 += 89l\n        divisorsSet2\
    \ += 91l\n        divisorsSet2 += 93l\n        divisorsSet2 += 95l\n        divisorsSet2\
    \ += 97l\n        divisorsSet2 += 99l\n        divisorsSet2 += 101l\n        divisorsSet2\
    \ += 103l\n        divisorsSet2 += 105l\n        divisorsSet2 += 107l\n      \
    \  divisorsSet2 += 109l\n        divisor", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isFizz = (remainder == 0)\n            val isBuzz = (remainder ==\
    \ 6)\n            val isFizzBuzz = if (isFizz) isBuzz else false\n           \
    \ if (isFizzBuzz) {\n                counts(i) = 1\n            }\n          \
    \  else {\n                counts(i) = counts.getOrElse(i, 0) + 1\n          \
    \  }\n        }\n        counts(7)", "        val count = mutable.ListBuffer[Long]()\n\
    \        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n        val\
    \ divisors = List(11, 13)\n        for (divisor <- divisors) {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) {\n               \
    \ count += divisor\n            }\n            n /= divisor\n        }\n     \
    \   count.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n                nums\
    \ += i\n            }\n        }\n        nums.count(_ == 7l)", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        for(i <- 0 until n){\n            val\
    \ remainder = i % 11\n            val isFizz = (remainder == 0)\n            val\
    \ isBuzz = (remainder == 6)\n            val isFizzBuzz = (isFizz && isBuzz)\n\
    \            if(isFizzBuzz){\n                counts(i) = 1\n            }\n \
    \       }\n        counts.values.sum", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n \
    \               nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val count = mutable.HashMap.empty[Long, Int]\n        val divisors\
    \ = mutable.HashSet.empty[Long]\n        divisors += 11\n        divisors += 13\n\
    \        divisors += 7\n        divisors.foreach(divisor => {\n            val\
    \ remainder = n % divisor\n            if (remainder == 0) {\n               \
    \ val key = divisor\n                val value = count.get(key)\n            \
    \    if (value == null) count.put(key, 1) else count.put(key, value + 1)\n   \
    \         }\n        })\n        count.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 0 until n){\n            val remainder = n % 10\n \
    \           val digit = remainder % 10\n            val count = counts.getOrElse(digit,\
    \ 0)\n            counts.put(digit, count + 1)\n            n /= 10\n        }\n\
    \        val count = counts.getOrElse(7, 0)\n        count", "        var count\
    \ = 0\n        var remainder = n\n        while (remainder > 0) {\n          \
    \  if (remainder % 11 == 0 || remainder % 13 == 0) {\n                count +=\
    \ 1\n            }\n            remainder = remainder / 10\n        }\n      \
    \  count", "        val counts = mutable.HashMap.empty[Long, Int]\n        val\
    \ divisors = mutable.HashSet.empty[Long]\n        val divisorsCount = mutable.HashMap.empty[Long,\
    \ Int]\n        divisors.update(n/11, 1l)\n        divisors.update(n/13, 1l)\n\
    \        divisorsCount.update(n/11, 0)\n        divisorsCount.update(n/13, 0)\n\
    \        divisorsCount.update(n/11, 1)\n        divisorsCount.update(n/13, 1)\n\
    \        divisorsCount.update(n/11, 2)\n        divisorsCount.update(n/13, 2)\n\
    \        divisorsCount.update(n/11, 3)\n        divisorsCount.update(n/13, 3)\n\
    \        divisorsCount.update(n/11, 4)\n        divisorsCount.update(n/13, 4)\n\
    \        divisorsCount.update(n/11, 5)\n        divisorsCount.update(n/13, 5)\n\
    \        divisorsCount.update(n/11, 6)\n        divisorsCount.update(n/13, 6)\n\
    \        divisorsCount.update(n/11, 7)\n        divisorsCount.update(n/13, 7)\n\
    \        divisorsCount.update(n/11, 8)\n        divisorsCount.update(n/13, 8)\n\
    \        divisorsCount.update(n/11, 9)\n        divisorsCount.update(n/13, 9)\n\
    \        divisorsCount.update(n/11, 10)\n        divisorsCount.update(n/13, 10)\n\
    \        divisorsCount.update(n/11, 11)\n        divisorsCount.update(n/13, 11)\n\
    \        divisorsCount.update(n/11, 12)\n        divisorsCount.update(n/13, 12)\n\
    \        divisorsCount.update(n/11, 13)\n        divisorsCount.update(n/13, 13)\n\
    \        divisorsCount.update(n/11, 14)\n        divisorsCount.update(n/13, 14)\n\
    \        divisorsCount.update(n/11, 15)\n        divisorsCount.update(n/13, 15)\n\
    \        divisorsCount.update(n/11, 16)\n        divisorsCount.update(n/13, 16)\n\
    \        divisorsCount.update(n/11, 17)\n        divisorsCount.update(n/13, 17)\n\
    \        divisorsCount.update(n/11, 18)\n        divisorsCount.update(n/13, 18)\n\
    \        divisorsCount.update(n/11, 19)\n        divisorsCount.update(n/13, 19)\n\
    \        divisorsCount.update", "        val nums = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for(i <- 1 to n){\n            val remainder =\
    \ i % 11\n            if(remainder == 0 || remainder == 13){\n               \
    \ nums += i\n                count += 1\n            }\n        }\n        nums.toList.count(_\
    \ == 7l)", "        val count = mutable.HashMap.empty[Long, Int]\n        for\
    \ (i <- 0 until n) {\n            val div = i / 11\n            val mod = i %\
    \ 11\n            if (div == 0 || div == 13) {\n                if (mod != 7)\
    \ {\n                    count.put(i, count.getOrElse(i, 0) + 1l) \n         \
    \       }\n            }\n        }\n        count.values.sum", "        var count\
    \ = 0\n        for(i <- 0 until n) {\n            if((i.toString.toInt) mod 11\
    \ == 0 || (i.toString.toInt) mod 13 == 0) {\n                count += 1\n    \
    \        }\n        }\n        count", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = n % i\n    \
    \        if(remainder == 0 || remainder == 11 || remainder == 13) {\n        \
    \        counts(i) = counts.getOrElse(i, 0) + 1\n            }\n        }\n  \
    \      counts.values.sum", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val counts = mutable.HashMap.empty[Long, Int]\n        val\
    \ divisors = mutable.HashSet.empty[Long]\n        val divisorsCount = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount4\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount8\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount12\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount16\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount20\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount24\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount28\
    \ = mutable.HashMap.", "        val count = mutable.HashMap.empty[Long, Int]\n\
    \        val divisors = mutable.HashSet.empty[Long]\n        divisors.add(11)\n\
    \        divisors.add(13)\n        divisors.add(7)\n        divisors.foreach(divisor\
    \ => {\n            val remainder = n % divisor\n            val newCount = count\
    \ + (remainder -> (count + 1))\n            count = newCount\n        })\n   \
    \     count.values.sum", "        val counts = mutable.HashMap[Int, Int]()\n \
    \       for(i <- 1 to n){\n            val remainder = i % 11\n            val\
    \ isFizz = (remainder == 0)\n            val isBuzz = (remainder == 6)\n     \
    \       val isFizzBuzz = (isFizz && isBuzz)\n            if(isFizzBuzz){\n   \
    \             counts.update(i,1)\n            }\n        }\n        counts.filter(_._2\
    \ == 1).length", "        val counts = mutable.HashMap.empty[Long, Int]\n    \
    \    for(i <- 1 to n) {\n            val remainder = i % 11\n            val isFizz\
    \ = (remainder == 0)\n            val isBuzz = (remainder == 6)\n            val\
    \ isFizzBuzz = (isFizz && isBuzz)\n            if(isFizzBuzz) {\n            \
    \    counts.put(i, counts.getOrElse(i, 0) + 1l) \n            }\n        }\n \
    \       counts.values.sum", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val counts = mutable.HashMap[Int, Int]()\n        val divisors\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount2 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount3 = mutable.HashMap[Int, Int]()\n        val divisorsCount4 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount5 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount6 = mutable.HashMap[Int, Int]()\n        val divisorsCount7 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount8 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount9 = mutable.HashMap[Int, Int]()\n        val divisorsCount10 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount11 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount12 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount13 = mutable.HashMap[Int, Int]()\n        val divisorsCount14 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount15 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount16 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount17 = mutable.HashMap[Int, Int]()\n        val divisorsCount18 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount19 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount20 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount21 = mutable.HashMap[Int, Int]()\n        val divisorsCount22 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount23 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount24 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount25 = mutable.HashMap[Int, Int]()\n        val divisorsCount26 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount27 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount28 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount29 = mutable.HashMap[Int, Int]()\n        val divisors", "    \
    \    val nums = mutable.ListBuffer(n)\n        val numsCount = mutable.ListBuffer[Long]()\n\
    \        val numsCount2 = mutable.ListBuffer[Long]()\n        val numsCount3 =\
    \ mutable.ListBuffer[Long]()\n        val numsCount4 = mutable.ListBuffer[Long]()\n\
    \        val numsCount5 = mutable.ListBuffer[Long]()\n        val numsCount6 =\
    \ mutable.ListBuffer[Long]()\n        val numsCount7 = mutable.ListBuffer[Long]()\n\
    \        val numsCount8 = mutable.ListBuffer[Long]()\n        val numsCount9 =\
    \ mutable.ListBuffer[Long]()\n        val numsCount10 = mutable.ListBuffer[Long]()\n\
    \        val numsCount11 = mutable.ListBuffer[Long]()\n        val numsCount12\
    \ = mutable.ListBuffer[Long]()\n        val numsCount13 = mutable.ListBuffer[Long]()\n\
    \        val numsCount14 = mutable.ListBuffer[Long]()\n        val numsCount15\
    \ = mutable.ListBuffer[Long]()\n        val numsCount16 = mutable.ListBuffer[Long]()\n\
    \        val numsCount17 = mutable.ListBuffer[Long]()\n        val numsCount18\
    \ = mutable.ListBuffer[Long]()\n        val numsCount19 = mutable.ListBuffer[Long]()\n\
    \        val numsCount20 = mutable.ListBuffer[Long]()\n        val numsCount21\
    \ = mutable.ListBuffer[Long]()\n        val numsCount22 = mutable.ListBuffer[Long]()\n\
    \        val numsCount23 = mutable.ListBuffer[Long]()\n        val numsCount24\
    \ = mutable.ListBuffer[Long]()\n        val numsCount25 = mutable.ListBuffer[Long]()\n\
    \        val numsCount26 = mutable.ListBuffer[Long]()\n        val numsCount27\
    \ = mutable.ListBuffer[Long]()\n        val numsCount28 = mutable.ListBuffer[Long]()\n\
    \        val numsCount29 = mutable.ListBuffer[Long]()\n        val numsCount30\
    \ = mutable.ListBuffer[Long]()\n        val numsCount31 = mutable.ListBuffer[Long]()\n\
    \        val numsCount32 = mutable.ListBuffer[Long]()\n        val num", "   \
    \     val nums = mutable.ListBuffer(n)\n        var count = 0\n        while(nums.nonEmpty)\
    \ {\n            val n = nums.head\n            nums -= n\n            if((n %\
    \ 11) == 0) count += n\n            else if((n % 13) == 0) count += n\n      \
    \  }\n        count", "        val fizzBuzz = mutable.Set[Long]()\n        val\
    \ fizzBuzzSet = mutable.Set[Long]()\n        val fizzBuzzSet2 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet3 = mutable.Set[Long]()\n        val fizzBuzzSet4 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet5 = mutable.Set[Long]()\n        val fizzBuzzSet6 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet7 = mutable.Set[Long]()\n        val fizzBuzzSet8 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet9 = mutable.Set[Long]()\n        val fizzBuzzSet10 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet11 = mutable.Set[Long]()\n        val fizzBuzzSet12 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet13 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet14 = mutable.Set[Long]()\n        val fizzBuzzSet15 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet16 = mutable.Set[Long]()\n        val fizzBuzzSet17 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet18 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet19 = mutable.Set[Long]()\n        val fizzBuzzSet20 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet21 = mutable.Set[Long]()\n        val fizzBuzzSet22 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet23 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet24 = mutable.Set[Long]()\n        val fizzBuzzSet25 = mutable.Set[Long]()\n\
    \        val fizzBuzzSet26 = mutable.Set[Long]()\n        val fizzBuzzSet27 =\
    \ mutable.Set[Long]()\n        val fizzBuzzSet28 = mutable.Set[Long]()\n     \
    \   val fizzBuzzSet29 = mutable.Set[Long]()\n        val fizzBuzzSet30 = mutable.Set[Long]()",
  "        val nums = mutable.ArrayBuffer.empty[Long]\n        for (i <- 1 to n) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n  \
    \          }\n        }\n        nums.count(_ == 7l)", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        for (i <- 1 to n) {\n            val remainder = i % 11\n  \
    \          if (remainder == 0 || remainder == 13) {\n                val digit\
    \ = i % 10\n                if (digit==7) {\n                    count.get(digit)\
    \ match {\n                        case Some(x) => count.put(digit, x + 1)\n \
    \                       case None => count.put(digit, 1)\n                   \
    \ }\n                }\n            }\n        }\n        count.values.sum", " \
    \       val nums = mutable.ArrayBuffer(n).map(_.toInt)\n        val count = mutable.HashSet[Int]()\n\
    \        for(i <- 0 until nums.length)\n            if(nums(i) == 7 && nums(i)\
    \ != 0 && nums(i) != 11)\n                count.add(nums(i))\n        count.size",
  "        val count = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount2 = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount", "        val ns = List(n, (n/11l), (n/13l))\n\
    \        val nm = ns.map(n => n % 11l).count(_ == 7)\n        nm", "        val\
    \ counts = mutable.HashMap[Int, Int]()\n        for(i <- 0 until n){\n       \
    \     val remainder = i % 11\n            if(remainder == 0 || remainder == 13){\n\
    \                val digit = i % 10\n                if(counts.contains(digit)){\n\
    \                    counts(digit) += 1\n                } else {\n          \
    \          counts.put(digit, 1)\n                }\n            }\n        }\n\
    \        counts.values.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 0 until n) {\n            val digit = i % 10\n     \
    \       if (digit == 7) {\n                val count = count.get(digit)\n    \
    \            if (count == null) count(0)\n                else count(count + 1)\n\
    \            }\n            else {\n                val count = count.get(digit)\n\
    \                if (count == null) count(0)\n                else count(count\
    \ + 1)\n            }\n        }\n        count.values.sum", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n\
    \        val divisorsCount = mutable.HashMap[Int, Int]()\n        val divisorsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisors", "        val counts = mutable.HashMap[Int, Int]()\n\
    \        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val nums = mutable.ListBuffer[Long]()\n        var count\
    \ = 0\n        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                nums += i\n                count += 1\n            }\n  \
    \      }\n        count match {\n            case 0 => 0\n            case 1 =>\
    \ 1\n            case _ => nums.size\n        }", "        var count = 0\n   \
    \     var nums = scala.collection.mutable.ListBuffer[Long]()\n        for (i <-\
    \ 0 until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n              \
    \  nums += i\n            }\n        }\n        for (i <- 0 until nums.size) {\n\
    \            if (nums(i) == 7) {\n                count += 1\n            }\n\
    \        }\n        count", "        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until n) nums += i\n        val counts = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until nums.size) {\n            val num = nums(i)\n     \
    \       if (num % 11 == 0 || num % 13 == 0) {\n                counts += num\n\
    \            }\n        }\n        counts.sum", "        val count = mutable.HashMap.empty[Long,\
    \ Long]\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n   \
    \     digits.foreach { digit =>\n            val key = digit.productPrefix(digit.productPrefix\
    \ % 11).toLong\n            val value = digit.productPrefix(digit.productPrefix\
    \ % 13).toLong\n            count += key -> value\n        }\n        count.values.sum",
  "        val nums = mutable.ListBuffer(n).filter(_ % 11 == 0 || _ % 13 == 0)\n \
    \       val count = nums.count(_ % 7 == 0)\n        count", "        val counts\
    \ = mutable.HashMap[Int, Int]()\n        val divisors = mutable.HashSet[Int]()\n\
    \        val divisorsCount = mutable.HashMap[Int, Int]()\n        val divisorsCount2\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount3 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount4 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount5 = mutable.HashMap[Int, Int]()\n        val divisorsCount6 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount7 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount8 = mutable.HashMap[Int, Int]()\n        val divisorsCount9 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount10 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount11 = mutable.HashMap[Int, Int]()\n        val divisorsCount12 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount13 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount14 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount15 = mutable.HashMap[Int, Int]()\n        val divisorsCount16 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount17 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount18 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount19 = mutable.HashMap[Int, Int]()\n        val divisorsCount20 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount21 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount22 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount23 = mutable.HashMap[Int, Int]()\n        val divisorsCount24 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount25 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount26 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount27 = mutable.HashMap[Int, Int]()\n        val divisorsCount28 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount29 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount", "        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            count += 1\n            remainder\
    \ = remainder / 10\n        }\n        if (n % 11 == 0 || n % 13 == 0) {\n   \
    \         count += 1\n        }\n        count", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n) {\n            val remainder = i % 11\n            val\
    \ remainder2 = i % 13\n            if(remainder == 7 && remainder2 == 7) {\n \
    \               nums += i\n            }\n        }\n        nums.toList.size",
  "        val nums = mutable.ListBuffer[Long]()\n        for (i <- 1 to n) {\n  \
    \          if (i % 11 == 0 || i % 13 == 0) {\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ == 7l)", "        val nums = mutable.ListBuffer(n)\n\
    \        val numsStr = nums.map(_.toString).mkString(\",\")\n        val numsArr\
    \ = nums.map(_.toInt).toArray\n        val numsArr = numsArr.map(_.toChar)\n \
    \       val numsArr = numsArr.filter(c => c != '7')\n        val numsArr = numsArr.map(c\
    \ => if (c == '1') \"11\" else if (c == '2') \"13\" else \"11\")\n        val\
    \ numsArr = numsArr.filter(c => c != '11' && c != '13')\n        val numsArr =\
    \ numsArr.map(c => if (c == '1') \"11\" else if (c == '2') \"13\" else \"11\"\
    )\n        val numsArr = numsArr.filter(c => c != '11' && c != '13')\n       \
    \ val numsArr = numsArr.map(c => if (c == '1') \"11\" else if (c == '2') \"13\"\
    \ else \"11\")\n        val numsArr = numsArr.filter(c => c != '11' && c != '13')\n\
    \        val numsArr = numsArr.map(c => if (c == '1') \"11\" else if (c == '2')\
    \ \"13\" else \"11\")\n        val numsArr = numsArr.filter(c => c != '11' &&\
    \ c != '13')\n        val numsArr = numsArr.map(c => if (c == '1') \"11\" else\
    \ if (c == '2') \"13\" else \"11\")\n        val numsArr = numsArr.filter(c =>\
    \ c != '11' && c != '13')\n        val numsArr = numsArr.map(c => if (c == '1')\
    \ \"11\" else if (c == '2') \"13\" else \"11\")\n        val numsArr = numsArr.filter(c\
    \ => c != '11' && c != '13')\n        val numsArr = numsArr.map(c => if (c ==\
    \ '1') \"11\" else if (c == '2') \"13\" else \"11\")\n        val numsArr = numsArr.filter(c\
    \ => c != '11' && c != '13')\n        val numsArr = numsArr.map(c => if (c ==\
    \ '1') \"11\" else if (c == '2') \"13\" else \"11\")\n        val numsArr = numsArr.filter(c\
    \ => c != '11' && c != '", "        val fizzBuzz = mutable.ListBuffer[Long]()\n\
    \        val divisors = mutable.ListBuffer[Long]()\n        val divisorsCount\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount2 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount3 = mutable.ListBuffer[Long]()\n        val divisorsCount4\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount5 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount6 = mutable.ListBuffer[Long]()\n        val divisorsCount7\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount8 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount9 = mutable.ListBuffer[Long]()\n        val divisorsCount10\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount11 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount12 = mutable.ListBuffer[Long]()\n        val divisorsCount13\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount14 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount15 = mutable.ListBuffer[Long]()\n        val divisorsCount16\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount17 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount18 = mutable.ListBuffer[Long]()\n        val divisorsCount19\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount20 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount21 = mutable.ListBuffer[Long]()\n        val divisorsCount22\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount23 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount24 = mutable.ListBuffer[Long]()\n        val divisorsCount25\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount26 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount27 = mutable.ListBuffer[Long]()\n        val divisorsCount28\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount29 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount30 = mutable.ListBuffer[Long]()\n        val divisorsCount31\
    \ = mutable.ListBuffer[Long]()\n", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        for (i <- 1 to n) {\n            val d = i % 11\n            if\
    \ (d == 7 || d == 13) {\n                counts.put(i, counts.getOrElse(i, 0)\
    \ + 1l)\n            }\n        }\n        counts.values.sum", "        var count\
    \ = 0\n        var digit = 7\n        while (n > 0) {\n            count += 1\n\
    \            if (n % 10 == digit) {\n                n /= 10\n               \
    \ count += 1\n            }\n            digit += 1\n        }\n        count",
  "        var count = 0\n        var remainder = n\n        while(n != 0) {\n   \
    \         count += 1\n            remainder = remainder / 10\n            if(remainder\
    \ % 11 == 0 || remainder % 13 == 0) {\n                count += 1\n          \
    \  }\n        }\n        count", "        var count = 0\n        var remainder\
    \ = n\n        while (remainder > 0) {\n            if (remainder % 11 == 0 ||\
    \ remainder % 13 == 0) {\n                count += 1\n            }\n        \
    \    remainder = remainder / 10\n        }\n        count", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n           \
    \ val remainder = i % 11\n            val isFizz = (remainder == 0)\n        \
    \    val isBuzz = (remainder == 3)\n            if(isFizz && !isBuzz) {\n    \
    \            count(i) = 1\n            }\n            else if(isBuzz) {\n    \
    \            count(i) = count(i) + 1\n            }\n            else {\n    \
    \            count(i) = count(i) + 1\n            }\n        }\n        count(7).asInstanceOf[Long]",
  "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n\
    \            if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ % 7 == 0)", "        val counts =\
    \ mutable.HashMap[Int, Int]()\n        for(i <- 1 to n) {\n            val remainder\
    \ = i % 11\n            val isFizz = (remainder == 0)\n            val isBuzz\
    \ = (remainder == 6)\n            val isFizzBuzz = (isFizz && isBuzz)\n      \
    \      if(isFizzBuzz) {\n                counts.update(i,1)\n            }\n \
    \       }\n        counts.values.sum"]
stop_tokens:
- "\n    }\n"
