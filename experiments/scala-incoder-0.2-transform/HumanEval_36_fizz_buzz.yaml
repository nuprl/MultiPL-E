name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        var count = 0\n        var remainder = n\n        while (remainder\
    \ > 0) {\n            count += 1\n            if (remainder % 11 == 0 || remainder\
    \ % 13 == 0) {\n                count += 1\n            }\n            remainder\
    \ = remainder / 10\n        }\n        count", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for(i <- 1 to n){\n            if(i % 11 == 0 || i % 13 == 0){\n    \
    \            nums += i\n            }\n        }\n        nums.count(_ % 7 ==\
    \ 0)", "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors\
    \ = mutable.HashSet.empty[Long]\n        for(i <- 1 to n) {\n            val d\
    \ = i.toString.toInt\n            if(d % 11 == 0 || d % 13 == 0) {\n         \
    \       divisors += i\n            }\n            counts(i) = counts.getOrElse(i,\
    \ 0) + 1\n        }\n        divisors.toList.map(d => counts.getOrElse(d, 0)).sum",
  "        val fizzBuzz = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val divisorsCount = mutable.Map[Long, Long]()\n        val divisorsCount2\
    \ = mutable.Map[Long, Long]()\n        val divisorsCount3 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount4 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount5 = mutable.Map[Long, Long]()\n        val divisorsCount6 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount7 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount8 = mutable.Map[Long, Long]()\n        val divisorsCount9 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount10 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount11 = mutable.Map[Long, Long]()\n        val divisorsCount12 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount13 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount14 = mutable.Map[Long, Long]()\n        val divisorsCount15 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount16 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount17 = mutable.Map[Long, Long]()\n        val divisorsCount18 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount19 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount20 = mutable.Map[Long, Long]()\n        val divisorsCount21 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount22 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount23 = mutable.Map[Long, Long]()\n        val divisorsCount24 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount25 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount26 = mutable.Map[Long, Long]()\n        val divisorsCount27 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount28 = mutable.Map[Long, Long]()\n        val\
    \ divisorsCount29 = mutable.Map[Long, Long]()\n        val divisorsCount30 = mutable.Map[Long,\
    \ Long]()\n        val divisorsCount31 = mutable.Map[Long, Long]()\n        val ",
  "        val fizzBuzz = mutable.Set[Long]()\n        val divisors = mutable.Set[Long]()\n\
    \        val divisorsCount = mutable.Set[Long]()\n        val divisorsCount2 =\
    \ mutable.Set[Long]()\n        val divisorsCount3 = mutable.Set[Long]()\n    \
    \    val divisorsCount4 = mutable.Set[Long]()\n        val divisorsCount5 = mutable.Set[Long]()\n\
    \        val divisorsCount6 = mutable.Set[Long]()\n        val divisorsCount7\
    \ = mutable.Set[Long]()\n        val divisorsCount8 = mutable.Set[Long]()\n  \
    \      val divisorsCount9 = mutable.Set[Long]()\n        val divisorsCount10 =\
    \ mutable.Set[Long]()\n        val divisorsCount11 = mutable.Set[Long]()\n   \
    \     val divisorsCount12 = mutable.Set[Long]()\n        val divisorsCount13 =\
    \ mutable.Set[Long]()\n        val divisorsCount14 = mutable.Set[Long]()\n   \
    \     val divisorsCount15 = mutable.Set[Long]()\n        val divisorsCount16 =\
    \ mutable.Set[Long]()\n        val divisorsCount17 = mutable.Set[Long]()\n   \
    \     val divisorsCount18 = mutable.Set[Long]()\n        val divisorsCount19 =\
    \ mutable.Set[Long]()\n        val divisorsCount20 = mutable.Set[Long]()\n   \
    \     val divisorsCount21 = mutable.Set[Long]()\n        val divisorsCount22 =\
    \ mutable.Set[Long]()\n        val divisorsCount23 = mutable.Set[Long]()\n   \
    \     val divisorsCount24 = mutable.Set[Long]()\n        val divisorsCount25 =\
    \ mutable.Set[Long]()\n        val divisorsCount26 = mutable.Set[Long]()\n   \
    \     val divisorsCount27 = mutable.Set[Long]()\n        val divisorsCount28 =\
    \ mutable.Set[Long]()\n        val divisorsCount29 = mutable.Set[Long]()\n   \
    \     val divisorsCount30 = mutable.Set[Long]()\n        val divisorsCount31 =\
    \ mutable.Set[Long]()\n        val divisorsCount32 = mutable.Set[Long]()\n   \
    \     val divisorsCount33 = mutable.Set[Long]()\n        val divisor", "     \
    \   val nums = mutable.ArrayBuffer.empty[Long]\n        for(i <- 0 until n){\n\
    \            if(i % 11 == 0 || i % 13 == 0){\n                nums += i\n    \
    \        }\n        }\n        nums.count(_ % 7 == 0)", "        val nums = mutable.ListBuffer[Long]()\n\
    \        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                nums += i\n            }\n        }\n        nums.count(_ % 7\
    \ == 0)", "        val count = mutable.HashMap.empty[Long, Long]\n        for(i\
    \ <- 0 until n){\n            val remainder = i % 11\n            val divisor\
    \ = i % 13\n            if(remainder == 7 && divisor == 11 || divisor == 13){\n\
    \                count.put(i.toLong, count.getOrElse(i, 0l) + 1)\n           \
    \ }\n        }\n        count.values.sum", "        val nums = mutable.ListBuffer[Long]()\n\
    \        var count = 0\n        for (i <- 1 to n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                nums += i\n                count += 1\n\
    \            }\n        }\n        nums.toList.count(_ == 7l)", "        val count\
    \ = mutable.HashMap[Int, Int]()\n        val digits = n.toString.reverse.grouped(3).map(_.toInt)\n\
    \        digits.foreach{ case (digit, count) =>\n            if (digit == 7)\n\
    \                count.update(digit, 1)\n        }\n        count.values.toList.sum",
  "        val counts = mutable.HashMap.empty[Long, Int]\n        val divisors = mutable.HashSet.empty[Long]\n\
    \        for (i <- 1 to n) {\n            val remainder = i % 11\n           \
    \ if (remainder == 0 || remainder == 13) {\n                divisors += i\n  \
    \          }\n            counts += i -> counts.getOrElse(i, 0) + 1\n        }\n\
    \        divisors.toList.map(i => counts.getOrElse(i, 0)).sum", "        val counts\
    \ = mutable.HashMap.empty[Long, Int]\n        for(i <- 1 to n) {\n           \
    \ val remainder = i % 11\n            val isFizz = (remainder == 0)\n        \
    \    val isBuzz = (remainder == 6)\n            val isFizzBuzz = (isFizz && isBuzz)\n\
    \            if(isFizzBuzz) {\n                counts.put(i, 1)\n            }\n\
    \        }\n        counts.values.sum", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount2 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount3 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount4 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount5\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount6 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount7 = mutable.HashMap.empty[Long, Int]\n      \
    \  val divisorsCount8 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount9\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount10 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount11 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount12 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount13\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount14 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount15 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount16 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount17\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount18 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount19 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount20 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount21\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount22 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount23 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount24 = mutable.HashMap.empty[Long, Int]\n        val divisorsCount25\
    \ = mutable.HashMap.empty[Long, Int]\n        val divisorsCount26 = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisorsCount27 = mutable.HashMap.empty[Long, Int]\n     \
    \   val divisorsCount28 = mutable.HashMap.", "        val counts = mutable.HashMap.empty[Long,\
    \ Int]\n        val divisors = mutable.HashSet.empty[Long]\n        val divisorsCount\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount2 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount3 = mutable.HashSet.empty[Long]\n        val divisorsCount4\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount5 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount6 = mutable.HashSet.empty[Long]\n        val divisorsCount7\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount8 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount9 = mutable.HashSet.empty[Long]\n        val divisorsCount10\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount11 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount12 = mutable.HashSet.empty[Long]\n        val divisorsCount13\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount14 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount15 = mutable.HashSet.empty[Long]\n        val divisorsCount16\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount17 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount18 = mutable.HashSet.empty[Long]\n        val divisorsCount19\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount20 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount21 = mutable.HashSet.empty[Long]\n        val divisorsCount22\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount23 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount24 = mutable.HashSet.empty[Long]\n        val divisorsCount25\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount26 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount27 = mutable.HashSet.empty[Long]\n        val divisorsCount28\
    \ = mutable.HashSet.empty[Long]\n        val divisorsCount29 = mutable.HashSet.empty[Long]\n\
    \        val divisorsCount30 = mutable.HashSet.empty[Long]\n        val divisorsCount31\
    \ = mutable.HashSet.empty[Long]\n        ", "        val count = mutable.HashMap[Int,\
    \ Int]()\n        for(i <- 1 to n) {\n            val remainder = i % 11\n   \
    \         val isDivisibleBy11 = remainder == 0\n            val isDivisibleBy13\
    \ = remainder == 1\n            if(isDivisibleBy11 || isDivisibleBy13) {\n   \
    \             count(i) = 1\n            }\n        }\n        count.values.sum",
  "        val count = mutable.HashMap[Int, Int]()\n        for (i <- 1 to n) {\n\
    \            val digit = i % 10\n            if (digit == 7) {\n             \
    \   val count = count.getOrElse(digit, 0)\n                count(digit) += 1\n\
    \            }\n        }\n        count.values.sum", "        val counts = mutable.HashMap[Int,\
    \ Int]()\n        val divisors = mutable.HashMap[Int, Int]()\n        val divisorsCount\
    \ = mutable.HashMap[Int, Int]()\n        val divisorsCount2 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount3 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount4 = mutable.HashMap[Int, Int]()\n        val divisorsCount5 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount6 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount7 = mutable.HashMap[Int, Int]()\n        val divisorsCount8 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount9 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount10 = mutable.HashMap[Int, Int]()\n        val divisorsCount11 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount12 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount13 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount14 = mutable.HashMap[Int, Int]()\n        val divisorsCount15 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount16 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount17 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount18 = mutable.HashMap[Int, Int]()\n        val divisorsCount19 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount20 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount21 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount22 = mutable.HashMap[Int, Int]()\n        val divisorsCount23 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount24 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount25 = mutable.HashMap[Int, Int]()\n        val\
    \ divisorsCount26 = mutable.HashMap[Int, Int]()\n        val divisorsCount27 =\
    \ mutable.HashMap[Int, Int]()\n        val divisorsCount28 = mutable.HashMap[Int,\
    \ Int]()\n        val divisorsCount29 = mutable.HashMap[Int, Int]()\n        val\
    \ divisors", "        val nums = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 0 until n){\n            if(i % 11 == 0 || i % 13 == 0){\n              \
    \  nums += i\n            }\n        }\n        nums.count(_ % 7 == 0)", "   \
    \     val fizzBuzz = mutable.ListBuffer[Long]()\n        val divisors = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount = mutable.ListBuffer[Long]()\n        val divisorsCount2\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount3 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount4 = mutable.ListBuffer[Long]()\n        val divisorsCount5\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount6 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount7 = mutable.ListBuffer[Long]()\n        val divisorsCount8\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount9 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount10 = mutable.ListBuffer[Long]()\n        val divisorsCount11\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount12 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount13 = mutable.ListBuffer[Long]()\n        val divisorsCount14\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount15 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount16 = mutable.ListBuffer[Long]()\n        val divisorsCount17\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount18 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount19 = mutable.ListBuffer[Long]()\n        val divisorsCount20\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount21 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount22 = mutable.ListBuffer[Long]()\n        val divisorsCount23\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount24 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount25 = mutable.ListBuffer[Long]()\n        val divisorsCount26\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount27 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount28 = mutable.ListBuffer[Long]()\n        val divisorsCount29\
    \ = mutable.ListBuffer[Long]()\n        val divisorsCount30 = mutable.ListBuffer[Long]()\n\
    \        val divisorsCount31 = mutable.ListBuffer[Long]()\n", "        val count\
    \ = mutable.HashMap.empty[Long, Int]\n        for (i <- 1 to n) {\n          \
    \  if (i % 11 == 0 || i % 13 == 0) {\n                val key = i\n          \
    \      val value = count.get(key)\n                if (value == null) {\n    \
    \                count.put(key, 1)\n                } else {\n               \
    \     count.put(key, value + 1)\n                }\n            }\n        }\n\
    \        count.values.toList.max"]
stop_tokens:
- "\n    }\n"
