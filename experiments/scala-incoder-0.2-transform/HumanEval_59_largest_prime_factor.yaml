name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        val primes = mutable.ArrayBuffer(2l).fill(2l).map(x => x +\
    \ (x % n)).takeWhile(x => x < n)\n        primes.max", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter2 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter3 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter4\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter5 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter6 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter7\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter8 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter9 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter10\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter11 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter12 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter13\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter14 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter15 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter16\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter17 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter18 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter19\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter20 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter21 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter22\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter23 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter24 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter25\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter26 = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter27 = mutable.ListBuffer[Boolean]()\n        val isPrimeIter28\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter29", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.max",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i < n) {\n            if (isPrime(i)) {\n                factors\
    \ += i\n                primes += i\n                isPrime += true\n       \
    \     }\n            i += 1\n        }\n        val largestPrime = primes.max\n\
    \        factors.max", "        val factors = mutable.Set[Long]()\n        var\
    \ largestPrimeFactor = Long.MaxValue\n        var currentPrime = 1\n        while\
    \ (n > 0) {\n            if (n % currentPrime == 0) {\n                factors\
    \ += currentPrime\n                n /= currentPrime\n            } else {\n \
    \               currentPrime += 1\n            }\n        }\n        factors.toList.sortWith(_\
    \ < _).last", "        val primes = mutable.ArrayBuffer.empty[Long]\n        var\
    \ factor = 2\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                primes += factor\n                n /= factor\n         \
    \   }\n            else {\n                factor += 1\n            }\n      \
    \  }\n        primes.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ *\
    \ _).takeWhile(_ > 1).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 14)\n        val is", "        val primes\
    \ = mutable.ArrayBuffer(2l) \n        val factors = mutable.ArrayBuffer(2l)\n\
    \        for(i <- 2l to n by 2l) {\n            val isPrime = true\n         \
    \   for(j <- 2l to i by 2l) {\n                if(i % j == 0) isPrime = false\n\
    \            }\n            if(isPrime) primes += i\n            for(j <- 2l to\
    \ i by 2l) {\n                if(i % j != 0) factors += j\n            }\n   \
    \     }\n        primes.max", "        val primes = mutable.Set[Long]()\n    \
    \    val factors = mutable.Set[Long]()\n        val largestPrime = mutable.Set[Long]()\n\
    \        val largestPrimeFactor = mutable.Set[Long]()\n        val largestPrimeFactors\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCounts = mutable.Set[Long]()\n        val largestPrimeFactorsCountMax\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxs = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxMaxMax\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMax = mutable.Set[Long]()\n    \
    \    val largestPrimeFactorsCountMaxMaxMaxMaxs = mutable.Set[Long]()\n       \
    \ val largestPrimeFactorsCountMaxMaxMaxMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n      \
    \  val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMaxMaxs = ", "     \
    \   val factors = mutable.HashSet[Long]()\n        val maxFactor = mutable.Long.MaxValue\n\
    \        for(i <- 2 to n/2) {\n            if(n%i == 0) {\n                factors.add(i)\n\
    \                n /= i\n            }\n        }\n        factors.toList.sortWith(_\
    \ < _).last", "        val factors = mutable.ArrayBuffer.empty[Long]\n       \
    \ val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ %\
    \ 2 != 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter3 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter5 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter7 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter9 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter11 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile(_ % 2 != 0).iterator\n      \
    \  val isPrimeIter13 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(_ % 2 !=\
    \ 0).dropWhile(_ % 2 != 0).iterator\n        val isPrimeIter14 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(_ % 2 != 0).dropWhile", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++ (2l to n by 2l) filter { p => n % p != 0 }\n        primes.max", "      \
    \  val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePri", "        var maxFactor = Long.MinValue\n\
    \        var maxFactorPrime = Long.MinValue\n        var primeFactors = mutable.ListBuffer[Long]()\n\
    \        var isPrime = true\n        for (i <- 2 to n by 2) {\n            if\
    \ (n % i == 0) {\n                isPrime = false\n                break\n   \
    \         }\n        }\n        if (isPrime) {\n            primeFactors += n\n\
    \        }\n        for (i <- 3 to n by 2) {\n            if (n % i == 0) {\n\
    \                isPrime = false\n                break\n            }\n     \
    \   }\n        if (isPrime) {\n            primeFactors += n\n        }\n    \
    \    for (i <- 5 to n by 2) {\n            if (n % i == 0) {\n               \
    \ isPrime = false\n                break\n            }\n        }\n        if\
    \ (isPrime) {\n            primeFactors += n\n        }\n        for (i <- 7 to\
    \ n by 2) {\n            if (n % i == 0) {\n                isPrime = false\n\
    \                break\n            }\n        }\n        if (isPrime) {\n   \
    \         primeFactors += n\n        }\n        for (i <- 11 to n by 2) {\n  \
    \          if (n % i == 0) {\n                isPrime = false\n              \
    \  break\n            }\n        }\n        if (isPrime) {\n            primeFactors\
    \ += n\n        }\n        for (i <- 13 to n by 2) {\n            if (n % i ==\
    \ 0) {\n                isPrime = false\n                break\n            }\n\
    \        }\n        if (isPrime) {\n            primeFactors += n\n        }\n\
    \        for (i <- 17 to n by 2) {\n            if (n % i == 0) {\n          \
    \      isPrime = false\n                break\n            }\n        }\n    \
    \    if (isPrime) {\n            primeFactors += n\n        }\n        for (i\
    \ <- 19 to n by 2) {\n            if (n % i == 0) {\n                isPrime =\
    \ false\n                break\n            }\n        }\n        if (isPrime)\
    \ {\n            primeFactors += n\n        }\n        for (i <- 21 to n by 2)\
    \ {\n            if (n % i == 0) {\n                isPrime = false\n        \
    \        break\n            }\n        }\n        if (isPrime) {\n           \
    \ primeFactors += n\n        }\n        for (i <- 23 to n by 2) {\n          \
    \  if (n % i == 0) {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if (isPrime) {\n            primeFactors +=\
    \ n\n        }\n        for (i <- 29 to n by 2) {\n            if (n % i == 0)\
    \ {\n                isPrime = false\n                break\n            }\n \
    \       }\n        if (isPrime) {\n            primeFactors += n\n        }\n\
    \        for (i <- 31 to n by 2) {\n            if (n % i == 0) {\n          \
    \      isPrime = false\n                break\n            }\n        }\n    \
    \    if (isPrime) {\n            primeFactors += n\n        }\n        for (i\
    \ <- 37 to ", "        val factors = mutable.Set[Long]()\n        for(i <- 2 to\
    \ n by 2){\n            if(n%i == 0){\n                factors += i\n        \
    \    }\n        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29", "        val\
    \ primes = mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n  \
    \      val maxFactor = mutable.Set[Long]()\n        val maxFactors = mutable.Set[Long]()\n\
    \        val maxPrime = mutable.Set[Long]()\n        val maxPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactor = mutable.Set[Long]()\n        val maxPrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorsOfPrimeOfPrimes = mutable.Set[Long]()\n        val\
    \ maxPrimeFactorsOfPrimeOfPrimeOfPrimes = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimeOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPrimeOfPri",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrime = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n     \
    \   val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n     \
    \   val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n     \
    \   val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n     \
    \   val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n     \
    \   val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactorIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrimeFactorIndex = mutable.Array", "        val primes = mutable.Set[Long]()\n\
    \        val factors = mutable.Set[Long]()\n        val largestPrime = mutable.Set[Long]()\n\
    \        val largestPrimeFactor = mutable.Set[Long]()\n        val largestPrimeFactors\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCount = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCounts = mutable.Set[Long]()\n        val largestPrimeFactorsCountMax\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxs = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxMaxMax\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsCountMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMax = mutable.Set[Long]()\n    \
    \    val largestPrimeFactorsCountMaxMaxMaxMaxs = mutable.Set[Long]()\n       \
    \ val largestPrimeFactorsCountMaxMaxMaxMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n        val\
    \ largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n      \
    \  val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMax = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMaxs = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsCountMaxMaxMaxMaxMaxMaxMaxMaxMax = mutable.Set",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxFactor = mutable.ArrayBuffer.empty[Long]\n        val maxFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimes = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactors = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ maxPrimeFactorsIndex = mutable.ArrayBuffer.empty[Long]\n        val maxPrimeFactorsIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val ", "        val factors = mutable.Set[Long]()\n\
    \        val maxFactor = n / 2\n        while(n > 1) {\n            val factor\
    \ = 2\n            while(factor <= maxFactor) {\n                if(n % factor\
    \ == 0) {\n                    factors += factor\n                    n /= factor\n\
    \                }\n                factor += 1\n            }\n        }\n  \
    \      factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        var maxFactor = Long.MaxValue\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean",
  "        val factors = mutable.Set[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ factors.max", "        val factors = mutable.HashSet[Long]()\n        val primes\
    \ = mutable.HashSet[Long]()\n        val maxFactor = mutable.Long.MaxValue\n \
    \       val maxFactors = mutable.HashSet[Long]()\n        val primeFactors = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount = mutable.HashMap[Long, Long]()\n   \
    \     val primeFactorsCount2 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount3\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount4 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount5 = mutable.HashMap[Long, Long]()\n  \
    \      val primeFactorsCount6 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount7\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount8 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount9 = mutable.HashMap[Long, Long]()\n  \
    \      val primeFactorsCount10 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount11\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount12 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount13 = mutable.HashMap[Long, Long]()\n \
    \       val primeFactorsCount14 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount15\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount16 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount17 = mutable.HashMap[Long, Long]()\n \
    \       val primeFactorsCount18 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount19\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount20 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount21 = mutable.HashMap[Long, Long]()\n \
    \       val primeFactorsCount22 = mutable.HashMap[Long, Long]()\n        val primeFactorsCount23\
    \ = mutable.HashMap[Long, Long]()\n        val primeFactorsCount24 = mutable.HashMap[Long,\
    \ Long]()\n        val primeFactorsCount25 = mutable.HashMap[Long, Long]()\n \
    \       val primeFactorsCount26 = ", "        val primes = mutable.ArrayBuffer(2l)\
    \ ++ (2l to n.toInt)\n        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrime = primes.last\n        primes.takeWhile(p => p < n).foreach\
    \ { p =>\n            val factor = (n / p).toInt\n            factors += factor\n\
    \            if (factor > largestPrime) {\n                largestPrime = factor\n\
    \            }\n        }\n        largestPrime", "        val factors = mutable.HashSet[Long]()\n\
    \        val maxFactor = mutable.Long.MaxValue\n        val maxFactorIndex = -1\n\
    \        val maxFactorPrime = mutable.Long.MaxValue\n        val maxFactorPrimeIndex\
    \ = -1\n        for (i <- 2 to n) {\n            if (n % i == 0) {\n         \
    \       val factorPrime = i / n\n                if (factorPrime > maxFactorPrime)\
    \ {\n                    maxFactorPrime = factorPrime\n                    maxFactorPrimeIndex\
    \ = i\n                }\n                if (factorPrime > maxFactor) {\n   \
    \                 maxFactor = factorPrime\n                    maxFactorIndex\
    \ = i\n                }\n                factors += i\n            }\n      \
    \  }\n        if (factors.size == 1) {\n            return factors.head\n    \
    \    }\n        if (maxFactorPrimeIndex == -1) {\n            return maxFactor\n\
    \        }\n        if (maxFactorIndex == -1) {\n            return maxFactorPrime\n\
    \        }\n        if (maxFactorPrimeIndex < maxFactorIndex) {\n            return\
    \ maxFactorPrime\n        } else {\n            return maxFactorIndex\n      \
    \  }", "        val factors = mutable.ArrayBuffer.empty[Long]\n        var i =\
    \ 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n           \
    \     factors += i\n                n /= i\n            }\n            i += 1\n\
    \        }\n        if (n > 1) {\n            factors += n\n        }\n      \
    \  factors.max", "        val primes = mutable.ArrayBuffer(2l)\n        var factor\
    \ = 2l\n        while (factor < n) {\n            if (n % factor == 0) {\n   \
    \             primes += factor\n                n /= factor\n            } else\
    \ {\n                factor += 1\n            }\n        }\n        primes.last",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n     \
    \   while (i <= n / i) {\n            if (n % i == 0) {\n                primes\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        primes.max", "        val factors = mutable.ListBuffer[Long]()\n    \
    \    val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter2\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 1).iterator\n\
    \        val isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 2).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 3).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 4).iterator\n        val isPrimeIter6\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 5).iterator\n\
    \        val isPrimeIter7 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 6).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 7).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 8).iterator\n        val isPrimeIter10\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 9).iterator\n\
    \        val isPrimeIter11 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 10).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 11).iterator\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 12).iterator\n        val isPrimeIter14\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 13).iterator\n\
    \        val isPrimeIter15 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 14).iterator\n        val isPrimeIter16 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 15", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        var largestPrimeFactor = 0\n      \
    \  var largestPrimeFactorIndex = 0\n        var isPrime = true\n        var isPrimeIndex\
    \ = 0\n        var isPrimeFactor = true\n        var isPrimeFactorIndex = 0\n\
    \        var isPrimeFactor2 = true\n        var isPrimeFactor2Index = 0\n    \
    \    var isPrimeFactor3 = true\n        var isPrimeFactor3Index = 0\n        var\
    \ isPrimeFactor4 = true\n        var isPrimeFactor4Index = 0\n        var isPrimeFactor5\
    \ = true\n        var isPrimeFactor5Index = 0\n        var isPrimeFactor6 = true\n\
    \        var isPrimeFactor6Index = 0\n        var isPrimeFactor7 = true\n    \
    \    var isPrimeFactor7Index = 0\n        var isPrimeFactor8 = true\n        var\
    \ isPrimeFactor8Index = 0\n        var isPrimeFactor9 = true\n        var isPrimeFactor9Index\
    \ = 0\n        var isPrimeFactor10 = true\n        var isPrimeFactor10Index =\
    \ 0\n        var isPrimeFactor11 = true\n        var isPrimeFactor11Index = 0\n\
    \        var isPrimeFactor12 = true\n        var isPrimeFactor12Index = 0\n  \
    \      var isPrimeFactor13 = true\n        var isPrimeFactor13Index = 0\n    \
    \    var isPrimeFactor14 = true\n        var isPrimeFactor14Index = 0\n      \
    \  var isPrimeFactor15 = true\n        var isPrimeFactor15Index = 0\n        var\
    \ isPrimeFactor16 = true\n        var isPrimeFactor16Index = 0\n        var isPrimeFactor17\
    \ = true\n        var isPrimeFactor17Index = 0\n        var isPrimeFactor18 =\
    \ true\n        var isPrimeFactor18Index = 0\n        var isPrimeFactor19 = true\n\
    \        var isPrimeFactor19Index = 0\n        var isPrimeFactor20 = true\n  \
    \      var isPrimeFactor20Index = 0\n        var isPrimeFactor21 = true\n    \
    \    var isPrimeFactor21Index = 0\n        var isPrimeFactor22 = true\n      \
    \  var isPrimeFactor22Index = 0\n        var isPrimeFactor23 = true\n        var\
    \ isPrimeFactor23Index = 0\n        var isPrimeFactor24 = true\n        var isPrimeFactor24Index\
    \ = 0\n        var isPrimeFactor25 = true\n        var isPrimeFactor25Index =\
    \ 0\n        var isPrimeFactor26 = true\n        var isPrimeFactor26Index = 0\n\
    \        var isPrimeFactor27 = true\n        var isPrimeFactor27Index = 0\n  \
    \      var isPrimeFactor28 = true\n        var isPrimeFactor28Index = 0\n    \
    \    var isPrimeFactor29 = true", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n/2) {\n            if(n%i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n        }\n        if(n > 1) {\n\
    \            factors += n\n        }\n        factors.max", "        val factors\
    \ = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n  \
    \      val isPrime = mutable.HashSet[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => true)\n        val isPrimeIter2 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => true)\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ => true).takeWhile(_ => false)\n        val isPrimeIter18 = Iterator.iterate(n)(_\
    \ => false).takeWhile(_ => false)\n        val isPrimeIter19 = Iterator.iterate(n)(_\
    \ => true", "        val primes = mutable.ArrayBuffer(2)\n        val i = 2\n\
    \        while (primes.size < n) {\n            if (n % primes.last == 0) {\n\
    \                primes += i\n            }\n            i += 1\n        }\n \
    \       primes.last", "        val factors = mutable.ListBuffer[Long]()\n    \
    \    var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        if (n > 1) {\n            factors += n\n    \
    \    }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2)\n            if(n%i == 0)\n                factors\
    \ += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val\
    \ isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ ==\
    \ 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + ", "        val factors = mutable.Set[Long]()\n        val i = 2\n       \
    \ while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2l)\n        var i = 2l\n        while\
    \ (i < n) {\n            if (n % i == 0) {\n                primes += i\n    \
    \            n /= i\n            }\n            i += 1\n        }\n        primes.lastOption.getOrElse(n)",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val maxFactor =\
    \ mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n){\n            val\
    \ factor = (n / i).toInt\n            if(factor > 1){\n                factors\
    \ += factor\n                if(factor > maxFactor.last){\n                  \
    \  maxFactor = factor\n                }\n            }\n        }\n        if(maxFactor.last\
    \ > 1){\n            factors += maxFactor.last\n        }\n        factors.max",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29", "        val\
    \ factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + 2).", "        val primes = mutable.ArrayBuffer.empty[Long]\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             primes += factor\n                n /= factor\n            } else\
    \ {\n                factor += 1\n            }\n        }\n        primes.max",
  "        val factors = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n   \
    \         if(n%i == 0){\n                factors += i\n            }\n       \
    \ }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n     \
    \   val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n  \
    \      val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor = mutable.Array",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i <- 2 to n\
    \ by 2)\n            if(!isPrime(i))\n                factors += i\n        factors.max",
  "        val factors = mutable.Set[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ factors.max", "        val primes = mutable.ArrayBuffer(2l)\n        val factors\
    \ = mutable.ArrayBuffer(2l)\n        val isPrime = mutable.ArrayBuffer(false)\n\
    \        val isFactor = mutable.ArrayBuffer(false)\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrime = mutable.ArrayBuffer(false)\n\
    \        val isPrimePrimeFactor = mutable.ArrayBuffer(false)\n        val isPrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimeFactor = mutable.ArrayBuffer(false)\n\
    \        val isPrimePrimePrimePrime = mutable.ArrayBuffer(false)\n        val\
    \ isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrime =\
    \ mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer(false)\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer(", "        val factors = mutable.Set[Long]()\n      \
    \  val i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n  \
    \              factors += i\n                n /= i\n            }\n         \
    \   i += 1\n        }\n        if (n > 1) {\n            factors += n\n      \
    \  }\n        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimes = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactors = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimes = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactorsPrimeFactor = ",
  "        val factors = mutable.Set[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to\
    \ n by 2)\n            if (n % i == 0)\n                factors += i\n       \
    \ factors.max", "        val factors = mutable.Set[Long]()\n        val primes\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _\
    \ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_ *\
    \ _).takeWhile(_ > 1).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 14)\n        val isPrimeIter", "     \
    \   val primes = mutable.ArrayBuffer(2)\n        val factors = mutable.ArrayBuffer(2)\n\
    \        val isPrime = true\n        var i = 2\n        while (i < n && isPrime)\
    \ {\n            val isPrime = n % i == 0\n            if (isPrime) {\n      \
    \          primes += i\n                factors += i\n            }\n        \
    \    i += 1\n        }\n        val largestPrime = primes.max\n        val largestFactor\
    \ = factors.max\n        if (largestPrime == largestFactor) {\n            return\
    \ largestPrime\n        } else {\n            return largestFactor\n        }",
  "        var maxPrimeFactor = Long.MinValue\n        var maxPrimeFactorIndex = -1\n\
    \        var maxPrimeFactorIndex2 = -1\n        var maxPrimeFactorIndex3 = -1\n\
    \        var maxPrimeFactorIndex4 = -1\n        var maxPrimeFactorIndex5 = -1\n\
    \        var maxPrimeFactorIndex6 = -1\n        var maxPrimeFactorIndex7 = -1\n\
    \        var maxPrimeFactorIndex8 = -1\n        var maxPrimeFactorIndex9 = -1\n\
    \        var maxPrimeFactorIndex10 = -1\n        var maxPrimeFactorIndex11 = -1\n\
    \        var maxPrimeFactorIndex12 = -1\n        var maxPrimeFactorIndex13 = -1\n\
    \        var maxPrimeFactorIndex14 = -1\n        var maxPrimeFactorIndex15 = -1\n\
    \        var maxPrimeFactorIndex16 = -1\n        var maxPrimeFactorIndex17 = -1\n\
    \        var maxPrimeFactorIndex18 = -1\n        var maxPrimeFactorIndex19 = -1\n\
    \        var maxPrimeFactorIndex20 = -1\n        var maxPrimeFactorIndex21 = -1\n\
    \        var maxPrimeFactorIndex22 = -1\n        var maxPrimeFactorIndex23 = -1\n\
    \        var maxPrimeFactorIndex24 = -1\n        var maxPrimeFactorIndex25 = -1\n\
    \        var maxPrimeFactorIndex26 = -1\n        var maxPrimeFactorIndex27 = -1\n\
    \        var maxPrimeFactorIndex28 = -1\n        var maxPrimeFactorIndex29 = -1\n\
    \        var maxPrimeFactorIndex30 = -1\n        var maxPrimeFactorIndex31 = -1\n\
    \        var maxPrimeFactorIndex32 = -1\n        var maxPrimeFactorIndex33 = -1\n\
    \        var maxPrimeFactorIndex34 = -1\n        var maxPrimeFactorIndex35 = -1\n\
    \        var maxPrimeFactorIndex36 = -1\n        var maxPrimeFactorIndex37 = -1\n\
    \        var maxPrimeFactorIndex38 = -1\n        var maxPrimeFactorIndex39 = -1\n\
    \        var maxPrimeFactorIndex40 = -1\n        var maxPrimeFactorIndex41 = -1\n\
    \        var maxPrimeFactorIndex42 = -1\n        var maxPrimeFactorIndex43 = -1\n\
    \        var maxPrimeFactorIndex44 = -1\n        var maxPrimeFactorIndex45 = -1\n\
    \        var maxPrimeFactorIndex46 = -1\n        var maxPrimeFactorIndex47 = -1\n\
    \        var maxPrimeFactorIndex48 = -1\n        var maxPrimeFactorIndex49 = -1\n\
    \        var maxPrimeFactorIndex50 = -1\n        var maxPrimeFactorIndex51 = -1\n\
    \        var maxPrimeFactorIndex52 = -1\n        var maxPrimeFactorIndex53 = -1\n\
    \        var maxPrimeFactorIndex54 = -1\n        var maxPrimeFactorIndex55", " \
    \       val factors = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val\
    \ isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ > 1).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val\
    \ isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ > 1).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val\
    \ isPrimeIter9 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ > 1).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter11 =\
    \ Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter12 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ > 1).filter(_ % _ == 0).iterator\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ > 1).filter(_ % _ == 0).iterator\n        val\
    \ isPrimeIter14 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ > 1).filter(_",
  "        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        for (i <- 2 to n by 2)\n            if (isPrime(i))\n               \
    \ factors += i\n            else\n                isPrime += i\n        factors.max",
  "        val factors = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n\
    \        val isPrime = mutable.HashSet[Boolean]()\n        val maxFactor = mutable.HashMap[Long,\
    \ Long]()\n        val maxFactors = mutable.HashMap[Long, Long]()\n        val\
    \ maxPrime = mutable.HashMap[Long, Long]()\n        val maxPrimes = mutable.HashMap[Long,\
    \ Long]()\n        val maxIsPrime = mutable.HashMap[Long, Boolean]()\n       \
    \ val maxIsPrimes = mutable.HashMap[Long, Boolean]()\n        val maxPrimeFactor\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactors = mutable.HashMap[Long,\
    \ Long]()\n        val maxPrimeFactorsPrime = mutable.HashMap[Long, Long]()\n\
    \        val maxPrimeFactorsPrimes = mutable.HashMap[Long, Long]()\n        val\
    \ maxPrimeFactorsPrimePrime = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimes\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrime\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimes\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimes\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimePrimes\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimePrimes\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrimePrimePrimePrime\
    \ = mutable.HashMap[Long, Long]()\n        val maxPrimeFactorsPrimePrimePrime",
  "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.Set[Long]()\n        for(i <- 2 to n by 2){\n  \
    \          if(n%i==0){\n                factors += i\n            }\n        }\n\
    \        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ < n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_ +\
    \ 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).take", "        val factors = mutable.HashSet[Long]()\n        var largestPrimeFactor\
    \ = Long.MaxValue\n        var currentPrime = 1\n        while (n > 1) {\n   \
    \         if (n % currentPrime == 0) {\n                factors += currentPrime\n\
    \                n /= currentPrime\n            } else {\n                currentPrime\
    \ += 1\n            }\n        }\n        factors.foreach(x => largestPrimeFactor\
    \ = math.max(largestPrimeFactor, x))\n        largestPrimeFactor", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 0).dropWhile(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_\
    \ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _\
    \ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_ > 1).filter(_ % _ == 0).takeWhile(_\
    \ > 1).filter(_", "        val factors = mutable.ArrayBuffer.empty[Long]\n   \
    \     val i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        factors.max", "        var maxFactor = 0\n  \
    \      var maxFactorIndex = 0\n        var isPrime = true\n        var isPrimeIndex\
    \ = 0\n        var isPrime2 = true\n        var isPrime2Index = 0\n        var\
    \ isPrime3 = true\n        var isPrime3Index = 0\n        var isPrime4 = true\n\
    \        var isPrime4Index = 0\n        var isPrime5 = true\n        var isPrime5Index\
    \ = 0\n        var isPrime6 = true\n        var isPrime6Index = 0\n        var\
    \ isPrime7 = true\n        var isPrime7Index = 0\n        var isPrime8 = true\n\
    \        var isPrime8Index = 0\n        var isPrime9 = true\n        var isPrime9Index\
    \ = 0\n        var isPrime10 = true\n        var isPrime10Index = 0\n        var\
    \ isPrime11 = true\n        var isPrime11Index = 0\n        var isPrime12 = true\n\
    \        var isPrime12Index = 0\n        var isPrime13 = true\n        var isPrime13Index\
    \ = 0\n        var isPrime14 = true\n        var isPrime14Index = 0\n        var\
    \ isPrime15 = true\n        var isPrime15Index = 0\n        var isPrime16 = true\n\
    \        var isPrime16Index = 0\n        var isPrime17 = true\n        var isPrime17Index\
    \ = 0\n        var isPrime18 = true\n        var isPrime18Index = 0\n        var\
    \ isPrime19 = true\n        var isPrime19Index = 0\n        var isPrime20 = true\n\
    \        var isPrime20Index = 0\n        var isPrime21 = true\n        var isPrime21Index\
    \ = 0\n        var isPrime22 = true\n        var isPrime22Index = 0\n        var\
    \ isPrime23 = true\n        var isPrime23Index = 0\n        var isPrime24 = true\n\
    \        var isPrime24Index = 0\n        var isPrime25 = true\n        var isPrime25Index\
    \ = 0\n        var isPrime26 = true\n        var isPrime26Index = 0\n        var\
    \ isPrime27 = true\n        var isPrime27Index = 0\n        var isPrime28 = true\n\
    \        var isPrime28Index = 0\n        var isPrime29 = true\n        var isPrime29Index\
    \ = 0\n        var isPrime30 = true\n        var isPrime30Index = 0\n        var\
    \ isPrime31 = true\n        var isPrime31Index = 0\n        var isPrime32 = true\n\
    \        var isPrime32Index = 0\n        var isPrime33 = true\n        var isPrime33Index\
    \ = 0\n        var isPrime34 = true", "        val factors = mutable.Set[Long]()\n\
    \        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = mutable.Set[Boolean]()\n        val isPrimeIter2 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter3 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter4 = mutable.Set[Boolean]()\n        val isPrimeIter5 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter6 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter7 = mutable.Set[Boolean]()\n        val isPrimeIter8 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter9 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter10 = mutable.Set[Boolean]()\n        val isPrimeIter11\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter12 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter13 = mutable.Set[Boolean]()\n        val isPrimeIter14\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter15 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter16 = mutable.Set[Boolean]()\n        val isPrimeIter17\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter18 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter19 = mutable.Set[Boolean]()\n        val isPrimeIter20\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter21 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter22 = mutable.Set[Boolean]()\n        val isPrimeIter23\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter24 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter25 = mutable.Set[Boolean]()\n        val isPrimeIter26\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter27 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter28 = mutable.Set[Boolean]()\n        val isPrimeIter29\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter30 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        factors += 2\n        factors += 3\n        factors += 5\n        factors\
    \ += 7\n        factors += 11\n        factors += 13\n        factors += 17\n\
    \        factors += 19\n        factors += 23\n        factors += 29\n       \
    \ factors += 31\n        factors += 37\n        factors += 41\n        factors\
    \ += 43\n        factors += 47\n        factors += 53\n        factors += 59\n\
    \        factors += 61\n        factors += 67\n        factors += 71\n       \
    \ factors += 73\n        factors += 79\n        factors += 83\n        factors\
    \ += 89\n        factors += 97\n        factors += 101\n        factors += 103\n\
    \        factors += 107\n        factors += 109\n        factors += 113\n    \
    \    factors += 127\n        factors += 131\n        factors += 137\n        factors\
    \ += 139\n        factors += 147\n        factors += 151\n        factors += 157\n\
    \        factors += 163\n        factors += 167\n        factors += 173\n    \
    \    factors += 179\n        factors += 181\n        factors += 191\n        factors\
    \ += 193\n        factors += 197\n        factors += 199\n        factors += 211\n\
    \        factors += 223\n        factors += 227\n        factors += 229\n    \
    \    factors += 233\n        factors += 239\n        factors += 241\n        factors\
    \ += 247\n        factors += 249\n        factors += 251\n        factors += 257\n\
    \        factors += 263\n        factors += 269\n        factors += 271\n    \
    \    factors += 277\n        factors += 281\n        factors += 283\n        factors\
    \ += 293\n        factors += 307\n        factors += 311\n        factors += 313\n\
    \        factors += 317\n        factors += 323\n        factors += 329\n    \
    \    factors += 331\n        factors += 337\n        factors += 347\n        factors\
    \ += 349\n        factors += 353\n        factors += 359\n        factors += 363\n\
    \        factors += 369\n        factors += 373\n        factors += 379\n    \
    \    factors += 383\n        factors += 389\n        factors += 395\n        factors\
    \ += 401\n        factors += 409\n        factors += 419\n        factors += 421\n\
    \        factors += 431\n        factors += 433\n        factors += 439\n    \
    \    factors += 443\n        factors += 449\n        factors += 457\n        factors\
    \ += 461\n", "        val primes = mutable.ArrayBuffer(2)\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             primes += factor\n                n /= factor\n            }\n \
    \           else {\n                factor += 1\n            }\n        }\n  \
    \      primes.last", "        val primes = mutable.Set[Long]()\n        val factors\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n      \
    \  val isFactor = mutable.Set[Boolean]()\n        val isPrimeFactor = mutable.Set[Boolean]()\n\
    \        val isPrimePrime = mutable.Set[Boolean]()\n        val isPrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrime = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimeFactor = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimeFactor = mutable.Set[Boolean]()\n\
    \        val isPrimePrimePrimePrimePrime = mutable.Set[Boolean]()\n        val\
    \ isPrimePrimePrimePrimePrimeFactor = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.Set[Boolean]()\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeFactor\
    \ = mutable.Set[Boolean]()\n        val isPrime", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val largestPrime = mutable.ArrayBuffer.empty[Long]\n        for (i <-\
    \ 2 to n by 2) {\n            if (n % i == 0) {\n                primes += i\n\
    \                if (primes.size > largestPrime.size) {\n                    largestPrime\
    \ += primes.last\n                }\n                primes -= i\n           \
    \ }\n        }\n        largestPrime.last", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                n /= factor\n   \
    \         }\n            else {\n                factor += 1\n            }\n\
    \        }\n        primes.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var isPrimeTrue = false\n        var isPrimeFalse = false\n        var\
    \ isPrimeTrue2 = false\n        var isPrimeFalse2 = false\n        var isPrimeTrue3\
    \ = false\n        var isPrimeFalse3 = false\n        var isPrimeTrue4 = false\n\
    \        var isPrimeFalse4 = false\n        var isPrimeTrue5 = false\n       \
    \ var isPrimeFalse5 = false\n        var isPrimeTrue6 = false\n        var isPrimeFalse6\
    \ = false\n        var isPrimeTrue7 = false\n        var isPrimeFalse7 = false\n\
    \        var isPrimeTrue8 = false\n        var isPrimeFalse8 = false\n       \
    \ var isPrimeTrue9 = false\n        var isPrimeFalse9 = false\n        var isPrimeTrue10\
    \ = false\n        var isPrimeFalse10 = false\n        var isPrimeTrue11 = false\n\
    \        var isPrimeFalse11 = false\n        var isPrimeTrue12 = false\n     \
    \   var isPrimeFalse12 = false\n        var isPrimeTrue13 = false\n        var\
    \ isPrimeFalse13 = false\n        var isPrimeTrue14 = false\n        var isPrimeFalse14\
    \ = false\n        var isPrimeTrue15 = false\n        var isPrimeFalse15 = false\n\
    \        var isPrimeTrue16 = false\n        var isPrimeFalse16 = false\n     \
    \   var isPrimeTrue17 = false\n        var isPrimeFalse17 = false\n        var\
    \ isPrimeTrue18 = false\n        var isPrimeFalse18 = false\n        var isPrimeTrue19\
    \ = false\n        var isPrimeFalse19 = false\n        var isPrimeTrue20 = false\n\
    \        var isPrimeFalse20 = false\n        var isPrimeTrue21 = false\n     \
    \   var isPrimeFalse21 = false\n        var isPrimeTrue22 = false\n        var\
    \ isPrimeFalse22 = false\n        var isPrimeTrue23 = false\n        var isPrimeFalse23\
    \ = false\n        var isPrimeTrue24 = false\n        var isPrimeFalse24 = false\n\
    \        var isPrimeTrue25 = false\n        var isPrimeFalse25 = false\n     \
    \   var isPrimeTrue26 = false\n        var isPrimeFalse26 = false\n        var\
    \ isPrimeTrue27 = false\n        var isPrimeFalse27 = false\n        var isPrimeTrue28\
    \ = false\n        var isPrimeFalse28 = false\n        var isPrimeTrue29 = false\n\
    \        var isPrimeFalse29 = false\n        var isPrimeTrue30 = false", "   \
    \     val factors = mutable.HashSet[Long]()\n        val i = 2l\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.max", "        val primes = mutable.ArrayBuffer(2l)\n        var i\
    \ = 2l\n        while(i <= n){\n            if(n % i == 0){\n                primes\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        primes.last", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime2\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime3 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime4 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime10 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime13 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime14\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime15 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime16 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime22 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime25 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime26\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime27 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime28 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime29\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime30 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrime31 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrime32\
    \ = mutable.ArrayBuffer.empty[Boolean]", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var factor = 2\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                primes += factor\n                n /= factor\n   \
    \         }\n            factor += 1\n        }\n        primes.max", "      \
    \  val factors = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  factors.max", "        val primes = mutable.Set[Long]()\n        var factor\
    \ = 2\n        while (factor <= n) {\n            if (n % factor == 0) {\n   \
    \             primes.add(factor)\n                n /= factor\n            }\n\
    \            else {\n                factor += 1\n            }\n        }\n \
    \       primes.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n             \
    \   isPrime += true\n            }\n            i += 1\n        }\n        val\
    \ largestPrime = primes.max\n        val largestPrimeFactor = factors.max\n  \
    \      val largestPrimeFactorIsPrime = isPrime.contains(largestPrimeFactor)\n\
    \        if (largestPrimeFactorIsPrime) {\n            largestPrimeFactor\n  \
    \      } else {\n            largestPrimeFactor\n        }", "        var maxFactor\
    \ = 0\n        var maxFactorIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrimeFactor = true\n        var isPrimeFactorIndex\
    \ = 0\n        var isPrimeFactor2 = true\n        var isPrimeFactor2Index = 0\n\
    \        var isPrimeFactor3 = true\n        var isPrimeFactor3Index = 0\n    \
    \    var isPrimeFactor4 = true\n        var isPrimeFactor4Index = 0\n        var\
    \ isPrimeFactor5 = true\n        var isPrimeFactor5Index = 0\n        var isPrimeFactor6\
    \ = true\n        var isPrimeFactor6Index = 0\n        var isPrimeFactor7 = true\n\
    \        var isPrimeFactor7Index = 0\n        var isPrimeFactor8 = true\n    \
    \    var isPrimeFactor8Index = 0\n        var isPrimeFactor9 = true\n        var\
    \ isPrimeFactor9Index = 0\n        var isPrimeFactor10 = true\n        var isPrimeFactor10Index\
    \ = 0\n        var isPrimeFactor11 = true\n        var isPrimeFactor11Index =\
    \ 0\n        var isPrimeFactor12 = true\n        var isPrimeFactor12Index = 0\n\
    \        var isPrimeFactor13 = true\n        var isPrimeFactor13Index = 0\n  \
    \      var isPrimeFactor14 = true\n        var isPrimeFactor14Index = 0\n    \
    \    var isPrimeFactor15 = true\n        var isPrimeFactor15Index = 0\n      \
    \  var isPrimeFactor16 = true\n        var isPrimeFactor16Index = 0\n        var\
    \ isPrimeFactor17 = true\n        var isPrimeFactor17Index = 0\n        var isPrimeFactor18\
    \ = true\n        var isPrimeFactor18Index = 0\n        var isPrimeFactor19 =\
    \ true\n        var isPrimeFactor19Index = 0\n        var isPrimeFactor20 = true\n\
    \        var isPrimeFactor20Index = 0\n        var isPrimeFactor21 = true\n  \
    \      var isPrimeFactor21Index = 0\n        var isPrimeFactor22 = true\n    \
    \    var isPrimeFactor22Index = 0\n        var isPrimeFactor23 = true\n      \
    \  var isPrimeFactor23Index = 0\n        var isPrimeFactor24 = true\n        var\
    \ isPrimeFactor24Index = 0\n        var isPrimeFactor25 = true\n        var isPrimeFactor25Index\
    \ = 0\n        var isPrimeFactor26 = true\n        var isPrimeFactor26Index =\
    \ 0\n        var isPrimeFactor27 = true\n        var isPrimeFactor27Index = 0\n\
    \        var isPrimeFactor28 = true\n        var isPrimeFactor28Index = 0\n  \
    \      var isPrimeFactor29 = true\n        var isPrimeFactor", "        val factors\
    \ = mutable.Set[Long]()\n        var i = 2\n        while (i <= n / i) {\n   \
    \         if (n % i == 0) {\n                factors += i\n                n /=\
    \ i\n            }\n            i += 1\n        }\n        if (n > 1) {\n    \
    \        factors += n\n        }\n        factors.max", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        for(i <- 2 to n by 2){\n            if(n%i\
    \ == 0){\n                factors += i\n                n /= i\n            }\n\
    \        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        var factor = 2\n        while(factor <= n) {\n            if(n % factor\
    \ == 0) {\n                factors += factor\n                n /= factor\n  \
    \          }\n            else {\n                factor += 1\n            }\n\
    \        }\n        factors.max", "        var maxFactor = Long.MinValue\n   \
    \     var maxFactorIndex = 0\n        var isPrime = true\n        var primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n      \
    \      if (n % i == 0) {\n                isPrime = false\n                break\n\
    \            }\n        }\n        if (isPrime) {\n            primeFactors =\
    \ primeFactors :+ n\n        }\n        for (i <- primeFactors.indices) {\n  \
    \          if (primeFactors(i) > maxFactor) {\n                maxFactor = primeFactors(i)\n\
    \                maxFactorIndex = i\n            }\n        }\n        maxFactor",
  "        val factors = mutable.HashSet[Long]()\n        for(i <- 2 to n by 2)\n\
    \            if(!factors.contains(i) && n % i == 0)\n                factors +=\
    \ i\n        factors.max", "        val factors = mutable.Set[Long]()\n      \
    \  var maxFactor = 0\n        for(i <- 2 to n/2) {\n            if(n%i == 0) {\n\
    \                factors.add(i)\n                maxFactor = i\n            }\n\
    \        }\n        if(maxFactor == 0) maxFactor = n\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val i = 2\n   \
    \     while (i <= n / i) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            factors += n\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0))\n\
    \        val isPrimeIterIter = Iterator.iterate(isPrime)(x => primes.append(x))\n\
    \        val isPrimeIterIterIter = Iterator.iterate(primes)(x => isPrime.append(x))\n\
    \        val isPrimeIterIterIterIter = Iterator.iterate(isPrime)(x => primes.append(x))\n\
    \        val isPrimeIterIterIterIterIter = Iterator.iterate(primes)(x => isPrime.append(x))\n\
    \        val isPrimeIterIterIterIterIterIter = Iterator.iterate(isPrime)(x =>\
    \ primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIter = Iterator.iterate(primes)(x\
    \ => isPrime.append(x))\n        val isPrimeIterIterIterIterIterIterIterIter =\
    \ Iterator.iterate(isPrime)(x => primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(x => isPrime.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(x => primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(x => isPrime.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(x => primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(x => isPrime.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(x => primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(primes)(x => isPrime.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(isPrime)(x => primes.append(x))\n        val isPrimeIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = Iter", "        val factors = mutable.HashSet[Long]()\n        val primes\
    \ = mutable.HashSet[Long]()\n        val isPrime = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter4\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n\
    \        val isPrimeIter5 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter8\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter10 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n        val isPrimeIter12\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_ % _ != 0).iterator\n\
    \        val isPrimeIter13 = Iterator.iterate(n)(_ * _).takeWhile(_ < n).filter(_\
    \ % _ == 0).iterator\n        val isPrimeIter14 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ < n).filter(_ % _ != 0).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ < n).filter(_ % _ == 0).iterator\n        val is", "      \
    \  val factors = mutable.HashSet[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ factors.max", "        val factors = mutable.HashSet[Long]()\n        for(i\
    \ <- 2 to n by 2){\n            if(n%i == 0){\n                factors += i\n\
    \            }\n        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        val primes = mutable.Set[Long]()\n        val maxFactor = mutable.Set[Long]()\n\
    \        val maxFactors = mutable.Set[Long]()\n        val maxPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactors = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorsOfPrimesOfPrimesOfPrimes = mutable.Set[Long]()\n \
    \       val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes =\
    \ mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorsOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimesOfPrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactors", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n                isPrime += true\n            }\n        }\n\
    \        if (isPrime.nonEmpty) {\n            factors.max\n        } else {\n\
    \            n\n        }", "        val primes = mutable.ArrayBuffer(2)\n   \
    \     var i = 2\n        while (i < n) {\n            if (n % i == 0) {\n    \
    \            primes += i\n                n /= i\n            }\n            i\
    \ += 1\n        }\n        primes.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter6 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter9 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter10\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter11 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter12 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter18 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter21 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter22\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter23 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter24 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter29 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val is", "        val factors = mutable.ArrayBuffer.empty[Long]\n   \
    \     var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        if (n > 1) {\n            factors += n\n    \
    \    }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        var largestPrimeFactor = 0\n        for(i <- 2 to n by 2){\n        \
    \    if(n%i == 0){\n                factors.add(i)\n            }\n        }\n\
    \        while(factors.size > 0){\n            largestPrimeFactor = factors.max\n\
    \            factors.remove(largestPrimeFactor)\n        }\n        largestPrimeFactor",
  "        val primes = mutable.ArrayBuffer(2)\n        val i = 2\n        while (i\
    \ < n && primes.contains(i)) {\n            val prime = primes.last\n        \
    \    primes += prime\n            i += 1\n        }\n        primes.last", " \
    \       val factors = mutable.Set[Long]()\n        val i = 2\n        while (i\
    \ <= n / i) {\n            if (n % i == 0) {\n                factors += i\n \
    \               n /= i\n            }\n            i += 1\n        }\n       \
    \ if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.Set[Long]()\n        val primes = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrimeIter = mutable.Set[Boolean]()\n\
    \        val isPrimeIter2 = mutable.Set[Boolean]()\n        val isPrimeIter3 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter4 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter5 = mutable.Set[Boolean]()\n        val isPrimeIter6 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter7 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter8 = mutable.Set[Boolean]()\n        val isPrimeIter9 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter10 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter11 = mutable.Set[Boolean]()\n        val isPrimeIter12\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter13 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter14 = mutable.Set[Boolean]()\n        val isPrimeIter15\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter16 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter17 = mutable.Set[Boolean]()\n        val isPrimeIter18\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter19 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter20 = mutable.Set[Boolean]()\n        val isPrimeIter21\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter22 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter23 = mutable.Set[Boolean]()\n        val isPrimeIter24\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter25 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter26 = mutable.Set[Boolean]()\n        val isPrimeIter27\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter28 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter29 = mutable.Set[Boolean]()\n        val isPrimeIter30\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val primes =\
    \ mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n        val\
    \ maxFactor = mutable.Set[Long]()\n        val maxFactors = mutable.Set[Long]()\n\
    \        val maxPrime = mutable.Set[Long]()\n        val maxPrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactor = mutable.Set[Long]()\n        val maxPrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorPrime = mutable.Set[Long]()\n\
    \        val maxPrimeFactorPrimes = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrime\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorPrimePrimePrime = mutable.Set[Long]()\n        val\
    \ maxPrimeFactorPrimePrimePrimes = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrime\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorPrimePrimePrimePrime = mutable.Set[Long]()\n      \
    \  val maxPrimeFactorPrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ maxPrimeFactorPrimePrimePrimePrimePrime = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrimePrimes\
    \ = mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrimePrime =\
    \ mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrimePrimes =\
    \ mutable.Set[Long]()\n        val maxPrimeFactorPrimePrimePrimePrimePrime = mutable.Set[Long]()\n\
    \        val maxPrimeFactorPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val maxPrimeFactorPrimePrimePrimePrimePrime = mutable.Set[Long]()\n \
    \       val maxPrimeFactorPrimePrimePrimePrimePrimes = mutable.Set[Long]", " \
    \       val factors = mutable.HashSet[Long]()\n        val primes = mutable.HashSet[Long]()\n\
    \        val maxFactor = mutable.Long.MaxValue\n        val maxPrime = mutable.Long.MaxValue\n\
    \        val maxFactorPrime = mutable.Long.MaxValue\n        val maxPrimePrime\
    \ = mutable.Long.MaxValue\n        val maxPrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrime = mutable.Long.MaxValue\n        val maxPrimePrimePrimePrimePrime\
    \ = mutable.Long.MaxValue\n        val maxPrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n     \
    \   val maxPrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n     \
    \   val maxPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n\
    \        val maxPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.Long.MaxValue\n",
  "        val factors = mutable.HashSet[Long]()\n        var factor = 2\n       \
    \ while (n > 1) {\n            if (n % factor == 0) {\n                factors\
    \ += factor\n                n /= factor\n            } else {\n             \
    \   factor += 1\n            }\n        }\n        factors.last", "        val\
    \ factors = mutable.Set[Long]()\n        val i = 2\n        while (i <= n / i)\
    \ {\n            if (n % i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        if (n != 1)\
    \ factors += n\n        factors.max", "        var maxPrime = 1\n        var maxFactor\
    \ = 1\n        var maxFactorPrime = 1\n        var maxFactorPrimePrime = 1\n \
    \       var maxFactorPrimePrimePrime = 1\n        var maxFactorPrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrime = 1\n        var maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime = 1\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 1\n\
    \        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1\n        var maxFactorPrimePrimePri", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while(i <= n / i) {\n            if(n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        if(n > 1) {\n            factors += n\n     \
    \   }\n        factors.max", "        var largestPrimeFactor = 0\n        var\
    \ primeFactors = mutable.ArrayBuffer.empty[Long]\n        var isPrime = true\n\
    \        var isPrimeIter = Iterator.continually(isPrime)\n        var isPrimeIter2\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter3 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter4 = Iterator.continually(isPrime)\n        var isPrimeIter5\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter6 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter7 = Iterator.continually(isPrime)\n        var isPrimeIter8\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter9 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter10 = Iterator.continually(isPrime)\n        var isPrimeIter11\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter12 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter13 = Iterator.continually(isPrime)\n        var isPrimeIter14\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter15 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter16 = Iterator.continually(isPrime)\n        var isPrimeIter17\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter18 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter19 = Iterator.continually(isPrime)\n        var isPrimeIter20\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter21 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter22 = Iterator.continually(isPrime)\n        var isPrimeIter23\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter24 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter25 = Iterator.continually(isPrime)\n        var isPrimeIter26\
    \ = Iterator.continually(isPrime)\n        var isPrimeIter27 = Iterator.continually(isPrime)\n\
    \        var isPrimeIter28 = Iterator.continually(isPrime)\n        var isPrimeIter29\
    \ = Iterator.continually(isPrime)\n        var isPrime", "        val factors\
    \ = mutable.ListBuffer[Long]()\n        for (i <- 2 to n by 2) {\n           \
    \ if (n % i == 0) {\n                factors += i\n            }\n        }\n\
    \        factors.max", "        var maxFactor = Long.MinValue\n        var maxFactorPrime\
    \ = 0\n        var maxFactorPrimePrime = 0\n        var maxFactorPrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0\n   \
    \     var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n       \
    \ var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrime", "        val factors =\
    \ mutable.HashSet[Long]()\n        var i = 2\n        while (i <= n / i) {\n \
    \           if (n % i == 0) {\n                factors += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n \
    \           factors += n\n        }\n        factors.max", "        val primes\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIndex = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n  \
    \      val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n    \
    \    val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex =\
    \ mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n  \
    \      val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n    \
    \    val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex =\
    \ mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n  \
    \      val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n    \
    \    val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n      \
    \  val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex =\
    \ mutable.ArrayBuffer.empty[Int]\n        val isPrimeIndexIndexIndexIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPri", "        val factors = mutable.ListBuffer[Long]()\n     \
    \   var i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n \
    \               factors += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        if (n != 1) factors += n\n        factors.max",
  "        val primes = mutable.ArrayBuffer.empty[Long]\n        val i = 2l\n    \
    \    while (i <= n / i) {\n            if (n % i == 0) {\n                primes\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n > 1) {\n            primes += n\n        }\n        primes.max",
  "        val factors = mutable.ListBuffer[Long]()\n        val i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.Set[Long]()\n        var factor = 2\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                factors += factor\n\
    \                n /= factor\n            } else {\n                factor +=\
    \ 1\n            }\n        }\n        factors.last", "        val factors = mutable.Set[Long]()\n\
    \        var largestPrimeFactor = 0\n        var currentPrime = 1\n        var\
    \ currentFactor = 1\n        var isPrime = true\n        for(i <- 2 to n by 2){\n\
    \            isPrime = true\n            for(j <- 2 to i by 2){\n            \
    \    if(i % j == 0){\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if(isPrime){\n       \
    \         factors += i\n                if(factors.size > largestPrimeFactor){\n\
    \                    largestPrimeFactor = factors.size\n                }\n  \
    \          }\n        }\n        largestPrimeFactor", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var maxPrime = 0\n        for(i <- 2 to n){\n            val isPrime\
    \ = true\n            for(j <- 2 to i){\n                if(i % j == 0){\n   \
    \                 isPrime = false\n                    break\n               \
    \ }\n            }\n            if(isPrime){\n                primes += i\n  \
    \              if(primes.last > maxPrime){\n                    maxPrime = primes.last\n\
    \                }\n            }\n        }\n        maxPrime", "        val\
    \ factors = mutable.HashSet[Long]()\n        val isPrime = mutable.HashSet[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 1)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 2)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 3)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 4)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 5)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 6)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 7)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 8)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 9)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 10)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 11)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 12)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 13)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 14)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + ", "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 2 to n by 2)\n            if (n % i == 0)\n                factors += i\n\
    \        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.ArrayBuffer.empty[Long]\n        for (i <- 2 to n by 2) {\n        \
    \    if (n % i == 0) {\n                factors += i\n            }\n        }\n\
    \        factors.max", "        var maxFactor = 0\n        var maxFactorIndex\
    \ = 0\n        var isPrime = true\n        var primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     isPrime = false\n                break\n            }\n        }\n     \
    \   if (isPrime) {\n            primeFactors = primeFactors :+ n\n        }\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     val factor = (n / i).toInt\n                if (factor > maxFactor) {\n\
    \                    maxFactor = factor\n                    maxFactorIndex =\
    \ i\n                }\n            }\n        }\n        if (maxFactorIndex >\
    \ 0) {\n            primeFactors = primeFactors :+ maxFactorIndex\n        }\n\
    \        primeFactors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val maxFactor = mutable.ArrayBuffer.empty[Long]\n        val primes =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primeFactors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while(i <= n && primes.size < primeFactors.size) {\n            val isPrimeCheck\
    \ = n % i == 0\n            if(isPrimeCheck) {\n                primes += i\n\
    \                isPrime += isPrimeCheck\n            }\n            val factorCheck\
    \ = i / primes.last\n            if(factorCheck > maxFactor.last) {\n        \
    \        maxFactor.last <- factorCheck\n                factors += factorCheck\n\
    \            }\n            i += 1\n        }\n        if(primes.size == primeFactors.size)\
    \ {\n            factors.last\n        } else {\n            factors.last\n  \
    \      }", "        val factors = mutable.ArrayBuffer.empty[Long]\n        for\
    \ (i <- 2 to n by 2) {\n            if (n % i == 0) {\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.Set[Long]()\n        val i = 2\n        while (i <= n / i) {\n     \
    \       if (n % i == 0) {\n                factors += i\n                n /=\
    \ i\n            }\n            i += 1\n        }\n        if (n > 1) {\n    \
    \        factors += n\n        }\n        factors.max", "        val primes =\
    \ mutable.ArrayBuffer(2l) ++ (2l to n by 2l) filter (_ % _ == 0)\n        val\
    \ largestPrime = primes.max\n        largestPrime match {\n            case 2l\
    \ => n\n            case _ => largestPrimeFactor(largestPrime / 2)\n        }",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val\
    \ isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ ==\
    \ 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val is", "        val primes\
    \ = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i <= n / 2) {\n\
    \            if (n % i == 0) {\n                primes += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        primes.last", " \
    \       val factors = mutable.ListBuffer[Long]()\n        var i = 2\n        while\
    \ (i <= n / i) {\n            if (n % i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n            i += 1\n        }\n      \
    \  if (n > 1) {\n            factors += n\n        }\n        factors.max", " \
    \       val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n =>\
    \ n != 1).iterator\n        val isPrimeIter2 = Iterator.iterate(n)(n => n % 2\
    \ == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter5 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter6 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter9 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter10 =\
    \ Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n != 1).iterator\n     \
    \   val isPrimeIter11 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n\
    \ != 1).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(n => n % 2 ==\
    \ 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter13 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter14 =\
    \ Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n != 1).iterator\n     \
    \   val isPrimeIter15 = Iterator.iterate(n)(n => n % 2 == 0).takeWhile(n => n\
    \ != 1).iterator\n        val isPrimeIter16 = Iterator.iterate(n)(n => n % 2 ==\
    \ 0).takeWhile(n => n != 1).iterator\n        val isPrimeIter17 = Iterator.iterate(n)(n\
    \ => n % 2 == 0).takeWhile(n => n != 1).iterator\n        val is", "        var\
    \ maxPrime = 0\n        var maxFactor = 0\n        var maxFactorPrime = 0\n  \
    \      var maxFactorPrimePrime = 0\n        var maxFactorPrimePrimePrime = 0\n\
    \        var maxFactorPrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0\n   \
    \     var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n       \
    \ var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n     \
    \   var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPri", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val primes = mutable.ArrayBuffer(2)\n\
    \        val factors = mutable.ArrayBuffer(2)\n        val isPrime = mutable.ArrayBuffer(true)\n\
    \        val isPrimeIter = Iterator.continually(isPrime)\n        val isPrimeIter2\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter3 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter4 = Iterator.continually(isPrime)\n        val isPrimeIter5\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter6 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter7 = Iterator.continually(isPrime)\n        val isPrimeIter8\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter9 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter10 = Iterator.continually(isPrime)\n        val isPrimeIter11\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter12 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter13 = Iterator.continually(isPrime)\n        val isPrimeIter14\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter15 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter16 = Iterator.continually(isPrime)\n        val isPrimeIter17\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter18 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter19 = Iterator.continually(isPrime)\n        val isPrimeIter20\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter21 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter22 = Iterator.continually(isPrime)\n        val isPrimeIter23\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter24 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter25 = Iterator.continually(isPrime)\n        val isPrimeIter26\
    \ = Iterator.continually(isPrime)\n        val isPrimeIter27 = Iterator.continually(isPrime)\n\
    \        val isPrimeIter", "        val primes = mutable.ArrayBuffer(2)\n    \
    \    var i = 2\n        while (i <= n / 2) {\n            if (n % i == 0) {\n\
    \                primes += i\n                n /= i\n            }\n        \
    \    i += 1\n        }\n        primes.last", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(n)(n => n % 2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0l).drop(2l).takeWhile(n => n % 2l != 0l).drop(2l).takeWhile(n => n %\
    \ 2l != 0", "        val factors = mutable.HashSet[Long]()\n        val i = 2\n\
    \        while(i <= n/i) {\n            if(n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        factors.max", "        val factors = mutable.Set[Long]()\n        for(i\
    \ <- 2 to n by 2)\n            if(n % i == 0)\n                factors += i\n\
    \        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 2 to n by 2) {\n            if (n % i == 0) {\n           \
    \     factors += i\n            }\n        }\n        factors.max", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <= n).filter(_ % _ != 0)\n      \
    \  val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).take", "        val factors = mutable.HashSet[Long]()\n        var largestPrimeFactor\
    \ = Long.MaxValue\n        var currentPrime = 1\n        while (n > 1) {\n   \
    \         if (factors.contains(n)) {\n                largestPrimeFactor = n\n\
    \                break\n            }\n            factors += n\n            currentPrime\
    \ += 1\n            while (n % currentPrime == 0) {\n                n /= currentPrime\n\
    \                factors += n\n            }\n        }\n        largestPrimeFactor",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                primes += i\n            }\n\
    \            i += 1\n        }\n        val largestPrime = primes.max\n      \
    \  factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n    \
    \    val i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n\
    \                factors += i\n                n /= i\n            }\n       \
    \     i += 1\n        }\n        if (n > 1) {\n            factors += n\n    \
    \    }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.ListBuffer[Long]()\n        for (d <- 2 to n by 2) {\n            if\
    \ (n % d == 0) {\n                factors += d\n                n /= d\n     \
    \       }\n        }\n        factors.max", "        val factors = mutable.HashSet[Long]()\n\
    \        val primes = mutable.HashSet[Long]()\n        val n = n.toInt\n     \
    \   val i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n \
    \               factors += i\n                primes += i\n            }\n   \
    \         i += 1\n        }\n        val largestPrime = primes.max\n        factors.find(n\
    \ => n % n == 0) match {\n            case Some(factor) => factor\n          \
    \  case None => largestPrime\n        }", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val\
    \ isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ !=\
    \ 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + ", "        val factors = mutable.ArrayBuffer.empty[Long]\n        for (i\
    \ <- 2 to n by 2) {\n            if (n % i == 0) {\n                factors +=\
    \ i\n            }\n        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        for(i <- 2 to n by 2){\n            if(n%i == 0){\n                factors\
    \ += i\n            }\n        }\n        factors.max", "        val factors =\
    \ mutable.HashSet[Long]()\n        val i = 2\n        while (i <= n / i) {\n \
    \           if (n % i == 0) {\n                factors += i\n                n\
    \ /= i\n            }\n            i += 1\n        }\n        if (n > 1) {\n \
    \           factors += n\n        }\n        factors.max", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        var i = 2\n        while(i <= n /\
    \ i) {\n            if(n%i == 0) {\n                factors += i\n           \
    \     n /= i\n            }\n            i += 1\n        }\n        factors.max",
  "        var maxFactor = 2 // Start with 2\n        var maxFactorPrime = true //\
    \ Start with true\n        var factor = 2\n        while (maxFactorPrime && factor\
    \ <= n) {\n            if (n % factor == 0) {\n                maxFactor = factor\n\
    \                maxFactorPrime = false\n            }\n            factor +=\
    \ 1\n        }\n        maxFactor", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val factors = mutable.ArrayBuffer.empty[Long]\n        val largestPrime\
    \ = mutable.ArrayBuffer.empty[Long]\n        val largestPrimeFactor = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCount\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMax = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n   \
    \     val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n      \
    \  val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val\
    \ primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex\
    \ = mutable.ArrayBuffer.empty[Long]\n        val primeFactorsCountMaxIndex = mutable.ArrayBuffer.empty[Long]",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 0).iterator\n\
    \        val isPrimeIter2 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 1).iterator\n        val isPrimeIter3 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 2).iterator\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 3).iterator\n        val isPrimeIter5\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 4).iterator\n\
    \        val isPrimeIter6 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 5).iterator\n        val isPrimeIter7 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 6).iterator\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 7).iterator\n        val isPrimeIter9\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 8).iterator\n\
    \        val isPrimeIter10 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 9).iterator\n        val isPrimeIter11 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 10).iterator\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ * _).takeWhile(_ > 1).filter(_ % _ == 11).iterator\n        val isPrimeIter13\
    \ = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_ % _ == 12).iterator\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(_ * _).takeWhile(_ > 1).filter(_\
    \ % _ == 13).iterator\n        val isPrimeIter15 = Iterator.iterate(n)(_ * _).takeWhile(_\
    \ > 1).filter(_ % _ == 14).iterator\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ * ", "        val factors = mutable.ListBuffer[Long]()\n        var i = 2\n\
    \        while (i <= n/2) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                n /= i\n            }\n            i += 1\n        }\n\
    \        if (n != 1) {\n            factors += n\n        }\n        factors.max",
  "        val primes = mutable.ArrayBuffer(2l)\n        var factor = 2l\n       \
    \ while(factor < n) {\n            primes += factor\n            factor += 2l\n\
    \        }\n        primes.lastOption.getOrElse(throw new Exception(\"No prime\
    \ factors found\"))", "        val factors = mutable.ListBuffer[Long]()\n    \
    \    val isPrime = mutable.ListBuffer[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter17 = Iterator.iterate(n)(_\
    \ + ", "        val factors = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isPrimeIter = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n\
    \        val isPrimeIterIterIter = Iterator.iterate(n)(x => isPrime.append(x %\
    \ 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIter = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n\
    \        val isPrimeIterIterIterIterIter = Iterator.iterate(n)(x => isPrime.append(x\
    \ % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIterIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n\
    \        val isPrimeIterIterIterIterIterIterIter = Iterator.iterate(n)(x => isPrime.append(x\
    \ % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIterIterIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n\
    \        val isPrimeIterIterIterIterIterIterIterIter = Iterator.iterate(n)(x =>\
    \ isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n\
    \        val isPrimeIterIterIterIterIterIterIterIterIter = Iterator.iterate(n)(x\
    \ => isPrime.append(x % 2 != 0)).takeWhile(x => x).iterator\n        val isPrimeIterIterIterIterIterIterIterIterIterIter\
    \ = Iterator.iterate(n)(x => isPrime.append(x % 2 != 0)).", "        var maxFactor\
    \ = 0\n        var maxFactorIndex = 0\n        var isPrime = true\n        var\
    \ isPrimeIndex = 0\n        var isPrimeEven = true\n        var isPrimeEvenIndex\
    \ = 0\n        var isPrimeOdd = true\n        var isPrimeOddIndex = 0\n      \
    \  var isPrimeOddEven = true\n        var isPrimeOddEvenIndex = 0\n        var\
    \ isPrimeOddOdd = true\n        var isPrimeOddOddIndex = 0\n        var isPrimeOddEvenOdd\
    \ = true\n        var isPrimeOddEvenOddIndex = 0\n        var isPrimeOddOddEvenOdd\
    \ = true\n        var isPrimeOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddEvenOdd\
    \ = true\n        var isPrimeOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddEvenOdd\
    \ = true\n        var isPrimeOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex\
    \ = 0\n        var isPrimeOddOddOddOddOddOddOddEvenOddIndex = 0\n        var isPrimeOddOddOddOddOddOdd",
  "        val primes = mutable.ArrayBuffer(2l)\n        val factors = mutable.ArrayBuffer(2l)\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0l) {\n\
    \                primes += i\n                factors += i\n            }\n  \
    \          i += 1\n        }\n        val largestPrime = primes.max\n        val\
    \ largestFactor = factors.max\n        largestPrime * largestFactor", "      \
    \  val factors = mutable.HashSet[Long]()\n        for(i <- 2 to n by 2)\n    \
    \        factors += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeIter = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <= n).filter(_\
    \ % _ != 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_ + 2l).takeWhile(_\
    \ <= n).filter(_ % _ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter7 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter11 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter13 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter15 = Iterator.iterate(2l)(_\
    \ + 2l).take", "        val factors = mutable.ListBuffer[Long]()\n        val\
    \ isPrime = mutable.ListBuffer[Boolean]()\n        for (i <- 2 to n by 2) {\n\
    \            if (n % i == 0) {\n                factors += i\n               \
    \ isPrime += false\n            }\n            else {\n                isPrime\
    \ += true\n            }\n        }\n        if (isPrime.last)\n            factors.last\n\
    \        else\n            largestPrimeFactor(factors.last)", "        val primes\
    \ = mutable.ArrayBuffer(2l) ++ (2l..n).filter(x => n % x == 0)\n        val largestPrime\
    \ = primes.max\n        largestPrime", "        val primes = mutable.ArrayBuffer(2L);\n\
    \        var factor = 2L;\n        while (factor <= n) {\n            if (n %\
    \ factor == 0) {\n                primes += factor;\n                n /= factor;\n\
    \            }\n            else {\n                factor += 2L;\n          \
    \  }\n        }\n        primes.last", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n > 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.Set[Long]()\n\
    \        val primes = mutable.Set[Long]()\n        val maxFactor = mutable.Set[Long]()\n\
    \        val maxFactors = mutable.Set[Long]()\n        val maxPrime = mutable.Set[Long]()\n\
    \        val maxPrimes = mutable.Set[Long]()\n        val maxFactorPrimes = mutable.Set[Long]()\n\
    \        val maxPrimePrimes = mutable.Set[Long]()\n        val maxPrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimePrimeFactors = mutable.Set[Long]()\n\
    \        val maxPrimePrimePrimes = mutable.Set[Long]()\n        val maxPrimePrimePrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val maxPrimePrimePrimePrimeFactors = mutable.Set[Long]()\n        val\
    \ maxPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimes = mutable.Set[Long]()\n\
    \        val maxPrimePrimePrimePrimePrimeFactors = mutable.Set[Long]()\n     \
    \   val maxPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val\
    \ maxPrimePrimePrimePrimePrimePrimeFactors = mutable.Set[Long]()\n        val\
    \ maxPrimePrimePrimePrimePrimePrimes = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimePrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimePrimePrimes =\
    \ mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimePrimeFactors =\
    \ mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimePrimePrimeFactors\
    \ = mutable.Set[Long]()\n        val maxPrimePrimePrimePrimePrimePrimePrimes =\
    \ mutable.Set[Long]()\n        ", "        val factors = mutable.ListBuffer[Long]()\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        for(i <- 2 to n by 2){\n            val p = i\n            for(j <- 3\
    \ to n by 2){\n                if(p % j == 0){\n                    factors +=\
    \ j\n                    break\n                }\n            }\n        }\n\
    \        factors.max", "        val factors = mutable.Set[Long]()\n        val\
    \ primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Boolean]()\n\
    \        val isPrimeIter = mutable.Set[Boolean]()\n        val isPrimeIter2 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter3 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter4 = mutable.Set[Boolean]()\n        val isPrimeIter5 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter6 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter7 = mutable.Set[Boolean]()\n        val isPrimeIter8 =\
    \ mutable.Set[Boolean]()\n        val isPrimeIter9 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter10 = mutable.Set[Boolean]()\n        val isPrimeIter11\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter12 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter13 = mutable.Set[Boolean]()\n        val isPrimeIter14\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter15 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter16 = mutable.Set[Boolean]()\n        val isPrimeIter17\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter18 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter19 = mutable.Set[Boolean]()\n        val isPrimeIter20\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter21 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter22 = mutable.Set[Boolean]()\n        val isPrimeIter23\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter24 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter25 = mutable.Set[Boolean]()\n        val isPrimeIter26\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter27 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter28 = mutable.Set[Boolean]()\n        val isPrimeIter29\
    \ = mutable.Set[Boolean]()\n        val isPrimeIter30 = mutable.Set[Boolean]()\n\
    \        val isPrimeIter", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        factors += 2\n        factors += 3\n        factors += 5\n        factors\
    \ += 7\n        factors += 11\n        factors += 13\n        factors += 17\n\
    \        factors += 19\n        factors += 23\n        factors += 29\n       \
    \ factors += 31\n        factors += 37\n        factors += 41\n        factors\
    \ += 43\n        factors += 47\n        factors += 53\n        factors += 59\n\
    \        factors += 61\n        factors += 67\n        factors += 71\n       \
    \ factors += 73\n        factors += 79\n        factors += 83\n        factors\
    \ += 89\n        factors += 97\n        factors += 101\n        factors += 103\n\
    \        factors += 107\n        factors += 109\n        factors += 113\n    \
    \    factors += 127\n        factors += 131\n        factors += 137\n        factors\
    \ += 139\n        factors += 149\n        factors += 151\n        factors += 157\n\
    \        factors += 163\n        factors += 167\n        factors += 173\n    \
    \    factors += 179\n        factors += 181\n        factors += 191\n        factors\
    \ += 193\n        factors += 197\n        factors += 199\n        factors += 211\n\
    \        factors += 223\n        factors += 227\n        factors += 229\n    \
    \    factors += 233\n        factors += 239\n        factors += 241\n        factors\
    \ += 247\n        factors += 249\n        factors += 251\n        factors += 253\n\
    \        factors += 257\n        factors += 263\n        factors += 269\n    \
    \    factors += 271\n        factors += 277\n        factors += 281\n        factors\
    \ += 283\n        factors += 293\n        factors += 307\n        factors += 311\n\
    \        factors += 313\n        factors += 317\n        factors += 323\n    \
    \    factors += 329\n        factors += 331\n        factors += 337\n        factors\
    \ += 347\n        factors += 349\n        factors += 353\n        factors += 359\n\
    \        factors += 363\n        factors += 369\n        factors += 373\n    \
    \    factors += 379\n        factors += 383\n        factors += 389\n        factors\
    \ += 395\n        factors += 401\n        factors += 409\n        factors += 419\n\
    \        factors += 431\n        factors += 439\n        factors += 443\n    \
    \    factors += 449\n        factors += 457\n        factors += 461\n        factors\
    \ += 463", "        val primes = mutable.ArrayBuffer(2l) ++ (2l..n).filter(x =>\
    \ isPrime(x)).map(x => x * x)\n        primes.max", '        val primes = mutable.ArrayBuffer(2l).+:(2l).+:(3l).+:(5l).+:(7l).+:(11l).+:(13l).+:(17l).+:(19l).+:(23l).+:(29l).+:(31l).+:(37l).+:(41l).+:(43l).+:(47l).+:(53l).+:(59l).+:(61l).+:(67l).+:(71l).+:(73l).+:(79l).+:(83l).+:(89l).+:(97l).+:(101l).+:(103l).+:(107l).+:(109l).+:(113l).+:(127l).+:(131l).+:(137l).+:(139l).+:(149l).+:(151l).+:(157l).+:(163l).+:(167l).+:(173l).+:(179l).+:(181l).+:(191l).+:(193l).+:(197l).+:(199l).+:(211l).+:(223l).+:(227l).+:(229l).+:(233l).+:(239l).+:(241l).+:(251l).+:(257l).+:(263l).+:(269l).+:(271l).+:(277l).+:(281l).+:(283l).+:(293l).+:(307l).+:(311l).+:(313l).+:(317l).+:(331l).+:(337l).+:(347l).+:(349l).+:(353l).+:(359l).+:(367l).+:(373l).+:(379l).+:(383l).+:(389l).+:(397l).+:(401l).+:(409l).+:(419l).+:(421l).+:(431l).+:(433l).+:(439l).+:(443l).+:(449l).+:(457l).+:(461l).+:(463l).+:(467l).+:(479l).+:(487l).+:(491l).',
  "        val primes = mutable.Set[Long]()\n        val factors = mutable.Set[Long]()\n\
    \        val largestPrime = mutable.Set[Long]()\n        val largestPrimeFactor\
    \ = mutable.Set[Long]()\n        val largestPrimeFactors = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSize = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSize\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSize = mutable.Set[Long]()\n     \
    \   val largestPrimeFactorsSizeSizeSizeSizeSize = mutable.Set[Long]()\n      \
    \  val largestPrimeFactorsSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n   \
    \     val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.Set[Long]()\n\
    \        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize =\
    \ mutable.Set[Long]()\n        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.Set[Long]()\n        val largestPrimeFactorsSizeSize", "        val\
    \ factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 1l).map(n => n % _ == 0)\n        val isPrimeIter2 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _\
    \ == 0)\n        val isPrimeIter3 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <\
    \ n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _ == 0)\n        val isPrimeIter4\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 1l).map(n => n % _ == 0)\n        val isPrimeIter5 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _\
    \ == 0)\n        val isPrimeIter6 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <\
    \ n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _ == 0)\n        val isPrimeIter7\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 1l).map(n => n % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(2l)(_\
    \ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _\
    \ == 0)\n        val isPrimeIter9 = Iterator.iterate(2l)(_ + 2l).takeWhile(_ <\
    \ n).filter(_ % _ != 0l).takeWhile(_ > 1l).map(n => n % _ == 0)\n        val isPrimeIter10\
    \ = Iterator.iterate(2l)(_ + 2l).takeWhile(_ < n).filter(_ % _ != 0l).takeWhile(_\
    \ > 1l", "        var maxFactor = Long.MinValue\n        var maxFactorPrime =\
    \ 0\n        var maxFactorPrimePrime = 0\n        var maxFactorPrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0\n   \
    \     var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n       \
    \ var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0\n        var maxFactorPrimePrimePrimePrimePrime", "        val factors =\
    \ mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        var i = 2\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                factors\
    \ += i\n                primes += i\n                isPrime += true\n       \
    \     }\n            i += 1\n        }\n        val largestPrime = primes.max\n\
    \        val largestFactor = factors.max\n        val largestPrimeIndex = primes.indexOf(largestPrime)\n\
    \        val largestFactorIndex = factors.indexOf(largestFactor)\n        val\
    \ isPrimeIndex = primes.indexOf(largestPrime)\n        val isPrime = isPrimeIndex.map(x\
    \ => isPrimeIndex.indexOf(x) == largestPrimeIndex).getOrElse(false)\n        if\
    \ (isPrime) {\n            largestPrime\n        } else {\n            largestFactor\n\
    \        }", "        val factors = mutable.ArrayBuffer.empty[Long]\n        for(i\
    \ <- 2 to n) factors += i\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        if (n != 1) {\n            factors += n\n\
    \        }\n        factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        val primes = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isFactor = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n       \
    \ val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimeFactor\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePrimePrimePrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimePrimePri", "        val factors = mutable.ListBuffer[Long]()\n\
    \        val i = 2l\n        while(i <= n){\n            val isPrime = true\n\
    \            for(j <- 2l; j < (i.toLong / 2l); j += i){\n                if(i\
    \ % j == 0){\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if(isPrime){\n                factors\
    \ += i\n            }\n            i += 2l\n        }\n        factors.max", " \
    \       val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter2 = Iterator.iterate(n)(n\
    \ => isPrime(n))\n        val isPrimeIter3 = Iterator.iterate(n)(n => isPrime(n))\n\
    \        val isPrimeIter4 = Iterator.iterate(n)(n => isPrime(n))\n        val\
    \ isPrimeIter5 = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter6\
    \ = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter7 = Iterator.iterate(n)(n\
    \ => isPrime(n))\n        val isPrimeIter8 = Iterator.iterate(n)(n => isPrime(n))\n\
    \        val isPrimeIter9 = Iterator.iterate(n)(n => isPrime(n))\n        val\
    \ isPrimeIter10 = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter11\
    \ = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter12 = Iterator.iterate(n)(n\
    \ => isPrime(n))\n        val isPrimeIter13 = Iterator.iterate(n)(n => isPrime(n))\n\
    \        val isPrimeIter14 = Iterator.iterate(n)(n => isPrime(n))\n        val\
    \ isPrimeIter15 = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter16\
    \ = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter17 = Iterator.iterate(n)(n\
    \ => isPrime(n))\n        val isPrimeIter18 = Iterator.iterate(n)(n => isPrime(n))\n\
    \        val isPrimeIter19 = Iterator.iterate(n)(n => isPrime(n))\n        val\
    \ isPrimeIter20 = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter21\
    \ = Iterator.iterate(n)(n => isPrime(n))\n        val isPrimeIter22 = Iterator.iterate(n)(n\
    \ => isPrime(n))", "        val factors = mutable.ArrayBuffer.empty[Long]\n  \
    \      val maxFactor = math.max(2, math.floor(math.sqrt(n)))\n        for(i <-\
    \ 2 to maxFactor) {\n            if(n%i == 0) {\n                factors += i\n\
    \                n /= i\n            }\n        }\n        if(n > 1) {\n     \
    \       factors += n\n        }\n        factors.max", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primeFactors = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor3 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor7 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor11 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor15 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor19 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor23 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimeFactor26 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimeFactor27 = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor28\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeFactor", "        val\
    \ primes = mutable.ArrayBuffer(2)\n        var i = 2\n        while (i <= n /\
    \ 2) {\n            if (n % i == 0) {\n                primes += i\n         \
    \       n /= i\n            }\n            i += 1\n        }\n        primes.last",
  "        val factors = mutable.ArrayBuffer.empty[Long]\n        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeIter\
    \ = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val\
    \ isPrimeIter2 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_ % _ !=\
    \ 0)\n        val isPrimeIter3 = Iterator.iterate(n)(_ + 2).takeWhile(_ <= n).filter(_\
    \ % _ == 0)\n        val isPrimeIter4 = Iterator.iterate(n)(_ + 2).takeWhile(_\
    \ <= n).filter(_ % _ != 0)\n        val isPrimeIter5 = Iterator.iterate(n)(_ +\
    \ 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter6 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter7 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter8 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter9 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter10 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter11 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter12 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter13 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter14 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val isPrimeIter15 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ == 0)\n        val isPrimeIter16 = Iterator.iterate(n)(_\
    \ + 2).takeWhile(_ <= n).filter(_ % _ != 0)\n        val is", "        val factors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        var i = 2\n        while(i <= n && isPrime(i)) {\n            val isPrime\
    \ = n.toInt % i == 0\n            factors += i\n            i += 1\n        }\n\
    \        factors.max", "        val factors = mutable.Set[Long]()\n        val\
    \ i = 2\n        while (i <= n / i) {\n            if (n % i == 0) {\n       \
    \         factors += i\n                n /= i\n            }\n            i +=\
    \ 1\n        }\n        if (n > 1) {\n            factors += n\n        }\n  \
    \      factors.max", "        val factors = mutable.ArrayBuffer.empty[Long]\n\
    \        var i = 2\n        while (i <= n / i) {\n            if (n % i == 0)\
    \ {\n                factors += i\n                n /= i\n            }\n   \
    \         i += 1\n        }\n        factors.max"]
stop_tokens:
- "\n    }\n"
