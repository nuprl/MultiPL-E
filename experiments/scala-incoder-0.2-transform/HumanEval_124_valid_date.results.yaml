language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val daysInMonth = Array.tabulate(12)(i\
    \ => i + 1)\n        val monthsInYear = Array.tabulate(12)(i => i + 1)\n     \
    \   val daysInYear = Array.tabulate(12)(i => i + 1)\n        val months = dateArray.getMonth\n\
    \        val year = dateArray.getYear\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2_67newq.scala:54:25 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2_67newq.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mdaysInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mdaysInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i"
  stdout: ''
  timestamp: 1659800764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.length)\n        val dayCount = (dayArray.length)\n\
    \        val yearCount = (yearArray.length)\n        val monthValid = monthArray.contains(month)\n\
    \        val dayValid = dayArray.contains(day)\n        val yearValid = yearArray.contains(year)\n\
    \        val monthCountValid = monthCount != 0\n        val dayCountValid = dayCount\
    \ != 0\n        val yearCountValid = yearCount != 0\n        val monthValidValid\
    \ = monthValid && monthCountValid\n        val dayValidValid = dayValid && dayCountValid\n\
    \        val yearValidValid = yearValid && yearCountValid\n        val monthValidValidValid\
    \ = monthValidValid && dayValidValid && yearValidValid\n        val dateValid\
    \ = monthValidValidValid && dayValidValid && yearValidValid\n        dateValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf96vewnz.scala:46)\n\tat Problem.main(tmpf96vewnz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_xs_k4c.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDay = monthArray.zip(dayArray).map(x => x._1 -> x._2)\n    \
    \    val monthYear = monthArray.zip(yearArray).map(x => x._1 -> x._2)\n      \
    \  val monthYearDay = monthYear.zip(dayArray).map(x => x._1 -> x._2)\n       \
    \ val monthYearDayArray = monthYearDay.map(x => x._1 -> x._2)\n        val monthYearDayArray2\
    \ = monthYearDayArray.map(x => x._1 -> x._2)\n        val monthYearDayArray3 =\
    \ monthYearDayArray2.map(x => x._1 -> x._2)\n        val monthYearDayArray4 =\
    \ monthYearDayArray3.map(x => x._1 -> x._2)\n        val monthYearDayArray5 =\
    \ monthYearDayArray4.map(x => x._1 -> x._2)\n        val monthYearDayArray6 =\
    \ monthYearDayArray5.map(x => x._1 -> x._2)\n        val monthYearDayArray7 =\
    \ monthYearDayArray6.map(x => x._1 -> x._2)\n        val monthYearDayArray8 =\
    \ monthYearDayArray7.map(x => x._1 -> x._2)\n        val monthYearDayArray9 =\
    \ monthYearDayArray8.map(x => x._1 -> x._2)\n        val monthYearDayArray10 =\
    \ monthYearDayArray9.map(x => x._1 -> x._2)\n        val monthYearDayArray11 =\
    \ monthYearDayArray10.map(x => x._1 -> x._2)\n        val monthYearDayArray12\
    \ = monthYearDayArray11.map(x => x._1 -> x._2)\n        val monthYearDayArray13\
    \ = monthYearDayArray12.map(x => x._1 -> x._2)\n        val monthYearDayArray14\
    \ = monthYearDayArray13.map(x => x._1 -> x._2)\n        val monthYearDayArray15\
    \ = monthYearDayArray14.map(x => x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe8l2cgi2.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpe8l2cgi2.scala:46:65\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m46 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmonthYearDayArray15\e[0m = monthYearDayArray14.map(\e[36mx\e\
    [0m => x.\n\e[31m\e[31m   |\e[0m                                             \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe8l2cgi2.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7, 8,\
    \ 10, 12)\n        val dayArray = List(1, 30, 29)\n        val yearArray = List(1,\
    \ 9999)\n        val monthIndex = monthArray.indexOf(month)\n        val dayIndex\
    \ = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n \
    \       val validMonth = monthIndex >= 0\n        val validDay = dayIndex >= 0\n\
    \        val validYear = yearIndex >= 0\n        val validMonthAndDay = validMonth\
    \ && validDay\n        val validYearAndMonth = validYear && validMonthAndDay\n\
    \        val validMonthAndYear = validMonth && validYear\n        val validYearAndDay\
    \ = validYear && validDay\n        val validMonthAndDayAndYear = validMonthAndDay\
    \ && validYearAndMonth\n        val validYearAndMonthAndDay = validYearAndMonth\
    \ && validMonthAndDay\n        val validMonthAndYearAndDay = validMonthAndYear\
    \ && validYearAndDay\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonth\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuj64g5gt.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 2 && day < 29)\n            return\
    \ false\n        if(month == 2 && day > 28)\n            return false\n      \
    \  if(day > 31)\n            return false\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n \
    \           return true\n        if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11)\n            return true\n        if(month == 2)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ynn76pu.scala:56)\n\tat Problem.main(tmp_ynn76pu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj.getTime != 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0czmk7og.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.count(_ == month) + 1)\n        val dayCount\
    \ = (dayArray.count(_ == day) + 1)\n        val yearCount = (yearArray.count(_\
    \ == year) + 1)\n        val monthValid = monthCount <= 12\n        val dayValid\
    \ = dayCount <= 31\n        val yearValid = yearCount <= 12\n        val dateValid\
    \ = monthValid && dayValid && yearValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijdne_jw.scala:40)\n\tat Problem.main(tmpijdne_jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month > 12 || month < 1 || day >\
    \ 31 || day < 1 || year < 1000 || year > 9999) {\n            return false\n \
    \       }\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n      \
    \  val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val yearArray\
    \ = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(monthArray.contains(month) && dayArray.contains(day) && yearArray.contains(year))\
    \ {\n            return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fsfo4wl.scala:38)\n\tat Problem.main(tmp3fsfo4wl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgx2gs6w.scala:36)\n\tat Problem.main(tmppgx2gs6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckDays\
    \ = dateToCheck.getTime\n        val dateToCheckMonths = dateToCheck.getMonth\n\
    \        val dateToCheckYears = dateToCheck.getYear\n        val dateToCheckDaysLessThan1OrHigherThan31\
    \ = dateToCheckDays <= 31 && dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n\
    \        val dateToCheckDaysLessThan1OrHigherThan30 = dateToCheckDays <= 30 &&\
    \ dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n        val dateToCheckDaysLessThan1OrHigherThan29\
    \ = dateToCheckDays <= 29 && dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n\
    \        val dateToCheckMonthLessThan1OrHigherThan12 = dateToCheckMonths <= 12\
    \ && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan11\
    \ = dateToCheckMonths <= 11 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan10\
    \ = dateToCheckMonths <= 10 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan9\
    \ = dateToCheckMonths <= 9 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan8\
    \ = dateToCheckMonths <= 8 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan7\
    \ = dateToCheckMonths <= 7 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan6\
    \ = dateToCheckMonths <= 6 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan5\
    \ = dateToCheckMonths <= 5 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan4\
    \ = dateToCheckMonths <= 4 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan3\
    \ = dateToCheckMonths <= 3 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan2\
    \ = dateToCheckMonths <= 2 && dateToCheckYear\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpggqniet3.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpggqniet3.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ && dayArray.contains(day) && yearArray.contains(year)){\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvgxidfg.scala:38)\n\tat Problem.main(tmpvvgxidfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray2 = Array(4,6,9,11)\n\
    \        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray3 = Array(1,3,5,7,8,10,12)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray5 = Array(2,3)\n        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray6 = Array(1,3,5,7,8,10,12)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray7 = Array(4,6,9,11)\n        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray8 = Array(1,3,5,7,8,10,12)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray9 = Array(4,6,9,11)\n        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray10 = Array(1,3,5,7,8,10,12)\n        val dayArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray11 = Array(4,6,9,11)\n        val dayArray11 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray12 = Array(2,3)\n        val dayArray12 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray13 = Array(1,3,5,7,8,10,12)\n        val dayArray13 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray14 = Array(4,6,9,11)\n        val dayArray14 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray15 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3jkg76iv.scala:55:26 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mmonthArray15\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jkg76iv.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3jkg76iv.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq7_baj8t.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7_baj8t.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7_baj8t.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if (dateArray.length != 3) {\n            return false\n        }\n        val\
    \ months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days  = List(1,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = dateArray(0).toString.split(\"-\")\n        if (monthArray.length\
    \ != 2) {\n            return false\n        }\n        val monthIndex = months.indexOf(monthArray(0))\n\
    \        if (monthIndex < 1 || monthIndex > 12) {\n            return false\n\
    \        }\n        val dayArray = dateArray(1).toString.split(\"-\")\n      \
    \  if (dayArray.length != 2) {\n            return false\n        }\n        val\
    \ dayIndex = days.indexOf(dayArray(0))\n        if (dayIndex < 1 || dayIndex >\
    \ 31) {\n            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgo5l7tmb.scala:47)\n\tat Problem.main(tmpgo5l7tmb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray match {\n\
    \            case null => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4fb2gntg.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1, 3, 5, 7, 8, 10,\
    \ 12)\n        val daysNotLessThanOneOrHigherThan31 = List(31, 29, 30, 31)\n \
    \       val daysNotLessThanOneOrHigherThan30 = List(30, 31)\n        val daysNotLessThanOneOrHigherThan29\
    \ = List(29)\n        val monthNotLessThanOneOrHigherThan12 = List(12)\n     \
    \   val monthNotLessThanOneOrHigherThan11 = List(11)\n        val monthNotLessThanOneOrHigherThan10\
    \ = List(10)\n        val monthNotLessThanOneOrHigherThan9 = List(9)\n       \
    \ val monthNotLessThanOneOrHigherThan8 = List(8)\n        val monthNotLessThanOneOrHigherThan7\
    \ = List(7)\n        val monthNotLessThanOneOrHigherThan6 = List(6)\n        val\
    \ monthNotLessThanOneOrHigherThan5 = List(5)\n        val monthNotLessThanOneOrHigherThan4\
    \ = List(4)\n        val monthNotLessThanOneOrHigherThan3 = List(3)\n        val\
    \ monthNotLessThanOneOrHigherThan2 = List(2)\n        val monthNotLessThanOneOrHigherThan1\
    \ = List(1)\n        val monthNotLessThanOneOrHigherThan0 = List(0)\n        val\
    \ daysNotLessThanOneOrHigherThan31 = List(31, 29, 30, 31)\n        val daysNotLessThanOneOrHigherThan30\
    \ = List(30, 31)\n        val daysNotLessThanOneOrHigherThan29 = List(29)\n  \
    \      val monthNotLessThanOneOrHigherThan12 = List(12)\n        val monthNotLessThanOneOrHigherThan11\
    \ = List(11)\n        val monthNotLessThanOneOrHigherThan10 = List(10)\n     \
    \   val monthNotLessThanOneOrHigherThan9 = List(9)\n        val monthNotLessThanOneOrHigherThan8\
    \ = List(8)\n        val monthNotLessThanOneOrHigherThan7 = List(7)\n        val\
    \ monthNotLessThanOneOrHigherThan6 = List(6)\n        val monthNotLessThanOneOrHigherThan5\
    \ = List(5)\n        val monthNotLessThanOneOrHigherThan4 = List(4)\n        val\
    \ monthNotLessThanOneOrHigherThan3 = List(3)\n        val monthNotLessThanOneOrHigh\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt9zi9d93.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt9zi9d93.scala:43:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysNotLessThanOneOrHigherThan31\e[0m = List(\e[31m31\e[0m, \e[31m29\e\
    [0m, \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysNotLessThanOneOrHigherThan31 is already defined as \e\
    [33mvalue\e[0m \e[35mdaysNotLessThanOneOrHigherThan31\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt9zi9d93.scala:44:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysNotLessThanOneOrHigherThan30\e[0m = List(\e[31m30\e[0m, \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysNotLessThanOneOrHigherThan30 is already defined as \e\
    [33mvalue\e[0m \e[35mdaysNotLessThanOneOrHigherThan30\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt9zi9d93.scala:45:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysNotLessThanOneOrHigherThan29\e[0m = List(\e[31m29\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysNotLessThanOneOrHigherThan29 is already defined as \e[33mvalue\e\
    [0m \e[35mdaysNotLessThanOneOrHigherThan29\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt9zi9d93.scala:46:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThanOneOrHigherThan12\e[0m = List(\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheck2\
    \ = dateFormat.parse(date)\n        val dateToCheck3 = dateFormat.parse(date)\n\
    \        val dateToCheck4 = dateFormat.parse(date)\n        val dateToCheck5 =\
    \ dateFormat.parse(date)\n        val dateToCheck6 = dateFormat.parse(date)\n\
    \        val dateToCheck7 = dateFormat.parse(date)\n        val dateToCheck8 =\
    \ dateFormat.parse(date)\n        val dateToCheck9 = dateFormat.parse(date)\n\
    \        val dateToCheck10 = dateFormat.parse(date)\n        val dateToCheck11\
    \ = dateFormat.parse(date)\n        val dateToCheck12 = dateFormat.parse(date)\n\
    \        val dateToCheck13 = dateFormat.parse(date)\n        val dateToCheck14\
    \ = dateFormat.parse(date)\n        val dateToCheck15 = dateFormat.parse(date)\n\
    \        val dateToCheck16 = dateFormat.parse(date)\n        val dateToCheck17\
    \ = dateFormat.parse(date)\n        val dateToCheck18 = dateFormat.parse(date)\n\
    \        val dateToCheck19 = dateFormat.parse(date)\n        val dateToCheck20\
    \ = dateFormat.parse(date)\n        val dateToCheck21 = dateFormat.parse(date)\n\
    \        val dateToCheck22 = dateFormat.parse(date)\n        val dateToCheck23\
    \ = dateFormat.parse(date)\n        val dateToCheck24 = dateFormat.parse(date)\n\
    \        val dateToCheck25 = dateFormat.parse(date)\n        val dateToCheck26\
    \ = dateFormat.parse(date)\n        val dateToCheck27 = dateFormat.parse(date)\n\
    \        val dateToCheck28 = dateFormat.parse(date)\n        val dateToCheck29\
    \ = dateFormat.parse(date)\n        val dateToCheck30 = dateFormat.parse(date)\n\
    \        val dateToCheck31 = dateFormat.parse(date)\n        val dateToCheck32\
    \ = dateFormat.parse(date)\n        val dateToCheck33 = dateFormat.parse(date)\n\
    \        val dateToCheck34 = dateFormat.parse(date)\n        val dateToCheck35\
    \ = dateFormat.parse(date)\n        val dateToCheck36 = dateFormat.parse(date)\n\
    \        val dateToCheck37 = dateFormat.parse(date)\n        val dateToCheck38\
    \ = dateFormat.parse(date)\n        val dateToCheck39 = dateFormat.parse(date)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp5zzhjub.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp5zzhjub.scala:63:5 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        val daysInMonth = daysInMonth(months)\n        val monthsInYear = monthsInYear(months)\n\
    \        val year = year - 1\n        val daysInYear = daysInMonth + daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysInYear(months)\n        val daysInYear = daysInYear(months)\n\
    \        val daysInYear = daysIn\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpznz9850w.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpznz9850w.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = monthsInYear(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpznz9850w.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36myear\e[0m = year - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0myear is already\
    \ defined as \e[33mvalue\e[0m \e[35myear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpznz9850w.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = daysInYear(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mdaysInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpznz9850w.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = daysInYear(months)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mday"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateArray = dateString.toLocalDate.toArray\n\
    \        val monthArray = dateArray(0).toString.toInt.toArray.map(_.toChar)\n\
    \        val dayArray = dateArray(1).toString.toInt.toArray.map(_.toChar)\n  \
    \      val yearArray = dateArray(2).toString.toInt.toArray.map(_.toChar)\n   \
    \     val monthCount = monthArray.length\n        val dayCount = dayArray.length\n\
    \        val yearCount = yearArray.length\n        val monthCountValid = monthCount\
    \ != 0 && monthCount != 12\n        val dayCountValid = dayCount != 0 && dayCount\
    \ != 31\n        val yearCountValid = yearCount != 0 && yearCount != 36\n    \
    \    val monthCountValid2 = monthCount != 0 && monthCount != 12 && monthCount\
    \ != 31 && monthCount != 30\n        val dayCountValid2 = dayCount != 0 && dayCount\
    \ != 31 && dayCount != 30\n        val yearCountValid2 = yearCount != 0 && yearCount\
    \ != 36 && yearCount != 36 && yearCount != 36\n        val monthCountValid3 =\
    \ monthCount != 0 && monthCount != 12 && monthCount != 31 && monthCount != 30\
    \ && monthCount != 29\n        val dayCountValid3 = dayCount != 0 && dayCount\
    \ != 31 && dayCount != 30 && dayCount != 29\n        val yearCountValid3 = yearCount\
    \ != 0 && yearCount != 36 && yearCount != 36 && yearCount != 36 && yearCount !=\
    \ 36\n        val monthCountValid4 = monthCount != 0 && monthCount != 12 && monthCount\
    \ != 31 && monthCount != 30 && monthCount != 29 && monthCount != 28\n        val\
    \ dayCountValid4 = dayCount != 0 && dayCount != 31 && dayCount != 30 && dayCount\
    \ != 29 && dayCount != 28\n        val yearCountValid4 = yearCount != 0 && yearCount\
    \ != 36 && yearCount != 36 && yearCount != 36 && yearCount != 36 && yearCount\
    \ != 36\n        val monthCountValid5 = monthCount != 0 && monthCount != 12 &&\
    \ monthCount != 31 && monthCount != 30 && monthCount != 29 && monthCount != 28\
    \ && monthCount != 27\n        val dayCountValid5 = dayCount != 0 && dayCount\
    \ != 31 && dayCount != 30 && dayCount != 29 && dayCount != 28 && dayCount != 27\n\
    \        val yearCountValid5 = yearCount != 0 && year\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa7v67m3s.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpa7v67m3s.scala:46:5 ---------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val monthArray\
    \ = dateArray(0).toString.split(\"-\")\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(monthArray.length != 1 || monthArray(0) < 1 || monthArray(0)\
    \ > 12)\n            return false\n        if(dayArray.length != 1 || dayArray(0)\
    \ < 1 || dayArray(0) > 31)\n            return false\n        if(dayArray.length\
    \ != 1 || dayArray(0) < 1 || dayArray(0) > 30)\n            return false\n   \
    \     if(dayArray.length != 1 || dayArray(0) < 1 || dayArray(0) > 29)\n      \
    \      return false\n        if(monthArray(0) == 2 && dayArray(0) > 29)\n    \
    \        return false\n        if(monthArray(0) == 2 && dayArray(0) == 29)\n \
    \           return false\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13u_t207.scala:27:53\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(monthArray.length\
    \ != \e[31m1\e[0m || monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                           Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m  \
    \                                                   Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13u_t207.scala:27:74 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(monthArray.length != \e[31m1\e\
    [0m || monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e[31m0\e[0m) > \e\
    [31m12\e[0m)\n\e[31m\e[31m   |\e[0m                                          \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \                                Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e\
    [0m                                                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp13u_t207.scala:29:49 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m(dayArray.length != \e[31m1\e[0m\
    \ || dayArray(\e[31m0\e[0m) < \e[31m1\e[0m || dayArray(\e[31m0\e[0m) > \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                                     \
    \            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp13u_t207.scala:29:68 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mif\e[0m(dayArray.length != \e[31m1\e[0m || dayArray(\e[31m0\e\
    [0m) < \e[31m1\e[0m || dayArray(\e[31m0\e[0m) > \e[31m31\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                            "
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.isValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9brqlshq.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_ges9n6.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getYear >\
    \ 0 && dateArray.getMonth > 0 && dateArray.getDay > 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuzq4_1u5.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12){\n    \
    \        return false\n        }\n        if(days < 1 || days > 31){\n       \
    \     return false\n        }\n        if(months == 2 && days < 1 || days > 29){\n\
    \            return false\n        }\n        if(months == 2 && days > 30){\n\
    \            return false\n        }\n        if(months == 3 && days < 1 || days\
    \ > 30){\n            return false\n        }\n        if(months == 3 && days\
    \ > 31){\n            return false\n        }\n        if(months == 4 && days\
    \ < 1 || days > 30){\n            return false\n        }\n        if(months ==\
    \ 4 && days > 31){\n            return false\n        }\n        if(months ==\
    \ 5 && days < 1 || days > 30){\n            return false\n        }\n        if(months\
    \ == 5 && days > 31){\n            return false\n        }\n        if(months\
    \ == 6 && days < 1 || days > 30){\n            return false\n        }\n     \
    \   if(months == 6 && days > 31){\n            return false\n        }\n     \
    \   if(months == 7 && days < 1 || days > 30){\n            return false\n    \
    \    }\n        if(months == 7 && days > 31){\n            return false\n    \
    \    }\n        if(months == 8 && days < 1 || days > 30){\n            return\
    \ false\n        }\n        if(months == 8 && days > 31){\n            return\
    \ false\n        }\n        if(months == 9 && days < 1 || days > 30){\n      \
    \      return false\n        }\n        if(months == 9 && days > 31){\n      \
    \      return false\n        }\n        if(months == 10 && days < 1 || days >\
    \ 30){\n            return false\n        }\n        if(months == 10 && days >\
    \ 31){\n            return false\n        }\n        if(months == 11 && days <\
    \ 1 || days > 30){\n            return false\n        }\n        if(months ==\
    \ 11 && days > 31){\n            return false\n        }\n        if(months ==\
    \ 12 && days < 1 || days > 30){\n            return false\n        }\n       \
    \ if(months == 12 && days > 31){\n            return false\n        }\n      \
    \  true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val validMonths = List(1,3,5,7,8,10,12)\n\
    \        val validDays = List(1,30,29,30)\n        val validYear = List(2000,2010,2020)\n\
    \        val validMonth = List(4,6,9,11)\n        val validDay = List(1,29,30)\n\
    \        val validYearMonth = List(2000,2010,2020,2040) // leap year\n       \
    \ val validYearMonthDay = List(2000,2010,2020,2040,2050) // leap year\n      \
    \  val validYearMonthDays = List(2000,2010,2020,2040,2050,2060) // leap year\n\
    \        val validYearMonthDaysPlusOne = List(2000,2010,2020,2040,2050,2060,2070,2080)\
    \ // leap year\n        val validYearMonthDaysPlusTwo = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100)\
    \ // leap year\n        val validYearMonthDaysPlusThree = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111)\
    \ // leap year\n        val validYearMonthDaysPlusFour = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122)\
    \ // leap year\n        val validYearMonthDaysPlusFive = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122,2133)\
    \ // leap year\n        val validYearMonthDaysPlusSix = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122,2133,2144)\
    \ // leap year\n        val validYearMonthDaysPlusSeven = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122,2133,2144,2155)\
    \ // leap year\n        val validYearMonthDaysPlusEight = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122,2133,2144,2155,2166)\
    \ // leap year\n        val validYearMonthDaysPlusNine = List(2000,2010,2020,2040,2050,2060,2070,2080,2090,2100,2111,2122,2133,2144,2155,2166,2177)\
    \ // leap year\n        val validYearMonthDay\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgt2zta_y.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpgt2zta_y.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthLength = daysInMonth.length\n        val monthArray =\
    \ Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthArrayLength = monthArray.length\n\
    \        val year = dateArray.getYear\n        val month = dateArray.getMonth\n\
    \        val day = dateArray.getDay\n        val isValid = dateArrayLength !=\
    \ 0\n        val isNotLessThanOneOrHigherThanDaysInMonth = day < 1 || day > daysInMonth(month)\n\
    \        val isNotLessThanOneOrHigherThanDaysInMonthForMonth = day < 1 || day\
    \ > daysInMonth(month - 1)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYear\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonth\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDay\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year) + daysInMonth(month)\n\
    \        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDayForMonth\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year) + daysInMonth(month\
    \ - 1)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDayForYear\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year) + daysInMonth(month\
    \ - 1) + daysInMonth(year)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDayForYearAndMonth\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year) + daysInMonth(month\
    \ - 1) + daysInMonth(year)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDayForYearAndMonthAndDay\
    \ = day < 1 || day > daysInMonth(month - 1) + daysInMonth(year) + daysInMonth(month\
    \ - 1) + daysInMonth(year) + daysInMonth(month)\n        val isNotLessThanOneOrHigherThanDaysInMonthForYearAndMonthAndDayForYearAndMonthAndDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3rn147sj.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3rn147sj.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3rn147sj.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(new java.util.Date(date))\n    \
    \    val dateArray = dateString.split(\"-\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth2 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth3 = Array(31,29,31,30,31,30,31,30,31,30,31)\n        val daysInMonth4\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val daysInMonth5 = Array(31,27,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth6 = Array(31,26,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth7 = Array(31,25,31,30,31,30,31,30,31,30,31)\n        val daysInMonth8\
    \ = Array(31,24,31,30,31,30,31,30,31,30,31)\n        val daysInMonth9 = Array(31,23,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth10 = Array(31,22,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth11 = Array(31,21,31,30,31,30,31,30,31,30,31)\n        val daysInMonth12\
    \ = Array(31,20,31,30,31,30,31,30,31,30,31)\n        val daysInMonth13 = Array(31,19,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth14 = Array(31,18,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth15 = Array(31,17,31,30,31,30,31,30,31,30,31)\n        val daysInMonth16\
    \ = Array(31,16,31,30,31,30,31,30,31,30,31)\n        val daysInMonth17 = Array(31,15,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth18 = Array(31,14,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth19 = Array(31,13,31,30,31,30,31,30,31,30,31)\n        val daysInMonth20\
    \ = Array(31,12,31,30,31,30,31,30,31,30,31)\n        val daysInMonth21 = Array(31,11,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth22 = Array(31,10,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth23 = Array(31,09,31,30,31,30,31,30,31,30,31)\n        val daysInMonth24\
    \ = Array(31,08,31,30,31,30,31,30,31,30,31)\n        val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2ndnp4ks.scala:49:11 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ndnp4ks.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2ndnp4ks.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(day > 30) false\n        if(month\
    \ == 2 && day > 29) false\n        if(month == 4 && day > 30) false\n        if(month\
    \ == 6 && day > 31) false\n        if(month == 9 && day > 31) false\n        if(month\
    \ == 11 && day > 30) false\n        if(month == 1 && day > 31) false\n       \
    \ if(month == 3 && day > 31) false\n        if(month == 5 && day > 31) false\n\
    \        if(month == 7 && day > 31) false\n        if(month == 8 && day > 31)\
    \ false\n        if(month == 10 && day > 31) false\n        if(month == 12 &&\
    \ day > 31) false\n        if(month == 1 && day > 31) false\n        if(month\
    \ == 3 && day > 31) false\n        if(month == 5 && day > 31) false\n        if(month\
    \ == 7 && day > 31) false\n        if(month == 8 && day > 31) false\n        if(month\
    \ == 10 && day > 31) false\n        if(month == 12 && day > 31) false\n      \
    \  if(month == 1 && day > 31) false\n        if(month == 3 && day > 31) false\n\
    \        if(month == 5 && day > 31) false\n        if(month == 7 && day > 31)\
    \ false\n        if(month == 8 && day > 31) false\n        if(month == 10 && day\
    \ > 31) false\n        if(month == 12 && day > 31) false\n        if(month ==\
    \ 1 && day > 31) false\n        if(month == 3 && day > 31) false\n        if(month\
    \ == 5 && day > 31) false\n        if(month == 7 && day > 31) false\n        if(month\
    \ == 8 && day > 31) false\n        if(month == 10 && day > 31) false\n       \
    \ if(month == 12 && day > 31) false\n        if(month == 1 && day > 31) false\n\
    \        if(month == 3 && day > 31) false\n        if(month == 5 && day > 31)\
    \ false\n        if(month == 7 && day > 31) false\n        if(month == 8 && day\
    \ > 31) false\n        if(month == 10 && day > 31) false\n        if(month ==\
    \ 12 && day > 31) false\n        if(month == 1 && day > 31) false\n        if(month\
    \ == 3 && day > 31) false\n        if(month == 5 && day > 31) false\n        if(month\
    \ == 7 && day > 31) false\n        if(month == 8 && day > 31) false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwxqxhd9d.scala:73:8\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m        \e[33mif\e[0m(month\
    \ == \e[31m8\e[0m && day > \e[31m31\e[0m) \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m        Maybe\
    \ you are missing an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpwxqxhd9d.scala:26:36 ----------------\e\
    [0m\e[0m\n\e[33m26 |\e[0m        \e[33mif\e[0m(month < \e[31m1\e[0m || month >\
    \ \e[31m12\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                     \
    \               ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpwxqxhd9d.scala:27:32 ----------------\e\
    [0m\e[0m\n\e[33m27 |\e[0m        \e[33mif\e[0m(day < \e[31m1\e[0m || day > \e\
    [31m31\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                         \
    \       ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpwxqxhd9d.scala:28:21 ----------------\e\
    [0m\e[0m\n\e[33m28 |\e[0m        \e[33mif\e[0m(day > \e[31m30\e[0m) \e[31mfalse\e\
    [0m\n\e[33m\e[33m   |\e[0m                     ^^^^^\e[0m\n\e[33m   |\e[0mA pure\
    \ expression does nothing in statement position; you may be omitting necessary\
    \ parentheses\n\e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpwxqxhd9d.scala:29:35\
    \ ----------------\e[0m\e[0m\n\e[33m29 |\e[0m        \e[33mif\e[0m(month == \e\
    [31m2\e[0m && day > \e[31m29\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m   \
    \                                ^^^^^\e[0"
  stdout: ''
  timestamp: 1660010010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ && dayArray.contains(day) && yearArray.contains(year)){\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvgxidfg.scala:38)\n\tat Problem.main(tmpvvgxidfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*30\
    \ + dayArray\n        if(monthDays < 1 || monthDays > 31) {\n            return\
    \ false\n        }\n        if(monthArray < 1 || monthArray > 12) {\n        \
    \    return false\n        }\n        if(dayArray < 1 || dayArray > 30) {\n  \
    \          return false\n        }\n        if(monthDays < 1 || monthDays > 29)\
    \ {\n            return false\n        }\n        if(monthArray*30 > 31) {\n \
    \           return false\n        }\n        if(monthArray*30 > 30) {\n      \
    \      return false\n        }\n        if(monthArray*30 > 29) {\n           \
    \ return false\n        }\n        if(monthArray*31 > 12) {\n            return\
    \ false\n        }\n        if(monthArray*31 > 11) {\n            return false\n\
    \        }\n        if(monthArray*31 > 9) {\n            return false\n      \
    \  }\n        if(monthArray*31 > 6) {\n            return false\n        }\n \
    \       if(monthArray*31 > 4) {\n            return false\n        }\n       \
    \ if(monthArray*31 > 1) {\n            return false\n        }\n        if(monthArray*31\
    \ > 0) {\n            return true\n        }\n        if(monthArray*31 <= 0) {\n\
    \            return false\n        }\n        if(monthArray*31 <= 1) {\n     \
    \       return false\n        }\n        if(monthArray*31 <= 2) {\n          \
    \  return false\n        }\n        if(monthArray*31 <= 3) {\n            return\
    \ false\n        }\n        if(monthArray*31 <= 4) {\n            return false\n\
    \        }\n        if(monthArray*31 <= 5) {\n            return false\n     \
    \   }\n        if(monthArray*31 <= 6) {\n            return false\n        }\n\
    \        if(monthArray*31 <= 7) {\n            return false\n        }\n     \
    \   if(monthArray*31 <= 8) {\n            return false\n        }\n        if(monthArray*31\
    \ <= 9) {\n            return false\n        }\n        if(monthArray*31 <= 10)\
    \ {\n            return false\n        }\n        if(monthArray*31 <= 11) {\n\
    \            return false\n        }\n        if(monthArray*31 <= 12) {\n    \
    \        return false\n        }\n        if(monthArray*31 <= 13) {\n        \
    \    return false\n        }\n        if(monthArray*31 <= 14) {\n            return\
    \ false\n        }\n        if(monthArray*31 <= 15) {\n            return false\n\
    \        }\n        if(monthArray*31 <= 16) {\n            return false\n    \
    \    }\n        if(monthArray*31 <= 17) {\n            return false\n        }\n\
    \        if(monthArray*31 <= 18\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1aj7kfwo.scala:124:4 ---------------------------\e\
    [0m\e[0m\n\e[31m124 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp850sjnya.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.length == 0){\n            return false\n        }\n        if(months\
    \ < 1 || months > 12){\n            return false\n        }\n        if(days <\
    \ 1 || days > dayArray(months)){\n            return false\n        }\n      \
    \  if(months < 1 || months > 12){\n            return false\n        }\n     \
    \   if(year < 1 || year > yearArray(months)){\n            return false\n    \
    \    }\n        return true\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4c8hpyd_.scala:50)\n\tat Problem.main(tmp4c8hpyd_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(months < 1 || months > 12)\n            return false\n        if(days\
    \ < 1 || days > 31)\n            return false\n        if(months == 2 && days\
    \ > 30)\n            return false\n        if(months == 2 && days == 29)\n   \
    \         return false\n        if(months == 3 && days > 30)\n            return\
    \ false\n        if(months == 3 && days == 29)\n            return false\n   \
    \     if(months == 4 && days > 30)\n            return false\n        if(months\
    \ == 4 && days == 29)\n            return false\n        if(months == 5 && days\
    \ > 30)\n            return false\n        if(months == 5 && days == 29)\n   \
    \         return false\n        if(months == 6 && days > 30)\n            return\
    \ false\n        if(months == 6 && days == 29)\n            return false\n   \
    \     if(months == 7 && days > 30)\n            return false\n        if(months\
    \ == 7 && days == 29)\n            return false\n        if(months == 8 && days\
    \ > 30)\n            return false\n        if(months == 8 && days == 29)\n   \
    \         return false\n        if(months == 9 && days > 30)\n            return\
    \ false\n        if(months == 9 && days == 29)\n            return false\n   \
    \     if(months == 10 && days > 30)\n            return false\n        if(months\
    \ == 10 && days == 29)\n            return false\n        if(months == 11 && days\
    \ > 30)\n            return false\n        if(months == 11 && days == 29)\n  \
    \          return false\n        if(months == 12 && days > 30)\n            return\
    \ false\n        if(months == 12 && days == 29)\n            return true\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtu_fmin.scala:79)\n\tat Problem.main(tmphtu_fmin.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        dateString.toString().length\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo3zzxsy.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val daysInMonth = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth30 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth29 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth28 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth27 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth26 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth25 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth24 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth23 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth22 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth21 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth20 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth19 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth18 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth17 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth16 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth15 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth14 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth13 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth12 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth11 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth10 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth9 = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth8 = Calendar\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxs9c4p0_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpxs9c4p0_.scala:27:26 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxs9c4p0_.scala:28:28 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxs9c4p0_.scala:29:28 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth29\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpxs9c4p0_.scala:30:28 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth28\e[0m = Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m lo"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31,28,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = List(4,5,6,9,11)\n        val dateArrayLength = dateArray.length\n       \
    \ val daysInMonthLength = daysInMonth.length\n        val monthsInYearLength =\
    \ monthsInYear.length\n        val monthsInLeapYearLength = monthsInLeapYear.length\n\
    \        val dateArrayElement = dateArray(0)\n        val daysInMonthElement =\
    \ daysInMonth(0)\n        val monthsInYearElement = monthsInYear(0)\n        val\
    \ monthsInLeapYearElement = monthsInLeapYear(0)\n        val dateArrayElementLength\
    \ = dateArrayElement.length\n        val daysInMonthElementLength = daysInMonthElement.length\n\
    \        val monthsInYearElementLength = monthsInYearElement.length\n        val\
    \ monthsInLeapYearElementLength = monthsInLeapYearElement.length\n        val\
    \ dateArrayElementElement = dateArrayElement(0)\n        val daysInMonthElementElement\
    \ = daysInMonthElement(0)\n        val monthsInYearElementElement = monthsInYearElement(0)\n\
    \        val monthsInLeapYearElementElement = monthsInLeapYearElement(0)\n   \
    \     val dateArrayElementElementLength = dateArrayElementElement.length\n   \
    \     val daysInMonthElementElementLength = daysInMonthElementElement.length\n\
    \        val monthsInYearElementElementLength = monthsInYearElementElement.length\n\
    \        val monthsInLeapYearElementElementLength = monthsInLeapYearElementElement.length\n\
    \        val dateArrayElementElementElement = dateArrayElementElement(0)\n   \
    \     val daysInMonthElementElementElement = daysInMonthElementElement(0)\n  \
    \      val monthsInYearElementElementElement = monthsInYearElementElement(0)\n\
    \        val monthsInLeapYearElementElementElement = monthsInLeapYearElementElement(0)\n\
    \        val dateArrayElementElementElementLength = dateArrayElementElementElement.length\n\
    \        val daysInMonthElementElementElementLength = daysInMonthElementElementElement.length\n\
    \        val monthsInYearElementElementElementLength = monthsInYearElementElementElement.length\n\
    \        val monthsInLeapYearElementElementElementLength = monthsInLeapYearElementElementElement.length\n\
    \        val dateArrayElementElementElementElement = dateArrayElementElementElement(0)\n\
    \        val daysInMonthElementElementElementElement = daysInMonthElementElementElement(0)\n\
    \        val monthsInYearElementElementElementElement = monthsInYearElementElementElement(0)\n\
    \        val monthsInLeapYearElementElementElementElement = monthsInLeapYearElementElementElement(0)\n\
    \        val dateArrayElementElementElementElementLength = dateArrayElementElementElementElement.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpk6b_926p.scala:59:11 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk6b_926p.scala:35:58 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthElementLength\e\
    [0m = daysInMonthElement.length\n\e[31m\e[31m   |\e[0m                       \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                        value length is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpk6b_926p.scala:36:60 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYearElementLength\e[0m\
    \ = monthsInYearElement.length\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                         value length is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpk6b_926p.scala:37:68 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYearElementLength\e\
    [0m = monthsInLeapYearElement.length\n\e[31m\e[31m   |\e[0m                  \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     value length is not a member of Int\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpk6b_926p.scala:39:40 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthElementElement\e\
    [0m = daysInMonthElement(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                \
    \                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           \e[33mvalue\e[0m \e[35mdaysInMonthElement\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpk6b_926p.scala:40:41 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYe"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\")\n        val dayArray = List(\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"14\",\"16\",\"18\",\"21\",\"23\",\"25\"\
    ,\"27\",\"29\",\"31\")\n        val monthArray2 = List(\"04\",\"06\",\"09\",\"\
    11\")\n        val dayArray2 = List(\"04\",\"06\",\"09\",\"11\",\"13\",\"15\"\
    ,\"17\",\"19\",\"21\",\"23\",\"25\",\"27\",\"29\",\"31\")\n        val monthArray3\
    \ = List(\"02\")\n        val dayArray3 = List(\"02\",\"04\",\"06\",\"09\",\"\
    11\",\"13\",\"15\",\"17\",\"19\",\"21\",\"23\",\"25\",\"27\",\"29\",\"31\")\n\
    \        val monthArray4 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"\
    )\n        val dayArray4 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"\
    ,\"14\",\"16\",\"18\",\"21\",\"23\",\"25\",\"27\",\"29\",\"31\")\n        val\
    \ monthArray5 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n     \
    \   val dayArray5 = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"14\"\
    ,\"16\",\"18\",\"21\",\"23\",\"25\",\"27\",\"29\",\"31\")\n        val monthArray6\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n        val dayArray6\
    \ = List(\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"14\",\"16\",\"18\"\
    ,\"21\",\"23\",\"25\",\"27\",\"29\",\"31\")\n        val monthArray7 = List(\"\
    01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\")\n        val dayArray7 = List(\"\
    01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"14\",\"16\",\"18\",\"21\",\"\
    23\",\"25\",\"27\",\"29\",\"31\")\n        val monthArray8 = List(\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\")\n        val dayArray8 = List(\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"14\",\"16\",\"18\",\"21\",\"23\",\"25\"\
    ,\"27\",\"29\",\"31\")\n        val month\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpglsv25c2.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpglsv25c2.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12,\
    \ 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n \
    \       val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n\
    \        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(3\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfji39us6.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfji39us6.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e\
    [31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e\
    [0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfji39us6.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = List(\e[31m12\e\
    [0m, \e[31m1\e[0m, \e[31m4\e[0m, \e[31m6\e[0m, \e[31m9\e[0m, \e[31m11\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfji39us6.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m,\
    \ \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e\
    [31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpfji39us6.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjgysxc5_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjgysxc5_.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateInMillis = dateObj.getTime\n\
    \        val currentDateInMillis = Calendar.getInstance().getTimeInMillis()\n\
    \        val diffInMillis = currentDateInMillis - dateInMillis\n        val diffInDays\
    \ = diffInMillis / 1000\n        val diffInMonths = diffInDays / 30\n        val\
    \ diffInYears = diffInMonths / 12\n        val isValid = diffInYears > 0 && diffInMonths\
    \ > 0 && diffInDays > 0\n        isValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmzvhoh_4.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmzvhoh_4.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateInMillis\e[0m\
    \ = Calendar.getInstance().getTimeInMillis()\n\e[31m\e[31m   |\e[0m          \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31)\n\
    \        val monthArray3 = Array(1,2,3)\n        val dayArray3 = Array(0,31)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,30)\n\
    \        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray5\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val dayArray6 = Array(0,31,30,29,28,31)\n        val monthArray7 = Array(1,2,3)\n\
    \        val dayArray7 = Array(0,31)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val dayArray8 = Array(0,30)\n        val monthArray9 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray10 = Array(4,6,9,11)\n        val dayArray10 = Array(0,31,30,29,28,31)\n\
    \        val monthArray11 = Array(1,2,3)\n        val dayArray11 = Array(0,31)\n\
    \        val monthArray12 = Array(4,6,9,11)\n        val dayArray12 = Array(0,30)\n\
    \        val monthArray13 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray13\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray14 = Array(4,6,9,11)\n\
    \        val dayArray14 = Array(0,31,30,29,28,31)\n        val monthArray15 =\
    \ Array(1,2,3)\n        val dayArray15 = Array(0,31)\n        val monthArray16\
    \ = Array(4,6,9,11)\n        val dayArray16 = Array(0,30)\n        val monthArray17\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray17 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray18 = Array(4,6,9,11)\n        val dayArray18 = Array(0,31,30,29,28,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpk391dt_c.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpk391dt_c.scala:62:5 ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val daysInMonth = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth30 = Array.tabulate(12)(i => i + 30)\n   \
    \     val daysInMonth29 = Array.tabulate(12)(i => i + 29)\n        val daysInMonth31\
    \ = Array.tabulate(12)(i => i + 31)\n        val daysInMonth30And31 = Array.tabulate(12)(i\
    \ => i + 30 && i + 31)\n        val daysInMonth31And30 = Array.tabulate(12)(i\
    \ => i + 31 && i + 30)\n        val daysInMonth30And29 = Array.tabulate(12)(i\
    \ => i + 30 && i + 29)\n        val daysInMonth31And29 = Array.tabulate(12)(i\
    \ => i + 31 && i + 29)\n        val daysInMonth30And31 = Array.tabulate(12)(i\
    \ => i + 30 && i + 31)\n        val daysInMonth31And30 = Array.tabulate(12)(i\
    \ => i + 31 && i + 30)\n        val daysInMonth30And29 = Array.tabulate(12)(i\
    \ => i + 30 && i + 29)\n        val daysInMonth31And29 = Array.tabulate(12)(i\
    \ => i + 31 && i + 29)\n        val daysInMonth30And31 = Array.tabulate(12)(i\
    \ => i + 30 && i + 31)\n        val daysInMonth31And30 = Array.tabulate(12)(i\
    \ => i + 31 && i + 30)\n        val daysInMonth30And29 = Array.tabulate(12)(i\
    \ => i + 30 && i + 29)\n        val daysInMonth31And29 = Array.tabulate(12)(i\
    \ => i + 31 && i + 29)\n        val daysInMonth30And31 = Array.tabulate(12)(i\
    \ => i + 30 && i + 31)\n        val daysInMonth31And30 = Array.tabulate(12)(i\
    \ => i + 31 && i + 30)\n        val daysInMonth30And29 = Array.tabulate(12)(i\
    \ => i + 30 && i + 29)\n        val daysInMonth31And29 = Array.tabulate(12)(i\
    \ => i + 31 && i + 29)\n        val daysInMonth30And31 = Array.tabulate(12)(i\
    \ => i + 30 && i + 31)\n        val daysInMonth31And30 = Array.tabulate(12)(i\
    \ => i + 31 && i + 30)\n        val daysInMonth30And29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojygqcln.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpojygqcln.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth30And31\e[0m = Array.tabulate(\e[31m12\e[0m)(\e[36mi\e[0m =>\
    \ i + \e[31m30\e[0m && i + \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30And31 is already defined as \e[33mvalue\e[0m\
    \ \e[35mdaysInMonth30And31\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpojygqcln.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31And30\e[0m\
    \ = Array.tabulate(\e[31m12\e[0m)(\e[36mi\e[0m => i + \e[31m31\e[0m && i + \e\
    [31m30\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31And30 is already defined as \e[33mvalue\e[0m\
    \ \e[35mdaysInMonth31And30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpojygqcln.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30And29\e[0m\
    \ = Array.tabulate(\e[31m12\e[0m)(\e[36mi\e[0m => i + \e[31m30\e[0m && i + \e\
    [31m29\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30And29 is already defined as \e[33mvalue\e[0m\
    \ \e[35mdaysInMonth30And29\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpojygqcln.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31And29\e[0m\
    \ = Array.tabulate(\e[31m12\e[0m)(\e[36mi\e"
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        val valid = monthIndex\
    \ != -1 && dayIndex != -1 && yearIndex != -1\n        valid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprfim6jyp.scala:36)\n\tat Problem.main(tmprfim6jyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateInDays = dateParsed.getTime()\
    \ / 1000\n        val dateInDaysInYear = dateInDays / 86400\n        val dateInDaysInYearInMonth\
    \ = dateInDaysInYear / 30\n        val dateInDaysInYearInMonthInDays = dateInDaysInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDaysInYear = dateInDaysInYearInMonthInDays\
    \ / 365\n        val dateInDaysInYearInMonthInDaysInYearInMonth = dateInDaysInYearInMonthInDaysInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDays = dateInDaysInYearInMonthInDaysInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYear = dateInDaysInYearInMonthInDaysInYearInMonthInDays\
    \ / 365\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonth\
    \ = dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYear / 30\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDays\
    \ = dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonth / 7\n      \
    \  val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYear\
    \ = dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDays / 365\n\
    \        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonth\
    \ = dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDays\
    \ = dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonthInDaysInYearInMonth\
    \ = dateInDaysInYear\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprihc_x19.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprihc_x19.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdvhah3ah.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvhah3ah.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvhah3ah.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvhah3ah.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdvhah3ah.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        dateString != null\
    \ && dateString.toString.length != 0 && dateString.toString.length != 10 && dateString.toString.length\
    \ != 13 && dateString.toString.length != 16 && dateString.toString.length != 19\
    \ && dateString.toString.length != 22 && dateString.toString.length != 25 && dateString.toString.length\
    \ != 28\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokyuemu0.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ monthArray = dateArray(0).toString.split(\"-\")\n        if(monthArray.length\
    \ != 2){\n            return false\n        }\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(dayArray.length != 2){\n            return false\n        }\n\
    \        val year = dateArray(2).toString.toInt\n        if(year < 1 || year >\
    \ 9999){\n            return false\n        }\n        if(monthArray(0).toInt\
    \ < 1 || monthArray(0).toInt > 12){\n            return false\n        }\n   \
    \     if(monthArray(1).toInt < 1 || monthArray(1).toInt > 12){\n            return\
    \ false\n        }\n        if(dayArray(0).toInt < 1 || dayArray(0).toInt > 31){\n\
    \            return false\n        }\n        if(dayArray(1).toInt < 1 || dayArray(1).toInt\
    \ > 30){\n            return false\n        }\n        if(dayArray(2).toInt <\
    \ 1 || dayArray(2).toInt > 29){\n            return false\n        }\n       \
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy4egvpgg.scala:56)\n\tat Problem.main(tmpy4egvpgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val validMonth = month >= 1 && month <= 12\n        val validDay = day\
    \ >= 1 && day <= 31\n        val validYear = year >= 1 && year <= 9999\n     \
    \   val validDate = validMonth && validDay && validYear\n        validDate\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7wsjte8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckYear\
    \ = dateToCheck.getYear\n        val dateToCheckMonth = dateToCheck.getMonth\n\
    \        val dateToCheckDay = dateToCheck.getDay\n        val dateToCheckYearDays\
    \ = dateToCheckYear * 365 + dateToCheckMonth * 30 + dateToCheckDay\n        val\
    \ dateToCheckMonthDays = dateToCheckMonth * 30 + dateToCheckDay\n        val dateToCheckMonthDaysYear\
    \ = dateToCheckMonthDays * 365\n        val dateToCheckYearDaysMonth = dateToCheckYearDaysMonth\
    \ * 12\n        val dateToCheckYearDaysMonthYear = dateToCheckYearDaysMonth *\
    \ 12\n        val dateToCheckYearDaysMonthYearDays = dateToCheckYearDaysMonthYear\
    \ * 365\n        val dateToCheckYearDaysMonthYearDaysMonth = dateToCheckYearDaysMonthYearDaysMonth\
    \ * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDays = dateToCheckYearDaysMonthYearDaysMonth\
    \ * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYear = dateToCheckYearDaysMonthYearDaysMonth\
    \ * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDays = dateToCheckYearDaysMonthYearDaysMonth\
    \ * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDaysMonth = dateToCheckYearDaysMonthYearDaysMonth\
    \ * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDaysMonthDays\
    \ = dateToCheckYearDaysMonthYearDaysMonth * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDaysMonthDaysYear\
    \ = dateToCheckYearDaysMonthYearDaysMonth * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDaysMonthDaysYearDays\
    \ = dateToCheckYearDaysMonthYearDaysMonth * 30\n        val dateToCheckYearDaysMonthYearDaysMonthDaysYearDaysMonthDaysYearDaysMonth\
    \ = dateToCheckYearDaysMonthYearDaysMonth * 30\n        val dateToCheckYearDaysMonthYearDays\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm8viq633.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8viq633.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8viq633.scala:30:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckYearDaysMonth\e[0m = dateToCheckYearDaysMonth * \e[31m12\e\
    [0m\n\e[31m\e[31m   |\e[0m                                       ^\e[0m\n\e[31m\
    \   |\e[0m                     Recursive \e[33mvalue\e[0m \e[35mdateToCheckYearDaysMonth\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8viq633.scala:33:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToCheckYearDaysMonthYearDaysMonth\e[0m = dateToCheckYearDaysMonthYearDaysMonth\
    \ * \e[31m30\e[0m\n\e[31m\e[31m   |\e[0m                                     \
    \               ^\e[0m\n\e[31m   |\e[0m        Recursive \e[33mvalue\e[0m \e[35mdateToCheckYearDaysMonthYearDaysMonth\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm8viq633.scala:43:5\
    \ ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660010022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(_ == month)\n        val dayCount =\
    \ dayArray.count(_ == day)\n        val yearCount = yearArray.count(_ == year)\n\
    \        val monthValid = monthCount < 1 || monthCount > 12\n        val dayValid\
    \ = dayCount < 1 || dayCount > 31\n        val yearValid = yearCount < 1 || yearCount\
    \ > 30\n        val dateValid = monthValid && dayValid && yearValid\n        dateValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgqjqia3l.scala:39)\n\tat Problem.main(tmpgqjqia3l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val monthsInLeapYear = Array(4,6,9,11)\n        val daysInYear = Arrayn\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptxxplbjl.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptxxplbjl.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptxxplbjl.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val validMonths = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val validDays = List(1, 30, 29)\n        val validYear =\
    \ List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validMonth = List(4,\
    \ 6, 9, 11)\n        val validDay = List(1, 30)\n        val validYearMonth =\
    \ List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDay\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDays\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonth\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonths\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDay\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDays\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonth\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonths\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDay\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDays\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDaysOfMonth\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDaysOfMonths\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDaysOfMonthAndDay\
    \ = List(2000, 2010, 2020, 2030, 2040, 2050, 2060)\n        val validYearMonthDaysOfMonthAndDaysOfMonthAndDaysOfMonthAndDays\
    \ = List(2000, 2010, \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl311hi2j.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpl311hi2j.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = monthArray.count(monthArray.contains(month))\n     \
    \   val dayCount = dayArray.count(dayArray.contains(day))\n        val yearCount\
    \ = yearArray.count(yearArray.contains(year))\n        val monthCountValid = monthCount\
    \ >= 1 && monthCount <= 12\n        val dayCountValid = dayCount >= 1 && dayCount\
    \ <= 31\n        val yearCountValid = yearCount >= 1 && yearCount <= 12\n    \
    \    val dateValid = monthCountValid && dayCountValid && yearCountValid\n    \
    \    dateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a6ozoi3.scala:29:61\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmonthCount\e\
    [0m = monthArray.count(monthArray.contains(month))\n\e[31m\e[31m   |\e[0m    \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                          Found:    Boolean\n\e[31m\
    \   |\e[0m                                          Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a6ozoi3.scala:30:55\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdayCount\e\
    [0m = dayArray.count(dayArray.contains(day))\n\e[31m\e[31m   |\e[0m          \
    \                            ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Boolean\n\e[31m   |\e[0m        \
    \                              Required: \e[1m\e[32mInt\e[0m\e[1m\e[32m \e[0m\e\
    [1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4a6ozoi3.scala:31:58 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36myearCount\e[0m = yearArray.count(yearArray.contains(year))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    Boolean\n\
    \e[31m   |\e[0m                                        Required: \e[1m\e[32mInt\e\
    [0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e[0m\e[1m\e[32m \e[0mBoolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010023
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12,\
    \ 1, 4, 6, 9, 11)\n        val dateArray = date.split(\"-\")\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprbpuhwdr.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprbpuhwdr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e\
    [31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e\
    [0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = List(\e[31m12\e\
    [0m, \e[31m1\e[0m, \e[31m4\e[0m, \e[31m6\e[0m, \e[31m9\e[0m, \e[31m11\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = date.split(\e[31m\"\
    -\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateArray is already defined as \e[33mvalue\e[0m \e[35mdateArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m,\
    \ \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e\
    [31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e["
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n        val yearArray = Array.ofDim[Int](4)\n      \
    \  val daysInMonthArray = Array.ofDim[Int](daysInMonth)\n        val monthArray\
    \ = Array.ofDim[Int](12)\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehgvi1qi.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ Array.ofDim[\e[35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpehgvi1qi.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthArray\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthArray is already defined as \e[33mvalue\e[0m \e[35mmonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpehgvi1qi.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = Array.ofDim[\e[35mInt\e\
    [0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0myearArray is already defined as \e[33mvalue\e[0m \e[35myearArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpehgvi1qi.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = Array.ofDim[\e\
    [35mInt\e[0m](daysInMonth)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpehgvi1qi.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmonthA"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,6,9,11)\n        val monthsInLeapYearLength = monthsInLeapYear.length\n\
    \        val daysInMonthLength = daysInMonth.length\n        val dateArrayLength\
    \ = dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n     \
    \   val monthsInYearLength = monthsInYear.length\n        val monthsInYearLength\
    \ = monthsInYearLength\n        val monthsInLeapYearLength = monthsInLeapYear.length\n\
    \        val monthsInLeapYearLength = monthsInLeapYearLength\n        val dateArrayLength\
    \ = dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val dateArrayLength = dateArrayLength\n\
    \        val dateArrayLength = dateArrayLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ dateArrayLength = dateArrayLength\n        val date\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq5tllbp4.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpq5tllbp4.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateArrayLength\e[0m = dateArrayLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mdateArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq5tllbp4.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLength\e[0m =\
    \ daysInMonthLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthLength is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq5tllbp4.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYearLength\e[0m\
    \ = monthsInYearLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInYearLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mmonthsInYearLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpq5tllbp4.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mmonthsInLeapYearLength\e\
    [0m = monthsInLeapYear.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInLeapYearLength is already defined as \e[33mvalue\e\
    [0m \e[35mmonthsInLeapYearLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same g"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val currentDate =\
    \ Calendar.getInstance()\n        val currentYear = currentDate.getTime.getYear\n\
    \        val currentMonth = currentDate.getTime.getMonth\n        val currentDay\
    \ = currentDate.getTime.getDay\n        val currentHour = currentDate.getTime.getHour\n\
    \        val currentMinute = currentDate.getTime.getMinute\n        val currentSecond\
    \ = currentDate.getTime.getSecond\n        val currentMillisecond = currentDate.getTime.getMillisecond\n\
    \        val currentTimeZone = currentDate.getTimeZone\n        val currentTimeZoneOffset\
    \ = currentTimeZone.getRawOffset\n        val currentTimeZoneID = currentTimeZone.getID\n\
    \        val currentTimeZoneName = currentTimeZone.getDisplayName\n        val\
    \ currentTimeZoneShortName = currentTimeZone.getDisplayName(false)\n        val\
    \ currentTimeZoneIsDST = currentTimeZone.isDaylightTime\n        val currentTimeZoneIsLocal\
    \ = currentTimeZone.isLocalTime\n        val currentTimeZoneIsUtc = currentTimeZone.isUtc\n\
    \        val currentTimeZoneIsSystemV = currentTimeZone.isSystemV\n        val\
    \ currentTimeZoneIsUniversal = currentTimeZone.isUniversal\n        val currentTimeZoneIsUndefined\
    \ = currentTimeZone.isUndefined\n        val currentTimeZoneIsUnspecified = currentTimeZone.isUnspecified\n\
    \        val currentTimeZoneIsUnknown = currentTimeZone.isUnknown\n        val\
    \ currentTimeZoneIsUncached = currentTimeZone.isUncached\n        val currentTimeZoneIsUnset\
    \ = currentTimeZone.isUnset\n        val currentTimeZoneIsUnspecifiedAndUncached\
    \ = currentTimeZone.isUnspecifiedAndUncached\n        val currentTimeZoneIsUnspecifiedAndUnset\
    \ = currentTimeZone.isUnspecifiedAndUnset\n        val currentTimeZoneIsUnspecifiedAndUncachedAndUnset\
    \ = currentTimeZone.isUnspecifiedAndUnspecifiedAndUnset\n        val currentTimeZoneIsUnspecifiedAndUncachedAndUnspecified\
    \ = currentTimeZone.isUnspecifiedAndUnspecifiedAndUnspecified\n        val currentTimeZoneIsUnspecifiedAndUncachedAndUnspecifiedAndUnset\
    \ = currentTimeZone.isUnspecifiedAndUnspecifiedAndUnspecifiedAndUnset\n      \
    \  val currentTimeZoneIsUnspecifiedAndUncachedAndUnspecifiedAndUnspecified = currentTimeZone.isUnspecifiedAndUnspecifiedAndUnspecifiedAndUnspecified\n\
    \        val currentTimeZoneIsUnspecifiedAndUncachedAndUnspecifiedAndUnspecifiedAndUnset\
    \ = currentTimeZone.isUnspecifiedAndUnspecifiedAndUnspecifiedAndUnspecifiedAndUnspecified\n\
    \        val currentTimeZoneIsUnspecifiedAndUncachedAndUnspecifiedAndUnspecifiedAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4oysay89.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4oysay89.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4oysay89.scala:24:26\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mcurrentDate\e[0m = Calendar.getInstance()\n\e[31m\e[31m   |\e[0m         \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4oysay89.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1, 3, 5, 7, 8, 10,\
    \ 12)\n        val daysNotLessThan1OrHigherThan31 = List(4, 6, 9, 11)\n      \
    \  val daysNotLessThan1OrHigherThan30 = List(4, 6, 9, 11)\n        val daysNotLessThan1OrHigherThan29\
    \ = List(4, 6, 9, 11)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n\
    \        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1OrHigherThan12 = List(2, 12)\n        val monthNotLessThan1OrHigherThan12\
    \ = List(2, 12)\n        val monthNotLessThan1OrHigherThan12 = List(2, 12)\n \
    \       val monthNotLessThan1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph_i8cjn0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_i8cjn0.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThan1OrHigherThan12\e[0m = List(\e[31m2\e[0m, \e[31m12\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan1OrHigherThan12 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthNotLessThan1OrHigherThan12\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_i8cjn0.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThan1OrHigherThan12\e[0m = List(\e[31m2\e[0m, \e[31m12\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan1OrHigherThan12 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthNotLessThan1OrHigherThan12\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_i8cjn0.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThan1OrHigherThan12\e[0m = List(\e[31m2\e[0m, \e[31m12\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthNotLessThan1OrHigherThan12 is already defined as \e[33mvalue\e\
    [0m \e[35mmonthNotLessThan1OrHigherThan12\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph_i8cjn0.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthNotLessThan1OrHigherThan12\e[0m = List(\e[31m2\e[0m, \e[31m12\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.count(_ == month))\n        val dayCount\
    \ = (dayArray.count(_ == day))\n        val yearCount = (yearArray.count(_ ==\
    \ year))\n        val monthValid = monthCount != 0\n        val dayValid = dayCount\
    \ != 0\n        val yearValid = yearCount != 0\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy8lonjzn.scala:39)\n\tat Problem.main(tmpy8lonjzn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp850sjnya.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12) false\n\
    \        if(day < 1 || day > 31) false\n        if(day > 29 && month == 2) false\n\
    \        if(day > 28 && month == 2) false\n        if(day > 31 && month == 2)\
    \ false\n        if(day > 30 && month == 2) false\n        if(day > 29 && month\
    \ == 3) false\n        if(day > 28 && month == 3) false\n        if(day > 31 &&\
    \ month == 3) false\n        if(day > 30 && month == 3) false\n        if(day\
    \ > 29 && month == 4) false\n        if(day > 28 && month == 4) false\n      \
    \  if(day > 31 && month == 4) false\n        if(day > 30 && month == 4) false\n\
    \        if(day > 29 && month == 5) false\n        if(day > 28 && month == 5)\
    \ false\n        if(day > 31 && month == 5) false\n        if(day > 30 && month\
    \ == 5) false\n        if(day > 29 && month == 7) false\n        if(day > 28 &&\
    \ month == 7) false\n        if(day > 31 && month == 7) false\n        if(day\
    \ > 30 && month == 7) false\n        if(day > 29 && month == 8) false\n      \
    \  if(day > 28 && month == 8) false\n        if(day > 31 && month == 8) false\n\
    \        if(day > 30 && month == 8) false\n        if(day > 29 && month == 10)\
    \ false\n        if(day > 28 && month == 10) false\n        if(day > 31 && month\
    \ == 10) false\n        if(day > 30 && month == 10) false\n        if(day > 29\
    \ && month == 12) false\n        if(day > 28 && month == 12) false\n        if(day\
    \ > 31 && month == 12) false\n        if(day > 30 && month == 12) false\n    \
    \    if(day > 29 && month == 1) false\n        if(day > 28 && month == 1) false\n\
    \        if(day > 31 && month == 1) false\n        if(day > 30 && month == 1)\
    \ false\n        if(day > 29 && month == 3) false\n        if(day > 28 && month\
    \ == 3) false\n        if(day > 31 && month == 3) false\n        if(day > 30 &&\
    \ month == 3) false\n        if(day > 29 && month == 5) false\n        if(day\
    \ > 28 && month == 5) false\n        if(day > 31 && month == 5) false\n      \
    \  if(day > 30 && month == 5) false\n        if(day > 29 && month == 7) false\n\
    \        if(day > 28 && month\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpje126soy.scala:74:4 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpje126soy.scala:73:23 --------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \        \e[33mif\e[0m(day > \e[31m28\e[0m && month\n\e[31m\e[31m   |\e[0m   \
    \                    ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (month : Int)\n\e[31m   |\e[0m                       Required: Boolean\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpje126soy.scala:26:36\
    \ ----------------\e[0m\e[0m\n\e[33m26 |\e[0m        \e[33mif\e[0m(month < \e\
    [31m1\e[0m || month > \e[31m12\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m \
    \                                   ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpje126soy.scala:27:32\
    \ ----------------\e[0m\e[0m\n\e[33m27 |\e[0m        \e[33mif\e[0m(day < \e[31m1\e\
    [0m || day > \e[31m31\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m          \
    \                      ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpje126soy.scala:28:35 ----------------\e\
    [0m\e[0m\n\e[33m28 |\e[0m        \e[33mif\e[0m(day > \e[31m29\e[0m && month ==\
    \ \e[31m2\e[0m) \e[31mfalse\e[0m\n\e[33m\e[33m   |\e[0m                      \
    \             ^^^^^\e[0m\n\e[33m   |\e[0mA pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpje126soy.scala:29:35 ----------------\e\
    [0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660010024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 4 && day > 29)\n            return\
    \ false\n        if(month == 6 && day > 30)\n            return false\n      \
    \  if(month == 9 && day > 30)\n            return false\n        if(month == 11\
    \ && day > 30)\n            return false\n        if(month == 12)\n          \
    \  return true\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(date)\n        val dateArray = dateString.split(\"\
    -\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth2 = Array(31,28,31,30,31,30,31,30,31,30,31,30,31)\n  \
    \      val daysInMonth3 = Array(31,29,31,30,31,30,31,30,31,30,31,30,31)\n    \
    \    val daysInMonth4 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n      \
    \  val daysInMonth5 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31)\n        val\
    \ daysInMonth6 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth7\
    \ = Array(31,31,31,31,31,31,31,31,31,31,31,31,31)\n        val daysInMonth8 =\
    \ Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth9 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth10 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n \
    \       val daysInMonth11 = Array(31,31,31,31,31,31,31,31,31,31,31,31,31,31)\n\
    \        val daysInMonth12 = Array(31,30,31,30,31,30,31,30,31,30,31,30,31)\n \
    \       val daysInMonth = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \        val monthsInMonth = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInMonth2\
    \ = Array(4,6,9,11,12)\n        val monthsInMonth3 = Array(1,3,5,7,8,10,12)\n\
    \        val monthsInMonth4 = Array(4,6,9,11,12)\n        val monthsInMonth5 =\
    \ Array(1,3,5,7,8,10,12)\n        val monthsInMonth6 = Array(4,6,9,11,12)\n  \
    \      val monthsInMonth7 = Array(1,3,5,7,8,10,12)\n        val monthsInMonth8\
    \ = Array(4,6,9,11,12)\n        val monthsInMonth9 = Array(1,3,5,7,8,10,12)\n\
    \        val monthsInMonth10 = Array(4,6,9,11,12)\n        val monthsInMonth11\
    \ = Array(1,3,5,7,8,10,12)\n        val monthsInMonth12 = Array(4,6,9,11,12)\n\
    \        monthsInMonth.\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiv7dgftz.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpiv7dgftz.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth.zip(daysInMonth2).zip(daysInMonth3).zip(daysInMonth4).zip(daysInMonth5).zip(daysInMonth6).zip(daysInMonth7).zip(daysInMonth8).zip(daysInMonth9).zip(daysInMonth10).zip(daysInMonth11).zip(daysInMonth12)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpiv7dgftz.scala:22:29 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e[0m \e\
    [35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7, 8,\
    \ 10, 12)\n        val dayArray = List(1, 30, 29)\n        val monthCount = monthArray.count(month\
    \ => month == month)\n        val dayCount = dayArray.count(day => day == day)\n\
    \        val yearCount = year - year%4\n        val validMonth = monthCount <\
    \ 1 || monthCount > 12\n        val validDay = dayCount < 1 || dayCount > 30\n\
    \        val validYear = yearCount < 1 || yearCount > 29\n        val validDate\
    \ = validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeu2tq53d.scala:38)\n\tat Problem.main(tmpeu2tq53d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime !=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkehhqxx.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,9,11,12)\n        val monthsInLeapYearLength = monthsInLeapYear.length\n\
    \        val daysInMonthLength = daysInMonth.length\n        val dateArrayLength\
    \ = dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n     \
    \   val monthsInYearLength = monthsInYear.length\n        val monthsInYearLength\
    \ = monthsInYearLength\n        val dateArrayLength = dateArrayLength\n      \
    \  val daysInMonthLength = daysInMonthLength\n        val monthsInYearLength =\
    \ monthsInYearLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ daysInMonthLength = daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n\
    \        val dateArrayLength = dateArrayLength\n        val daysInMonthLength\
    \ = daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n \
    \       val dateArrayLength = dateArrayLength\n        val daysInMonthLength =\
    \ daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n   \
    \     val dateArrayLength = dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n\
    \        val monthsInYearLength = monthsInYearLength\n        val dateArrayLength\
    \ = dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n     \
    \   val monthsInYearLength = monthsInYearLength\n        val dateArrayLength =\
    \ dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n       \
    \ val monthsInYearLength = monthsInYearLength\n        val dateArrayLength = dateArrayLength\n\
    \        val daysInMonthLength = daysInMonthLength\n        val monthsInYearLength\
    \ = monthsInYearLength\n        val dateArrayLength = dateArrayLength\n      \
    \  val daysInMonthLength = daysInMonthLength\n        val monthsInYearLength =\
    \ monthsInYearLength\n        val dateArrayLength = dateArrayLength\n        val\
    \ daysInMonthLength = daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n\
    \        val dateArrayLength = dateArrayLength\n        val daysInMonthLength\
    \ = daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n \
    \       val dateArrayLength = dateArrayLength\n        val daysInMonthLength =\
    \ daysInMonthLength\n        val monthsInYearLength = monthsInYearLength\n   \
    \     val dateArrayLength = dateArrayLength\n        val daysInMonthLength = daysInMonthLength\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp16wz3dw_.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16wz3dw_.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLength\e[0m = daysInMonthLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonthLength is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16wz3dw_.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYearLength\e[0m = monthsInYearLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYearLength is already defined as \e[33mvalue\e[0m \e[35mmonthsInYearLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16wz3dw_.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp16wz3dw_.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthLength\e[0m = daysInMonthLength\n\
    \e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1660010029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyovd3dz.scala:36)\n\tat Problem.main(tmptyovd3dz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateDays = dateFormat.parse(date).getDay\n\
    \        val dateMonths = dateFormat.parse(date).getMonth\n        val dateYears\
    \ = dateFormat.parse(date).getYear\n        dateString != null && dateDays > 1\
    \ && dateMonths > 1 && dateYears > 1 && dateDays < 31 && dateMonths < 12 && dateYears\
    \ < 40 && dateMonths < 6\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb5eq842x.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxij6iehm.scala:54:5\
    \ ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 2 && day < 29)\n            return\
    \ false\n        if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)\n            return true\n        if(month\
    \ == 4 || month == 6 || month == 9 || month == 11)\n            return true\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0dgek2m3.scala:50)\n\tat Problem.main(tmp0dgek2m3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if (dateArray.length != 3)\n            return false\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if (months < 1 || months > 12)\n            return false\n        if\
    \ (days < 1 || days > 31)\n            return false\n        if (months == 2 &&\
    \ days > 30)\n            return false\n        if (months == 2 && days == 29)\n\
    \            return false\n        if (months == 3 && days > 30)\n           \
    \ return false\n        if (months == 3 && days == 29)\n            return false\n\
    \        if (months == 4 && days > 30)\n            return false\n        if (months\
    \ == 4 && days == 29)\n            return false\n        if (months == 5 && days\
    \ > 30)\n            return false\n        if (months == 5 && days == 29)\n  \
    \          return false\n        if (months == 6 && days > 30)\n            return\
    \ false\n        if (months == 6 && days == 29)\n            return false\n  \
    \      if (months == 7 && days > 30)\n            return false\n        if (months\
    \ == 7 && days == 29)\n            return false\n        if (months == 8 && days\
    \ > 30)\n            return false\n        if (months == 8 && days == 29)\n  \
    \          return false\n        if (months == 9 && days > 30)\n            return\
    \ false\n        if (months == 9 && days == 29)\n            return false\n  \
    \      if (months == 10 && days > 30)\n            return false\n        if (months\
    \ == 10 && days == 29)\n            return false\n        if (months == 11 &&\
    \ days > 30)\n            return false\n        if (months == 11 && days == 29)\n\
    \            return false\n        if (months == 12 && days > 30)\n          \
    \  return false\n        if (months == 12 && days == 29)\n            return true\n\
    \        else\n            return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4fvbeod.scala:80)\n\tat Problem.main(tmpg4fvbeod.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateArray = dateString.toInstant.toEpochMilli.toArray.sort\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArrayLength =\
    \ monthArray.length\n        val dayArrayLength = dayArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmwulpjjr.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwulpjjr.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwulpjjr.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwulpjjr.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmwulpjjr.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(dateArray.length != 3){\n            return false\n        }\n   \
    \     if(monthArray.contains(month) == false){\n            return false\n   \
    \     }\n        if(dayArray.contains(day) == false){\n            return false\n\
    \        }\n        if(yearArray.contains(year) == false){\n            return\
    \ false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rn4ugxt.scala:44)\n\tat Problem.main(tmp1rn4ugxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31,30)\n        val monthsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear = Array(4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonthInLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n   \
    \     val daysInMonthInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInMonthLeapYear = Array(31,29,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonthInYearLeapYear = Array(31,30,31,\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwcy43_25.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwcy43_25.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonthInMonthLeapYear\e[0m = Array(\e[31m31\e[0m,\e[31m29\e[0m,\e\
    [31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthInMonthLeapYear is already defined as \e[33mvalue\e\
    [0m \e[35mdaysInMonthInMonthLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwcy43_25.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInYearLeapYear\e\
    [0m = Array(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthInYearLeapYear is already defined as \e[33mvalue\e\
    [0m \e[35mdaysInMonthInYearLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwcy43_25.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthInMonthLeapYear\e\
    [0m = Array(\e[31m31\e[0m,\e[31m29\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthInMonthLeapYear is already defined as \e[33mvalue\e\
    [0m \e[35mdaysInMonthInMonthLeapYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7,\
    \ 8, 10, 12)\n        val daysArray = List(1, 30, 29)\n        val monthArray2\
    \ = List(2, 4, 6)\n        val daysArray2 = List(1, 31)\n        val monthArray3\
    \ = List(1, 3, 5)\n        val daysArray3 = List(1, 30)\n        val monthArray4\
    \ = List(1, 3, 5)\n        val daysArray4 = List(1, 29)\n        val monthArray5\
    \ = List(2, 4, 6)\n        val daysArray5 = List(1, 30)\n        val monthArray6\
    \ = List(1, 3, 5)\n        val daysArray6 = List(1, 29)\n        val monthArray7\
    \ = List(2, 4, 6)\n        val daysArray7 = List(1, 30)\n        val monthArray8\
    \ = List(1, 3, 5)\n        val daysArray8 = List(1, 29)\n        val monthArray9\
    \ = List(2, 4, 6)\n        val daysArray9 = List(1, 30)\n        val monthArray10\
    \ = List(1, 3, 5)\n        val daysArray10 = List(1, 29)\n        val monthArray11\
    \ = List(2, 4, 6)\n        val daysArray11 = List(1, 30)\n        val monthArray12\
    \ = List(1, 3, 5)\n        val daysArray12 = List(1, 29)\n        val monthArray13\
    \ = List(2, 4, 6)\n        val daysArray13 = List(1, 30)\n        val monthArray14\
    \ = List(1, 3, 5)\n        val daysArray14 = List(1, 29)\n        val monthArray15\
    \ = List(2, 4, 6)\n        val daysArray15 = List(1, 30)\n        val monthArray16\
    \ = List(1, 3, 5)\n        val daysArray16 = List(1, 29)\n        val monthArray17\
    \ = List(2, 4, 6)\n        val daysArray17 = List(1, 30)\n        val monthArray18\
    \ = List(1, 3, 5)\n        val daysArray18 = List(1, 29)\n        val monthArray19\
    \ = List(2, 4, 6)\n        val daysArray19 = List(1, 30)\n        val monthArray20\
    \ = List(1, 3, 5)\n        val daysArray20 = List(1, 29)\n        val monthArray21\
    \ = List(2, 4, 6)\n        val daysArray21 = List(1, 30)\n        val monthArray22\
    \ = List(1, 3, 5)\n        val daysArray22 = List(1, 29)\n        val monthArray23\
    \ = List(2, 4, 6)\n        val daysArray23 = List(1, 30)\n\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbngpk33o.scala:73:5\
    \ ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear = Array(4,5,6,9,11)\n\
    \        val monthsInFebruary = Array(0,2)\n        val daysInMonth = daysInMonth(monthsInYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInFebruary(dateArray(0).toInt))\n\
    \        val daysInMonth = daysInMonth(monthsInLeapYear(date\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnifu5a3z.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnifu5a3z.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = daysInMonth(monthsInYear(dateArray(\e[31m0\e[0m).toInt))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnifu5a3z.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(monthsInFebruary(dateArray(\e\
    [31m0\e[0m).toInt))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnifu5a3z.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(monthsInLeapYear(dateArray(\e\
    [31m0\e[0m).toInt))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnifu5a3z.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonth(monthsInFebruary(dateArray(\e\
    [31m0\e[0m).toInt))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val yearsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \        val daysInMonthCheck = daysInMonth(month)\n        val monthsInMonthCheck\
    \ = monthsInMonth(month)\n        val yearsInMonthCheck = yearsInMonth(year)\n\
    \        if (date.isEmpty) {\n            false\n        } else if (day < 1 ||\
    \ day > daysInMonthCheck) {\n            false\n        } else if (month < 1 ||\
    \ month > monthsInMonthCheck) {\n            false\n        } else if (year <\
    \ 1 || year > yearsInMonthCheck) {\n            false\n        } else {\n    \
    \        true\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyumy_j5g.scala:26:37 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                          value Calendar is not a member of util\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpyumy_j5g.scala:27:39 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            value Calendar is not a member of util\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyumy_j5g.scala:28:38 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36myearsInMonth\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.YEAR)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           value Calendar is not a member of util\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.isValid\
    \ && dateObject.getTime > System.currentTimeMillis\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptr3trxyi.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq7_baj8t.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7_baj8t.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7_baj8t.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val dateArray2 = dateFormat.parse(date + \"-01\")\n        val year2\
    \ = dateArray2.getYear\n        val month2 = dateArray2.getMonth\n        val\
    \ day2 = dateArray2.getDay\n        val dateArray3 = dateFormat.parse(date + \"\
    -02\")\n        val year3 = dateArray3.getYear\n        val month3 = dateArray3.getMonth\n\
    \        val day3 = dateArray3.getDay\n        val dateArray4 = dateFormat.parse(date\
    \ + \"-03\")\n        val year4 = dateArray4.getYear\n        val month4 = dateArray4.getMonth\n\
    \        val day4 = dateArray4.getDay\n        val dateArray5 = dateFormat.parse(date\
    \ + \"-04\")\n        val year5 = dateArray5.getYear\n        val month5 = dateArray5.getMonth\n\
    \        val day5 = dateArray5.getDay\n        val dateArray6 = dateFormat.parse(date\
    \ + \"-05\")\n        val year6 = dateArray6.getYear\n        val month6 = dateArray6.getMonth\n\
    \        val day6 = dateArray6.getDay\n        val dateArray7 = dateFormat.parse(date\
    \ + \"-06\")\n        val year7 = dateArray7.getYear\n        val month7 = dateArray7.getMonth\n\
    \        val day7 = dateArray7.getDay\n        val dateArray8 = dateFormat.parse(date\
    \ + \"-07\")\n        val year8 = dateArray8.getYear\n        val month8 = dateArray8.getMonth\n\
    \        val day8 = dateArray8.getDay\n        val dateArray9 = dateFormat.parse(date\
    \ + \"-08\")\n        val year9 = dateArray9.getYear\n        val month9 = dateArray9.getMonth\n\
    \        val day9 = dateArray9.getDay\n        val dateArray10 = dateFormat.parse(date\
    \ + \"-09\")\n        val year10 = dateArray10.getYear\n        val month10 =\
    \ dateArray10.getMonth\n        val day10 = dateArray10.getDay\n        val dateArray11\
    \ = dateFormat.parse(date + \"-10\")\n        val year11 = dateArray11.getYear\n\
    \        val month11 = dateArray11.getMonth\n        val day11 = dateArray11.getDay\n\
    \        val dateArray12 = dateFormat.parse(date + \"-11\")\n        val year12\
    \ = dateArray12\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpclgv90cj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpclgv90cj.scala:69:5 ---------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.length)\n        val dayCount = (dayArray.length)\n\
    \        val yearCount = (yearArray.length)\n        val monthCheck = monthArray.indexOf(month)\n\
    \        val dayCheck = dayArray.indexOf(day)\n        val yearCheck = yearArray.indexOf(year)\n\
    \        val monthCheck2 = monthArray.indexOf(month)\n        val dayCheck2 =\
    \ dayArray.indexOf(day)\n        val yearCheck2 = yearArray.indexOf(year)\n  \
    \      if(date.isEmpty) {\n            return false\n        }\n        if(monthCount\
    \ < 1 || monthCount > 12) {\n            return false\n        }\n        if(dayCount\
    \ < 1 || dayCount > 31) {\n            return false\n        }\n        if(monthCheck\
    \ < 1 || monthCheck > 12) {\n            return false\n        }\n        if(dayCheck\
    \ < 1 || dayCheck > 31) {\n            return false\n        }\n        if(yearCount\
    \ < 1 || yearCount > 12) {\n            return false\n        }\n        if(monthCheck2\
    \ < 1 || monthCheck2 > 12) {\n            return false\n        }\n        if(dayCheck2\
    \ < 1 || dayCheck2 > 31) {\n            return false\n        }\n        if(yearCheck2\
    \ < 1 || yearCheck2 > 12) {\n            return false\n        }\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtbf3bjd.scala:68)\n\tat Problem.main(tmpbtbf3bjd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010035
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val dateArrayLength = dateArray.length\n       \
    \ val dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjbzwvgs_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray match {\n\
    \            case null => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4fb2gntg.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray3 = Array(1,2,3)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray5 = Array(1,2,3)\n        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray7 = Array(1,2,3)\n        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray9 = Array(1,2,3)\n        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray10 = Array(4,6,9,11)\n        val dayArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray11 = Array(1,2,3)\n        val dayArray11 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray12 = Array(4,6,9,11)\n        val dayArray12 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        if (date.length == 0)\n            return false\n        if (days > 31\
    \ || days < 1)\n            return false\n        if (months > 12 || months <\
    \ 1)\n            return false\n        if (months == 2 && days == 29)\n     \
    \       return false\n        if (months == 3 && days == 30)\n            return\
    \ false\n        if (months == 4 && days == 30)\n            return false\n  \
    \      if (months == 5 && days == 30)\n            return false\n        if (months\
    \ == 6 && days == 30)\n            return false\n        if (months == 7 && days\
    \ == 30)\n            return false\n        if (month\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxyl6_fqn.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxyl6_fqn.scala:68:12\
    \ ------------------------\e[0m\e[0m\n\e[31m68 |\e[0m        \e[33mif\e[0m (month\n\
    \e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ month\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        dateArrayLength > 0 &&\n        dateArrayLength\
    \ <= 3 &&\n        dateArrayLength <= 6 &&\n        dateArrayLength <= 9 &&\n\
    \        dateArrayLength <= 11 &&\n        dateArrayLength <= 12 &&\n        dateArrayLength\
    \ <= 13 &&\n        dateArrayLength <= 14 &&\n        dateArrayLength <= 15 &&\n\
    \        dateArrayLength <= 16 &&\n        dateArrayLength <= 17 &&\n        dateArrayLength\
    \ <= 18 &&\n        dateArrayLength <= 19 &&\n        dateArrayLength <= 20 &&\n\
    \        dateArrayLength <= 21 &&\n        dateArrayLength <= 22 &&\n        dateArrayLength\
    \ <= 23 &&\n        dateArrayLength <= 24 &&\n        dateArrayLength <= 25 &&\n\
    \        dateArrayLength <= 26 &&\n        dateArrayLength <= 27 &&\n        dateArrayLength\
    \ <= 28 &&\n        dateArrayLength <= 29 &&\n        dateArrayLength <= 30 &&\n\
    \        dateArrayLength <= 31 &&\n        dateArrayLength <= 32 &&\n        dateArrayLength\
    \ <= 33 &&\n        dateArrayLength <= 34 &&\n        dateArrayLength <= 35 &&\n\
    \        dateArrayLength <= 36 &&\n        dateArrayLength <= 37 &&\n        dateArrayLength\
    \ <= 38 &&\n        dateArrayLength <= 39 &&\n        dateArrayLength <= 40 &&\n\
    \        dateArrayLength <= 41 &&\n        dateArrayLength <= 42 &&\n        dateArrayLength\
    \ <= 43 &&\n        dateArrayLength <= 44 &&\n        dateArrayLength <= 45 &&\n\
    \        dateArrayLength <= 46 &&\n        dateArrayLength <= 47 &&\n        dateArrayLength\
    \ <= 48 &&\n        dateArrayLength <= 49 &&\n        dateArrayLength <= 50 &&\n\
    \        dateArrayLength <= 51 &&\n        dateArrayLength <= 52 &&\n        dateArrayLength\
    \ <= 53 &&\n        dateArrayLength <= 54 &&\n        dateArrayLength <= 55 &&\n\
    \        dateArrayLength <= 56 &&\n        dateArrayLength <= 57 &&\n        dateArrayLength\
    \ <= 58 &&\n        dateArrayLength <= 59 &&\n        dateArrayLength <= 60 &&\n\
    \        dateArrayLength <= 61 &&\n        dateArrayLength <= 62 &&\n        dateArrayLength\
    \ <= 63 \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdh3evz64.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(new SimpleDateFormat(\"MM-dd-yyyy\"\
    ).parse(date))\n        val dateArray = dateString.split(\"-\")\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbuv65d11.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e\
    [31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbuv65d11.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbuv65d11.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbuv65d11.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e["
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) match {\n            case null => false\n  \
    \          case _ => true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7iuandzg.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8s87pes.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.format(date)\n        val dateArray = dateString.split(\"\
    -\")\n        val monthArray = dateArray(0).toString.toInt.toArray.map(_.toChar)\n\
    \        val dayArray = dateArray(1).toString.toInt.toArray.map(_.toChar)\n  \
    \      val monthCount = monthArray.length\n        val dayCount = dayArray.length\n\
    \        val monthValid = monthCount != 0 && monthCount != 12 && monthArray.forall(_.isDigit)\n\
    \        val dayValid = dayCount != 0 && dayCount != 31 && dayArray.forall(_.isDigit)\n\
    \        val dateValid = monthValid && dayValid\n        dateValid\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq3hbxomd.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToValidate = dateFormat.parse(date)\n        val dateToValidateYear\
    \ = dateToValidate.getYear\n        val dateToValidateMonth = dateToValidate.getMonth\n\
    \        val dateToValidateDay = dateToValidate.getDay\n        val dateToValidateDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_MONTH)\n        val dateToValidateMonthsInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.MONTH)\n        val dateToValidateYearsInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.YEAR)\n        val dateToValidateMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_MONTH)\n        val dateToValidateYearDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n        val dateToValidateYearMonthDaysInMonth\
    \ = dateToValidate.getAct\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrhfw59b.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdateToValidateYearMonthDaysInMonth\e\
    [0m = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToValidateYearMonthDaysInMonth is already defined as \e\
    [33mvalue\e[0m \e[35mdateToValidateYearMonthDaysInMonth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrhfw59b.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToValidateYearMonthDaysInMonth\e[0m = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToValidateYearMonthDaysInMonth is already defined as \e\
    [33mvalue\e[0m \e[35mdateToValidateYearMonthDaysInMonth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrhfw59b.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToValidateYearMonthDaysInMonth\e[0m = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToValidateYearMonthDaysInMonth is already defined as \e\
    [33mvalue\e[0m \e[35mdateToValidateYearMonthDaysInMonth\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfrhfw59b.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdateToValidateYearMonthDaysInMonth\e[0m = dateToValidate.getActualMaximum(Calendar.DAY_OF_YEAR)\n"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,5,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2002,2003,2004)\n        val monthArray4 = Array(4,6,9,11)\n\
    \        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2005,2006,2007,2008)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2009,2010,2011,2012)\n        val monthArray6 = Array(4,6,9,11)\n\
    \        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2012,2013,2014,2015)\n        val monthArray8 = Array(4,6,9,11)\n\
    \        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2013,2014,2015,2016)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2014,2015,2016,2017)\n        val monthArray10 = Array(4,6,9,11)\n\
    \        val daysArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkm9w01lq.scala:56:5\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateInMillis = dateObj.getTime\n\
    \        val currentDateInMillis = Calendar.getInstance().getTimeInMillis()\n\
    \        val daysDiff = dateInMillis - currentDateInMillis\n        val monthDiff\
    \ = daysDiff / (1000 * 60 * 60 * 24 * 30)\n        val yearDiff = daysDiff / (1000\
    \ * 60 * 60 * 24 * 365)\n        val months = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val days = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthIndex\
    \ = months.indexOf(dateFormat.format(dateObj))\n        val dayIndex = days.indexOf(dateFormat.format(dateObj))\n\
    \        val yearIndex = years.indexOf(dateFormat.format(dateObj))\n        val\
    \ validMonth = monthIndex >= 0 && monthIndex < 12\n        val validDay = dayIndex\
    \ >= 0 && dayIndex < 31\n        val validYear = yearIndex >= 0 && yearIndex <\
    \ 365\n        val validMonthAndDay = validMonth && validDay\n        val validYearAndMonth\
    \ = validYear && validMonthAndDay\n        val validDate = validYearAndMonth &&\
    \ dateInMillis > 0\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp11f1h1i7.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp11f1h1i7.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcurrentDateInMillis\e[0m\
    \ = Calendar.getInstance().getTimeInMillis()\n\e[31m\e[31m   |\e[0m          \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \            Not found: Calendar\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp11f1h1i7.scala:33:24 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36myearIndex\e[0m = years.indexOf(dateFormat.format(dateObj))\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: years\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysNotLessThan1 = List(31,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val daysNotLessThan30 = List(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysNotLessThan29 = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31=\
    \ List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMoreAndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMoreAndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan31AndMoreAndMoreAndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,31,30,31,30,31,30,31,30,31)\n        val daysNotLessThan30AndMoreAndMoreAndMoreAndMoreAndMoreAndMoreAndMore\
    \ = List(31,28,\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp77qv55os.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp77qv55os.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12,1,3,5,7,8,10,12)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2010,2011,2012)\n        val monthArray4 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2010,2011,2012)\n        val monthArray6 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2010,2011,2012)\n        val monthArray8 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(0,1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2010,2011,2012)\n        val monthArray10 = \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfvp_qctq.scala:53:26 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mmonthArray10\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfvp_qctq.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray =\
    \ dateArray(1).toString.split(\"-\")\n        val month = monthArray(0).toInt\n\
    \        val day = dayArray(0).toInt\n        val year = dateArray(2).toInt\n\
    \        val monthDays = monthArray.length\n        val daysInMonth = dayArray.length\n\
    \        val monthDaysValid = monthArray.length <= 12 && monthArray.length <=\
    \ daysInMonth\n        val daysInMonthValid = dayArray.length <= 30\n        val\
    \ dayValid = day <= daysInMonth\n        val monthValid = month <= 12 && monthDaysValid\
    \ && daysInMonthValid && dayValid && year >= 1900 && year <= 2100\n        val\
    \ dateValid = monthValid && dayValid && year >= 1900 && year <= 2100\n       \
    \ dateValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpinlq78k8.scala:38)\n\tat Problem.main(tmpinlq78k8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val dayArray = List(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"13\", \"15\", \"17\",\
    \ \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n        val monthArray2 = List(\"\
    04\", \"06\", \"09\", \"11\")\n        val dayArray2 = List(\"04\", \"06\", \"\
    09\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\",\
    \ \"29\")\n        val monthArray3 = List(\"02\")\n        val dayArray3 = List(\"\
    02\")\n        val monthArray4 = List(\"01\", \"03\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\")\n        val dayArray4 = List(\"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\"\
    , \"27\", \"29\")\n        val monthArray5 = List(\"04\", \"06\", \"09\", \"11\"\
    )\n        val dayArray5 = List(\"04\", \"06\", \"09\", \"11\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n        val monthArray6\
    \ = List(\"02\")\n        val dayArray6 = List(\"02\")\n        val monthArray7\
    \ = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val\
    \ dayArray7 = List(\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n      \
    \  val monthArray8 = List(\"04\", \"06\", \"09\", \"11\")\n        val dayArray8\
    \ = List(\"04\", \"06\", \"09\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\")\n        val monthArray9 = List(\"02\")\n  \
    \      val dayArray9 = List(\"02\")\n        val monthArray10 = List(\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val dayArray10 = List(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"13\", \"15\", \"17\",\
    \ \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n        val monthArray11 =\
    \ List(\"04\", \"06\", \"09\", \"11\")\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpag02uzfo.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCheck = monthArray.contains(month)\n        val dayCheck = dayArray.contains(day)\n\
    \        val yearCheck = yearArray.contains(year)\n        val dateCheck = monthCheck\
    \ && dayCheck && yearCheck\n        dateCheck\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn65jnl7e.scala:36)\n\tat Problem.main(tmpn65jnl7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(monthArray.length != 12){\n            return false\n       \
    \ }\n        if(dayArray.length != 31){\n            return false\n        }\n\
    \        if(monthArray(0) < 1 || monthArray(0) > 12){\n            return false\n\
    \        }\n        if(dayArray(0) < 1 || dayArray(0) > 30){\n            return\
    \ false\n        }\n        if(monthArray(1) < 1 || monthArray(1) > 12){\n   \
    \         return false\n        }\n        if(dayArray(1) < 1 || dayArray(1) >\
    \ 29){\n            return false\n        }\n        if(monthArray(2) < 1 || monthArray(2)\
    \ > 12){\n            return false\n        }\n        if(dayArray(2) < 1 || dayArray(2)\
    \ > 31){\n            return false\n        }\n        return true\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k3av6h7.scala:34:27\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m0\e[0m) < \e[31m1\e[0m || monthArray(\e[31m0\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp_k3av6h7.scala:34:48 --------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mif\e[0m(monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m                         \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                   Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m         \
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k3av6h7.scala:37:25 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(dayArray(\e[31m0\e[0m) < \e[31m1\e\
    [0m || dayArray(\e[31m0\e[0m) > \e[31m30\e[0m){\n\e[31m\e[31m   |\e[0m       \
    \                  ^\e[0m\n\e[31m   |\e[0m                         Found:    (\e\
    [31m1\e[0m : Int)\n\e[31m   |\e[0m                         Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_k3av6h7.scala:37:44\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(dayArray(\e\
    [31m0\e[0m) < \e[31m1\e[0m || dayArray(\e[31m0\e[0m) > \e[31m30\e[0m){\n\e[31m\e\
    [31m   |\e[0m                                            ^^\e[0m\n\e[31m   |\e\
    [0m                                            Found:    (\e[31m30\e[0m : Int)\n\
    \e[31m   |\e[0m                                            Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tm"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray2 = Array(4,6,9,11)\n\
    \        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray3 = Array(1,2,3)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray5 = Array(1,2,3)\n        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray7 = Array(1,2,3)\n        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray9 = Array(1,2,3)\n        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray10 = Array(4,6,9,11)\n        val dayArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray11 = Array(1,2,3)\n        val dayArray11 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray12 = Array(4,6,9,11)\n        val dayArray12 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray13 = Array(1,2,3)\n        val dayArray13 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray14 = Array(4,6,9,11)\n        val dayArray14 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray15 = Array(1,2,3)\n        val dayArray15 = Array(0,31,30,29,28,31,30,31,30,31,30,3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt29sj3ry.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt29sj3ry.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt29sj3ry.scala:57:5\
    \ ---------------------\e[0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq7_baj8t.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7_baj8t.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7_baj8t.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgx2gs6w.scala:36)\n\tat Problem.main(tmppgx2gs6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateArray = dateObject.getTime.split(\"\
    -\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n    \
    \    val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe_3iy4p4.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_3iy4p4.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe_3iy4p4.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe_3iy4p4.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpe_3iy4p4.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysNotLessThanOneOrHigherThan31 = List(1,3,5,7,8,10,12)\n      \
    \  val daysNotLessThanOneOrHigherThan30 = List(4,6,9,11)\n        val daysNotLessThanOneOrHigherThan29\
    \ = List(2)\n        val monthNotLessThanOneOrHigherThan12 = List(1,2,3)\n   \
    \     val dateInCorrectFormat = months.contains(month) && daysNotLessThanOneOrHigherThan31.contains(day)\
    \ && daysNotLessThanOneOrHigherThan30.contains(day) && daysNotLessThanOneOrHigherThan29.contains(day)\
    \ && monthNotLessThanOneOrHigherThan12.contains(month)\n        dateInCorrectFormat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpby847qns.scala:35)\n\tat Problem.main(tmpby847qns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val daysArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val daysArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray8 = Array(4,6,9,11)\n        val daysArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val daysArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,3\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjgysxc5_.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpjgysxc5_.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthDays = Array(1,2,3,4,5,6,7,8,9,10,11,12,4,6,9,11)\n\
    \        val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(31,30,29,28,31,30,31,30,31,30,31,30,31)\n     \
    \   val months = Array(1,2,3,4,5,6,7,8,9,10,12)\n        val years = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDays = Array(\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpi2ksb6hf.scala:47:30 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mmonthDays\e[0m = Array(\n\
    \e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m   \
    \                           expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi2ksb6hf.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonths\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonths\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi2ksb6hf.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonthDays\e[0m = Array(\e[31m31\e[0m,\e[31m30\e[0m,\e[31m29\e[0m,\e[31m28\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthDays is already defined as \e[33mvalue\e[0m \e[35mmonthDays\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpi2ksb6hf.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = Array(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonths\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonths\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in "
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(1,3,5,7,8,10,12)\n\
    \        val yearArray2 = Array(2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052)\n\
    \        val monthArray3 = Array(2,4,6,8,10,12)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray3 = Array(2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052)\n\
    \        val monthArray4 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray4\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val yearArray4 = Array(2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052)\n\
    \        val monthArray5 = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray5\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val yearArray5 = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray6 = Array(4,6,9,11)\n        val dayArray6 = Array(1,3,5,7,8,10,12)\n\
    \        val yearArray6 = Array(2040,2041,2042,2043,2044,2045,\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpejz_v7mw.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpejz_v7mw.scala:44:5 ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgx2gs6w.scala:36)\n\tat Problem.main(tmppgx2gs6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.indexOf(month) + 1)\n        val dayCount\
    \ = (dayArray.indexOf(day) + 1)\n        val yearCount = (yearArray.indexOf(year)\
    \ + 1)\n        val monthCountValid = monthCount > 0 && monthCount < 13\n    \
    \    val dayCountValid = dayCount > 0 && dayCount < 31\n        val yearCountValid\
    \ = yearCount > 0 && yearCount < 12\n        val dateValid = monthCountValid &&\
    \ dayCountValid && yearCountValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaenvpgti.scala:39)\n\tat Problem.main(tmpaenvpgti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateInDays = dateParsed.getTime\n\
    \        val dateInDaysInYear = dateInDays / 86400000\n        val dateInDaysInYearInMonth\
    \ = dateInDaysInYear / 30\n        val dateInDaysInYearInMonthInDay = dateInDaysInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDayInYear = dateInDaysInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonth = dateInDaysInYearInMonthInDayInYear\
    \ / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDay = dateInDaysInYearInMonthInDayInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYear = dateInDaysInYearInMonthInDayInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYear / 30\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonth / 7\n        val\
    \ dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ / 365\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYear / 30\n\
    \        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDay\
    \ = dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ / 7\n        val dateInDaysInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonthInDayInYearInMonth\
    \ = dateInDaysInYearInMonth\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2jkcq9ap.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2jkcq9ap.scala:38:5 ---------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear\
    \ = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dateArray\
    \ = date.split(\"-\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val daysInMonth =\
    \ Array(31,28,31,30,31,30,31,\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_l73o7jx.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_l73o7jx.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l73o7jx.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l73o7jx.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = date.split(\e[31m\"\
    -\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateArray is already defined as \e[33mvalue\e[0m \e[35mdateArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_l73o7jx.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e[31m31\e\
    [0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime !=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkehhqxx.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val days = List(31,28,31,30,31,30,31,30,31,30,31)\n        val months\
    \ = List(4,6,9,11)\n        val days30 = List(29)\n        val days29 = List(29)\n\
    \        val days28 = List(28)\n        val days31 = List(31)\n        val days30And29\
    \ = List(30,29)\n        val days30And28 = List(30,28)\n        val days30And31\
    \ = List(30,31)\n        val days30And30And29 = List(30,30,29)\n        val days30And30And28\
    \ = List(30,30,28)\n        val days30And30And31 = List(30,30,31)\n        val\
    \ days30And30And30And29 = List(30,30,30,29)\n        val days30And30And30And28\
    \ = List(30,30,30,28)\n        val days30And30And30And31 = List(30,30,30,31)\n\
    \        val days30And30And30And30And29 = List(30,30,30,30,29)\n        val days30And30And30And30And28\
    \ = List(30,30,30,30,28)\n        val days30And30And30And30And31 = List(30,30,30,30,31)\n\
    \        val days30And30And30And30And30And29 = List(30,30,30,30,30,29)\n     \
    \   val days30And30And30And30And30And28 = List(30,30,30,30,30,28)\n        val\
    \ days30And30And30And30And30And31 = List(30,30,30,30,30,31)\n        val days30And30And30And30And30And30And29\
    \ = List(30,30,30,30,30,30,29)\n        val days30And30And30And30And30And30And28\
    \ = List(30,30,30,30,30,30,28,31)\n        val days30And30And30And30And30And30And31\
    \ = List(30,30,30,30,30,30,30,31)\n        val days30And30And30And30And30And30And30And29\
    \ = List(30,30,30,30,30,30,30,29,31)\n        val days30And30And30And30And30And\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm6fifz9c.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm6fifz9c.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmonths\e[0m = List(\e[31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmonths\
    \ is already defined as \e[33mvalue\e[0m \e[35mmonths\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm6fifz9c.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray.getTime !=\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdkehhqxx.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010025
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val months = Array(4,6,9,11)\n\
    \        val year = dateFormat.parse(date).getYear\n        val month = dateFormat.parse(date).getMonthValue\n\
    \        val day = dateFormat.parse(date).getDayOfMonth\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months = Array(4,6,9,11)\n        val year = dateFormat.parse(date).getYear\n\
    \        val month = dateFormat.parse(date).getMonthValue\n        val day = dateFormat.parse(date).getDayOfMonth\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val months = Array(4,6,9,11)\n\
    \        val year = dateFormat.parse(date).getYear\n        val month = dateFormat.parse(date).getMonthValue\n\
    \        val day = dateFormat.parse(date).getDayOfMonth\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months = Array(4,6,9,11)\n        val year = dateFormat.parse(date).getYear\n\
    \        val month = dateFormat.parse(date).getMonthValue\n        val day = dateFormat.parse(date).getDayOfMonth\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val months = Array(4,6,9,11)\n\
    \        val year = dateFormat.parse(date).getYear\n        val month = dateFormat.parse(date).getMonthValue\n\
    \        val day = dateFormat.parse(date).getDayOfMonth\n        val daysInMonth\
    \ = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val monthsInt = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val months = Array(4,6,9,11)\n        val year = dateFormat.parse(date).getYear\n\
    \        val month = dateFormat.parse(date).getMonthValue\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw1ginqbj.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array(\e\
    [31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e\
    [0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw1ginqbj.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mmonthsInt\e[0m = Array(\e[31m1\e[0m,\e\
    [31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e[0m,\e\
    [31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mmonthsInt is already defined as \e[33mvalue\e[0m \e[35mmonthsInt\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpw1ginqbj.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mmonths\e[0m = Array(\e[31m4\e[0m,\e[31m6\e\
    [0m,\e[31m9\e[0m,\e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonths is already defined as \e[33mvalue\e[0m \e[35mmonths\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw1ginqbj.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36myear\e[0m = dateFormat.parse(date).getYear\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0myear is already defined as \e[33mvalue\e[0m \e[35myear\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if (dateArray.length != 3) {\n            return false\n        }\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if (months < 1 || months > 12) {\n  \
    \          return false\n        }\n        if (days < 1 || days > 31) {\n   \
    \         return false\n        }\n        if (months == 2 && days > 29) {\n \
    \           return false\n        }\n        if (months == 4 || months == 6 ||\
    \ months == 9 || months == 11) {\n            return false\n        }\n      \
    \  if (months == 2) {\n            if (year % 4 == 0) {\n                if (year\
    \ % 100 == 0) {\n                    if (year % 400 == 0) {\n                \
    \        return true\n                    }\n                }\n            }\n\
    \        }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5rzf198.scala:56)\n\tat Problem.main(tmpn5rzf198.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckYear\
    \ = dateFormat.parse(date).getYear\n        val dateToCheckMonth = dateFormat.parse(date).getMonth\n\
    \        val dateToCheckDay = dateFormat.parse(date).getDay\n        val dateToCheckDaysInMonth\
    \ = dateFormat.parse(date).getDaysInMonth\n        val dateToCheckYearMonth =\
    \ dateFormat.parse(date).getYearMonth\n        val dateToCheckYearMonthDay = dateFormat.parse(date).getYearMonthDay\n\
    \        val dateToCheckYearMonthDayMillis = dateFormat.parse(date).getYearMonthDayMillis\n\
    \        val dateToCheckYearMonthDayMillisOfDay = dateFormat.parse(date).getYearMonthDayMillisOfDay\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillis = dateFormat.parse(date).getYearMonthDayMillisOfDayMillis\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDay = dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDay\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillis = dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDayMillis\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillisOfDay = dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDayMillisOfDay\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillis =\
    \ dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillis\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillisOfDay\
    \ = dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillisOfDay\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillis\
    \ = dateFormat.parse(date).getYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillis\n\
    \        val dateToCheckYearMonthDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillisOfDayMillisOfDay\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcupso_36.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcupso_36.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcupso_36.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n       \
    \ val year = dateArray(2).toInt\n        if(months < 1 || months > 12){\n    \
    \        return false\n        }\n        if(days < 1 || days > 31 || days > 30\
    \ || days > 29){\n            return false\n        }\n        if(months == 2\
    \ && days > 28){\n            return false\n        }\n        if(months == 3\
    \ && days > 30){\n            return false\n        }\n        if(months == 4\
    \ && days > 31){\n            return false\n        }\n        if(months == 5\
    \ && days > 30){\n            return false\n        }\n        if(months == 6\
    \ && days > 31){\n            return false\n        }\n        if(months == 7\
    \ && days > 31){\n            return false\n        }\n        if(months == 8\
    \ && days > 31){\n            return false\n        }\n        if(months == 9\
    \ && days > 31){\n            return false\n        }\n        if(months == 10\
    \ && days > 30){\n            return false\n        }\n        if(months == 11\
    \ && days > 31){\n            return false\n        }\n        if(months == 12\
    \ && days > 31){\n            return false\n        }\n        if(months == 1\
    \ && days > 28){\n            return false\n        }\n        if(months == 2\
    \ && days > 29){\n            return false\n        }\n        if(months == 3\
    \ && days > 30){\n            return false\n        }\n        if(months == 4\
    \ && days > 31){\n            return false\n        }\n        if(months == 5\
    \ && days > 30){\n            return false\n        }\n        if(months == 6\
    \ && days > 31){\n            return false\n        }\n        if(months == 7\
    \ && days > 31){\n            return false\n        }\n        if(months == 8\
    \ && days > 31){\n            return false\n        }\n        if(months == 9\
    \ && days > 31){\n            return false\n        }\n        if(months == 10\
    \ && days > 30){\n            return false\n        }\n        if(months == 11\
    \ && days > 31){\n            return false\n        }\n        if(months == 12\
    \ && days > 31){\n            return false\n        }\n        if(months == 1\
    \ && days > 28){\n            return false\n        }\n        if(months == 2\
    \ && days > 29){\n            return false\n        }\n        if(months == 3\
    \ && days > 30){\n            return false\n        }\n        if(months == 4\
    \ && days > 31){\n            return false\n        }\n        if(months == 5\
    \ && days > 30){\n            return \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8vfh4g77.scala:139:0 ---------------------------\e\
    [0m\e[0m\n\e[31m139 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8vfh4g77.scala:117:12\
    \ -------------------\e[0m\e[0m\n\e[31m117 |\e[0m            \e[33mreturn\e[0m\
    \ \n\e[31m\e[31m    |\e[0m            ^^^^^^\e[0m\n\e[31m    |\e[0m          \
    \  Found:    Unit\n\e[31m    |\e[0m            Required: Boolean\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8vfh4g77.scala:138:1 --------------------\e\
    [0m\e[0m\n\e[31m138 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e[0m\n\e[31m    |\e[0m Found:\
    \    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m    |\e[0m\n\e[31m    |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp8vfh4g77.scala:119:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m119 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj.getTime > System.currentTimeMillis\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpye3qy3f5.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val validMonths = Set(1,3,5,7,8,10,12)\n\
    \        val validDays = Set(1,3,5,7,8,10,12,29)\n        val validYear = Set(1,12)\n\
    \        val validMonth = Set(4,6,9,11)\n        val validDay = Set(1,3,5,7,8,10,12,29)\n\
    \        val validYearMonth = Set(4,6,9,11)\n        val validYearDay = Set(1,3,5,7,8,10,12,29)\n\
    \        val validYearMonthDay = Set(4,6,9,11)\n        val validYearMonthDayYear\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonth = Set(4,6,9,11)\n  \
    \      val validYearMonthDayYearMonthDay = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYear\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonth = Set(4,6,9,11)\n\
    \        val validYearMonthDayYearMonthDayYearMonthDay = Set(4,6,9,11)\n     \
    \   val validYearMonthDayYearMonthDayYearMonthDayYear = Set(4,6,9,11)\n      \
    \  val validYearMonthDayYearMonthDayYearMonthDayYearMonth = Set(4,6,9,11)\n  \
    \      val validYearMonthDayYearMonthDayYearMonthDayYearMonthDay = Set(4,6,9,11)\n\
    \        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear = Set(4,6,9,11)\n\
    \        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth =\
    \ Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDay\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYear\
    \ = Set(4,6,9,11)\n        val validYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwuu659uh.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpwuu659uh.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateInt = dateFormat.parse(date).getTime\n\
    \        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n        val\
    \ monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap =\
    \ Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap\
    \ = Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap\
    \ = Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap\
    \ = Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap\
    \ = Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val yearsInLeap\
    \ = Array(0,4,6,9,11)\n        val leapYear = yearsInLeap.contains(dateInt.getYear)\n\
    \        val monthDays = dateInt.getMonthDay\n        val daysInMonth = Array(31,28,31,30,31,\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpydagqua7.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydagqua7.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = Array(\e[31m31\e[0m,\e[31m28\e[0m,\e[31m31\e[0m,\e\
    [31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e[0m,\e[31m30\e[0m,\e[31m31\e\
    [0m,\e[31m30\e[0m,\e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpydagqua7.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = Array(\e[31m1\e\
    [0m,\e[31m2\e[0m,\e[31m3\e[0m,\e[31m4\e[0m,\e[31m5\e[0m,\e[31m6\e[0m,\e[31m7\e\
    [0m,\e[31m8\e[0m,\e[31m9\e[0m,\e[31m10\e[0m,\e[31m11\e[0m,\e[31m12\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpydagqua7.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36myearsInLeap\e[0m = Array(\e[31m0\e[0m,\e\
    [31m4\e[0m,\e[31m6\e[0m,\e[31m9\e[0m,\e[31m11\e[0m)\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0myearsInLeap is\
    \ already defined as \e[33mvalue\e[0m \e[35myearsInLeap\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpydagqua7.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mleapYear\e[0m = yearsInLeap.contains(dateInt.getYear)\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToValidate = dateFormat.parse(date)\n        dateToValidate\
    \ != null\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp70wj5awv.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010047
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.split(\"-\")\n        val dayArray =\
    \ dateArray(1).toString.split(\"-\")\n        val monthCount = monthArray.length\n\
    \        val dayCount = dayArray.length\n        val monthValid = monthCount !=\
    \ 0 && monthCount != 12 && monthCount != 2 && monthCount != 4 && monthCount !=\
    \ 6 && monthCount != 8 && monthCount != 10 && monthCount != 12\n        val dayValid\
    \ = dayCount != 0 && dayCount != 31 && dayCount != 30 && dayCount != 29 && dayCount\
    \ != 31\n        val dateValid = monthValid && dayValid && dayArray(0).toInt <=\
    \ dayArray(1).toInt && dayArray(0).toInt <= dayArray(2).toInt\n        dateValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length\
    \ 1\n\tat Problem$.validDate(tmpi8gm11no.scala:29)\n\tat Problem$.main(tmpi8gm11no.scala:33)\n\
    \tat Problem.main(tmpi8gm11no.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateInMillis = dateObj.getTime\n\
    \        val dateInDays = dateInMillis / 1000\n        val dateInMonths = dateInDays\
    \ / 30\n        val dateInYears = dateInMonths / 12\n        val dateInDaysInYears\
    \ = dateInYears * 365\n        val dateInDaysInYearsNotInMonths = dateInDaysInYears\
    \ - dateInMonths * 30\n        val dateInDaysInYearsNotInMonthsAndDays = dateInDaysInYearsNotInMonths\
    \ * 30\n        val dateInDaysInYearsNotInMonthsAndDaysNotInYears = dateInDaysInYearsNotInMonthsAndDays\
    \ * 365\n        dateInDays > 0 && dateInDays < 31 &&\n            dateInMonths\
    \ > 0 && dateInMonths < 12 &&\n            dateInYears > 0 && dateInYears < 100\
    \ &&\n            dateInDaysInYears > 0 && dateInDaysInYears < 100 &&\n      \
    \      dateInDaysInYearsNotInMonths > 0 && dateInDaysInYearsNotInMonths < 100\
    \ &&\n            dateInDaysInYearsNotInMonthsAndDays > 0 && dateInDaysInYearsNotInMonthsAndDays\
    \ < 100 &&\n            dateInDaysInYearsNotInMonthsAndDaysNotInYears > 0 && dateInDaysInYearsNotInMonthsAndDaysNotInYears\
    \ < 100\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp930a4tpc.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty) false\n        else if(monthArray.contains(month) &&\
    \ dayArray.contains(day) && yearArray.contains(year)) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5tunk9rs.scala:34)\n\tat Problem.main(tmp5tunk9rs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.length == 0){\n            return false\n        }\n        if(month\
    \ < 1 || month > 12){\n            return false\n        }\n        if(day < 1\
    \ || day > dayArray(month)){\n            return false\n        }\n        if(month\
    \ < 1 || month > 12){\n            return false\n        }\n        if(year <\
    \ 1 || year > yearArray(month)){\n            return false\n        }\n      \
    \  true\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7or80zxo.scala:50)\n\tat Problem.main(tmp7or80zxo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateObj2 = dateFormat.parse(date)\n\
    \        val dateObj3 = dateFormat.parse(date)\n        val dateObj4 = dateFormat.parse(date)\n\
    \        val dateObj5 = dateFormat.parse(date)\n        val dateObj6 = dateFormat.parse(date)\n\
    \        val dateObj7 = dateFormat.parse(date)\n        val dateObj8 = dateFormat.parse(date)\n\
    \        val dateObj9 = dateFormat.parse(date)\n        val dateObj10 = dateFormat.parse(date)\n\
    \        val dateObj11 = dateFormat.parse(date)\n        val dateObj12 = dateFormat.parse(date)\n\
    \        val dateObj13 = dateFormat.parse(date)\n        val dateObj14 = dateFormat.parse(date)\n\
    \        val dateObj15 = dateFormat.parse(date)\n        val dateObj16 = dateFormat.parse(date)\n\
    \        val dateObj17 = dateFormat.parse(date)\n        val dateObj18 = dateFormat.parse(date)\n\
    \        val dateObj19 = dateFormat.parse(date)\n        val dateObj20 = dateFormat.parse(date)\n\
    \        val dateObj21 = dateFormat.parse(date)\n        val dateObj22 = dateFormat.parse(date)\n\
    \        val dateObj23 = dateFormat.parse(date)\n        val dateObj24 = dateFormat.parse(date)\n\
    \        val dateObj25 = dateFormat.parse(date)\n        val dateObj26 = dateFormat.parse(date)\n\
    \        val dateObj27 = dateFormat.parse(date)\n        val dateObj28 = dateFormat.parse(date)\n\
    \        val dateObj29 = dateFormat.parse(date)\n        val dateObj30 = dateFormat.parse(date)\n\
    \        val dateObj31 = dateFormat.parse(date)\n        val dateObj32 = dateFormat.parse(date)\n\
    \        val dateObj33 = dateFormat.parse(date)\n        val dateObj34 = dateFormat.parse(date)\n\
    \        val dateObj35 = dateFormat.parse(date)\n        val dateObj36 = dateFormat.parse(date)\n\
    \        val dateObj37 = dateFormat.parse(date)\n        val dateObj38 = dateFormat.parse(date)\n\
    \        val dateObj39 = dateFormat.parse(date)\n        val dateObj40 = dateFormat.parse(date)\n\
    \        val dateObj41 = dateFormat.parse(date)\n        val dateObj42 = dateFormat.parse(date)\n\
    \        val dateObj\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi7au757l.scala:66:4 ----------------------------\e\
    [0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi7au757l.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi7au757l.scala:66:5\
    \ ---------------------\e[0m\e[0m\n\e[31m66 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd_ges9n6.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11,12,1,3,5,7,8,10,12)\n        val dayArray2\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray2 = Array(2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025)\n\
    \        val monthArray3 = Array(2,4,6,8,10,12,1,3,5,7,8,10)\n        val dayArray3\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray3 = Array(2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031)\n\
    \        val monthArray4 = Array(2,4,6,8,10,12,1,3,5,7,8,10)\n        val dayArray4\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray4 = Array(2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031)\n\
    \        val monthArray5 = Array(2,4,6,8,10,12,1,3,5,7,8,10)\n        val dayArray5\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray5 = Array(2022,2023,2024,2025,2026,2027,2028,2029,2030,2031)\n\
    \        val monthArray6 = Array(2,4,6,8,10,12,1,3,5,7,8,10)\n        val dayArray6\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray6 = Array(2024,2025,2026,2027,2028,2029,2030,2031)\n\
    \        val monthArray7 = Array(2,4,6,8,10,12,1,3,5,7,8,10)\n        val dayArray7\
    \ = Array(0,31,30,31,30,31,30,31,30,31,30,31)\n        val yearArray7 = Array(2025,2026,2027,2028,2029,2030,20\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp84vmeh5c.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp84vmeh5c.scala:47:5 ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyovd3dz.scala:36)\n\tat Problem.main(tmptyovd3dz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*30\
    \ + dayArray\n        val months = monthArray*12\n        val daysInMonth = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth29 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \        val daysInMonth31 = scala.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr4xj5x4g.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpr4xj5x4g.scala:32:12 ---------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth30\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr4xj5x4g.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth31\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr4xj5x4g.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth31\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr4xj5x4g.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance().get(Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m     "
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckAsDays\
    \ = dateToCheck.getTime\n        val dateToCheckAsDaysAsString = dateToCheckAsDays.toString\n\
    \        val dateToCheckAsDaysAsStringAsArray = dateToCheckAsDaysAsString.split(\"\
    -\")\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArray.length\n\
    \        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = dateToCheckAsDaysAsStringAsArrayLength\
    \ - 1\n        val dateToCheckAsDaysAsStringAsArrayLength = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpv2e6wm7p.scala:43:52 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mdateToCheckAsDaysAsStringAsArrayLength\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \    ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv2e6wm7p.scala:28:12 ---------------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mdateToCheckAsDaysAsStringAsArrayLength\e\
    [0m = dateToCheckAsDaysAsStringAsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckAsDaysAsStringAsArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mdateToCheckAsDaysAsStringAsArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv2e6wm7p.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mdateToCheckAsDaysAsStringAsArrayLength\e\
    [0m = dateToCheckAsDaysAsStringAsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckAsDaysAsStringAsArrayLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mdateToCheckAsDaysAsStringAsArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv2e6wm7p.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mdateToCheckAsDaysAsStringAsArrayLength\e\
    [0m = dateToCheckAsDaysAsStringAsArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateToCheckAsDaysAsStri"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val monthArray = dateArray(0).toString.toInt\n        val dayArray = dateArray(1).toString.toInt\n\
    \        val year = dateArray(2).toString.toInt\n        val monthDays = monthArray*31+dayArray\n\
    \        val monthMaxDays = monthArray*30+dayArray\n        val monthMinDays =\
    \ monthArray*29+dayArray\n        monthArray.toInt < 1 || monthArray.toInt > 12\n\
    \        monthDays < 1 || monthDays > 31\n        monthMaxDays < 1 || monthMaxDays\
    \ > 30\n        monthMinDays < 1 || monthMinDays > 29\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ixmwj1e.scala:36)\n\tat Problem.main(tmp1ixmwj1e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyovd3dz.scala:36)\n\tat Problem.main(tmptyovd3dz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(dateArray.length != 3){\n            return false\n        }\n   \
    \     if(monthArray.contains(month) == false){\n            return false\n   \
    \     }\n        if(dayArray.contains(day) == false){\n            return false\n\
    \        }\n        if(yearArray.contains(year) == false){\n            return\
    \ false\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7f7uut5.scala:44)\n\tat Problem.main(tmpd7f7uut5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3){\n            return false\n        }\n        val\
    \ monthArray = dateArray(0).toString.split(\"-\")\n        if(monthArray.length\
    \ != 2){\n            return false\n        }\n        val dayArray = dateArray(1).toString.split(\"\
    -\")\n        if(dayArray.length != 2){\n            return false\n        }\n\
    \        if(monthArray(0) < 1 || monthArray(0) > 12){\n            return false\n\
    \        }\n        if(monthArray(1) < 1 || monthArray(1) > 12){\n           \
    \ return false\n        }\n        if(dayArray(0) < 1 || dayArray(0) > 30){\n\
    \            return false\n        }\n        if(dayArray(1) < 1 || dayArray(1)\
    \ > 29){\n            return false\n        }\n        if(monthArray(0) == monthArray(1)){\n\
    \            if(dayArray(0) > dayArray(1)){\n                return false\n  \
    \          }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbhrjcv8p.scala:34:27\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m0\e[0m) < \e[31m1\e[0m || monthArray(\e[31m0\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             Found:    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                \
    \           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbhrjcv8p.scala:34:48 --------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mif\e[0m(monthArray(\e[31m0\e[0m) < \e[31m1\e[0m || monthArray(\e\
    [31m0\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m                         \
    \                       ^^\e[0m\n\e[31m   |\e[0m                             \
    \                   Found:    (\e[31m12\e[0m : Int)\n\e[31m   |\e[0m         \
    \                                       Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbhrjcv8p.scala:37:27 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(monthArray(\e[31m1\e[0m) < \e[31m1\e\
    [0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m){\n\e[31m\e[31m   |\e[0m     \
    \                      ^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    (\e[31m1\e[0m : Int)\n\e[31m   |\e[0m                           Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbhrjcv8p.scala:37:48\
    \ --------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m(monthArray(\e\
    [31m1\e[0m) < \e[31m1\e[0m || monthArray(\e[31m1\e[0m) > \e[31m12\e[0m){\n\e[31m\e\
    [31m   |\e[0m                                                ^^\e[0m\n\e[31m \
    \  |\e[0m                                                Found:    (\e[31m12\e\
    [0m : Int)\n\e[31m   |\e[0m                                                Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp850sjnya.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val dateArrayMonth = dateArray(0).getMonth\n   \
    \     val dateArrayDay = dateArray(0).getDay\n        val dateArrayYear = dateArray(0).getYear\n\
    \        val dateArrayMonthDay = dateArray(0).getMonthDay\n        val dateArrayMonthDayYear\
    \ = dateArray(0).getMonthDayYear\n        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val dateArrayMonthDayYearLength = dateArray(0).getMonthDayYear.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp4wf_i8la.scala:54:11 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp4wf_i8la.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdateArrayMonthDayYearLength\e\
    [0m = dateArray(\e[31m0\e[0m).getMonthDayYear.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateArrayMonthDayYearLength is already defined as \e[33mvalue\e\
    [0m \e[35mdateArrayMonthDayYearLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wf_i8la.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdateArrayMonthDayYearLength\e\
    [0m = dateArray(\e[31m0\e[0m).getMonthDayYear.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateArrayMonthDayYearLength is already defined as \e[33mvalue\e\
    [0m \e[35mdateArrayMonthDayYearLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wf_i8la.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdateArrayMonthDayYearLength\e\
    [0m = dateArray(\e[31m0\e[0m).getMonthDayYear.length\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdateArrayMonthDayYearLength is already defined as \e[33mvalue\e\
    [0m \e[35mdateArrayMonthDayYearLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4wf_i8la.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val dateArrayLength\
    \ = dateArray.length\n        val dateArrayLength = dateArray.length\n       \
    \ val dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \        val dateArrayLength = dateArray.length\n        val dateArrayLength =\
    \ dateArray.length\n        val dateArrayLength = dateArray.length\n        val\
    \ dateArrayLength = dateArray.length\n        val dateArrayLength = dateArray.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjbzwvgs_.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mdateArrayLength is already defined as \e[33mvalue\e[0m \e[35mdateArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjbzwvgs_.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m        \e[33mval\e[0m \e[36mdateArrayLength\e[0m = dateArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010034
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12,\
    \ 1, 4, 6, 9, 11)\n        val dateArray = date.split(\"-\")\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ 11)\n        val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth\
    \ = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear\
    \ = List(12, 1, 4, 6, 9, 11)\n        val daysInMonth = List(31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31)\n        val monthsInYear = List(12, 1, 4, 6, 9,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprbpuhwdr.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprbpuhwdr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m, \e[31m28\e[0m, \e[31m31\e[0m, \e\
    [31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m31\e[0m, \e[31m30\e\
    [0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mmonthsInYear\e[0m = List(\e[31m12\e\
    [0m, \e[31m1\e[0m, \e[31m4\e[0m, \e[31m6\e[0m, \e[31m9\e[0m, \e[31m11\e[0m)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mmonthsInYear is already defined as \e[33mvalue\e[0m \e[35mmonthsInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mdateArray\e[0m = date.split(\e[31m\"\
    -\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdateArray is already defined as \e[33mvalue\e[0m \e[35mdateArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprbpuhwdr.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = List(\e[31m31\e[0m,\
    \ \e[31m28\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e\
    [31m31\e[0m, \e[31m31\e[0m, \e[31m30\e[0m, \e[31m31\e["
  stdout: ''
  timestamp: 1660010022
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat2 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat4\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat5 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat6 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat8\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat9 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat10 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat18\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat19 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat20 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat21 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat22 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat23\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat24 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat25 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateFormat26 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val\
    \ dateFormat27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat28\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateFormat29 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateFormat30 = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpdg590fs8.scala:52:11 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:23:30 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdg590fs8.scala:25:30 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer ex"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj != null\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_8s87pes.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        val dateDays = dateFormat.parse(date).getDays\n\
    \        val dateMonths = dateFormat.parse(date).getMonth\n        val dateYears\
    \ = dateFormat.parse(date).getYear\n        val dateMonthDays = dateFormat.parse(date).getMonthDays\n\
    \        val dateMonthDaysOfYear = dateFormat.parse(date).getMonthDaysOfYear\n\
    \        val dateMonthDaysOfYear2 = dateFormat.parse(date).getMonthDaysOfYear(dateYears)\n\
    \        val dateMonthDaysOfYear3 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths)\n        val dateMonthDaysOfYear4 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays)\n        val dateMonthDaysOfYear5 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths)\n        val dateMonthDaysOfYear6 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths, dateDays)\n        val dateMonthDaysOfYear7\
    \ = dateFormat.parse(date).getMonthDaysOfYear(dateYears, dateMonths, dateDays,\
    \ dateMonths, dateDays, dateMonths)\n        val dateMonthDaysOfYear8 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths, dateDays, dateMonths, dateDays)\n        val\
    \ dateMonthDaysOfYear9 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths, dateDays, dateMonths, dateDays, dateMonths)\n\
    \        val dateMonthDaysOfYear10 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths, dateDays, dateMonths, dateDays, dateMonths,\
    \ dateDays)\n        val dateMonthDaysOfYear11 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ dateMonths, dateDays, dateMonths, dateDays, dateMonths, dateDays, dateMonths,\
    \ dateDays, dateMonths)\n        val dateMonthDaysOfYear12 = dateFormat.parse(date).getMonthDaysOfYear(dateYears,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4lhfwlz.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi4lhfwlz.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi4lhfwlz.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateString = dateFormat.parse(date)\n        dateString != null\
    \ && dateString.toString.length != 0 && dateString.toString.length != 10 && dateString.toString.length\
    \ != 13 && dateString.toString.length != 16 && dateString.toString.length != 19\
    \ && dateString.toString.length != 22 && dateString.toString.length != 25 && dateString.toString.length\
    \ != 28 && dateString.toString.length != 31 && dateString.toString.length != 32\
    \ && dateString.toString.length != 34 && dateString.toString.length != 36 && dateString.toString.length\
    \ != 39 && dateString.toString.length != 42 && dateString.toString.length != 45\
    \ && dateString.toString.length != 48 && dateString.toString.length != 51 && dateString.toString.length\
    \ != 54 && dateString.toString.length != 57 && dateString.toString.length != 60\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoprcpjcs.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val validMonth = monthArray.contains(month)\n        val validDay = dayArray.contains(day)\n\
    \        val validYear = yearArray.contains(year)\n        val validDate = validMonth\
    \ && validDay && validYear\n        validDate\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyovd3dz.scala:36)\n\tat Problem.main(tmptyovd3dz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheck2\
    \ = dateFormat.parse(date)\n        val dateToCheck3 = dateFormat.parse(date)\n\
    \        val dateToCheck4 = dateFormat.parse(date)\n        val dateToCheck5 =\
    \ dateFormat.parse(date)\n        val dateToCheck6 = dateFormat.parse(date)\n\
    \        val dateToCheck7 = dateFormat.parse(date)\n        val dateToCheck8 =\
    \ dateFormat.parse(date)\n        val dateToCheck9 = dateFormat.parse(date)\n\
    \        val dateToCheck10 = dateFormat.parse(date)\n        val dateToCheck11\
    \ = dateFormat.parse(date)\n        val dateToCheck12 = dateFormat.parse(date)\n\
    \        val dateToCheck13 = dateFormat.parse(date)\n        val dateToCheck14\
    \ = dateFormat.parse(date)\n        val dateToCheck15 = dateFormat.parse(date)\n\
    \        val dateToCheck16 = dateFormat.parse(date)\n        val dateToCheck17\
    \ = dateFormat.parse(date)\n        val dateToCheck18 = dateFormat.parse(date)\n\
    \        val dateToCheck19 = dateFormat.parse(date)\n        val dateToCheck20\
    \ = dateFormat.parse(date)\n        val dateToCheck21 = dateFormat.parse(date)\n\
    \        val dateToCheck22 = dateFormat.parse(date)\n        val dateToCheck23\
    \ = dateFormat.parse(date)\n        val dateToCheck24 = dateFormat.parse(date)\n\
    \        val dateToCheck25 = dateFormat.parse(date)\n        val dateToCheck26\
    \ = dateFormat.parse(date)\n        val dateToCheck27 = dateFormat.parse(date)\n\
    \        val dateToCheck28 = dateFormat.parse(date)\n        val dateToCheck29\
    \ = dateFormat.parse(date)\n        val dateToCheck30 = dateFormat.parse(date)\n\
    \        val dateToCheck31 = dateFormat.parse(date)\n        val dateToCheck32\
    \ = dateFormat.parse(date)\n        val dateToCheck33 = dateFormat.parse(date)\n\
    \        val dateToCheck34 = dateFormat.parse(date)\n        val dateToCheck35\
    \ = dateFormat.parse(date)\n        val dateToCheck36 = dateFormat.parse(date)\n\
    \        val dateToCheck37 = dateFormat.parse(date)\n        val dateToCheck38\
    \ = dateFormat.parse(date)\n        val dateToCheck39 = dateFormat.parse(date)\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp5zzhjub.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpp5zzhjub.scala:63:5 ---------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        val dateObj2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n \
    \       val dateObj4 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj5\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n \
    \       val dateObj8 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj9\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateObj12 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj13\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateObj16 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj17\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj19 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateObj20 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj21\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj22 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj23 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateObj24 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj25\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj26 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateObj27 = new SimpleDateFormat(\"MM-dd-yyyy\")\n\
    \        val dateObj28 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj29\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateObj30 = new SimpleDate\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoywuloq8.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpoywuloq8.scala:24:27 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateObj2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpoywuloq8.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mdateObj3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpoywuloq8.scala:26:27 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateObj4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                  Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpoywuloq8.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mdateObj5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        val daysInYear = List(365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366, 365, 366,\
    \ 36\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpskoqcqek.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpskoqcqek.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val daysInMonth = List(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n   \
    \     val monthsInYear = List(12, 1, 4, 6, 9, 11)\n        val months = dateArray(0).toInt\n\
    \        val days = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        val validMonth = months.toInt <= 12 && months.toInt >= 1\n        val\
    \ validDay = days.toInt <= daysInMonth(months) && days.toInt >= 1\n        val\
    \ validYear = year.toInt <= year && year.toInt >= 1900\n        val validDate\
    \ = validMonth && validDay && validYear\n        validDate\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 15\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.validDate(tmpura0rf9s.scala:29)\n\tat Problem$.main(tmpura0rf9s.scala:36)\n\
    \tat Problem.main(tmpura0rf9s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\")\n        val dayArray = List(\"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"02\")\n        val monthDayArray = monthArray.zip(dayArray)\n        val monthDay\
    \ = monthDayArray.find(_._1 == month)\n        val daysInMonth = monthDay._2\n\
    \        val daysInMonthArray = List(\"31\", \"30\", \"29\")\n        val daysInMonthArray\
    \ = daysInMonthArray.map(x => x + \"-\" + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1\
    \ == day)\n        val daysInMonthArray = daysInMonthArray.map(x => x + \"-\"\
    \ + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1 == day)\n  \
    \      val daysInMonthArray = daysInMonthArray.map(x => x + \"-\" + \"01\")\n\
    \        val daysInMonth = daysInMonthArray.find(_._1 == day)\n        val daysInMonthArray\
    \ = daysInMonthArray.map(x => x + \"-\" + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1\
    \ == day)\n        val daysInMonthArray = daysInMonthArray.map(x => x + \"-\"\
    \ + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1 == day)\n  \
    \      val daysInMonthArray = daysInMonthArray.map(x => x + \"-\" + \"01\")\n\
    \        val daysInMonth = daysInMonthArray.find(_._1 == day)\n        val daysInMonthArray\
    \ = daysInMonthArray.map(x => x + \"-\" + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1\
    \ == day)\n        val daysInMonthArray = daysInMonthArray.map(x => x + \"-\"\
    \ + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1 == day)\n  \
    \      val daysInMonthArray = daysInMonthArray.map(x => x + \"-\" + \"01\")\n\
    \        val daysInMonth = daysInMonthArray.find(_._1 == day)\n        val daysInMonthArray\
    \ = daysInMonthArray.map(x => x + \"-\" + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1\
    \ == day)\n        val daysInMonthArray = daysInMonthArray.map(x => x + \"-\"\
    \ + \"01\")\n        val daysInMonth = daysInMonthArray.find(_._1 == day)\n  \
    \      val daysInMonthArray = day\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps0mo0vx8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m =\
    \ daysInMonthArray.map(\e[36mx\e[0m => x + \e[31m\"-\"\e[0m + \e[31m\"01\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e\
    [35mdaysInMonthArray\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps0mo0vx8.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonthArray.find(_._1\
    \ == day)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0mo0vx8.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonthArray\e[0m = daysInMonthArray.map(\e\
    [36mx\e[0m => x + \e[31m\"-\"\e[0m + \e[31m\"01\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mdaysInMonthArray is already defined as \e[33mvalue\e[0m \e[35mdaysInMonthArray\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps0mo0vx8.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = daysInMonthArray.find(_._1\
    \ == day)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming"
  stdout: ''
  timestamp: 1660010057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val daysArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val daysArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        if(!date.isEmpty){\n\
    \            if(months < 1 || months > 12){\n                return false\n  \
    \          }\n            if(days < 1 || days > daysArray(months)){\n        \
    \        return false\n            }\n            if(months < 1 || months > 12){\n\
    \                return false\n            }\n            if(year < 1 || year\
    \ > yearArray(months)){\n                return false\n            }\n       \
    \     if(months < 1 || months > 12){\n                return false\n         \
    \   }\n            if(days < 1 || days > daysArray(months)){\n               \
    \ return false\n            }\n            if(months < 1 || months > 12){\n  \
    \              return false\n            }\n            if(year < 1 || year >\
    \ yearArray(months)){\n                return false\n            }\n         \
    \   if(months < 1 || months > 12){\n                return false\n           \
    \ }\n            if(days < 1 || days > daysArray(months)){\n                return\
    \ false\n            }\n            if(months < 1 || months > 12){\n         \
    \       return false\n            }\n            if(year < 1 || year > yearArray(months)){\n\
    \                return false\n            }\n            if(months < 1 || months\
    \ > 12){\n                return false\n            }\n            if(days < 1\
    \ || days > daysArray(months)){\n                return false\n            }\n\
    \            if(months < 1 || months > 12){\n                return false\n  \
    \          }\n            if(year < 1 || year > yearArray(months)){\n        \
    \        return false\n            }\n            if(months < 1 || months > 12){\n\
    \                return false\n            }\n            if(days < 1 || days\
    \ > daysArray(months)){\n                return false\n            }\n       \
    \     if(months < 1 || months > 12){\n                return false\n         \
    \   }\n            if(year < 1 || year > yearArray(months)){\n               \
    \ return false\n            }\n            if(months < 1 || months > 12){\n  \
    \              return false\n            }\n            if(days < 1 || days >\
    \ daysArray(months)){\n                return false\n            }\n         \
    \   if(months < 1 || months > 12){\n                return false\n           \
    \ }\n\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp80il5sxl.scala:124:0 ---------------------------\e\
    [0m\e[0m\n\e[31m124 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80il5sxl.scala:123:1\
    \ --------------------\e[0m\e[0m\n\e[31m123 |\e[0m}\n\e[31m\e[31m    |\e[0m ^\e\
    [0m\n\e[31m    |\e[0m Found:    Unit\n\e[31m    |\e[0m Required: Boolean\n\e[31m\
    \    |\e[0m\n\e[31m    |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp80il5sxl.scala:104:4 ---------------------------------------\e\
    [0m\e[0m\n\e[33m104 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m:\
    \ \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m    |\e[0m    ^\e[0m\n\
    \e[33m    |\e[0m    Line is indented too far to the left, or a `}` is missing\n\
    1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateString = dateFormat.format(dateObject)\n\
    \        val dateArray = dateString.split(\"-\")\n        val daysInMonth = Array(31,28,31,30,31,30,31,30,31,30,31)\n\
    \        val monthsInYear = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val monthsInLeapYear\
    \ = Array(4,5,6,9,11)\n        val monthsInLeapYear2 = Array(4,5,6,9,11,12)\n\
    \        val daysInMonth2 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth3 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth4\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth5 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth6 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val\
    \ daysInMonth7 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth8\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth9 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth10 = Array(31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth11 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth12\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth13 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth14 = Array(31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth15 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth16\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth17 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth18 = Array(31,30,31,30,31,30,31,30,31,30,31)\n       \
    \ val daysInMonth19 = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth20\
    \ = Array(31,30,31,30,31,30,31,30,31,30,31)\n        val daysInMonth21 = Array(31,30,31,30,31,30,31,30,31,30,31)\n\
    \        val daysInMonth22 = Array(31,30,31,30,\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptdfp2mtn.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptdfp2mtn.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptdfp2mtn.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month < 1 || month > 12){\n    \
    \        return false\n        }\n        if(day < 1 || day > 31){\n         \
    \   return false\n        }\n        if(month == 2 && day > 29){\n           \
    \ return false\n        }\n        if(month == 2 && day < 1){\n            return\
    \ false\n        }\n        if(month == 2 && day > 30){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n  \
    \      if(month == 2 && day > 31){\n            return false\n        }\n    \
    \    if(month == 2 && day > 31){\n            return false\n        }\n      \
    \  if(month == 2 && day > 31){\n            return false\n        }\n        if(month\
    \ == 2 && day > 31){\n            return false\n        }\n        if(month ==\
    \ 2 && day > 31){\n            return false\n        }\n        if(month == 2\
    \ && day > 31){\n            return false\n        }\n        if(month == 2 &&\
    \ day > 31){\n            return false\n        }\n        if(month == 2 && day\
    \ > 31){\n            return false\n        }\n        if(month == 2 && day >\
    \ 31){\n            return false\n        }\n        if(month == 2 && day > 31){\n\
    \            return false\n        }\n        if(month == 2 && day > 31){\n  \
    \          return false\n        }\n        if(month == 2 && day > 31){\n    \
    \        return false\n        }\n        if(month == 2 && day > 31){\n      \
    \      return false\n        }\n        if(month == 2 && day > 31){\n        \
    \    return false\n        }\n        if(month == 2 && day > 31){\n          \
    \  return false\n        }\n        if(month == 2 && day > 31){\n            return\
    \ false\n        }\n        if(month == 2 && day > 31){\n            return false\n\
    \        }\n        if(month == 2 && day > 31){\n            return false\n  \
    \      }\n        if(month == 2 && day > 31){\n            return false\n    \
    \    }\n        if(month == 2 && day > 31){\n            return false\n      \
    \  }\n        if(month == 2 && day > 31){\n            return false\n        }\n\
    \        if(month == 2 && day > 31){\n            return false\n        }\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpudxvhwem.scala:119:8\
    \ --------------------\e[0m\e[0m\n\e[31m119 |\e[0m        \e[33mif\e[0m(month\
    \ == \e[31m2\e[0m && day > \e[31m31\e[0m){\n\e[31m\e[31m    |\e[0m        ^\e\
    [0m\n\e[31m    |\e[0m        Found:    Unit\n\e[31m    |\e[0m        Required:\
    \ Boolean\n\e[31m    |\e[0m        Maybe you are missing an else part for the\
    \ conditional?\n\e[31m120 |\e[0m            \e[33mreturn\e[0m \e[31mfalse\e[0m\n\
    \e[31m121 |\e[0m        }\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        val dateInMillis =\
    \ dateObject.getTime\n        val dateInDays = dateInMillis / 1000L\n        val\
    \ dateInMonths = dateInDays / 30L\n        val dateInYears = dateInMonths / 12L\n\
    \        val dateInDaysLessOneMonth = dateInDays % 30L\n        val dateInDaysLessOneYear\
    \ = dateInDaysLessOneMonth / 30L\n        val dateInDaysLessOneYearLessOneMonth\
    \ = dateInDaysLessOneYear % 30L\n        val dateInDaysLessOneYearLessOneMonthLessOneDay\
    \ = dateInDaysLessOneYearLessOneMonthLessOneMonth % 30L\n        dateInDaysLessOneYearLessOneMonthLessOneDay\
    \ < 1 || dateInDaysLessOneYearLessOneMonthLessOneDay > 29 || dateInDaysLessOneMonth\
    \ < 1 || dateInDaysLessOneMonth > 12 || dateInDays < 1 || dateInDays > 31 || dateInMonths\
    \ < 1 || dateInMonths > 12 || dateInYears < 1 || dateInYears > 12\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60b470mj.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp60b470mj.scala:31:58 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mdateInDaysLessOneYearLessOneMonthLessOneDay\e\
    [0m = dateInDaysLessOneYearLessOneMonthLessOneMonth % \e[31m30L\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Not found: dateInDaysLessOneYearLessOneMonthLessOneMonth\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthIndex = monthArray.indexOf(month)\n\
    \        val dayIndex = dayArray.indexOf(day)\n        val isValid = year > 0\
    \ && monthIndex > 0 && dayIndex > 0 && monthIndex < 12 && dayIndex < 31\n    \
    \    isValid\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8g6o7x31.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val daysInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth29 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth31 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \        val daysInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \        val monthsInMonth30 = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps7oubsdw.scala:43:79 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \         expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7oubsdw.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth30 is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth30\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmps7oubsdw.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mmonthsInMonth30\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmonthsInMonth30 is already defined as \e[33mvalue\e[0m \e\
    [35mmonthsInMonth30\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7oubsdw.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth31\e[0m = scala.util.Calendar.getInstance.getActualMaximum(scala.util.Calendar.DAY_OF_MONTH)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth31"
  stdout: ''
  timestamp: 1660010058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val months = dateArray(0).toInt\n        val days = dateArray(1).toInt\n   \
    \     val year = dateArray(2).toInt\n        val monthArray = List(\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\")\n        val daysArray = List(\"\
    01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"13\", \"15\", \"17\",\
    \ \"19\", \"21\", \"23\", \"25\", \"27\", \"29\")\n        val yearArray = List(\"\
    2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\",\
    \ \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\"\
    , \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"\
    , \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"\
    , \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\"\
    , \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\"\
    , \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\"\
    , \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\"\
    , \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\"\
    , \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\"\
    , \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\"\
    , \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\"\
    , \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\"\
    , \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\"\
    , \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\"\
    , \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\"\
    , \"215\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps74l5buv.scala:28:1245 ---------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36myearArray\e[0m = List(\e\
    [31m\"2000\"\e[0m, \e[31m\"2001\"\e[0m, \e[31m\"2002\"\e[0m, \e[31m\"2003\"\e\
    [0m, \e[31m\"2004\"\e[0m, \e[31m\"2005\"\e[0m, \e[31m\"2006\"\e[0m, \e[31m\"2007\"\
    \e[0m, \e[31m\"2008\"\e[0m, \e[31m\"2009\"\e[0m, \e[31m\"2010\"\e[0m, \e[31m\"\
    2011\"\e[0m, \e[31m\"2012\"\e[0m, \e[31m\"2013\"\e[0m, \e[31m\"2014\"\e[0m, \e\
    [31m\"2015\"\e[0m, \e[31m\"2016\"\e[0m, \e[31m\"2017\"\e[0m, \e[31m\"2018\"\e\
    [0m, \e[31m\"2019\"\e[0m, \e[31m\"2020\"\e[0m, \e[31m\"2021\"\e[0m, \e[31m\"2022\"\
    \e[0m, \e[31m\"2023\"\e[0m, \e[31m\"2024\"\e[0m, \e[31m\"2025\"\e[0m, \e[31m\"\
    2026\"\e[0m, \e[31m\"2027\"\e[0m, \e[31m\"2028\"\e[0m, \e[31m\"2029\"\e[0m, \e\
    [31m\"2030\"\e[0m, \e[31m\"2031\"\e[0m, \e[31m\"2032\"\e[0m, \e[31m\"2033\"\e\
    [0m, \e[31m\"2034\"\e[0m, \e[31m\"2035\"\e[0m, \e[31m\"2036\"\e[0m, \e[31m\"2037\"\
    \e[0m, \e[31m\"2038\"\e[0m, \e[31m\"2039\"\e[0m, \e[31m\"2040\"\e[0m, \e[31m\"\
    2041\"\e[0m, \e[31m\"2042\"\e[0m, \e[31m\"2043\"\e[0m, \e[31m\"2044\"\e[0m, \e\
    [31m\"2045\"\e[0m, \e[31m\"2046\"\e[0m, \e[31m\"2047\"\e[0m, \e[31m\"2048\"\e\
    [0m, \e[31m\"2049\"\e[0m, \e[31m\"2050\"\e[0m, \e[31m\"2051\"\e[0m, \e[31m\"2052\"\
    \e[0m, \e[31m\"2053\"\e[0m, \e[31m\"2054\"\e[0m, \e[31m\"2055\"\e[0m, \e[31m\"\
    2056\"\e[0m, \e[31m\"2057\"\e[0m, \e[31m\"2058\"\e[0m, \e[31m\"2059\"\e[0m, \e\
    [31m\"2060\"\e[0m, \e[31m\"2061\"\e[0m, \e[31m\"2062\"\e[0m, \e[31m\"2063\"\e\
    [0m, \e[31m\"2064\"\e[0m, \e[31m\"2065\"\e[0m, \e[31m\"2066\"\e[0m, \e[31m\"2067\"\
    \e[0m, \e[31m\"2068\"\e[0m, \e[31m\"2069\"\e[0m, \e[31m\"2070\"\e[0m, \e[31m\"\
    2071\"\e[0m, \e[31m\"2072\"\e[0m, \e[31m\"2073\"\e[0m, \e[31m\"2074\"\e[0m, \e\
    [31m\"2075\"\e[0m, \e[31m\"2076\"\e[0m, \e[31m\"2077\"\e[0m, \e[31m\"2078\"\e\
    [0m, \e[31m\"2079\"\e[0m, \e[31m\"2080\"\e[0m, \e[31m\"2081\"\e[0m, \e[31m\"2082\"\
    \e[0m, \e[31m\"2083\"\e[0m, \e[31m\"2084\"\e[0m, \e[31m\"2085\"\e[0m, \e[31m\"\
    2086\"\e[0m, \e[31m\"2087\"\e[0m, \e[31m\"2088\"\e[0m, \e[31m\"2089\"\e[0m, \e\
    [31m\"2090\"\e[0m, \e[31m\"2091\"\e[0m, \e[31m\"2092\"\e[0m, \e[31m\"2093\"\e\
    [0m, \e[31m\"2094\"\e[0m, \e[31m\"2095\"\e[0m, \e[31m\"2096\"\e[0m, \e[31m\"2097\"\
    \e[0m, \e[31m\"2098\"\e[0m, \e[31m\"2099\"\e[0m, \e[31m\"2100\"\e[0m, \e[31m\"\
    2101\"\e[0m, \e[31m\"2102\"\e[0m, \e[31m\"2103\"\e[0m, \e[31m\"2104\"\e[0m, \e\
    [31m\"2105\"\e[0m, \e[31m\"2106\"\e[0m, \e[31m\"2107\"\e[0m, \e[31m\"2108\"\e\
    [0m, \e[31m\"2109\"\e[0m, \e[31m\"2110\"\e[0m, \e["
  stdout: ''
  timestamp: 1660010058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgx2gs6w.scala:36)\n\tat Problem.main(tmppgx2gs6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        dateParsed.getTime\
    \ > 0 && dateParsed.getTime < 86400000\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp949mm4px.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthIndex = monthArray.indexOf(month)\n        val dayIndex = dayArray.indexOf(day)\n\
    \        val yearIndex = yearArray.indexOf(year)\n        if(monthIndex == -1\
    \ || dayIndex == -1 || yearIndex == -1)\n            return false\n        if(monthIndex\
    \ > 12 || monthIndex < 1)\n            return false\n        if(dayIndex > 31\
    \ || dayIndex < 1)\n            return false\n        if(monthIndex == 2)\n  \
    \          if(dayIndex > 29 || dayIndex < 1)\n                return false\n \
    \       else\n            if(dayIndex > 30 || dayIndex < 1)\n                return\
    \ false\n        return true\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6dfw5xe0.scala:47)\n\tat Problem.main(tmp6dfw5xe0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010059
