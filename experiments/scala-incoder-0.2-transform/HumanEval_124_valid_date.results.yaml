language: scala
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val daysInMonth = Array.tabulate(12)(i\
    \ => i + 1)\n        val monthsInYear = Array.tabulate(12)(i => i + 1)\n     \
    \   val daysInYear = Array.tabulate(12)(i => i + 1)\n        val months = dateArray.getMonth\n\
    \        val year = dateArray.getYear\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = Array.tabulate(12)(i => i + 1)\n      \
    \  val daysInYear = Array.tabulate(12)(i => i + 1)\n        val daysInMonth =\
    \ Array.tabulate(12)(i => i + 1)\n        val daysInYear = Array.tabulate(12)(i\
    \ => i + 1)\n        val daysInMonth = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp2_67newq.scala:54:25 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = \n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp2_67newq.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mdaysInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInMonth is already defined as \e[33mvalue\e[0m \e[35mdaysInMonth\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mdaysInYear\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdaysInYear is already defined as \e[33mvalue\e[0m \e[35mdaysInYear\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2_67newq.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mdaysInMonth\e[0m = Array.tabulate(\e\
    [31m12\e[0m)(\e[36mi\e[0m => i"
  stdout: ''
  timestamp: 1659800764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.length)\n        val dayCount = (dayArray.length)\n\
    \        val yearCount = (yearArray.length)\n        val monthValid = monthArray.contains(month)\n\
    \        val dayValid = dayArray.contains(day)\n        val yearValid = yearArray.contains(year)\n\
    \        val monthCountValid = monthCount != 0\n        val dayCountValid = dayCount\
    \ != 0\n        val yearCountValid = yearCount != 0\n        val monthValidValid\
    \ = monthValid && monthCountValid\n        val dayValidValid = dayValid && dayCountValid\n\
    \        val yearValidValid = yearValid && yearCountValid\n        val monthValidValidValid\
    \ = monthValidValid && dayValidValid && yearValidValid\n        val dateValid\
    \ = monthValidValidValid && dayValidValid && yearValidValid\n        dateValid\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf96vewnz.scala:46)\n\tat Problem.main(tmpf96vewnz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthArray2 = Array(4,6,9,11)\n        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray2 = Array(2010,2011,2012)\n        val monthArray3 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray3 = Array(2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n    \
    \    val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray4 = Array(2010,2011,2012)\n        val monthArray5 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray5 = Array(2005,2006,2007,2008,2009,2010,2011,2012)\n        val monthArray6\
    \ = Array(4,6,9,11)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray6 = Array(2010,2011,2012)\n        val monthArray7 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray7 = Array(2007,2008,2009,2010,2011,2012)\n        val monthArray8 =\
    \ Array(4,6,9,11)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val yearArray8 = Array(2010,2011,2012)\n        val monthArray9 = Array(1,3,5,7,8,10,12)\n\
    \        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray9 = Array(2009,2010,2011,2012)\n        val monthArray10 = Array(4,6,9,11)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8_xs_k4c.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthDay = monthArray.zip(dayArray).map(x => x._1 -> x._2)\n    \
    \    val monthYear = monthArray.zip(yearArray).map(x => x._1 -> x._2)\n      \
    \  val monthYearDay = monthYear.zip(dayArray).map(x => x._1 -> x._2)\n       \
    \ val monthYearDayArray = monthYearDay.map(x => x._1 -> x._2)\n        val monthYearDayArray2\
    \ = monthYearDayArray.map(x => x._1 -> x._2)\n        val monthYearDayArray3 =\
    \ monthYearDayArray2.map(x => x._1 -> x._2)\n        val monthYearDayArray4 =\
    \ monthYearDayArray3.map(x => x._1 -> x._2)\n        val monthYearDayArray5 =\
    \ monthYearDayArray4.map(x => x._1 -> x._2)\n        val monthYearDayArray6 =\
    \ monthYearDayArray5.map(x => x._1 -> x._2)\n        val monthYearDayArray7 =\
    \ monthYearDayArray6.map(x => x._1 -> x._2)\n        val monthYearDayArray8 =\
    \ monthYearDayArray7.map(x => x._1 -> x._2)\n        val monthYearDayArray9 =\
    \ monthYearDayArray8.map(x => x._1 -> x._2)\n        val monthYearDayArray10 =\
    \ monthYearDayArray9.map(x => x._1 -> x._2)\n        val monthYearDayArray11 =\
    \ monthYearDayArray10.map(x => x._1 -> x._2)\n        val monthYearDayArray12\
    \ = monthYearDayArray11.map(x => x._1 -> x._2)\n        val monthYearDayArray13\
    \ = monthYearDayArray12.map(x => x._1 -> x._2)\n        val monthYearDayArray14\
    \ = monthYearDayArray13.map(x => x._1 -> x._2)\n        val monthYearDayArray15\
    \ = monthYearDayArray14.map(x => x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe8l2cgi2.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpe8l2cgi2.scala:46:65\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m46 |\e[0m       \
    \ \e[33mval\e[0m \e[36mmonthYearDayArray15\e[0m = monthYearDayArray14.map(\e[36mx\e\
    [0m => x.\n\e[31m\e[31m   |\e[0m                                             \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpe8l2cgi2.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = List(1, 3, 5, 7, 8,\
    \ 10, 12)\n        val dayArray = List(1, 30, 29)\n        val yearArray = List(1,\
    \ 9999)\n        val monthIndex = monthArray.indexOf(month)\n        val dayIndex\
    \ = dayArray.indexOf(day)\n        val yearIndex = yearArray.indexOf(year)\n \
    \       val validMonth = monthIndex >= 0\n        val validDay = dayIndex >= 0\n\
    \        val validYear = yearIndex >= 0\n        val validMonthAndDay = validMonth\
    \ && validDay\n        val validYearAndMonth = validYear && validMonthAndDay\n\
    \        val validMonthAndYear = validMonth && validYear\n        val validYearAndDay\
    \ = validYear && validDay\n        val validMonthAndDayAndYear = validMonthAndDay\
    \ && validYearAndMonth\n        val validYearAndMonthAndDay = validYearAndMonth\
    \ && validMonthAndDay\n        val validMonthAndYearAndDay = validMonthAndYear\
    \ && validYearAndDay\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonthAndYear\n        val validYearAndMonthAndDayAndYear = validYearAndMonthAndDay\
    \ && validMonth\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:45:12 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalidYearAndMonthAndDayAndYear is already defined as \e[33mvalue\e\
    [0m \e[35mvalidYearAndMonthAndDayAndYear\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr5miymd4.scala:46:12 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mvalidYearAndMonthAndDayAndYear\e\
    [0m = validYearAndMonthAndDay && validMonthAndYear\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObject = dateFormat.parse(date)\n        dateObject.getTime\
    \ != 0\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuj64g5gt.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if(dateArray.length != 3)\n            return false\n        val month = dateArray(0).toInt\n\
    \        val day = dateArray(1).toInt\n        val year = dateArray(2).toInt\n\
    \        if(month < 1 || month > 12)\n            return false\n        if(day\
    \ < 1 || day > 31)\n            return false\n        if(month == 2 && day > 30)\n\
    \            return false\n        if(month == 2 && day < 29)\n            return\
    \ false\n        if(month == 2 && day > 28)\n            return false\n      \
    \  if(day > 31)\n            return false\n        if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n \
    \           return true\n        if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11)\n            return true\n        if(month == 2)\n            return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ynn76pu.scala:56)\n\tat Problem.main(tmp_ynn76pu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateObj = dateFormat.parse(date)\n        dateObj.getTime != 0\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0czmk7og.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthCount = (monthArray.count(_ == month) + 1)\n        val dayCount\
    \ = (dayArray.count(_ == day) + 1)\n        val yearCount = (yearArray.count(_\
    \ == year) + 1)\n        val monthValid = monthCount <= 12\n        val dayValid\
    \ = dayCount <= 31\n        val yearValid = yearCount <= 12\n        val dateValid\
    \ = monthValid && dayValid && yearValid\n        dateValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijdne_jw.scala:40)\n\tat Problem.main(tmpijdne_jw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        if(month > 12 || month < 1 || day >\
    \ 31 || day < 1 || year < 1000 || year > 9999) {\n            return false\n \
    \       }\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n      \
    \  val dayArray = Array(0,31,28,31,30,31,30,31,30,31,30,31)\n        val yearArray\
    \ = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(monthArray.contains(month) && dayArray.contains(day) && yearArray.contains(year))\
    \ {\n            return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fsfo4wl.scala:38)\n\tat Problem.main(tmp3fsfo4wl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        val monthValid = monthArray.contains(month)\n        val dayValid = dayArray.contains(day)\n\
    \        val yearValid = yearArray.contains(year)\n        val dateValid = monthValid\
    \ && dayValid && yearValid\n        dateValid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgx2gs6w.scala:36)\n\tat Problem.main(tmppgx2gs6w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateToCheck = dateFormat.parse(date)\n        val dateToCheckDays\
    \ = dateToCheck.getTime\n        val dateToCheckMonths = dateToCheck.getMonth\n\
    \        val dateToCheckYears = dateToCheck.getYear\n        val dateToCheckDaysLessThan1OrHigherThan31\
    \ = dateToCheckDays <= 31 && dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n\
    \        val dateToCheckDaysLessThan1OrHigherThan30 = dateToCheckDays <= 30 &&\
    \ dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n        val dateToCheckDaysLessThan1OrHigherThan29\
    \ = dateToCheckDays <= 29 && dateToCheckMonths <= 12 && dateToCheckYears <= 9999\n\
    \        val dateToCheckMonthLessThan1OrHigherThan12 = dateToCheckMonths <= 12\
    \ && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan11\
    \ = dateToCheckMonths <= 11 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan10\
    \ = dateToCheckMonths <= 10 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan9\
    \ = dateToCheckMonths <= 9 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan8\
    \ = dateToCheckMonths <= 8 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan7\
    \ = dateToCheckMonths <= 7 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan6\
    \ = dateToCheckMonths <= 6 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan5\
    \ = dateToCheckMonths <= 5 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan4\
    \ = dateToCheckMonths <= 4 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan3\
    \ = dateToCheckMonths <= 3 && dateToCheckYears <= 9999\n        val dateToCheckMonthLessThan1OrHigherThan2\
    \ = dateToCheckMonths <= 2 && dateToCheckYear\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpggqniet3.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpggqniet3.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ val month = dateArray(0).toInt\n        val day = dateArray(1).toInt\n     \
    \   val year = dateArray(2).toInt\n        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n\
    \        val dayArray = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ yearArray = Array(2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012)\n\
    \        if(date.isEmpty){\n            return false\n        }\n        if(monthArray.contains(month)\
    \ && dayArray.contains(day) && yearArray.contains(year)){\n            return\
    \ true\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvgxidfg.scala:38)\n\tat Problem.main(tmpvvgxidfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        val year = dateArray.getYear\n\
    \        val month = dateArray.getMonth\n        val day = dateArray.getDay\n\
    \        val monthArray = Array(1,2,3,4,5,6,7,8,9,10,11,12)\n        val dayArray\
    \ = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val monthArray2 = Array(4,6,9,11)\n\
    \        val dayArray2 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n        val\
    \ monthArray3 = Array(1,3,5,7,8,10,12)\n        val dayArray3 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray4 = Array(4,6,9,11)\n        val dayArray4 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray5 = Array(2,3)\n        val dayArray5 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray6 = Array(1,3,5,7,8,10,12)\n        val dayArray6 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray7 = Array(4,6,9,11)\n        val dayArray7 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray8 = Array(1,3,5,7,8,10,12)\n        val dayArray8 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray9 = Array(4,6,9,11)\n        val dayArray9 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray10 = Array(1,3,5,7,8,10,12)\n        val dayArray10 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray11 = Array(4,6,9,11)\n        val dayArray11 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray12 = Array(2,3)\n        val dayArray12 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray13 = Array(1,3,5,7,8,10,12)\n        val dayArray13 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray14 = Array(4,6,9,11)\n        val dayArray14 = Array(0,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray15 = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3jkg76iv.scala:55:26 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e[36mmonthArray15\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3jkg76iv.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp3jkg76iv.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date).getTime\n        val dateArray2\
    \ = dateFormat.parse(date).getTime\n        val dateArray3 = dateFormat.parse(date).getTime\n\
    \        val dateArray4 = dateFormat.parse(date).getTime\n        val dateArray5\
    \ = dateFormat.parse(date).getTime\n        val dateArray6 = dateFormat.parse(date).getTime\n\
    \        val dateArray7 = dateFormat.parse(date).getTime\n        val dateArray8\
    \ = dateFormat.parse(date).getTime\n        val dateArray9 = dateFormat.parse(date).getTime\n\
    \        val dateArray10 = dateFormat.parse(date).getTime\n        val dateArray11\
    \ = dateFormat.parse(date).getTime\n        val dateArray12 = dateFormat.parse(date).getTime\n\
    \        val dateArray13 = dateFormat.parse(date).getTime\n        val dateArray14\
    \ = dateFormat.parse(date).getTime\n        val dateArray15 = dateFormat.parse(date).getTime\n\
    \        val dateArray16 = dateFormat.parse(date).getTime\n        val dateArray17\
    \ = dateFormat.parse(date).getTime\n        val dateArray18 = dateFormat.parse(date).getTime\n\
    \        val dateArray19 = dateFormat.parse(date).getTime\n        val dateArray20\
    \ = dateFormat.parse(date).getTime\n        val dateArray21 = dateFormat.parse(date).getTime\n\
    \        val dateArray22 = dateFormat.parse(date).getTime\n        val dateArray23\
    \ = dateFormat.parse(date).getTime\n        val dateArray24 = dateFormat.parse(date).getTime\n\
    \        val dateArray25 = dateFormat.parse(date).getTime\n        val dateArray26\
    \ = dateFormat.parse(date).getTime\n        val dateArray27 = dateFormat.parse(date).getTime\n\
    \        val dateArray28 = dateFormat.parse(date).getTime\n        val dateArray29\
    \ = dateFormat.parse(date).getTime\n        val dateArray30 = dateFormat.parse(date).getTime\n\
    \        val dateArray31 = dateFormat.parse(date).getTime\n        val dateArray32\
    \ = dateFormat.parse(date).getTime\n        val dateArray33 = dateFormat.parse(date).getTime\n\
    \        val dateArray34 = dateFormat.parse(date).getTime\n        val dateArray35\
    \ = dateFormat.parse(date).getTime\n        val dateArray36 = dateFormat.parse(date).getTime\n\
    \        val dateArray\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq7_baj8t.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq7_baj8t.scala:22:29\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mdateFormat\e[0m = \e[33mnew\e[0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: type SimpleDateFormat\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq7_baj8t.scala:60:5\
    \ ---------------------\e[0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800764
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateArray = date.split(\"-\")\n       \
    \ if (dateArray.length != 3) {\n            return false\n        }\n        val\
    \ months = List(1,2,3,4,5,6,7,8,9,10,11,12)\n        val days  = List(1,31,30,29,28,31,30,31,30,31,30,31)\n\
    \        val monthArray = dateArray(0).toString.split(\"-\")\n        if (monthArray.length\
    \ != 2) {\n            return false\n        }\n        val monthIndex = months.indexOf(monthArray(0))\n\
    \        if (monthIndex < 1 || monthIndex > 12) {\n            return false\n\
    \        }\n        val dayArray = dateArray(1).toString.split(\"-\")\n      \
    \  if (dayArray.length != 2) {\n            return false\n        }\n        val\
    \ dayIndex = days.indexOf(dayArray(0))\n        if (dayIndex < 1 || dayIndex >\
    \ 31) {\n            return false\n        }\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(validDate((\"03-11-2000\")) == (true));\n   \
    \ assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\"\
    )) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgo5l7tmb.scala:47)\n\tat Problem.main(tmpgo5l7tmb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        dateFormat.parse(date) != null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgicnynx_.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateArray = dateFormat.parse(date)\n        dateArray match {\n\
    \            case null => false\n            case _ => true\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(validDate((\"03-11-2000\"))\
    \ == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4fb2gntg.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659800762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You have to write a function which validates a given date string and\n\
    \    // returns True if the date is valid otherwise False.\n    // The date is\
    \ valid if all of the following rules are satisfied:\n    // 1. The date string\
    \ is not empty.\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    // 4. The date should be in the format:\
    \ mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>>\
    \ validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"\
    ))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n  \
    \  // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date\
    \ : String) : Boolean = {\n        val dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\"\
    )\n        val dateParsed = dateFormat.parse(date)\n        val dateFormat2 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed2 = dateFormat2.parse(date)\n\
    \        val dateFormat3 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed3\
    \ = dateFormat3.parse(date)\n        val dateFormat4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed4 = dateFormat4.parse(date)\n        val\
    \ dateFormat5 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed5\
    \ = dateFormat5.parse(date)\n        val dateFormat6 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed6 = dateFormat6.parse(date)\n        val\
    \ dateFormat7 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed7\
    \ = dateFormat7.parse(date)\n        val dateFormat8 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed8 = dateFormat8.parse(date)\n        val\
    \ dateFormat9 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed9\
    \ = dateFormat9.parse(date)\n        val dateFormat10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed10 = dateFormat10.parse(date)\n        val\
    \ dateFormat11 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed11\
    \ = dateFormat11.parse(date)\n        val dateFormat12 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed12 = dateFormat12.parse(date)\n        val\
    \ dateFormat13 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed13\
    \ = dateFormat13.parse(date)\n        val dateFormat14 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed14 = dateFormat14.parse(date)\n        val\
    \ dateFormat15 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed15\
    \ = dateFormat15.parse(date)\n        val dateFormat16 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n        val dateParsed16 = dateFormat16.parse(date)\n        val\
    \ dateFormat17 = new SimpleDateFormat(\"MM-dd-yyyy\")\n        val dateParsed17\
    \ = dateFormat17.parse(date)\n        val dateFormat18 = new SimpleDateFormat(\"\
    MM-dd-yyyy\")\n    }\n    def main(args: Array[String]) = {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mdateFormat\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:24:30 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mdateFormat2\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:26:30 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mdateFormat3\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:28:30 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mdateFormat4\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                        Not found: type SimpleDateFormat\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppcsdfqyk.scala:30:30 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mdateFormat5\e[0m = \e[33mnew\e\
    [0m \e[35mSimpleDateFormat\e[0m(\e[31m\"MM-dd-yyyy\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m           "
  stdout: ''
  timestamp: 1659800765
