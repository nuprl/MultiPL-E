language: scala
name: HumanEval_94_skjkasdkd
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n\
    \        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n\
    \        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n\
    \        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n\
    \        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n\
    \        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 =\
    \ mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n\
    \        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 =\
    \ mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n\
    \        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 =\
    \ mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n\
    \        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 =\
    \ mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n\
    \        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 =\
    \ mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n\
    \        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 =\
    \ mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n\
    \        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 =\
    \ mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n\
    \        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 213 == 0).filter(_ % 217 == 0).filter(_ % 221 == 0).filter(_\
    \ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_ % 239 == 0).filter(_\
    \ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_\
    \ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_\
    \ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_\
    \ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_\
    \ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_\
    \ % 367 == 0).filter(_ % 371 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 40\n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59gehw41.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp59gehw41.scala:20:1767 ------------------\e[0m\e[0m\n\e[31m20 |\e[0m\
    \        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_ % \e[31m2\e[0m == \e\
    [31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_ % \e[31m5\e[0m ==\
    \ \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_ % \e[31m11\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_ % \e[31m17\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_ % \e[31m23\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_ % \e[31m31\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_ % \e[31m41\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_ % \e[31m47\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_ % \e[31m59\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_ % \e[31m67\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_ % \e[31m73\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_ % \e[31m83\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_ % \e[31m97\e\
    [0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_ % \e\
    [31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31"
  stdout: ''
  timestamp: 1659804706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt)\n        val maxPrime = primes.max\n        val\
    \ sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasor44gq.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m\
    \                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                           Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659804669
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toInt).sum\n        sumOfDigits\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgiyrdh_o.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 351 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmlb2u0uv.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpmlb2u0uv.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiwenano5.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesCount = primes.size\n        val largestPrime = primes.max\n        val\
    \ sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ns93za0.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804709
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val maxPrime = primes.max\n  \
    \      val sumOfDigits = primes.map(x => x.toString.toInt).sum\n        sumOfDigits\
    \ + maxPrime.toString.toInt\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt_k_5c5p.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_ % 353 == 0).filter(_\
    \ % 359 == 0).filter(_ % 367 == 0).filter(_ % 373 == 0).filter(_ % 379 == 0).filter(_\
    \ % 383 == 0).filter(_ % 389 == 0).filter(_ % 397 == 0).filter(_ % 401 == 0).filter(_\
    \ % 407 == 0).filter(_ % 409 == 0).filter(_ % 413 == 0).filter(_ % 417 == 0).filter(_\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6zcava9b.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6zcava9b.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.HashSet[Long]()\n\
    \        val primesSet = mutable.HashSet[Long]()\n        val primesSet2 = mutable.HashSet[Long]()\n\
    \        val primesSet3 = mutable.HashSet[Long]()\n        val primesSet4 = mutable.HashSet[Long]()\n\
    \        val primesSet5 = mutable.HashSet[Long]()\n        val primesSet6 = mutable.HashSet[Long]()\n\
    \        val primesSet7 = mutable.HashSet[Long]()\n        val primesSet8 = mutable.HashSet[Long]()\n\
    \        val primesSet9 = mutable.HashSet[Long]()\n        val primesSet10 = mutable.HashSet[Long]()\n\
    \        val primesSet11 = mutable.HashSet[Long]()\n        val primesSet12 =\
    \ mutable.HashSet[Long]()\n        val primesSet13 = mutable.HashSet[Long]()\n\
    \        val primesSet14 = mutable.HashSet[Long]()\n        val primesSet15 =\
    \ mutable.HashSet[Long]()\n        val primesSet16 = mutable.HashSet[Long]()\n\
    \        val primesSet17 = mutable.HashSet[Long]()\n        val primesSet18 =\
    \ mutable.HashSet[Long]()\n        val primesSet19 = mutable.HashSet[Long]()\n\
    \        val primesSet20 = mutable.HashSet[Long]()\n        val primesSet21 =\
    \ mutable.HashSet[Long]()\n        val primesSet22 = mutable.HashSet[Long]()\n\
    \        val primesSet23 = mutable.HashSet[Long]()\n        val primesSet24 =\
    \ mutable.HashSet[Long]()\n        val primesSet25 = mutable.HashSet[Long]()\n\
    \        val primesSet26 = mutable.HashSet[Long]()\n        val primesSet27 =\
    \ mutable.HashSet[Long]()\n        val primesSet28 = mutable.HashSet[Long]()\n\
    \        val primesSet29 = mutable.HashSet[Long]()\n        val primesSet30 =\
    \ mutable.HashSet[Long]()\n        val primesSet31 = mutable.HashSet[Long]()\n\
    \        val primesSet32 = mutable.HashSet[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong,\
    \ 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong,\
    \ 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n   \
    \ assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
    \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
    \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
    \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong,\
    \ 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong,\
    \ 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) ==\
    \ (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
    \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
    \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmptjr7ji0k.scala:25:25 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[3"
  stdout: ''
  timestamp: 1659804681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0)\n        val primesSet = primes.toSet\n        val largestPrime = primes.max\n\
    \        val sumOfDigits = largestPrime.map(_.toString.toInt).sum\n        sumOfDigits\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj529lyl8.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36msumOfDigits\e[0m = largestPrime.map(_.toString.toInt).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value map is not a member of Long\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659804953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(x =>\
    \ isPrime(x)).map(x => x.toInt).toList\n        val primesCount = primes.size\n\
    \        val maxPrime = primes.max\n        val maxPrimeIndex = primes.indexOf(maxPrime)\n\
    \        val maxPrimeValue = maxPrime.toInt\n        val maxPrimeDigit = maxPrime\
    \ % 10\n        val maxPrimeDigitValue = maxPrimeDigit % 10\n        val maxPrimeDigitSum\
    \ = maxPrimeDigitValue + maxPrimeDigit\n        val maxPrimeDigitSumValue = maxPrimeDigitSum.toInt\n\
    \        val maxPrimeDigitSumDigit = maxPrimeDigitSumValue % 10\n        val maxPrimeDigitSumDigitValue\
    \ = maxPrimeDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSum = maxPrimeDigitSumDigitValue\
    \ + maxPrimeDigitSumDigit\n        val maxPrimeDigitSumDigitSumValue = maxPrimeDigitSumDigitSum.toInt\n\
    \        val maxPrimeDigitSumDigitSumDigit = maxPrimeDigitSumDigitSumValue % 10\n\
    \        val maxPrimeDigitSumDigitSumDigitValue = maxPrimeDigitSumDigitSumDigit\
    \ % 10\n        val maxPrimeDigitSumDigitSumDigitSum = maxPrimeDigitSumDigitSumDigitValue\
    \ + maxPrimeDigitSumDigitSumDigit\n        val maxPrimeDigitSumDigitSumDigitSumValue\
    \ = maxPrimeDigitSumDigitSumDigitSum.toInt\n        val maxPrimeDigitSumDigitSumDigitSumDigit\
    \ = maxPrimeDigitSumDigitSumDigitSumValue % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitValue\
    \ = maxPrimeDigitSumDigitSumDigitSumDigit % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSum\
    \ = maxPrimeDigitSumDigitSumDigitSumDigitValue + maxPrimeDigitSumDigitSumDigitSumDigit\n\
    \        val maxPrimeDigitSumDigitSumDigitSumDigitSumValue = maxPrimeDigitSumDigitSumDigitSumDigitSum.toInt\n\
    \        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigit = maxPrimeDigitSumDigitSumDigitSumDigitSumValue\
    \ % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigitValue = maxPrimeDigitSumDigitSumDigitSumDigitSumDigit\
    \ % 10\n        val maxPrimeDigitSumDigitSumDigitSumDigitSumDigitSum = maxPrimeDigitSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9u4ohalz.scala:20:37 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(\e\
    [36mx\e[0m => isPrime(x)).map(\e[36mx\e[0m => x.toInt).toList\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9u4ohalz.scala:44:5 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpaiukknbx.scala:55:11 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpaiukknbx.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimesSet\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mprimesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:23:25 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mprimesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiukknbx.scala:24:25 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mprimesSet4\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^"
  stdout: ''
  timestamp: 1659804658
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0)\n        val\
    \ primesSet = primes.toSet\n        val primesSetSize = primesSet.size\n     \
    \   val primesSetIterator = primesSet.iterator\n        val primesSetIteratorSize\
    \ = primesSetIterator.size\n        val primesSetIteratorIterator = primesSetIterator.iterator\n\
    \        val primesSetIteratorIteratorIterator = primesSetIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIterator = primesSetIteratorIteratorIterator.iterator\n\
    \        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ = primesSetIteratorIteratorIterator.iterator\n        val primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj7awk1mh.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj7awk1mh.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\e\
    [0m = primesSetIteratorIteratorIterator.iterator\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mprimesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  primesSetIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIteratorIterator\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpj7awk1mh.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659804953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 163 == 0).filter(_ % 167 == 0).filter(_\
    \ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_ % 191 == 0).filter(_\
    \ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_ % 211 == 0).filter(_\
    \ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_ % 233 == 0).filter(_\
    \ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_ % 257 == 0).filter(_\
    \ % 263 == 0).filter(_ % 269 == 0).filter(_ % 271 == 0).filter(_ % 277 == 0).filter(_\
    \ % 281 == 0).filter(_ % 283 == 0).filter(_ % 293 == 0).filter(_ % 307 == 0).filter(_\
    \ % 311 == 0).filter(_ % 313 == 0).filter(_ % 317 == 0).filter(_ % 331 == 0).filter(_\
    \ % 337 == 0).filter(_ % 341 == 0).filter(_ % 347 == 0).filter(_ % 349 == 0).filter(_\
    \ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_ % 371 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcxb0760_.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m223\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804660
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a list of integers.\n    // You need to find the largest\
    \ prime value and return the sum of its digits.\n    // Examples:\n    // >>>\
    \ skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong,\
    \ 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong,\
    \ 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong,\
    \ 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong,\
    \ 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong,\
    \ 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong,\
    \ 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n \
    \   // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
    \ 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def\
    \ skjkasdkd(lst : List[Long]) : Long = {\n        val primes = lst.filter(_ %\
    \ 2 == 0).filter(_ % 3 == 0).filter(_ % 5 == 0).filter(_ % 7 == 0).filter(_ %\
    \ 11 == 0).filter(_ % 13 == 0).filter(_ % 17 == 0).filter(_ % 19 == 0).filter(_\
    \ % 23 == 0).filter(_ % 29 == 0).filter(_ % 31 == 0).filter(_ % 37 == 0).filter(_\
    \ % 41 == 0).filter(_ % 43 == 0).filter(_ % 47 == 0).filter(_ % 53 == 0).filter(_\
    \ % 59 == 0).filter(_ % 61 == 0).filter(_ % 67 == 0).filter(_ % 71 == 0).filter(_\
    \ % 73 == 0).filter(_ % 79 == 0).filter(_ % 83 == 0).filter(_ % 89 == 0).filter(_\
    \ % 97 == 0).filter(_ % 101 == 0).filter(_ % 103 == 0).filter(_ % 107 == 0).filter(_\
    \ % 109 == 0).filter(_ % 113 == 0).filter(_ % 127 == 0).filter(_ % 131 == 0).filter(_\
    \ % 137 == 0).filter(_ % 139 == 0).filter(_ % 143 == 0).filter(_ % 147 == 0).filter(_\
    \ % 151 == 0).filter(_ % 157 == 0).filter(_ % 159 == 0).filter(_ % 163 == 0).filter(_\
    \ % 167 == 0).filter(_ % 173 == 0).filter(_ % 179 == 0).filter(_ % 181 == 0).filter(_\
    \ % 191 == 0).filter(_ % 193 == 0).filter(_ % 197 == 0).filter(_ % 199 == 0).filter(_\
    \ % 211 == 0).filter(_ % 223 == 0).filter(_ % 227 == 0).filter(_ % 229 == 0).filter(_\
    \ % 233 == 0).filter(_ % 239 == 0).filter(_ % 241 == 0).filter(_ % 251 == 0).filter(_\
    \ % 253 == 0).filter(_ % 257 == 0).filter(_ % 263 == 0).filter(_ % 269 == 0).filter(_\
    \ % 271 == 0).filter(_ % 277 == 0).filter(_ % 281 == 0).filter(_ % 283 == 0).filter(_\
    \ % 293 == 0).filter(_ % 307 == 0).filter(_ % 311 == 0).filter(_ % 313 == 0).filter(_\
    \ % 317 == 0).filter(_ % 331 == 0).filter(_ % 337 == 0).filter(_ % 347 == 0).filter(_\
    \ % 349 == 0).filter(_ % 353 == 0).filter(_ % 359 == 0).filter(_ % 367 == 0).filter(_\
    \ % 373 == 0).filter(_ % 379 == 0).filter(_ % 383 == 0).filter(_ % 389 == 0).filter(_\
    \ % 397 == 0).filter(_ % 401 == 0).filter(_ % 407 == 0).filter(_ % 409 == 0).filter(_\
    \ % \n    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong,\
    \ 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\
    \ == (10l));\n    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong,\
    \ 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong,\
    \ 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong,\
    \ 1l.toLong))) == (25l));\n    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong,\
    \ 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong,\
    \ 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong,\
    \ 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong, 724l.toLong,\
    \ 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong,\
    \ 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
    \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
    \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
    \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
    \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpixbgw52x.scala:20:1770 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = lst.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).filter(_ % \e[31m3\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m5\e[0m == \e[31m0\e[0m).filter(_ % \e[31m7\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m11\e[0m == \e[31m0\e[0m).filter(_ % \e[31m13\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m17\e[0m == \e[31m0\e[0m).filter(_ % \e[31m19\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m23\e[0m == \e[31m0\e[0m).filter(_ % \e[31m29\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m31\e[0m == \e[31m0\e[0m).filter(_ % \e[31m37\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m41\e[0m == \e[31m0\e[0m).filter(_ % \e[31m43\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m47\e[0m == \e[31m0\e[0m).filter(_ % \e[31m53\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m59\e[0m == \e[31m0\e[0m).filter(_ % \e[31m61\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m67\e[0m == \e[31m0\e[0m).filter(_ % \e[31m71\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m73\e[0m == \e[31m0\e[0m).filter(_ % \e[31m79\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m83\e[0m == \e[31m0\e[0m).filter(_ % \e[31m89\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m97\e[0m == \e[31m0\e[0m).filter(_ % \e[31m101\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m103\e[0m == \e[31m0\e[0m).filter(_ % \e[31m107\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m109\e[0m == \e[31m0\e[0m).filter(_ % \e[31m113\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m127\e[0m == \e[31m0\e[0m).filter(_ % \e[31m131\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m137\e[0m == \e[31m0\e[0m).filter(_ % \e[31m139\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m143\e[0m == \e[31m0\e[0m).filter(_ % \e[31m147\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m151\e[0m == \e[31m0\e[0m).filter(_ % \e[31m157\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m159\e[0m == \e[31m0\e[0m).filter(_ % \e[31m163\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m167\e[0m == \e[31m0\e[0m).filter(_ % \e[31m173\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m179\e[0m == \e[31m0\e[0m).filter(_ % \e[31m181\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m191\e[0m == \e[31m0\e[0m).filter(_ % \e[31m193\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m197\e[0m == \e[31m0\e[0m).filter(_ % \e[31m199\e[0m == \e[31m0\e[0m).filter(_\
    \ % \e[31m211\e[0m == \e[31m0\e[0m).filter(_ % "
  stdout: ''
  timestamp: 1659804661
