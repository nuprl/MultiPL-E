language: scala
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(cubes.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr99h91xl.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5co5cisp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.toString.toInt\n        val cubesString = cubes.toString\n        val\
    \ cubesStringLength = cubesString.length\n        val cubesStringLength = cubesString.length\n\
    \        val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \       val cubesStringLength = cubesString.length\n        val cubesStringLength\
    \ = cubesString.length\n        val cubesStringLength = cubesString.length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2j82rl7y.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcubesStringLength\e[0m =\
    \ cubesString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesStringLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j82rl7y.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcubesStringLength\e[0m =\
    \ cubesString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesStringLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j82rl7y.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mcubesStringLength\e[0m =\
    \ cubesString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesStringLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j82rl7y.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubesStringLength\e[0m =\
    \ cubesString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesStringLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2j82rl7y.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcubesStringLength\e[0m =\
    \ cubesString.length"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += a\n        cubes += a * a\n        cubes\
    \ += a * a * a\n        cubes += a * a * a * a\n        cubes += a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvtw2iu3l.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.toString.toInt\n        cubes % 3 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdp1tzsc.scala:26)\n\tat Problem.main(tmpqdp1tzsc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(cubes.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4oi9px6g.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu2hf1sc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    \
    \    cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpozhqgxap.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cube = n * n * n\n\
    \        cube == a.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm1s8hu5s.scala:29)\n\tat Problem.main(tmpm1s8hu5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 1) true\n   \
    \     else if (n % 2 == 0) iscube(n / 2)\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx3ykw_q6.scala:28)\n\tat Problem.main(tmpx3ykw_q6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val m = a.toInt\n    \
    \    val l = a.toInt\n        val k = a.toInt\n        val q = a.toInt\n     \
    \   val r = a.toInt\n        val s = a.toInt\n        val t = a.toInt\n      \
    \  val u = a.toInt\n        val v = a.toInt\n        val w = a.toInt\n       \
    \ val x = a.toInt\n        val y = a.toInt\n        val z = a.toInt\n        val\
    \ cube = a.toInt\n        val cube2 = a.toInt\n        val cube3 = a.toInt\n \
    \       val cube4 = a.toInt\n        val cube5 = a.toInt\n        val cube6 =\
    \ a.toInt\n        val cube7 = a.toInt\n        val cube8 = a.toInt\n        val\
    \ cube9 = a.toInt\n        val cube10 = a.toInt\n        val cube11 = a.toInt\n\
    \        val cube12 = a.toInt\n        val cube13 = a.toInt\n        val cube14\
    \ = a.toInt\n        val cube15 = a.toInt\n        val cube16 = a.toInt\n    \
    \    val cube17 = a.toInt\n        val cube18 = a.toInt\n        val cube19 =\
    \ a.toInt\n        val cube20 = a.toInt\n        val cube21 = a.toInt\n      \
    \  val cube22 = a.toInt\n        val cube23 = a.toInt\n        val cube24 = a.toInt\n\
    \        val cube25 = a.toInt\n        val cube26 = a.toInt\n        val cube27\
    \ = a.toInt\n        val cube28 = a.toInt\n        val cube29 = a.toInt\n    \
    \    val cube30 = a.toInt\n        val cube31 = a.toInt\n        val cube32 =\
    \ a.toInt\n        val cube33 = a.toInt\n        val cube34 = a.toInt\n      \
    \  val cube35 = a.toInt\n        val cube36 = a.toInt\n        val cube37 = a.toInt\n\
    \        val cube38 = a.toInt\n        val cube39 = a.toInt\n        val cube40\
    \ = a.toInt\n        val cube41 = a.toInt\n        val cube42 = a.toInt\n    \
    \    val cube43 = a.toInt\n        val cube44 = a.toInt\n        val cube45 =\
    \ a.toInt\n        val cube46 = a.toInt\n        val cube47 = a.toInt\n      \
    \  val cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6wiqo4x1.scala:83:4 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp6wiqo4x1.scala:83:5 ---------------------\e[0m\e[0m\n\e[31m83 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n    \
    \    cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzc11md9.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesCount = cubes.length\n        val cubesSum = cubes.sum\n   \
    \     val cubesSumSquare = cubesSum * cubesSum\n        val cubesSumCube = cubesSum\
    \ * cubes\n        val cubesSumCube2 = cubesSumCube * cubes\n        val cubesSumCube3\
    \ = cubesSumCube2 * cubes\n        val cubesSumCube4 = cubesSumCube3 * cubes\n\
    \        val cubesSumCube5 = cubesSumCube4 * cubes\n        val cubesSumCube6\
    \ = cubesSumCube5 * cubes\n        val cubesSumCube7 = cubesSumCube6 * cubes\n\
    \        val cubesSumCube8 = cubesSumCube7 * cubes\n        val cubesSumCube9\
    \ = cubesSumCube8 * cubes\n        val cubesSumCube10 = cubesSumCube9 * cubes\n\
    \        val cubesSumCube11 = cubesSumCube10 * cubes\n        val cubesSumCube12\
    \ = cubesSumCube11 * cubes\n        val cubesSumCube13 = cubesSumCube12 * cubes\n\
    \        val cubesSumCube14 = cubesSumCube13 * cubes\n        val cubesSumCube15\
    \ = cubesSumCube14 * cubes\n        val cubesSumCube16 = cubesSumCube15 * cubes\n\
    \        val cubesSumCube17 = cubesSumCube16 * cubes\n        val cubesSumCube18\
    \ = cubesSumCube17 * cubes\n        val cubesSumCube19 = cubesSumCube18 * cubes\n\
    \        val cubesSumCube20 = cubesSumCube19 * cubes\n        val cubesSumCube21\
    \ = cubesSumCube20 * cubes\n        val cubesSumCube22 = cubesSumCube21 * cubes\n\
    \        val cubesSumCube23 = cubesSumCube22 * cubes\n        val cubesSumCube24\
    \ = cubesSumCube23 * cubes\n        val cubesSumCube25 = cubesSumCube24 * cubes\n\
    \        val cubesSumCube26 = cubesSumCube25 * cubes\n        val cubesSumCube27\
    \ = cubesSumCube26 * cubes\n        val cubesSumCube28 = cubesSumCube27 * cubes\n\
    \        val cubes\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuht9ztvu.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuht9ztvu.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuht9ztvu.scala:55:5\
    \ ---------------------\e[0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.HashSet[Long]()\n        cubesSet += cube\n  \
    \      cubesSet += cube * cube\n        cubesSet += cube * cube * cube\n     \
    \   cubesSet += cube * cube * cube * cube\n        cubesSet += cube * cube * cube\
    \ * cube * cube\n        cubesSet += cube * cube * cube * cube * cube * cube\n\
    \        cubesSet += cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n   \
    \     cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube\n        cubesSet += cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet += cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpksm6cbia.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpksm6cbia.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube\n        cubes += cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\n  \
    \      cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube\n\
    \        cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cu\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw9oqh2z3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 1) true\n   \
    \     else if (n == 0) true\n        else if (n % 2 == 0) true\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pl9qj9l.scala:29)\n\tat Problem.main(tmp0pl9qj9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long]()\n  \
    \      cubesSet += cube\n        cubesSet += cube*cube\n        cubesSet += cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpox0bro_2.scala:42:110 --------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc57x5hme.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += a\n        cubes += a * a\n \
    \       cubes += a * a * a\n        cubes += a * a * a * a\n        cubes += a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2udxerh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes += cube * cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes\
    \ += cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp246a37j5.scala:32:772 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp246a37j5.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer.empty[\e[35mLo"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += 1\n        cubes += cube * cube\n  \
    \      cubes += cube * cube * cube\n        cubes += cube * cube * cube * cube\n\
    \        cubes += cube * cube * cube * cube * cube\n        cubes += cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cu\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpawjcrdtq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        cubes.toInt % 1 == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu1xl1d1w.scala:27)\n\tat Problem.main(tmpu1xl1d1w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n    \
    \    cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzc11md9.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(cubes.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr99h91xl.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long](cube)\n\
    \        val cubesSet2 = mutable.Set[Long](cube)\n        val cubesSet3 = mutable.Set[Long](cube)\n\
    \        val cubesSet4 = mutable.Set[Long](cube)\n        val cubesSet5 = mutable.Set[Long](cube)\n\
    \        val cubesSet6 = mutable.Set[Long](cube)\n        val cubesSet7 = mutable.Set[Long](cube)\n\
    \        val cubesSet8 = mutable.Set[Long](cube)\n        val cubesSet9 = mutable.Set[Long](cube)\n\
    \        val cubesSet10 = mutable.Set[Long](cube)\n        val cubesSet11 = mutable.Set[Long](cube)\n\
    \        val cubesSet12 = mutable.Set[Long](cube)\n        val cubesSet13 = mutable.Set[Long](cube)\n\
    \        val cubesSet14 = mutable.Set[Long](cube)\n        val cubesSet15 = mutable.Set[Long](cube)\n\
    \        val cubesSet16 = mutable.Set[Long](cube)\n        val cubesSet17 = mutable.Set[Long](cube)\n\
    \        val cubesSet18 = mutable.Set[Long](cube)\n        val cubesSet19 = mutable.Set[Long](cube)\n\
    \        val cubesSet20 = mutable.Set[Long](cube)\n        val cubesSet21 = mutable.Set[Long](cube)\n\
    \        val cubesSet22 = mutable.Set[Long](cube)\n        val cubesSet23 = mutable.Set[Long](cube)\n\
    \        val cubesSet24 = mutable.Set[Long](cube)\n        val cubesSet25 = mutable.Set[Long](cube)\n\
    \        val cubesSet26 = mutable.Set[Long](cube)\n        val cubesSet27 = mutable.Set[Long](cube)\n\
    \        val cubesSet28 = mutable.Set[Long](cube)\n        val cubesSet29 = mutable.Set[Long](cube)\n\
    \        val cubesSet30 = mutable.Set[Long](cube)\n        val cubesSet31 = mutable.Set[Long](cube)\n\
    \        val cubesSet32 = \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpklbdtwm9.scala:54:24 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mcubesSet32\e[0m = \n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpklbdtwm9.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpklbdtwm9.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m](cube)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpklbdtwm9.scala:24:24 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcubesSet2\e[0m = mutable.Set[\e\
    [35mLong\e[0m](cube)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpklbdtwm9.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mcubesSet3\e[0m = mutable.Set[\e\
    [35mLong\e[0m](cube)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpklbdtwm9.scala:26:24 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mcubesSet4\e[0m = muta"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiu2hf1sc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        if (cubes == a) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqifekb1j.scala:29)\n\tat Problem.main(tmpqifekb1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cube = n * n * n\n\
    \        cube == a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppxve5vov.scala:29)\n\tat Problem.main(tmppxve5vov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(cubes.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr99h91xl.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg0dqwo_.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprg0dqwo_.scala:54:8 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesCount = cubes.length\n        val cubesSum = cubes.sum\n   \
    \     val cubesSumSquare = cubes.sum * cubes.sum\n        val cubesSumCube = cubes.sum\
    \ * cubes.sum * cubes.sum\n        val cubesSumCube2 = cubes.sum * cubes.sum *\
    \ cubes.sum * cubes.sum\n        val cubesSumCube3 = cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum\n        val cubesSumCube4 = cubes.sum * cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube5 = cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n  \
    \      val cubesSumCube6 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube7 = cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum\n        val cubesSumCube8 = cubes.sum * cubes.sum * cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n\
    \        val cubesSumCube9 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n  \
    \      val cubesSumCube10 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n\
    \        val cubesSumCube11 = cubes.sum * cubes.sum * cubes.sum * cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum\n        val cubesSumCube12 = cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbjuf6qnf.scala:37:100 --------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mcubesSumCube12\e[0m = cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                 ^\e[0m\n\e[31m   |\e[0m                    \
    \                   expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbjuf6qnf.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbjuf6qnf.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n    \
    \    cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn8c0a5qa.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpn8c0a5qa.scala:53:8 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += cube\n        cubes += cube * cube\n\
    \        cubes += cube * cube * cube\n        cubes.contains(a)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpersajrmi.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long]()\n  \
    \      cubesSet += cube\n        cubesSet += cube*cube\n        cubesSet += cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpox0bro_2.scala:42:110 --------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb_977li.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesCount = cubes.length\n       \
    \ val cubesSum = cubes.sum\n        val cubesSumSquare = cubes.sum * cubes.sum\n\
    \        val cubesProduct = cubes.product\n        val cubesProductSquare = cubes.product\
    \ * cubes.product\n        val cubesProductSum = cubes.product * cubesSum\n  \
    \      val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumProduct = cubes.product * cubesSum * cubesSum\n        val cubesProductSumProductSquare\
    \ = cubes.product * cubesSum * cubesSumSquare\n        val cubesProductSumProductProduct\
    \ = cubes.product * cubesSum * cubesSum * cubesSum\n        val cubesProductSumProductProductSquare\
    \ = cubes.product * cubesSum * cubesSum * cubesSumSquare\n        val cubesProductSumProductProductProduct\
    \ = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum\n        val cubesProductSumProductProductProductSquare\
    \ = cubes.product * cubesSum * cubesSum * cubesSum * cubesSumSquare\n        val\
    \ cubesProductSumProductProductProductProduct = cubes.product * cubesSum * cubesSum\
    \ * cubesSum * cubesSum * cubesSum\n        val cubesProductSumProductProductProductProductSquare\
    \ = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum * cubesSumSquare\n\
    \        val cubesProductSumProductProductProductProductProduct = cubes.product\
    \ * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum\n        val\
    \ cubesProductSumProductProductProductProductSquare = cubes.product * cubesSum\
    \ * cubesSum * cubesSum * cubesSum * cubesSum * cubesSumSquare\n        val cubesProductSumProductProductProductProductProduct\
    \ = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum\
    \ * cubesSum\n        val cubesProductSumProductProductProductProductProductSquare\
    \ = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum\
    \ * cubesSumSquare\n        val \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpm9qlrai3.scala:42:11 ---------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpm9qlrai3.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumProductProductProductProductSquare\e\
    [0m = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum * cubesSumSquare\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumProductProductProductProductSquare is already\
    \ defined as \e[33mvalue\e[0m \e[35mcubesProductSumProductProductProductProductSquare\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpm9qlrai3.scala:40:12 ---------------------------\e[0m\e[0m\n\e\
    [31m40 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumProductProductProductProductProduct\e\
    [0m = cubes.product * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum * cubesSum\
    \ * cubesSum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumProductProductProductProductProduct is already\
    \ defined as \e[33mvalue\e[0m \e[35mcubesProductSumProductProductProductProductProduct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpm9qlrai3.scala:22:20 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong * a.toString.toLong *\
    \ a.toString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53f44qnp.scala:26)\n\tat Problem.main(tmp53f44qnp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph52fbvxx.scala:27)\n\tat Problem.main(tmph52fbvxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes += cube * cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes\
    \ += cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp246a37j5.scala:32:772 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp246a37j5.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer.empty[\e[35mLo"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes.takeWhile(cubes.head * cubes.head\
    \ <= cubes.last)\n            .forall(cubes.head * cubes.head <= cubes.last)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyjylnen.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n    \
    \    cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnzc11md9.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += a\n        cubes += a * a\n \
    \       cubes += a * a * a\n        cubes += a * a * a * a\n        cubes += a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd0asmb5k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd0asmb5k.scala:53:8 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979727
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb_977li.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes += cube * cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes\
    \ += cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cu\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_my6zqh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(x\
    \ => x*x*x == a)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmu47ztuu.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes.takeWhile(cubes => cubes % cubes\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2xwmnfg.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer(cube)\n\
    \        val cubesCount = cubes.toList.length\n        val cubesSum = cubes.sum\n\
    \        val cubesSumSquare = cubesSum * cubesSum\n        val cubesSumSquareRoot\
    \ = cubesSumSquare / 3\n        val cubesSumSquareRoot2 = cubesSumSquareRoot /\
    \ 2\n        val cubesSumSquareRoot3 = cubesSumSquareRoot / 3\n        val cubesSumSquareRoot4\
    \ = cubesSumSquareRoot / 4\n        val cubesSumSquareRoot5 = cubesSumSquareRoot\
    \ / 5\n        val cubesSumSquareRoot6 = cubesSumSquareRoot / 6\n        val cubesSumSquareRoot7\
    \ = cubesSumSquareRoot / 7\n        val cubesSumSquareRoot8 = cubesSumSquareRoot\
    \ / 8\n        val cubesSumSquareRoot9 = cubesSumSquareRoot / 9\n        val cubesSumSquareRoot10\
    \ = cubesSumSquareRoot / 10\n        val cubesSumSquareRoot11 = cubesSumSquareRoot\
    \ / 11\n        val cubesSumSquareRoot12 = cubesSumSquareRoot / 12\n        val\
    \ cubesSumSquareRoot13 = cubesSumSquareRoot / 13\n        val cubesSumSquareRoot14\
    \ = cubesSumSquareRoot / 14\n        val cubesSumSquareRoot15 = cubesSumSquareRoot\
    \ / 15\n        val cubesSumSquareRoot16 = cubesSumSquareRoot / 16\n        val\
    \ cubesSumSquareRoot17 = cubesSumSquareRoot / 17\n        val cubesSumSquareRoot18\
    \ = cubesSumSquareRoot / 18\n        val cubesSumSquareRoot19 = cubesSumSquareRoot\
    \ / 19\n        val cubesSumSquareRoot20 = cubesSumSquareRoot / 20\n        val\
    \ cubesSumSquareRoot21 = cubesSumSquareRoot / 21\n        val cubesSumSquareRoot22\
    \ = cubesSumSquareRoot / 22\n        val cubesSumSquareRoot23 = cubesSumSquareRoot\
    \ / 23\n        val cubesSumSquareRoot24 = cubesSumSquareRoot / 24\n        val\
    \ cubesSumSquareRoot25 = cubesSumSquareRoot / 25\n        val cubesSumSquareRoot26\
    \ = cubesSumSquareRoot / 26\n        val cubesSumSquareRoot27 = cubesSumSquareRoot\
    \ / 27\n        val cubesSumSquareRoot28 = cube\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpelb0ci93.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpelb0ci93.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprx0s373l.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2s9t432g.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvwmzt3sc.scala:32:772 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwmzt3sc.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7gbe3f9n.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += n\n        cubes += n * n\n        cubes += n * n * n\n    \
    \    cubes += n * n * n * n\n        cubes += n * n * n * n * n\n        cubes\
    \ += n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n\n     \
    \   cubes += n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n\
    \ * n * n * n * n\n        cubes += n * n * n * n * n * n * n * n * n * n\n  \
    \      cubes += n * n * n * n * n * n * n * n * n * n * n\n        cubes += n\
    \ * n * n * n * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        cubes += n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n  \
    \      cubes += n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n\n        cubes += n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n\n        cubes += n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\
    \        cubes += n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n\n        cubes += n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n\
    \        cubes += n * n * n * n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n\n        cubes += n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpplx6awvl.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += cube\n        cubes += cube * cube\n\
    \        cubes += cube * cube * cube\n        cubes.contains(a)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpersajrmi.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += a\n        cubes += a * a\n \
    \       cubes += a * a * a\n        cubes += a * a * a * a\n        cubes += a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0114ec8p.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp0114ec8p.scala:54:8 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes.takeWhile(cubes.head % cubes.head\
    \ == 0).length == 1\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp63raq6ue.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += a\n        while(cubes.nonEmpty)\
    \ {\n            val c = cubes.head\n            cubes -= c\n            if(c\
    \ == cube) {\n                return true\n            }\n            cubes +=\
    \ c\n        }\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp__ldqitf.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.HashSet[Long]()\n        cubesSet += cube\n  \
    \      cubesSet += cube * cube\n        cubesSet += cube * cube * cube\n     \
    \   cubesSet += cube * cube * cube * cube\n        cubesSet += cube * cube * cube\
    \ * cube * cube\n        cubesSet += cube * cube * cube * cube * cube * cube\n\
    \        cubesSet += cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n   \
    \     cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubesSet += cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube\n        cubesSet += cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cu\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx09h_7__.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpx09h_7__.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes.contains(a)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwe3z73_f.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes.add(cube)\n        cubes.add(cube * cube)\n\
    \        cubes.add(cube * cube * cube)\n        cubes.add(cube * cube * cube *\
    \ cube)\n        cubes.add(cube * cube * cube * cube * cube)\n        cubes.add(cube\
    \ * cube * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube *\
    \ cube * cube * cube * cube)\n        cubes.add(cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube)\n        cubes.add(cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube)\n   \
    \     cubes.add(cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube)\n        cubes.add(cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cu\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx_92u4bg.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx_92u4bg.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 1l) true\n  \
    \      else if (n % 2 == 0l) iscube(n * 3l)\n        else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.toList.forall(cubes.contains)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr99h91xl.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.pow(3).toInt\n        cubes % a == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsw7ascf8.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesCount = cubes.length\n        val cubesSum = cubes.sum\n   \
    \     val cubesSumSquare = cubes.sum * cubes.sum\n        val cubesProduct = cubes.product\n\
    \        val cubesProductSquare = cubes.product * cubes.product\n        val cubesProductSum\
    \ = cubes.product * cubesSum\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumProduct = cubes.product * cubesSum\
    \ * cubesProduct\n        val cubesProductSumProductSquare = cubes.product * cubesSum\
    \ * cubesProductSquare\n        val cubesProductSumProductSum = cubes.product\
    \ * cubesSum * cubesProductSum\n        val cubesProductSumProductSumSquare =\
    \ cubes.product * cubesSum * cubesProductSumSquare\n        val cubesProductSumProductSumProduct\
    \ = cubes.product * cubesSum * cubesProductSumProduct\n        val cubesProductSumProductSumProductSquare\
    \ = cubes.product * cubesSum * cubesProductSumProductSquare\n        val cubesProductSumProductSumProductSum\
    \ = cubes.product * cubesSum * cubesProductSumProductSum\n        val cubesProductSumProductSumProductSumSquare\
    \ = cubes.product * cubesSum * cubesProductSumProductSumSquare\n        val cubesProductSumProductSumProductSumProduct\
    \ = cubes.product * cubesSum * cubesProductSumProductSumProduct\n        val cubesProductSumProductSumProductSumProductSquare\
    \ = cubes.product * cubesSum * cubesProductSumProductSumProductSquare\n      \
    \  val cubesProductSumProductSumProductSumProductSum = cubes.product * cubesSum\
    \ * cubesProductSumProductSumProductSum\n        val cubesProductSumProductSumProductSumProductSumSquare\
    \ = cubes.product * cubesSum * cubesProductSumProductSumProductSumSquare\n   \
    \     val cubesProductSumProductSumProductSumProductSumProduct = cubes.product\
    \ * cubesSum * cubesProductSumProductSumProductSumProduct\n        val cubesProductSumProductSumProductSumProductSumProductSquare\
    \ = cubes.product * cubesSum * cubesProductSumProductSumProductSumProductSquare\n\
    \        val cubesProductSumProductSumProductSumProductSumProduct = cubes.product\
    \ * cubesSum * cubesProduct\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n   \
    \ assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n   \
    \ assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcaha83j7.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumProductSumProductSumProductSumProduct\e\
    [0m = cubes.product * cubesSum * cubesProduct\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumProductSumProductSumProductSumProduct is already\
    \ defined as \e[33mvalue\e[0m \e[35mcubesProductSumProductSumProductSumProductSumProduct\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpcaha83j7.scala:22:20 ------------------------\e[0m\e[0m\n\
    \e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcaha83j7.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.HashSet(cubes)\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbz4dp_5.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbz4dp_5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbz4dp_5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbz4dp_5.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcubesSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbz4dp_5.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbz4dp_5.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube\n        cubes += cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\n  \
    \      cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube\n\
    \        cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cu\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw9oqh2z3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.HashSet(cubes)\n\
    \        cubesSet.contains(cube)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7013fwkm.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7013fwkm.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet(cubes)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.Set[Long]()\n\
    \        cubes.add(cube)\n        cubes.add(cube * cube)\n        cubes.add(cube\
    \ * cube * cube)\n        cubes.add(cube * cube * cube * cube)\n        cubes.add(cube\
    \ * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube * cube *\
    \ cube * cube)\n        cubes.add(cube * cube * cube * cube * cube * cube * cube)\n\
    \        cubes.add(cube * cube * cube * cube * cube * cube * cube * cube * cube)\n\
    \        cubes.add(cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube)\n        cubes.add(cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube)\n   \
    \     cubes.add(cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube)\n        cubes.add(cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube)\n\
    \        cubes.add(cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube)\n        cubes.add(cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube)\n        cubes.add(cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * \n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp80f5d5r1.scala:38:94 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        cubes.add(cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * \n\e[31m\e[31m   |\e[0m          \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp80f5d5r1.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqfofck2.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cube = n * n * n\n\
    \        if (cube == a) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk5zwiuym.scala:29)\n\tat Problem.main(tmpk5zwiuym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.Set[Long]()\n        cubesSet += cube\n      \
    \  cubesSet += cube * cube\n        cubesSet += cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube\n        cubesSet += cube * cube * cube * cube\
    \ * cube\n        cubesSet += cube * cube * cube * cube * cube * cube\n      \
    \  cubesSet += cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n   \
    \     cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubesSet += cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube\n        cubesSet += cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp77a29hh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpp77a29hh.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvwmzt3sc.scala:32:772 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwmzt3sc.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes += cube\n        cubes += cube*cube\n\
    \        cubes += cube*cube*cube\n        cubes += cube*cube*cube*cube\n     \
    \   cubes += cube*cube*cube*cube*cube\n        cubes += cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube\n        cubes += cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubes\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubes += cube*cube*cube*cube*cube*cube*cube*cube*\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfehe3hlo.scala:43:57 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        cubes += cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfehe3hlo.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesCount = cubes.length\n       \
    \ val cubesSum = cubes.sum\n        val cubesSumSquare = cubesSum * cubesSum\n\
    \        val cubesSumCube = cubesSum * cubesSum\n        val cubesSumCube2 = cubesSumCube\
    \ * cubesSum\n        val cubesSumCube3 = cubesSumCube2 * cubesSum\n        val\
    \ cubesSumCube4 = cubesSumCube3 * cubesSum\n        val cubesSumCube5 = cubesSumCube4\
    \ * cubesSum\n        val cubesSumCube6 = cubesSumCube5 * cubesSum\n        val\
    \ cubesSumCube7 = cubesSumCube6 * cubesSum\n        val cubesSumCube8 = cubesSumCube7\
    \ * cubesSum\n        val cubesSumCube9 = cubesSumCube8 * cubesSum\n        val\
    \ cubesSumCube10 = cubesSumCube9 * cubesSum\n        val cubesSumCube11 = cubesSumCube10\
    \ * cubesSum\n        val cubesSumCube12 = cubesSumCube11 * cubesSum\n       \
    \ val cubesSumCube13 = cubesSumCube12 * cubesSum\n        val cubesSumCube14 =\
    \ cubesSumCube13 * cubesSum\n        val cubesSumCube15 = cubesSumCube14 * cubesSum\n\
    \        val cubesSumCube16 = cubesSumCube15 * cubesSum\n        val cubesSumCube17\
    \ = cubesSumCube16 * cubesSum\n        val cubesSumCube18 = cubesSumCube17 * cubesSum\n\
    \        val cubesSumCube19 = cubesSumCube18 * cubesSum\n        val cubesSumCube20\
    \ = cubesSumCube19 * cubesSum\n        val cubesSumCube21 = cubesSumCube20 * cubesSum\n\
    \        val cubesSumCube22 = cubesSumCube21 * cubesSum\n        val cubesSumCube23\
    \ = cubesSumCube22 * cubesSum\n        val cubesSumCube24 = cubesSumCube23 * cubesSum\n\
    \        val cubesSumCube25 = cubesSumCube24 * cubesSum\n        val cubesSumCube26\
    \ = cubesSumCube25 * cubesSum\n        val cubesSumCube27 = cubes\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb7jkk8y6.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb7jkk8y6.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val m = a.toInt\n    \
    \    val r = a.toInt\n        val s = a.toInt\n        val t = a.toInt\n     \
    \   val u = a.toInt\n        val v = a.toInt\n        val w = a.toInt\n      \
    \  val x = a.toInt\n        val y = a.toInt\n        val z = a.toInt\n       \
    \ val cube = n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp519wn36.scala:34:0 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m\
    \   |\e[0m'}' expected, but 'end of statement' found\nException in thread \"main\"\
    \ java.lang.StackOverflowError\n\tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1521)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.tools.dotc.printing.SyntaxHighlighting$TreeHighlighter$2$.traverse(SyntaxHighlighting.scala:123)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.apply(untpd.scala:785)\n\t\
    at dotty.tools.dotc.ast.untpd$UntypedTreeAccumulator.foldMoreCases(untpd.scala:739)\n\
    \tat dotty.tools.dotc.ast.Trees$Instance$TreeAccumulator.foldOver(Trees.scala:1625)\n\
    \tat dotty.tools.dotc.ast.untpd$UntypedTreeTraverser.traverseChildren(untpd.scala:786)\n\
    \tat dotty.too"
  stdout: 'java.lang.StackOverflowError while compiling /tmp/tmpp519wn36.scala

    '
  timestamp: 1659979731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        val cubesCount = cubes.length\n        val\
    \ cubesSum = cubes.sum\n        val cubesSumSquare = cubesSum * cubesSum\n   \
    \     val cubesSumCube = cubesSum * cubesSum\n        val cubesSumCube2 = cubesSumCube\
    \ * cubesSum\n        val cubesSumCube3 = cubesSumCube2 * cubesSum\n        val\
    \ cubesSumCube4 = cubesSumCube3 * cubesSum\n        val cubesSumCube5 = cubesSumCube4\
    \ * cubesSum\n        val cubesSumCube6 = cubesSumCube5 * cubesSum\n        val\
    \ cubesSumCube7 = cubesSumCube6 * cubesSum\n        val cubesSumCube8 = cubesSumCube7\
    \ * cubesSum\n        val cubesSumCube9 = cubesSumCube8 * cubesSum\n        val\
    \ cubesSumCube10 = cubesSumCube9 * cubesSum\n        val cubesSumCube11 = cubesSumCube10\
    \ * cubesSum\n        val cubesSumCube12 = cubesSumCube11 * cubesSum\n       \
    \ val cubesSumCube13 = cubesSumCube12 * cubesSum\n        val cubesSumCube14 =\
    \ cubesSumCube13 * cubesSum\n        val cubesSumCube15 = cubesSumCube14 * cubesSum\n\
    \        val cubesSumCube16 = cubesSumCube15 * cubesSum\n        val cubesSumCube17\
    \ = cubesSumCube16 * cubesSum\n        val cubesSumCube18 = cubesSumCube17 * cubesSum\n\
    \        val cubesSumCube19 = cubesSumCube18 * cubesSum\n        val cubesSumCube20\
    \ = cubesSumCube19 * cubesSum\n        val cubesSumCube21 = cubesSumCube20 * cubesSum\n\
    \        val cubesSumCube22 = cubesSumCube21 * cubesSum\n        val cubesSumCube23\
    \ = cubesSumCube22 * cubesSum\n        val cubesSumCube24 = cubesSumCube23 * cubesSum\n\
    \        val cubesSumCube25 = cubesSumCube24 * cubesSum\n        val cubesSumCube26\
    \ = cubesSumCube25 * cubesSum\n        val cubesSumCube27 = cubes\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n   \
    \ assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n   \
    \ assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n \
    \   assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphrqmldh5.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphrqmldh5.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb_977li.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        cubes % 1 == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph52fbvxx.scala:27)\n\tat Problem.main(tmph52fbvxx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes += cube\n        cubes += cube * cube\n\
    \        cubes += cube * cube * cube\n        cubes.contains(cube)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvl2so1t.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979733
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesCount = cubes.length\n        val cubesSum = cubes.sum\n   \
    \     val cubesSumSquare = cubesSum * cubesSum\n        val cubesProduct = cubes.product\n\
    \        val cubesProductSquare = cubesProduct * cubesProduct\n        val cubesProductSquareRoot\
    \ = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot2 = cubesProductSquare\
    \ / cubesCount\n        val cubesProductSquareRoot3 = cubesProductSquare / cubesCount\n\
    \        val cubesProductSquareRoot4 = cubesProductSquare / cubesCount\n     \
    \   val cubesProductSquareRoot5 = cubesProductSquare / cubesCount\n        val\
    \ cubesProductSquareRoot6 = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot7\
    \ = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot8 = cubesProductSquare\
    \ / cubesCount\n        val cubesProductSquareRoot9 = cubesProductSquare / cubesCount\n\
    \        val cubesProductSquareRoot10 = cubesProductSquare / cubesCount\n    \
    \    val cubesProductSquareRoot11 = cubesProductSquare / cubesCount\n        val\
    \ cubesProductSquareRoot12 = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot13\
    \ = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot14 = cubesProductSquare\
    \ / cubesCount\n        val cubesProductSquareRoot15 = cubesProductSquare / cubesCount\n\
    \        val cubesProductSquareRoot16 = cubesProductSquare / cubesCount\n    \
    \    val cubesProductSquareRoot17 = cubesProductSquare / cubesCount\n        val\
    \ cubesProductSquareRoot18 = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot19\
    \ = cubesProductSquare / cubesCount\n        val cubesProductSquareRoot20 = cubesProductSquare\
    \ / cubesCount\n        val cubesProductSquareRoot21 = cubesProductSquare / cubesCount\n\
    \        val cubesProductSquareRoot22 = cubesProductSquare / cubesCount\n    \
    \    val cubesProductSquareRoot23 = cubesProductSquare / cubesCount\n        val\
    \ cubesProductSquareRoot24 = cube\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_g1_ds9.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpk_g1_ds9.scala:52:5 ---------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 0 || n == 1)\
    \ return true\n        if (n % 2 == 0) return false\n        if (n % 3 == 0) return\
    \ false\n        val cube = n * n * n\n        if (cube % n == 0) return false\n\
    \        return true\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_60e33o.scala:32)\n\tat Problem.main(tmpw_60e33o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cube = n * n * n\n\
    \        cube == a.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm1s8hu5s.scala:29)\n\tat Problem.main(tmpm1s8hu5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.HashSet(cubes)\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSetSize = cubesSet.size\n\
    \        val cubesSetSize = cubesSet.size\n        val cubesSet\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgbz4dp_5.scala:68:4 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbz4dp_5.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbz4dp_5.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpgbz4dp_5.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcubesSetSize\
    \ is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgbz4dp_5.scala:28:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesSetSize\e[0m = cubesSet.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesSetSize is already defined as \e[33mvalue\e[0m \e[35mcubesSetSize\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgbz4dp_5.scala:29:12 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e"
  stdout: ''
  timestamp: 1659979732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += cube\n        cubes += cube * cube\n\
    \        cubes += cube * cube * cube\n        cubes.contains(cube)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n  \
    \  assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n  \
    \  assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6l8ivz0y.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.Set[Long]()\n        cubesSet += cube\n      \
    \  cubesSet += cube * cube\n        cubesSet += cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube\n        cubesSet += cube * cube * cube * cube\
    \ * cube\n        cubesSet += cube * cube * cube * cube * cube * cube\n      \
    \  cubesSet += cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet\
    \ += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n   \
    \     cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubesSet += cube * cube * cube * cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubesSet += cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube\n        cubesSet += cube * cube * cube *\
    \ cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube *\
    \ cube\n        cubesSet += cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube\n        cubesSet +=\
    \ cube \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp77a29hh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpp77a29hh.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes foreach { x =>\n            cubes\
    \ foreach { y =>\n                cubes foreach { z =>\n                    if\
    \ (x*x*x + y*y*y + z*z*z == cube) {\n                        return true\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwahtp4p6.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n\
    \        val cubesArray = cubes.toArray\n        val cubesArrayLength = cubesArray.length\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = cubesArrayLength.toInt\n        val cubesArrayLength\
    \ = cubesArrayLength.toLong\n        val cubesArrayLength = cubesArrayLength.toInt\n\
    \        val cubesArrayLength = cubesArrayLength.toLong\n        val cubesArrayLength\
    \ = cubesArrayLength.toInt\n        val cubesArrayLength = cubesArrayLength.toLong\n\
    \        val cubesArrayLength = \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpay8qft7h.scala:61:30 ---------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m        \e[33mval\e[0m \e[36mcubesArrayLength\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                              ^\e[0m\n\e[31m   |\e[0m\
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpay8qft7h.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesArrayLength\e[0m = cubesArrayLength.toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcubesArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mcubesArrayLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpay8qft7h.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubesArrayLength\e[0m = cubesArrayLength.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpay8qft7h.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mcubesArrayLength\e[0m =\
    \ cubesArrayLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mcubesArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpay8qft7h.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mcubesArrayLength\e[0m =\
    \ cubesArrayLength.toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659979739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += a\n        cubes += a * a\n        cubes\
    \ += a * a * a\n        cubes += a * a * a * a\n        cubes += a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1l9am1y6.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1l9am1y6.scala:54:8 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes += cube * cube *\
    \ cube * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes\
    \ += cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cu\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl_my6zqh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cube = n * n * n\n\
    \        cube == a.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm1s8hu5s.scala:29)\n\tat Problem.main(tmpm1s8hu5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long]()\n  \
    \      cubes.foreach(cubesSet += _)\n        cubesSet.size == 1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6mujadko.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp6mujadko.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979736
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes foreach { x =>\n            val y\
    \ = cube.pow(x)\n            cubes += y\n        }\n        cubes.size == 1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy2hnbee2.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        cubes % 1L == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyrmv2jns.scala:27)\n\tat Problem.main(tmpyrmv2jns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += a\n        while(cubes.nonEmpty) {\n            val c = cubes.head\n\
    \            cubes -= c\n            if (c*c*c == a) {\n                return\
    \ true\n            }\n            cubes += c\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_yozcglb.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979737
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.toString.toInt\n        val cubesString = cubes.toString\n        cubesString.contains(\"\
    1\")\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw22mohez.scala:30)\n\tat Problem.main(tmpw22mohez.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        val cubesCount = cubes.toList.length\n \
    \       val cubesSum = cubes.sum\n        val cubesSumSquare = cubes.sum * cubes.sum\n\
    \        val cubesProduct = cubes.product\n        val cubesProductSquare = cubes.product\
    \ * cubes.product\n        val cubesProductSum = cubes.product * cubesSum\n  \
    \      val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumSquare = cubes.product * cubesSumSquare\n        val cubesProductSumSquare\
    \ = cubes.product * cubesSumSquare\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumSquare = cubes.product * cubesSumSquare\n\
    \        val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumSquare = cubes.product * cubesSumSquare\n        val cubesProductSumSquare\
    \ = cubes.product * cubesSumSquare\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumSquare = cubes.product * cubesSumSquare\n\
    \        val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumSquare = cubes.product * cubesSumSquare\n        val cubesProductSumSquare\
    \ = cubes.product * cubesSumSquare\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumSquare = cubes.product * cubesSumSquare\n\
    \        val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumSquare = cubes.product * cubesSumSquare\n        val cubesProductSumSquare\
    \ = cubes.product * cubesSumSquare\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumSquare = cubes.product * cubesSumSquare\n\
    \        val cubesProductSumSquare = cubes.product * cubesSumSquare\n        val\
    \ cubesProductSumSquare = cubes.product * cubesSumSquare\n        val cubesProductSumSquare\
    \ = cubes.product * cubesSumSquare\n        val cubesProductSumSquare = cubes.product\
    \ * cubesSumSquare\n        val cubesProductSumSquare\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxfgtz0e7.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfgtz0e7.scala:30:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcubesProductSumSquare\e[0m = cubes.product * cubesSumSquare\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumSquare is already defined as \e[33mvalue\e\
    [0m \e[35mcubesProductSumSquare\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfgtz0e7.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumSquare\e\
    [0m = cubes.product * cubesSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumSquare is already defined as \e[33mvalue\e\
    [0m \e[35mcubesProductSumSquare\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfgtz0e7.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumSquare\e\
    [0m = cubes.product * cubesSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumSquare is already defined as \e[33mvalue\e\
    [0m \e[35mcubesProductSumSquare\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxfgtz0e7.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mcubesProductSumSquare\e\
    [0m = cubes.product * cubesSumSquare\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcubesProductSumSquare is already defi"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ListBuffer[Long]()\n\
    \        cubes += cube\n        cubes += cube * cube\n        cubes += cube *\
    \ cube * cube\n        cubes.contains(cube)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbbic8ijv.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979738
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long]()\n  \
    \      cubesSet += cube\n        cubesSet += cube*cube\n        cubesSet += cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpox0bro_2.scala:42:110 --------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 1) true\n   \
    \     else if (n % 2 == 0) iscube(n / 2)\n        else iscube(3 * n + 1)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xb54x75.scala:28)\n\tat Problem.main(tmp5xb54x75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes.takeWhile(_ < cubes.last)\n     \
    \       .forall(cubes.take(_).forall(_ == cube))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa0me67vn.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += a\n        cubes += a * a\n        cubes\
    \ += a * a * a\n        cubes += a * a * a * a\n        cubes += a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl8llo_ue.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpl8llo_ue.scala:53:8 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp934bdc5m.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer.empty[Long]\n\
    \        cubes += a\n        cubes += a * a\n        cubes += a * a * a\n    \
    \    cubes += a * a * a * a\n        cubes += a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\n     \
    \   cubes += a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n      \
    \  cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsmxif06u.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cube\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg0dqwo_.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprg0dqwo_.scala:54:8 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        cube\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (cube : Int)\n\e[31m   |\e[0m        Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        if (cube == 1)\n  \
    \          return true\n        if (cube == 3)\n            return true\n    \
    \    if (cube == 5)\n            return true\n        if (cube == 7)\n       \
    \     return true\n        if (cube == 9)\n            return true\n        if\
    \ (cube == 11)\n            return true\n        if (cube == 13)\n           \
    \ return true\n        if (cube == 15)\n            return true\n        if (cube\
    \ == 17)\n            return true\n        if (cube == 19)\n            return\
    \ true\n        if (cube == 21)\n            return true\n        if (cube ==\
    \ 23)\n            return true\n        if (cube == 25)\n            return true\n\
    \        if (cube == 27)\n            return true\n        if (cube == 29)\n \
    \           return true\n        if (cube == 31)\n            return true\n  \
    \      if (cube == 33)\n            return true\n        if (cube == 35)\n   \
    \         return true\n        if (cube == 37)\n            return true\n    \
    \    if (cube == 39)\n            return true\n        if (cube == 41)\n     \
    \       return true\n        if (cube == 43)\n            return true\n      \
    \  if (cube == 45)\n            return true\n        if (cube == 47)\n       \
    \     return true\n        if (cube == 49)\n            return true\n        if\
    \ (cube == 51)\n            return true\n        if (cube == 53)\n           \
    \ return true\n        if (cube == 55)\n            return true\n        if (cube\
    \ == 57)\n            return true\n        if (cube == 59)\n            return\
    \ true\n        if (cube == 61)\n            return true\n        if (cube ==\
    \ 63)\n            return true\n        if (cube == 65)\n            return true\n\
    \        if (cube == 67)\n            return true\n        if (cube == 69)\n \
    \           return true\n        if (cube == 71)\n            return true\n  \
    \      if (cube == 73)\n            return true\n        if (cube == 75)\n   \
    \         return true\n        if (cube == 77)\n            return true\n    \
    \    if (cube == 79)\n            return true\n        if (cube == 81)\n     \
    \       return true\n        if (cube == 83)\n            return true\n      \
    \  if (cube == 85)\n            return true\n        if (cube == 87)\n       \
    \     return true\n        if (cube == 89)\n            return true\n        if\
    \ (cube == 91)\n            return true\n        if (cube == 93)\n           \
    \ return true\n        if (cube == 95)\n            return true\n        if (cube\
    \ == 97)\n            return true\n        if (cube == 99)\n            return\
    \ true\n        if (cube == 101)\n            return true\n        if (cube ==\
    \ 103)\n\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzfmuqg_e.scala:126:4 ---------------------------\e\
    [0m\e[0m\n\e[31m126 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659979741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\
    \ * cube.toLong * cube.toLong\n        cubes.toInt == a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxo8hz6bn.scala:29)\n\tat Problem.main(tmpxo8hz6bn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        val cubes = mutable.Set[Long]()\n\
    \        cubes.add(1l)\n        cubes.add(3l)\n        cubes.add(5l)\n       \
    \ cubes.add(7l)\n        cubes.add(9l)\n        cubes.add(11l)\n        cubes.add(13l)\n\
    \        cubes.add(15l)\n        cubes.add(17l)\n        cubes.add(19l)\n    \
    \    cubes.add(21l)\n        cubes.add(23l)\n        cubes.add(25l)\n        cubes.add(27l)\n\
    \        cubes.add(29l)\n        cubes.add(31l)\n        cubes.add(33l)\n    \
    \    cubes.add(35l)\n        cubes.add(37l)\n        cubes.add(39l)\n        cubes.add(41l)\n\
    \        cubes.add(43l)\n        cubes.add(45l)\n        cubes.add(47l)\n    \
    \    cubes.add(49l)\n        cubes.add(51l)\n        cubes.add(53l)\n        cubes.add(55l)\n\
    \        cubes.add(57l)\n        cubes.add(59l)\n        cubes.add(61l)\n    \
    \    cubes.add(63l)\n        cubes.add(65l)\n        cubes.add(67l)\n        cubes.add(69l)\n\
    \        cubes.add(71l)\n        cubes.add(73l)\n        cubes.add(75l)\n    \
    \    cubes.add(77l)\n        cubes.add(79l)\n        cubes.add(81l)\n        cubes.add(83l)\n\
    \        cubes.add(85l)\n        cubes.add(87l)\n        cubes.add(89l)\n    \
    \    cubes.add(91l)\n        cubes.add(93l)\n        cubes.add(95l)\n        cubes.add(97l)\n\
    \        cubes.add(99l)\n        cubes.add(101l)\n        cubes.add(103l)\n  \
    \      cubes.add(105l)\n        cubes.add(107l)\n        cubes.add(109l)\n   \
    \     cubes.add(111l)\n        cubes.add(113l)\n        cubes.add(115l)\n    \
    \    cubes.add(117l)\n        cubes.add(119l)\n        cubes.add(121l)\n     \
    \   cubes.add(123l)\n        cubes.add(125l)\n        cubes.add(127l)\n      \
    \  cubes.add(129l)\n        cubes.add(131l)\n        cubes.add(133l)\n       \
    \ cubes.add(135l)\n        cubes.add(137l)\n        cubes.add(139l)\n        cubes.add(141l)\n\
    \        cubes.add(143l)\n        cubes.add(145l)\n        cubes.add(147l)\n \
    \       cubes.add(149l)\n        cubes.add(151l)\n        cubes.add(153l)\n  \
    \      cubes.add(155l)\n        cubes.add(157l)\n        cubes.add(159l)\n   \
    \     cubes.add(161l)\n\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjtxh8_ma.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.Set[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val n = a.toInt\n        if (n == 1) true\n   \
    \     else if (n % 2 == 0) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5hx0k5g.scala:28)\n\tat Problem.main(tmpt5hx0k5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmnieazrw.scala:32:765 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * \n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnieazrw.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659979742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a\n\
    \        cubes += a\n        cubes += a\n        cubes += a\n        cubes +=\
    \ a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n        cubes += a\n        cubes += a\n        cubes += a\n        cubes\
    \ += a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb9nzymie.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesCount = cubes.length\n       \
    \ val cubesSum = cubes.sum\n        val cubesSumSquare = cubes.sum * cubes.sum\n\
    \        val cubesSumCube = cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube2\
    \ = cubes.sum * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube3 =\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube4\
    \ = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n  \
    \      val cubesSumCube5 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum\n        val cubesSumCube6 = cubes.sum * cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n    \
    \    val cubesSumCube7 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube8 =\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube9 = cubes.sum *\
    \ cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube10 = cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n        val cubesSumCube11\
    \ = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\n  \
    \      val cubesSumCube12 = cubes.sum * cubes.sum * cubes.sum * cubes.sum * cubes.sum\
    \ * cubes.\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuik8o0xc.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpuik8o0xc.scala:22:20 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuik8o0xc.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes +=\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpix90hmya.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.Set[Long]()\n  \
    \      cubesSet += cube\n        cubesSet += cube*cube\n        cubesSet += cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet\
    \ += cube*cube*cube*cube*cube*cube*cube*cube*cube\n        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpox0bro_2.scala:42:110 --------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        cubesSet += cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\e[31m\e[31m   |\e[0m            \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpox0bro_2.scala:23:23\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mcubesSet\e[0m = mutable.Set[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5co5cisp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsb_977li.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.toString.toInt\n        cubes % a == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdo3dflsn.scala:27)\n\tat Problem.main(tmpdo3dflsn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer(cube)\n        cubes foreach { x => cubes += x*x*x }\n\
    \        cubes.size == a.toString.toInt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe89gay22.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        cubes += cube\n        cubes.toList.forall(cubes.contains)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n \
    \   assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n \
    \   assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzn13qe8w.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.HashSet(cubes)\n\
    \        cubesSet.contains(cube)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7013fwkm.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7013fwkm.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet(cubes)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n\
    \        cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8242yz_.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.pow(3).toInt\n        cubes % 1 == 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp744fcgn1.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.toLong\n\
    \        val cubesArray = Array(cube, cubes, cube*cube, cube*cubes, cube*cube*cube,\
    \ cube*cube*cubes)\n        cubesArray.contains(cube)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz14fi5na.scala:28)\n\tat Problem.main(tmpz14fi5na.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = cube.pow(3).toInt\n\
    \        cubes % a == 0\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn8242yz_.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = cube.pow(\e\
    [31m3\e[0m).toInt\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue pow is not a member of Int, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\
    \e[31m   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toLong * a.toString.toLong\
    \ * a.toString.toLong\n        cube == a.toString.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaly8h2xq.scala:28)\n\tat Problem.main(tmpaly8h2xq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.Set[Long]()\n        cubes += cube\n        cubes += cube * cube\n\
    \        cubes += cube * cube * cube\n        cubes += cube * cube * cube * cube\n\
    \        cubes += cube * cube * cube * cube * cube\n        cubes += cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube\n        cubes += cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9mf3oyn0.scala:31:856 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == (a.toString.toInt\
    \ * a.toString.toInt * a.toString.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ww7lfgc.scala:28)\n\tat Problem.main(tmp4ww7lfgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toInt\n        val cubes = mutable.ArrayBuffer(cube)\n\
    \        val cubesSet = mutable.HashSet[Long]()\n        val cubesSet2 = mutable.HashSet[Long]()\n\
    \        cubesSet += cube\n        cubesSet2 += cube\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach(cubesSet2.remove)\n\
    \        cubesSet.foreach(cubesSet.remove)\n        cubesSet2.foreach\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa4iu4fcc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpa4iu4fcc.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpa4iu4fcc.scala:24:24 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mcubesSet2\e[0m = mutable.HashSet[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = cube.toString.toInt\n        val cubesString = cubes.toString\n        cubesString.length\
    \ == cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc2pwz4s2.scala:29)\n\tat Problem.main(tmpc2pwz4s2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        cubes += cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5co5cisp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer(cube)\n        val cubesSet = mutable.HashSet(cubes)\n\
    \        cubesSet.contains(cube)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n \
    \   assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n \
    \   assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7013fwkm.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer(cube)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7013fwkm.scala:23:23 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36mcubesSet\e[0m = mutable.HashSet(cubes)\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += cube\n        cubes += cube\
    \ * cube\n        cubes += cube * cube * cube\n        cubes.contains(cube)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) == (true));\n\
    \    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) == (true));\n\
    \    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) == (false));\n\
    \    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) == (true));\n\
    \    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6pdbi7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l)) == (false));\n\
    \    assert(iscube((-1l)) == (true));\n    assert(iscube((64l)) == (true));\n\
    \    assert(iscube((180l)) == (false));\n    assert(iscube((1000l)) == (true));\n\
    \    assert(iscube((0l)) == (true));\n    assert(iscube((1729l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvwmzt3sc.scala:32:772 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        cubes += cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * \n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvwmzt3sc.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mcubes\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]"
  stdout: ''
  timestamp: 1659979726
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        cube == cube\
    \ * cube * cube\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l))\
    \ == (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l))\
    \ == (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l))\
    \ == (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l))\
    \ == (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt44mk9u8.scala:28)\n\tat Problem.main(tmpt44mk9u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ListBuffer[Long]()\n        cubes += cube\n        cubes += cube *\
    \ cube\n        cubes += cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube\n        cubes += cube * cube * cube * cube * cube\n        cubes +=\
    \ cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube\n        cubes += cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube\n        cubes += cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\n    \
    \    cubes += cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube * cube\
    \ * cube * cube * cube * cube * cube * cube * cube * cu\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(iscube((1l)) == (true));\n    assert(iscube((2l))\
    \ == (false));\n    assert(iscube((-1l)) == (true));\n    assert(iscube((64l))\
    \ == (true));\n    assert(iscube((180l)) == (false));\n    assert(iscube((1000l))\
    \ == (true));\n    assert(iscube((0l)) == (true));\n    assert(iscube((1729l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpah6z81rr.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes an integer a and returns True \n    //\
    \ if this ingeger is a cube of some integer number.\n    // Note: you may assume\
    \ the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    //\
    \ (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n\
    \    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n\
    \    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a :\
    \ Long) : Boolean = {\n        val cube = a.toString.toInt\n        val cubes\
    \ = mutable.ArrayBuffer.empty[Long]\n        cubes += a\n        cubes += a *\
    \ a\n        cubes += a * a * a\n        cubes += a * a * a * a\n        cubes\
    \ += a * a * a * a * a\n        cubes += a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\n\
    \        cubes += a * a * a * a * a * a * a * a * a\n        cubes += a * a *\
    \ a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a *\
    \ a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a *\
    \ a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n  \
    \      cubes += a * a * a * a * a * a * a * a * a * a * a * a * a\n        cubes\
    \ += a * a * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a\n        cubes += a * a * a * a * a * a * a * a * a * a * a\
    \ * a\n    }\n    def main(args: Array[String]) = {\n    assert(iscube((1l)) ==\
    \ (true));\n    assert(iscube((2l)) == (false));\n    assert(iscube((-1l)) ==\
    \ (true));\n    assert(iscube((64l)) == (true));\n    assert(iscube((180l)) ==\
    \ (false));\n    assert(iscube((1000l)) == (true));\n    assert(iscube((0l)) ==\
    \ (true));\n    assert(iscube((1729l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1el4pde.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcubes\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979745
